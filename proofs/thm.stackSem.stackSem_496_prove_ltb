Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackSem
% SZS output start Proof for thm.stackSem
fof(f2655,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2654,f133,f242,f240,f238,f236,f234,f232,f2428,f2241,f2240,f1850,f2429])).
fof(f2429,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f238,f137])).
fof(f137,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X10),s('type.wordLang.exp'(sK7),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK7),X11)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK9),s('type.wordLang.exp'(sK7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK7),sK10))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK11),s('type.wordLang.exp'(sK7),'const.wordLang.Var_1'(s('type.num.num',sK12))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK13),s('type.wordLang.exp'(sK7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK14))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK15),s('type.wordLang.exp'(sK7),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK7),sK16))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK17),s('type.wordLang.exp'(sK7),'const.wordLang.Op_2'(s('type.asm.binop',sK18),s('type.list.list'('type.wordLang.exp'(sK7)),sK19))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK20),s('type.wordLang.exp'(sK7),'const.wordLang.Shift_3'(s('type.asm.shift',sK21),s('type.wordLang.exp'(sK7),sK22),s('type.wordLang.num_exp'(sK7),sK23)))))) & ! [X16,X17] : s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X16),s('type.wordLang.exp'(sK7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK7),X17))))) & ! [X14,X15] : s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X14),s('type.wordLang.exp'(sK7),'const.wordLang.Var_1'(s('type.num.num',X15))))) & ! [X12,X13] : s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X12),s('type.wordLang.exp'(sK7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13))))) & ! [X10,X11] : s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X10),s('type.wordLang.exp'(sK7),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK7),X11))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X7),s('type.wordLang.exp'(sK7),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(sK7)),X9))))) & ! [X3,X4,X5,X6] : s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X3),s('type.wordLang.exp'(sK7),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(sK7),X5),s('type.wordLang.num_exp'(sK7),X6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2] : ((? [X31,X32] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X31),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X32))))) | ? [X29,X30] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X29),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X30))))) | ? [X27,X28] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X27),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X28))))) | ? [X25,X26] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X25),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X26))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X22),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X23),s('type.list.list'('type.wordLang.exp'(X1)),X24))))) | ? [X18,X19,X20,X21] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X18),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X19),s('type.wordLang.exp'(X1),X20),s('type.wordLang.num_exp'(X1),X21)))))) & ! [X16,X17] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X16),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X17))))) & ! [X14,X15] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X14),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X15))))) & ! [X12,X13] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X12),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13))))) & ! [X10,X11] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X10),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X11))))) & ! [X7,X8,X9] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X7),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(X1)),X9))))) & ! [X3,X4,X5,X6] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X3),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(X1),X5),s('type.wordLang.num_exp'(X1),X6))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2] : ((? [X16,X17] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X16),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X17))))) | ? [X14,X15] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X14),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X15))))) | ? [X12,X13] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X12),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13))))) | ? [X10,X11] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X10),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X11))))) | ? [X7,X8,X9] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X7),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(X1)),X9))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X3),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(X1),X5),s('type.wordLang.num_exp'(X1),X6)))))) & ! [X31,X32] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X31),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X32))))) & ! [X29,X30] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X29),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X30))))) & ! [X27,X28] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X27),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X28))))) & ! [X25,X26] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X25),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X26))))) & ! [X22,X23,X24] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X22),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X23),s('type.list.list'('type.wordLang.exp'(X1)),X24))))) & ! [X18,X19,X20,X21] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X18),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X19),s('type.wordLang.exp'(X1),X20),s('type.wordLang.num_exp'(X1),X21))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : ((? [X16,X17] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X16),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X17))))) | ? [X14,X15] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X14),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X15))))) | ? [X12,X13] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X12),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13))))) | ? [X10,X11] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X10),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X11))))) | ? [X7,X8,X9] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X7),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(X1)),X9))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X3),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(X1),X5),s('type.wordLang.num_exp'(X1),X6)))))) & (! [X31,X32] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X31),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X32))))) & ! [X29,X30] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X29),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X30))))) & ! [X27,X28] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X27),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X28))))) & ! [X25,X26] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X25),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X26))))) & ! [X22,X23,X24] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X22),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X23),s('type.list.list'('type.wordLang.exp'(X1)),X24))))) & ! [X18,X19,X20,X21] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) != s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X18),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X19),s('type.wordLang.exp'(X1),X20),s('type.wordLang.num_exp'(X1),X21)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : ((? [X16,X17] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X16),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X17))))) | ? [X14,X15] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X14),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X15))))) | ? [X12,X13] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X12),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13))))) | ? [X10,X11] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X10),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X11))))) | ? [X7,X8,X9] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X7),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(X1)),X9))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X3),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(X1),X5),s('type.wordLang.num_exp'(X1),X6)))))) => (? [X31,X32] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X31),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X32))))) | ? [X29,X30] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X29),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X30))))) | ? [X27,X28] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X27),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X28))))) | ? [X25,X26] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X25),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X26))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X22),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X23),s('type.list.list'('type.wordLang.exp'(X1)),X24))))) | ? [X18,X19,X20,X21] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X18),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X19),s('type.wordLang.exp'(X1),X20),s('type.wordLang.num_exp'(X1),X21)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : ! [X2] : ((? [X16,X17] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X16),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X17))))) | ? [X14,X15] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X14),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X15))))) | ? [X12,X13] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X12),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13))))) | ? [X10,X11] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X10),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X11))))) | ? [X7,X8,X9] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X7),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(X1)),X9))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X3),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(X1),X5),s('type.wordLang.num_exp'(X1),X6)))))) => (? [X31,X32] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X31),s('type.wordLang.exp'(X1),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X1),X32))))) | ? [X29,X30] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X29),s('type.wordLang.exp'(X1),'const.wordLang.Var_1'(s('type.num.num',X30))))) | ? [X27,X28] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X27),s('type.wordLang.exp'(X1),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X28))))) | ? [X25,X26] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X25),s('type.wordLang.exp'(X1),'const.wordLang.Load_1'(s('type.wordLang.exp'(X1),X26))))) | ? [X22,X23,X24] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X22),s('type.wordLang.exp'(X1),'const.wordLang.Op_2'(s('type.asm.binop',X23),s('type.list.list'('type.wordLang.exp'(X1)),X24))))) | ? [X18,X19,X20,X21] : s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),X2) = s('type.pair.prod'('type.stackSem.state'(X1,X0),'type.wordLang.exp'(X1)),'const.pair.,_2'(s('type.stackSem.state'(X1,X0),X18),s('type.wordLang.exp'(X1),'const.wordLang.Shift_3'(s('type.asm.shift',X19),s('type.wordLang.exp'(X1),X20),s('type.wordLang.num_exp'(X1),X21)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X7),X10))))) | ? [X9,X11] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Var_1'(s('type.num.num',X11))))) | ? [X9,X12] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))))) | ? [X9,X13] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Load_1'(s('type.wordLang.exp'(X7),X13))))) | ? [X9,X14,X15] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Op_2'(s('type.asm.binop',X14),s('type.list.list'('type.wordLang.exp'(X7)),X15))))) | ? [X9,X16,X17,X18] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Shift_3'(s('type.asm.shift',X16),s('type.wordLang.exp'(X7),X17),s('type.wordLang.num_exp'(X7),X18)))))) => (? [X9,X10] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X7),X10))))) | ? [X9,X11] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Var_1'(s('type.num.num',X11))))) | ? [X9,X12] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))))) | ? [X9,X13] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Load_1'(s('type.wordLang.exp'(X7),X13))))) | ? [X9,X14,X15] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Op_2'(s('type.asm.binop',X14),s('type.list.list'('type.wordLang.exp'(X7)),X15))))) | ? [X9,X16,X17,X18] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Shift_3'(s('type.asm.shift',X16),s('type.wordLang.exp'(X7),X17),s('type.wordLang.num_exp'(X7),X18)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X7),X10))))) | ? [X9,X11] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Var_1'(s('type.num.num',X11))))) | ? [X9,X12] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))))) | ? [X9,X13] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Load_1'(s('type.wordLang.exp'(X7),X13))))) | ? [X9,X14,X15] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Op_2'(s('type.asm.binop',X14),s('type.list.list'('type.wordLang.exp'(X7)),X15))))) | ? [X9,X16,X17,X18] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Shift_3'(s('type.asm.shift',X16),s('type.wordLang.exp'(X7),X17),s('type.wordLang.num_exp'(X7),X18)))))) => (? [X9,X10] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X7),X10))))) | ? [X9,X11] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Var_1'(s('type.num.num',X11))))) | ? [X9,X12] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))))) | ? [X9,X13] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Load_1'(s('type.wordLang.exp'(X7),X13))))) | ? [X9,X14,X15] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Op_2'(s('type.asm.binop',X14),s('type.list.list'('type.wordLang.exp'(X7)),X15))))) | ? [X9,X16,X17,X18] : s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),X8) = s('type.pair.prod'('type.stackSem.state'(X7,X6),'type.wordLang.exp'(X7)),'const.pair.,_2'(s('type.stackSem.state'(X7,X6),X9),s('type.wordLang.exp'(X7),'const.wordLang.Shift_3'(s('type.asm.shift',X16),s('type.wordLang.exp'(X7),X17),s('type.wordLang.num_exp'(X7),X18)))))))),
  file('thm.stackSem.stackSem_496_prove_ltb','thm.stackSem.stackSem_496_prove_ltb')).
fof(f1850,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f234,f135])).
fof(f135,plain,(
  ( ! [X14,X15] : (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X14),s('type.wordLang.exp'(sK7),'const.wordLang.Var_1'(s('type.num.num',X15)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f2240,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f232,f134])).
fof(f134,plain,(
  ( ! [X17,X16] : (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X16),s('type.wordLang.exp'(sK7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK7),X17)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f2241,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f236,f136])).
fof(f136,plain,(
  ( ! [X12,X13] : (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X12),s('type.wordLang.exp'(sK7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X13)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f2428,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f240,f138])).
fof(f138,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X7),s('type.wordLang.exp'(sK7),'const.wordLang.Op_2'(s('type.asm.binop',X8),s('type.list.list'('type.wordLang.exp'(sK7)),X9)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f232,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK9),s('type.wordLang.exp'(sK7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK7),sK10))))) | $spl0),
  inference(cnf_transformation,[],[f232_D])).
fof(f232_D,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK9),s('type.wordLang.exp'(sK7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK7),sK10))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f234,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK11),s('type.wordLang.exp'(sK7),'const.wordLang.Var_1'(s('type.num.num',sK12))))) | $spl2),
  inference(cnf_transformation,[],[f234_D])).
fof(f234_D,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK11),s('type.wordLang.exp'(sK7),'const.wordLang.Var_1'(s('type.num.num',sK12))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f236,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK13),s('type.wordLang.exp'(sK7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK14))))) | $spl4),
  inference(cnf_transformation,[],[f236_D])).
fof(f236_D,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK13),s('type.wordLang.exp'(sK7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK14))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f238,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK15),s('type.wordLang.exp'(sK7),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK7),sK16))))) | $spl6),
  inference(cnf_transformation,[],[f238_D])).
fof(f238_D,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK15),s('type.wordLang.exp'(sK7),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK7),sK16))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f240,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK17),s('type.wordLang.exp'(sK7),'const.wordLang.Op_2'(s('type.asm.binop',sK18),s('type.list.list'('type.wordLang.exp'(sK7)),sK19))))) | $spl8),
  inference(cnf_transformation,[],[f240_D])).
fof(f240_D,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK17),s('type.wordLang.exp'(sK7),'const.wordLang.Op_2'(s('type.asm.binop',sK18),s('type.list.list'('type.wordLang.exp'(sK7)),sK19))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f242,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK20),s('type.wordLang.exp'(sK7),'const.wordLang.Shift_3'(s('type.asm.shift',sK21),s('type.wordLang.exp'(sK7),sK22),s('type.wordLang.num_exp'(sK7),sK23))))) | $spl10),
  inference(cnf_transformation,[],[f242_D])).
fof(f242_D,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK20),s('type.wordLang.exp'(sK7),'const.wordLang.Shift_3'(s('type.asm.shift',sK21),s('type.wordLang.exp'(sK7),sK22),s('type.wordLang.num_exp'(sK7),sK23))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f133,plain,(
  s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK20),s('type.wordLang.exp'(sK7),'const.wordLang.Shift_3'(s('type.asm.shift',sK21),s('type.wordLang.exp'(sK7),sK22),s('type.wordLang.num_exp'(sK7),sK23))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK17),s('type.wordLang.exp'(sK7),'const.wordLang.Op_2'(s('type.asm.binop',sK18),s('type.list.list'('type.wordLang.exp'(sK7)),sK19))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK15),s('type.wordLang.exp'(sK7),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK7),sK16))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK13),s('type.wordLang.exp'(sK7),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK14))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK11),s('type.wordLang.exp'(sK7),'const.wordLang.Var_1'(s('type.num.num',sK12))))) | s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) = s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),sK9),s('type.wordLang.exp'(sK7),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK7),sK10)))))),
  inference(cnf_transformation,[],[f91])).
fof(f2654,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f242,f139])).
fof(f139,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),sK8) != s('type.pair.prod'('type.stackSem.state'(sK7,sK6),'type.wordLang.exp'(sK7)),'const.pair.,_2'(s('type.stackSem.state'(sK7,sK6),X3),s('type.wordLang.exp'(sK7),'const.wordLang.Shift_3'(s('type.asm.shift',X4),s('type.wordLang.exp'(sK7),X5),s('type.wordLang.num_exp'(sK7),X6)))))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.stackSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 215
% Passive clauses: 1044
% Generated clauses: 2515
% Final active clauses: 215
% Final passive clauses: 754
% Input formulas: 26
% Initial clauses: 97
% 
% Duplicate literals: 44
% Trivial inequalities: 13
% Fw subsumption resolutions: 170
% 
% Simple tautologies: 61
% Equational tautologies: 20
% Forward subsumptions: 1131
% 
% Binary resolution: 1684
% Factoring: 296
% Forward superposition: 112
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 56
% Split components: 117
% SAT solver clauses: 108
% SAT solver unit clauses: 12
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 56
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 107
% TWLsolver calls for satisfiability: 87
% 
% Memory used [KB]: 1535
% Time elapsed: 0.053 s
% ------------------------------
% ------------------------------
% Success in time 0.055 s
