Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_namesProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_namesProof
% SZS output start Proof for thm.stack_namesProof
fof(f3952,plain,(
  $false),
  inference(subsumption_resolution,[],[f3927,f187])).
fof(f187,plain,(
  ~p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK20))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK20))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) & s('type.pair.prod'('type.ffi.ffi_state'(sK12),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK12),sK16),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK17))) = s('type.pair.prod'('type.ffi.ffi_state'(sK12),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(sK12),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK11,sK12),sK14))),s('type.num.num',sK19),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK13))) & s('type.option.option'('type.wordSem.word_loc'(sK11)),'const.stackSem.get_var_2'(s('type.num.num',sK15),s('type.stackSem.state'(sK11,sK12),sK14))) = s('type.option.option'('type.wordSem.word_loc'(sK11)),'const.option.SOME_1'(s('type.wordSem.word_loc'(sK11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK11),sK21))))) & s('type.option.option'('type.wordSem.word_loc'(sK11)),'const.stackSem.get_var_2'(s('type.num.num',sK18),s('type.stackSem.state'(sK11,sK12),sK14))) = s('type.option.option'('type.wordSem.word_loc'(sK11)),'const.option.SOME_1'(s('type.wordSem.word_loc'(sK11),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK11),sK22))))) & s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK13))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,sK11),sK21),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK11),sK22))),s(fun('type.fcp.cart'(bool,sK11),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,sK11),'type.wordSem.word_loc'(sK11)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK11,sK12),sK14))),s(fun('type.fcp.cart'(bool,sK11),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK11,sK12),sK14))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK11,sK12),sK14))))))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK11,sK12),sK14)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK11,sK12),sK14)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK11,sK12),sK14)))) & ~p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK20))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22])],[f79])).
fof(f79,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) & s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) = s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X8),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X10))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X7),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X11))))) & s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,X0),X10),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X11))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) & (s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) = s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X8),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) & (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X10))))) & (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X7),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X11))))) & (s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,X0),X10),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X11))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))))) & (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))))),
  inference(ennf_transformation,[],[f34])).
fof(f34,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => (s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) = s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X8),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) => (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X10))))) => (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X7),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X11))))) => (s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,X0),X10),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X11))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) => p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => (s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) = s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X8),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) => (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X10))))) => (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X7),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X11))))) => (s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,X0),X10),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X11))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) => p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X9))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X15))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => (s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X7),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) = s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))),s('type.num.num',X14),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) => (s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X10),s('type.stackSem.state'(X6,X7),X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X16))))) => (s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X13),s('type.stackSem.state'(X6,X7),X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X17))))) => (s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,X6),X16),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),X17))),s(fun('type.fcp.cart'(bool,X6),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X9))),s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X9))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X9))))))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X9)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X9)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X9)))) => p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X15))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X15))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))) => (s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X7),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) = s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))),s('type.num.num',X14),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) => (s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X10),s('type.stackSem.state'(X6,X7),X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X16))))) => (s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X13),s('type.stackSem.state'(X6,X7),X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X17))))) => (s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.option.SOME_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) = s('type.option.option'('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.misc.read_bytearray_3'(s('type.fcp.cart'(bool,X6),X16),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),X17))),s(fun('type.fcp.cart'(bool,X6),'type.option.option'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.wordSem.mem_load_byte_aux_3'(s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X9))),s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X9))),s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X9))))))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X9)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X9)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X9)))) => p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),X15))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))))),
  file('thm.stack_namesProof.stack_namesProof_26_prove_ltb','thm.stack_namesProof.stack_namesProof_26_prove_ltb')).
fof(f3927,plain,(
  p(s(bool,'const.pred_set.INJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK20))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),
  inference(resolution,[],[f256,f179])).
fof(f179,plain,(
  p(s(bool,'const.pred_set.BIJ_3'(s(fun('type.num.num','type.num.num'),'const.stack_names.find_name_1'(s('type.sptree.spt'('type.num.num'),sK20))),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),
  inference(cnf_transformation,[],[f115])).
fof(f256,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) | p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) | (p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) & p(s(bool,'const.pred_set.SURJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))))) & (~p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) | ~p(s(bool,'const.pred_set.SURJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) | p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4))))))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) | (p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) & p(s(bool,'const.pred_set.SURJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))))) & ((~p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) | ~p(s(bool,'const.pred_set.SURJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4))))) | p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4))))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) <=> (p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) & p(s(bool,'const.pred_set.SURJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4))))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) <=> (p(s(bool,'const.pred_set.INJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4)))) & p(s(bool,'const.pred_set.SURJ_3'(s(fun(X0,X1),X2),s(fun(X0,bool),X3),s(fun(X1,bool),X4))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X7] : ! [X15,X9,X18] : (p(s(bool,'const.pred_set.BIJ_3'(s(fun(X6,X7),X15),s(fun(X6,bool),X9),s(fun(X7,bool),X18)))) <=> (p(s(bool,'const.pred_set.INJ_3'(s(fun(X6,X7),X15),s(fun(X6,bool),X9),s(fun(X7,bool),X18)))) & p(s(bool,'const.pred_set.SURJ_3'(s(fun(X6,X7),X15),s(fun(X6,bool),X9),s(fun(X7,bool),X18))))))),
  file('thm.stack_namesProof.stack_namesProof_26_prove_ltb','thm.pred_set.BIJ_DEF')).
% SZS output end Proof for thm.stack_namesProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 322
% Passive clauses: 1261
% Generated clauses: 3768
% Final active clauses: 318
% Final passive clauses: 851
% Input formulas: 31
% Initial clauses: 147
% 
% Duplicate literals: 95
% Trivial inequalities: 31
% Fw subsumption resolutions: 307
% Fw demodulations: 57
% Bw demodulations: 3
% 
% Simple tautologies: 109
% Equational tautologies: 20
% Forward subsumptions: 1832
% 
% Binary resolution: 2210
% Factoring: 486
% Forward superposition: 248
% Backward superposition: 138
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 69
% Split components: 139
% SAT solver clauses: 123
% SAT solver unit clauses: 6
% SAT solver binary clauses: 28
% 
% Sat splits: 69
% 
% TWLsolver clauses: 123
% TWLsolver calls for satisfiability: 106
% 
% Memory used [KB]: 2046
% Time elapsed: 0.078 s
% ------------------------------
% ------------------------------
% Success in time 0.078 s
