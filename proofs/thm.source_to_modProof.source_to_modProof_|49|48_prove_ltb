Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (69202)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 143
% Passive clauses: 2687
% Generated clauses: 21176
% Final active clauses: 140
% Final passive clauses: 2445
% Input formulas: 133
% Initial clauses: 208
% 
% Duplicate literals: 664
% Trivial inequalities: 383
% Fw subsumption resolutions: 2508
% Fw demodulations: 2348
% 
% Simple tautologies: 397
% Equational tautologies: 39
% Forward subsumptions: 11598
% 
% Binary resolution: 296
% Factoring: 1
% Forward superposition: 7971
% Backward superposition: 6389
% Self superposition: 207
% Equality factoring: 85
% Equality resolution: 38
% 
% Split clauses: 272
% Split components: 563
% SAT solver clauses: 504
% SAT solver unit clauses: 30
% SAT solver binary clauses: 165
% 
% Sat splits: 272
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 504
% TWLsolver calls for satisfiability: 106
% 
% Memory used [KB]: 14328
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (69232)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 117
% Passive clauses: 875
% Generated clauses: 13445
% Final active clauses: 115
% Final passive clauses: 699
% Input formulas: 133
% Initial clauses: 208
% 
% Duplicate literals: 646
% Trivial inequalities: 223
% Fw subsumption resolutions: 1028
% Fw demodulations: 1057
% Bw demodulations: 58
% Condensations: 1536
% Global subsumptions: 5
% 
% Simple tautologies: 209
% Equational tautologies: 40
% Forward subsumptions: 6427
% 
% Binary resolution: 223
% Factoring: 1
% Forward superposition: 4604
% Backward superposition: 2740
% Self superposition: 131
% Equality factoring: 75
% Equality resolution: 30
% 
% Split clauses: 66
% Split components: 135
% SAT solver clauses: 1588
% SAT solver unit clauses: 303
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 10
% 
% Sat splits: 66
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1568
% TWLsolver calls for satisfiability: 2550
% 
% Memory used [KB]: 12153
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (69263)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 553
% Passive clauses: 10431
% Generated clauses: 168790
% Final active clauses: 159
% Final passive clauses: 902
% Input formulas: 133
% Initial clauses: 208
% Discarded non-redundant clauses: 8424
% 
% Duplicate literals: 3992
% Trivial inequalities: 1405
% Fw subsumption resolutions: 13269
% Fw demodulations: 26169
% Bw demodulations: 7322
% Condensations: 13678
% Global subsumptions: 706
% 
% Simple tautologies: 1263
% Equational tautologies: 792
% Forward subsumptions: 95172
% Bw demodulations to eq. taut.: 35
% 
% Unit resulting resolution: 8838
% Factoring: 1
% Forward superposition: 46505
% Backward superposition: 36529
% Self superposition: 763
% Equality factoring: 269
% Equality resolution: 99
% 
% Split clauses: 144
% Split components: 288
% SAT solver clauses: 12579
% SAT solver unit clauses: 611
% SAT solver binary clauses: 1784
% 
% Sat splits: 144
% Sat splitting refutations: 1151
% 
% Memory used [KB]: 88015
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f1223,plain,(
  $false),
  inference(subsumption_resolution,[],[f1186,f264])).
fof(f264,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK1),sK4))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),sK3)))),
  inference(cnf_transformation,[],[f229])).
fof(f229,plain,(
  p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK5),s('type.semanticPrimitives.state'(sK1),sK4),s('type.modSem.state'(sK1),sK3),s(fun('type.list.list'('type.string.char'),bool),sK2)))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK1),sK4))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f211])).
fof(f211,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2),s(fun('type.list.list'('type.string.char'),bool),X1)))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X3))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2),s(fun('type.list.list'('type.string.char'),bool),X1)))) => s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X3))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2),s(fun('type.list.list'('type.string.char'),bool),X1)))) => s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X3))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X13),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10),s('type.semanticPrimitives.state'(X6),X9),s('type.modSem.state'(X6),X8),s(fun('type.list.list'('type.string.char'),bool),X7)))) => s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X6),X9))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X13),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X10),s('type.semanticPrimitives.state'(X6),X9),s('type.modSem.state'(X6),X8),s(fun('type.list.list'('type.string.char'),bool),X7)))) => s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X6),X9))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))))),
  file('thm.source_to_modProof.source_to_modProof_|49|48_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|48_prove_ltb')).
fof(f1186,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK1),sK4))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),sK3)))),
  inference(resolution,[],[f389,f290])).
fof(f290,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f237])).
fof(f237,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))))) & (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))))),
  inference(flattening,[],[f236])).
fof(f236,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))))) & ((~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))))),
  inference(nnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X36,X37] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X36),s('type.modSem.state'(X6),X37)))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X37))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X6),X36))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X37)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X6),X36))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X37))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X6),X36))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X37))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X6),X36))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X37))) & s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X36))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X37)))))),
  file('thm.source_to_modProof.source_to_modProof_|49|48_prove_ltb','thm.source_to_modProof.s_rel_cases')).
fof(f389,plain,(
  p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK1),sK4),s('type.modSem.state'(sK1),sK3))))),
  inference(resolution,[],[f263,f350])).
fof(f350,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6)))) | ~p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7))))) )),
  inference(cnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3))))),s(fun('type.list.list'('type.string.char'),bool),X7)))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6)))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3))))),s(fun('type.list.list'('type.string.char'),bool),X7)))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6)))) | p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7))))))),
  inference(flattening,[],[f257])).
fof(f257,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3))))),s(fun('type.list.list'('type.string.char'),bool),X7)))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6)))))) & ((~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3))))),s(fun('type.list.list'('type.string.char'),bool),X7)))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6))))) | p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7))))))),
  inference(nnf_transformation,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3))))),s(fun('type.list.list'('type.string.char'),bool),X7)))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6))))))),
  inference(flattening,[],[f191])).
fof(f191,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4),s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6),s(fun('type.list.list'('type.string.char'),bool),X7)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3))))),s(fun('type.list.list'('type.string.char'),bool),X7)))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X3),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)))) & p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.modSem.state'(X0),X6))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X23,X24,X25,X26,X27,X28,X29] : (p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X23),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26),s('type.semanticPrimitives.state'(X6),X27),s('type.modSem.state'(X6),X28),s(fun('type.list.list'('type.string.char'),bool),X29)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X25))))),s(fun('type.list.list'('type.string.char'),bool),X29)))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X28))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X23),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X25),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26)))) & p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X27),s('type.modSem.state'(X6),X28))))))),
  file('thm.source_to_modProof.source_to_modProof_|49|48_prove_ltb','thm.source_to_modProof.invariant_def')).
fof(f263,plain,(
  p(s(bool,'const.source_to_modProof.invariant_7'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),sK6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK5),s('type.semanticPrimitives.state'(sK1),sK4),s('type.modSem.state'(sK1),sK3),s(fun('type.list.list'('type.string.char'),bool),sK2))))),
  inference(cnf_transformation,[],[f229])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 99
% Passive clauses: 28
% Generated clauses: 836
% Final active clauses: 96
% Final passive clauses: 20
% Input formulas: 133
% Initial clauses: 120
% 
% Selected by SInE selection: 46
% SInE iterations: 1
% 
% Duplicate literals: 18
% Trivial inequalities: 1
% Fw subsumption resolutions: 591
% 
% Simple tautologies: 40
% Equational tautologies: 1
% Forward subsumptions: 91
% 
% Binary resolution: 143
% Forward superposition: 77
% Equality resolution: 2
% 
% Split clauses: 14
% Split components: 29
% SAT solver clauses: 16
% SAT solver unit clauses: 1
% SAT solver binary clauses: 7
% 
% Sat splits: 14
% Sat splitting refutations: 1
% 
% Memory used [KB]: 2302
% Time elapsed: 0.030 s
% ------------------------------
% ------------------------------
% Success in time 11.77 s
