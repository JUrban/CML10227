Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f614,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f609,f54,f82,f48,f90,f56,f93,f462,f464,f357,f53,f52,f85,f394,f304,f309,f554,f307,f556,f50,f87,f51,f89,f83,f81])).
fof(f81,plain,(
  ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3)))) | $spl1),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f89,plain,(
  p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) | $spl8),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f51,plain,(
  p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ((! [X8,X9] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),X8),s('type.semanticPrimitives.v',X9)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9))))) & p(s(bool,'T_0'))) | ! [X6,X7] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),X6),s('type.semanticPrimitives.v',X7)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X7)))))) & ((p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))))) | ~p(s(bool,'T_0')) | (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f32])).
fof(f32,plain,(
  ? [X0,X1] : (((! [X8,X9] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X8),s('type.semanticPrimitives.v',X9)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9))))) & p(s(bool,'T_0'))) | ! [X6,X7] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X6),s('type.semanticPrimitives.v',X7)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X7)))))) & (? [X4,X5] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X4),s('type.semanticPrimitives.v',X5)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X5))))) | ~p(s(bool,'T_0')) | ? [X2,X3] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X2),s('type.semanticPrimitives.v',X3)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X3)))))))),
  inference(rectify,[],[f31])).
fof(f31,plain,(
  ? [X0,X1] : (((! [X3,X4] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) & p(s(bool,'T_0'))) | ! [X5,X6] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6)))))) & (? [X3,X4] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) | ~p(s(bool,'T_0')) | ? [X5,X6] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6)))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ? [X0,X1] : (((! [X3,X4] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) & p(s(bool,'T_0'))) | ! [X5,X6] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6)))))) & ((? [X3,X4] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) | ~p(s(bool,'T_0'))) | ? [X5,X6] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) & ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6)))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ? [X0,X1] : ((! [X3,X4] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) & p(s(bool,'T_0'))) <~> ! [X5,X6] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6))))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : ((! [X3,X4] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) & p(s(bool,'T_0'))) <=> ! [X5,X6] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6))))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0] : ! [X1] : ((! [X3,X4] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X3),s('type.semanticPrimitives.v',X4)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X4))))) & p(s(bool,'T_0'))) <=> ! [X5,X6] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s('type.BinomialHeap.tree'(X0),X5),s('type.semanticPrimitives.v',X6)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X6))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((! [X8,X9] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X7),s('type.BinomialHeap.tree'(X6),X8),s('type.semanticPrimitives.v',X9)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9))))) & ! [X10] : p(s(bool,'T_0'))) <=> ! [X8,X9] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X7),s('type.BinomialHeap.tree'(X6),X8),s('type.semanticPrimitives.v',X9)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((! [X8,X9] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X7),s('type.BinomialHeap.tree'(X6),X8),s('type.semanticPrimitives.v',X9)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9))))) & ! [X10] : p(s(bool,'T_0'))) <=> ! [X8,X9] : (p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X7),s('type.BinomialHeap.tree'(X6),X8),s('type.semanticPrimitives.v',X9)))) => p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9))))))),
  file('thm.BinomialHeap.BinomialHeap_48_prove_ltb','thm.BinomialHeap.BinomialHeap_48_prove_ltb')).
fof(f87,plain,(
  p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3)))) | $spl6),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f50,plain,(
  p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) | ~p(s(bool,'T_0')) | p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3))))),
  inference(cnf_transformation,[],[f33])).
fof(f556,plain,(
  s(bool,'T_0') = s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5))) | $spl36),
  inference(cnf_transformation,[],[f556_D])).
fof(f556_D,plain,(
  s(bool,'T_0') = s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f307,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl22),
  inference(cnf_transformation,[],[f307_D])).
fof(f307_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f554,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f548,f97])).
fof(f97,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f93,f57])).
fof(f57,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.BinomialHeap.BinomialHeap_48_prove_ltb',aHL_BOOL_CASES)).
fof(f548,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK4),s('type.semanticPrimitives.v',sK5)))) ) | $spl8),
  inference(superposition,[],[f89,f95])).
fof(f95,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f57,f57])).
fof(f309,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))) | $spl24),
  inference(cnf_transformation,[],[f309_D])).
fof(f309_D,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f304,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl2)),
  inference(duplicate_literal_removal,[],[f270])).
fof(f270,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f264,f57])).
fof(f264,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f190,f82])).
fof(f190,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(superposition,[],[f81,f95])).
fof(f394,plain,(
  $false | ($spl2 | $spl6 | $spl10 | $spl15 | $spl24)),
  inference(subsumption_resolution,[],[f393,f93])).
fof(f393,plain,(
  p(s(bool,'F_0')) | ($spl2 | $spl6 | $spl10 | $spl15 | $spl24)),
  inference(forward_demodulation,[],[f392,f309])).
fof(f392,plain,(
  p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3)))) | ($spl2 | $spl6 | $spl10 | $spl15)),
  inference(subsumption_resolution,[],[f385,f82])).
fof(f385,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3)))) | ($spl6 | $spl10 | $spl15)),
  inference(superposition,[],[f90,f123])).
fof(f123,plain,(
  s(bool,'T_0') = s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3))) | ($spl6 | $spl15)),
  inference(subsumption_resolution,[],[f122,f93])).
fof(f122,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3))) | $spl6),
  inference(superposition,[],[f87,f57])).
fof(f85,plain,(
  ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5)))) | $spl5),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f52,plain,(
  ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5)))) | ~p(s(bool,'T_0')) | p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),sK2),s('type.semanticPrimitives.v',sK3))))),
  inference(cnf_transformation,[],[f33])).
fof(f53,plain,(
  ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5)))) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK3))))),
  inference(cnf_transformation,[],[f33])).
fof(f357,plain,(
  $false | ($spl2 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f313,f82])).
fof(f313,plain,(
  ~p(s(bool,'T_0')) | ($spl15 | $spl22)),
  inference(backward_demodulation,[],[f307,f93])).
fof(f464,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))) | $spl30),
  inference(cnf_transformation,[],[f464_D])).
fof(f464_D,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f462,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl5)),
  inference(duplicate_literal_removal,[],[f417])).
fof(f417,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl5)),
  inference(superposition,[],[f404,f57])).
fof(f404,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f399,f82])).
fof(f399,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5))) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f85,f95])).
fof(f93,plain,(
  ~p(s(bool,'F_0')) | $spl15),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f56,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.BinomialHeap.BinomialHeap_48_prove_ltb',aHL_FALSITY)).
fof(f90,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),X6),s('type.semanticPrimitives.v',X7)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X7))))) ) | $spl10),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),X6),s('type.semanticPrimitives.v',X7)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X7))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f48,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X7)))) | ~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),X6),s('type.semanticPrimitives.v',X7)))) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',X9)))) | ~p(s(bool,'const.BinomialHeap.BINOMIALHEAP_TREE_TYPE_3'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK1),s('type.BinomialHeap.tree'(sK0),X8),s('type.semanticPrimitives.v',X9))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f82,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f54,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.BinomialHeap.BinomialHeap_48_prove_ltb',aHL_TRUTH)).
fof(f609,plain,(
  $false | ($spl2 | $spl10 | $spl15 | $spl30 | $spl36)),
  inference(subsumption_resolution,[],[f608,f93])).
fof(f608,plain,(
  p(s(bool,'F_0')) | ($spl2 | $spl10 | $spl30 | $spl36)),
  inference(forward_demodulation,[],[f607,f464])).
fof(f607,plain,(
  p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5)))) | ($spl2 | $spl10 | $spl36)),
  inference(subsumption_resolution,[],[f599,f82])).
fof(f599,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.ml_translator.no_closures_1'(s('type.semanticPrimitives.v',sK5)))) | ($spl10 | $spl36)),
  inference(superposition,[],[f90,f556])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 28
% Passive clauses: 55
% Generated clauses: 539
% Final active clauses: 16
% Final passive clauses: 13
% Input formulas: 13
% Initial clauses: 30
% 
% Duplicate literals: 80
% Trivial inequalities: 8
% Fw subsumption resolutions: 22
% Fw demodulations: 14
% Bw demodulations: 8
% 
% Simple tautologies: 37
% Equational tautologies: 17
% Forward subsumptions: 274
% 
% Binary resolution: 7
% Forward superposition: 164
% Backward superposition: 123
% Self superposition: 32
% Equality factoring: 30
% 
% Split clauses: 21
% Split components: 46
% SAT solver clauses: 41
% SAT solver unit clauses: 6
% SAT solver binary clauses: 8
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 21
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 38
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 767
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.015 s
