Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f10902,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f10875,f76,f122,f124,f140,f125,f82,f126,f128,f86,f127,f120,f136,f135,f154,f156,f943,f945,f242,f168,f172,f170,f184,f133,f946,f215,f948])).
fof(f948,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) | $spl44),
  inference(cnf_transformation,[],[f948_D])).
fof(f948_D,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f215,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl30),
  inference(cnf_transformation,[],[f215_D])).
fof(f215_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f946,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) ) | $spl5),
  inference(subsumption_resolution,[],[f667,f161])).
fof(f161,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f127,f91])).
fof(f91,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.ml_translator.Eval_NUM_MOD',aHL_BOOL_CASES)).
fof(f667,plain,(
  ( ! [X71] : (p(s(bool,X71)) | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f75,f158])).
fof(f158,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f91,f91])).
fof(f75,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) & ((~p(s(bool,sK5)) | s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2)) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | p(s(bool,sK5))) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,sK5))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ? [X5] : ((~p(s(bool,X5)) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | p(s(bool,X5))) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ? [X5] : (((~p(s(bool,X5)) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | p(s(bool,X5)))) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ? [X5] : ((p(s(bool,X5)) <=> s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & (? [X5] : ((p(s(bool,X5)) <=> s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) => (? [X5] : ((p(s(bool,X5)) <=> s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) => (? [X5] : ((p(s(bool,X5)) <=> ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X8)))))) => (? [X11] : ((p(s(bool,X11)) <=> ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X11))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',X8)))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X8)))))) => (? [X11] : ((p(s(bool,X11)) <=> ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X11))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',X8)))))))))))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.ml_translator.Eval_NUM_MOD')).
fof(f133,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) | $spl14),
  inference(cnf_transformation,[],[f133_D])).
fof(f133_D,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f184,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | ($spl5 | $spl26)),
  inference(superposition,[],[f127,f170])).
fof(f170,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl26),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f172,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl29),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f168,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f91])).
fof(f242,plain,(
  $false | ($spl29 | $spl30)),
  inference(trivial_inequality_removal,[],[f238])).
fof(f238,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl29 | $spl30)),
  inference(superposition,[],[f172,f215])).
fof(f945,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) | $spl42),
  inference(cnf_transformation,[],[f945_D])).
fof(f945_D,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f943,plain,(
  ( ! [X70] : (s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) ) | $spl5),
  inference(subsumption_resolution,[],[f666,f161])).
fof(f666,plain,(
  ( ! [X70] : (p(s(bool,X70)) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f74,f158])).
fof(f74,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))))),
  inference(cnf_transformation,[],[f62])).
fof(f156,plain,(
  $false | ($spl2 | $spl14)),
  inference(resolution,[],[f133,f125])).
fof(f154,plain,(
  ( ! [X5] : (~p(s(bool,X5))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f153])).
fof(f153,plain,(
  ( ! [X5] : (~p(s(bool,X5)) | ~p(s(bool,X5))) ) | $spl18),
  inference(forward_demodulation,[],[f135,f87])).
fof(f87,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X0)))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : s(bool,X0) = s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X23] : s(bool,X23) = s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X23)))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.ml_translator.PRECONDITION_def')).
fof(f135,plain,(
  ( ! [X5] : (~p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5)))) | ~p(s(bool,X5))) ) | $spl18),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  ( ! [X5] : (~p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5)))) | ~p(s(bool,X5))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f136,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | s('type.integer.int',X4) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl20),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | s('type.integer.int',X4) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f120,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))) | ~p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5)))) | s('type.integer.int',X4) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X5)) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3))))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ! [X5] : (((p(s(bool,X5)) | s('type.integer.int',X4) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (~p(s(bool,X5)) | s('type.integer.int',X4) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ! [X5] : ((p(s(bool,X5)) <~> s('type.integer.int',X4) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | (! [X5] : ((p(s(bool,X5)) <~> s('type.integer.int',X4) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) => (? [X5] : ((p(s(bool,X5)) <=> s('type.integer.int',X4) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) => (? [X5] : ((p(s(bool,X5)) <=> ~s('type.integer.int',X4) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X5))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X7,X10,X9,X8] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X8)))))) => (? [X11] : ((p(s(bool,X11)) <=> ~s('type.integer.int',X8) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,X11))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int',X9),s('type.integer.int',X8)))))))))))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.ml_translator.Eval_INT_MOD')).
fof(f127,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f86,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.ml_translator.Eval_NUM_MOD',aHL_FALSITY)).
fof(f128,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f126,plain,(
  p(s(bool,'F_0')) | $spl4),
  inference(cnf_transformation,[],[f126_D])).
fof(f126_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f82,plain,(
  p(s(bool,'F_0')) | p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f11])).
fof(f11,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.bool.NOT_CLAUSES|split|1')).
fof(f125,plain,(
  p(s(bool,sK5)) | $spl2),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  p(s(bool,sK5)) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f140,plain,(
  p(s(bool,sK5))),
  inference(backward_demodulation,[],[f87,f78])).
fof(f78,plain,(
  p(s(bool,'const.ml_translator.PRECONDITION_1'(s(bool,sK5))))),
  inference(cnf_transformation,[],[f62])).
fof(f124,plain,(
  ~p(s(bool,sK5)) | $spl3),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  ~p(s(bool,sK5)) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f122,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | $spl1),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f76,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | ~p(s(bool,sK5))),
  inference(cnf_transformation,[],[f62])).
fof(f10875,plain,(
  $false | ($spl1 | $spl6 | $spl20 | $spl42 | $spl44)),
  inference(subsumption_resolution,[],[f10874,f128])).
fof(f10874,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl6 | $spl20 | $spl42 | $spl44)),
  inference(forward_demodulation,[],[f10873,f948])).
fof(f10873,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | ($spl1 | $spl6 | $spl20 | $spl42)),
  inference(subsumption_resolution,[],[f10872,f128])).
fof(f10872,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | ($spl1 | $spl20 | $spl42)),
  inference(forward_demodulation,[],[f10871,f945])).
fof(f10871,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | ($spl1 | $spl20)),
  inference(subsumption_resolution,[],[f10842,f122])).
fof(f10842,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl20),
  inference(resolution,[],[f2788,f79])).
fof(f79,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))))),
  inference(cnf_transformation,[],[f62])).
fof(f2788,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl20),
  inference(forward_demodulation,[],[f2787,f88])).
fof(f88,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X22] : s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X22))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X22)))))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.ml_translator.NUM_def')).
fof(f2787,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl20),
  inference(forward_demodulation,[],[f2786,f88])).
fof(f2786,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl20),
  inference(forward_demodulation,[],[f2785,f88])).
fof(f2785,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl20),
  inference(subsumption_resolution,[],[f2772,f102])).
fof(f102,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X21,X22] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X21))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X22))) <=> s('type.num.num',X21) = s('type.num.num',X22))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.integer.INT_INJ')).
fof(f2772,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Modulo_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl20),
  inference(superposition,[],[f136,f101])).
fof(f101,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X22,X21] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X21) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X22),s('type.num.num',X21))))) = s('type.integer.int','const.integer.int_mod_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X22))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X21))))))),
  file('thm.ml_translator.Eval_NUM_MOD','thm.integer.INT_MOD')).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 109
% Passive clauses: 1164
% Generated clauses: 10536
% Final active clauses: 91
% Final passive clauses: 946
% Input formulas: 21
% Initial clauses: 47
% 
% Duplicate literals: 616
% Trivial inequalities: 318
% Fw subsumption resolutions: 1770
% Fw demodulations: 1145
% Bw demodulations: 7
% 
% Simple tautologies: 340
% Equational tautologies: 41
% Forward subsumptions: 4801
% 
% Binary resolution: 109
% Factoring: 1
% Forward superposition: 3177
% Backward superposition: 2998
% Self superposition: 129
% Equality factoring: 92
% Equality resolution: 30
% 
% Split clauses: 219
% Split components: 458
% SAT solver clauses: 435
% SAT solver unit clauses: 9
% SAT solver binary clauses: 83
% SAT solver learnt clauses: 1
% 
% Sat splits: 219
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 426
% TWLsolver calls for satisfiability: 85
% 
% Memory used [KB]: 4349
% Time elapsed: 0.233 s
% ------------------------------
% ------------------------------
% Success in time 0.24 s
