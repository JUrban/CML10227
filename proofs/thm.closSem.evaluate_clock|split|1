Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closSem
% SZS output start Proof for thm.closSem
fof(f9808,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9807,f213,f350])).
fof(f350,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f350_D])).
fof(f350_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f213,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.closSem.evaluate_clock|split|1',aHL_FALSITY)).
fof(f9807,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f9806,f350])).
fof(f9806,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f9804,f2516])).
fof(f2516,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK16))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK14)))))),
  inference(resolution,[],[f206,f226])).
fof(f226,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.closSem.evaluate_clock|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f206,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK16))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK14))))))),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK10),sK16))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK10)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK11),s('type.closSem.v',sK12),s('type.list.list'('type.closSem.v'),sK13),s('type.closSem.state'(sK10),sK14))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK16))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK14))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15,sK16])],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4)))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4)))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X11),s('type.closSem.state'(X6),X12))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X6),X12))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X6),X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X11),s('type.closSem.state'(X6),X12))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X10))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X6),X12))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X6),X10)))))))),
  file('thm.closSem.evaluate_clock|split|1','thm.closSem.evaluate_clock|split|1')).
fof(f9804,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK16))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK14))))))),
  inference(equality_resolution,[],[f4113])).
fof(f4113,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK10),sK16))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK10),X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),X1))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(sK10),sK14))))))) )),
  inference(superposition,[],[f257,f205])).
fof(f205,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK10),sK16))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK10)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),sK11),s('type.closSem.v',sK12),s('type.list.list'('type.closSem.v'),sK13),s('type.closSem.state'(sK10),sK14)))),
  inference(cnf_transformation,[],[f139])).
fof(f257,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4))))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4)))))))),
  inference(ennf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4)))))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X1),s('type.closSem.v',X2),s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X6))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X0),X4)))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X18] : ! [X7,X8,X9,X10,X11,X12] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X18)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X11),s('type.closSem.state'(X18),X12))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X18)),'const.closSem.evaluate_app_4'(s('type.option.option'('type.num.num'),X7),s('type.closSem.v',X8),s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X18),X10))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X18),X12))),s('type.num.num','const.closSem.state_clock_1'(s('type.closSem.state'(X18),X10)))))))),
  file('thm.closSem.evaluate_clock|split|1','thm.closSem.closSem_2|48||48|_prove_ltb|split|1')).
% SZS output end Proof for thm.closSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 517
% Passive clauses: 2996
% Generated clauses: 9558
% Final active clauses: 484
% Final passive clauses: 2194
% Input formulas: 37
% Initial clauses: 141
% 
% Duplicate literals: 259
% Trivial inequalities: 75
% Fw subsumption resolutions: 1096
% Fw demodulations: 168
% Bw demodulations: 32
% 
% Simple tautologies: 155
% Equational tautologies: 55
% Forward subsumptions: 4496
% 
% Binary resolution: 4058
% Factoring: 996
% Forward superposition: 1299
% Backward superposition: 1227
% Self superposition: 28
% Equality factoring: 26
% Equality resolution: 23
% 
% Split clauses: 305
% Split components: 616
% SAT solver clauses: 505
% SAT solver unit clauses: 11
% SAT solver binary clauses: 88
% SAT solver learnt clauses: 1
% 
% Sat splits: 305
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 502
% TWLsolver calls for satisfiability: 294
% 
% Memory used [KB]: 4605
% Time elapsed: 0.331 s
% ------------------------------
% ------------------------------
% Success in time 0.4 s
