Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closSem
% SZS output start Proof for thm.closSem
fof(f3723,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3722,f152,f254,f252,f3668,f151,f253,f251])).
fof(f251,plain,(
  s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1))) | $spl0),
  inference(cnf_transformation,[],[f251_D])).
fof(f251_D,plain,(
  s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f253,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) | $spl2),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f151,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1)))),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1))) | s('type.integer.int',sK0) = s('type.integer.int',sK1)) & (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1))) | s('type.integer.int',sK0) != s('type.integer.int',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f110])).
fof(f110,plain,(
  ? [X0,X1] : ((s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int',X1)) & (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) | s('type.integer.int',X0) != s('type.integer.int',X1)))),
  inference(nnf_transformation,[],[f89])).
fof(f89,plain,(
  ? [X0,X1] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) <~> s('type.integer.int',X0) = s('type.integer.int',X1))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))) <=> s('type.integer.int',X0) = s('type.integer.int',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) <=> s('type.integer.int',X6) = s('type.integer.int',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) <=> s('type.integer.int',X6) = s('type.integer.int',X7))),
  file('thm.closSem.v_|49||49||split|0','thm.closSem.v_|49||49||split|0')).
fof(f3668,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f3667,f254])).
fof(f3667,plain,(
  s('type.integer.int',sK0) = s('type.integer.int',sK1) | $spl0),
  inference(forward_demodulation,[],[f3575,f195])).
fof(f195,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X28] : ! [X30] : s(X28,X30) = s(X28,happ(s(fun(X28,X28),'_i_0_0'),s(X28,X30)))),
  file('thm.closSem.v_|49||49||split|0','_i0_ax')).
fof(f3575,plain,(
  s('type.integer.int',sK1) = s('type.integer.int',happ(s(fun('type.integer.int','type.integer.int'),'_i_0_0'),s('type.integer.int',sK0))) | $spl0),
  inference(superposition,[],[f3278,f195])).
fof(f3278,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.integer.int',X0),X1),s('type.integer.int',sK0))) = s(X0,happ(s(fun('type.integer.int',X0),X1),s('type.integer.int',sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f3164,f207])).
fof(f207,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.integer.int',X0),X2),s('type.integer.int',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.integer.int',X0),X2),s('type.integer.int',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun('type.integer.int',X0),X2),s('type.integer.int',X1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X1))),s(fun('type.integer.int',X0),X2),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X3),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X4),s(fun('type.num.num',X0),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X6),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X7)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9] : ! [X6,X10,X11,X12,X13,X14,X15] : s(X9,happ(s(fun('type.integer.int',X9),X10),s('type.integer.int',X6))) = s(X9,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))),s(fun('type.integer.int',X9),X10),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9),X11),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X9)),X12),s(fun('type.num.num',X9),X13),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X9))))),X14),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X9))))),X15)))),
  file('thm.closSem.v_|49||49||split|0','thm.closSem.v_case_def|split|0')).
fof(f3164,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.integer.int',X0),X1),s('type.integer.int',sK1))) = s(X0,'const.closSem.v_CASE_7'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))),s(fun('type.integer.int',X0),X1),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0),X2),s(fun('type.num.num',fun('type.list.list'('type.closSem.v'),X0)),X3),s(fun('type.num.num',X0),X4),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',fun('type.closLang.exp',X0))))),X5),s(fun('type.option.option'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),fun('type.num.num',X0))))),X6)))) ) | $spl0),
  inference(superposition,[],[f207,f251])).
fof(f252,plain,(
  s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1))) | $spl1),
  inference(cnf_transformation,[],[f252_D])).
fof(f252_D,plain,(
  s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f254,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) | $spl3),
  inference(cnf_transformation,[],[f254_D])).
fof(f254_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f152,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK1)))),
  inference(cnf_transformation,[],[f111])).
fof(f3722,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f3721])).
fof(f3721,plain,(
  s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK0))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f252,f253])).
% SZS output end Proof for thm.closSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 60
% Passive clauses: 808
% Generated clauses: 3504
% Final active clauses: 53
% Final passive clauses: 649
% Input formulas: 37
% Initial clauses: 97
% 
% Duplicate literals: 192
% Trivial inequalities: 62
% Fw subsumption resolutions: 372
% Fw demodulations: 369
% Bw demodulations: 4
% 
% Simple tautologies: 145
% Equational tautologies: 36
% Forward subsumptions: 1444
% 
% Binary resolution: 119
% Factoring: 1
% Forward superposition: 921
% Backward superposition: 1188
% Self superposition: 78
% Equality factoring: 58
% Equality resolution: 12
% 
% Split clauses: 75
% Split components: 154
% SAT solver clauses: 134
% SAT solver unit clauses: 7
% SAT solver binary clauses: 61
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 75
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 132
% TWLsolver calls for satisfiability: 44
% 
% Memory used [KB]: 3837
% Time elapsed: 0.097 s
% ------------------------------
% ------------------------------
% Success in time 0.098 s
