Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (139504)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 746
% Passive clauses: 8132
% Generated clauses: 16461
% Final active clauses: 745
% Final passive clauses: 6969
% Input formulas: 69
% Initial clauses: 282
% 
% Duplicate literals: 395
% Trivial inequalities: 32
% Fw subsumption resolutions: 723
% Fw demodulations: 220
% 
% Simple tautologies: 219
% Equational tautologies: 54
% Forward subsumptions: 6628
% 
% Binary resolution: 11015
% Factoring: 2516
% Forward superposition: 1027
% Backward superposition: 161
% Self superposition: 6
% Equality factoring: 2
% Equality resolution: 40
% 
% Split clauses: 214
% Split components: 430
% SAT solver clauses: 483
% SAT solver unit clauses: 18
% SAT solver binary clauses: 71
% 
% Sat splits: 214
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 483
% TWLsolver calls for satisfiability: 422
% 
% Memory used [KB]: 8827
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (139527)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 402
% Passive clauses: 2452
% Generated clauses: 8314
% Final active clauses: 399
% Final passive clauses: 1984
% Input formulas: 69
% Initial clauses: 282
% 
% Duplicate literals: 122
% Trivial inequalities: 5
% Fw subsumption resolutions: 509
% Fw demodulations: 114
% Bw demodulations: 67
% Condensations: 120
% Global subsumptions: 22
% 
% Simple tautologies: 186
% Equational tautologies: 22
% Forward subsumptions: 2120
% 
% Binary resolution: 3598
% Factoring: 345
% Forward superposition: 546
% Backward superposition: 104
% Self superposition: 6
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 2931
% SAT solver unit clauses: 300
% SAT solver binary clauses: 112
% SAT solver learnt clauses: 44
% SAT solver learnt literals: 10
% 
% Sat splits: 4
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2843
% TWLsolver calls for satisfiability: 3278
% 
% Memory used [KB]: 12153
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f16308,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f382,f677,f675,f381,f676,f674,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f5056,f5059,f5062,f5065,f5100,f5029,f5102,f5033,f5104,f5036,f5106,f5039,f5108,f5042,f5110,f5045,f5112,f5048,f5114,f5051,f5116,f5054,f5118,f5057,f5120,f5060,f5122,f5063,f5124,f5066,f5421,f5422,f5423,f5424,f5425,f5426,f5427,f5429,f5430,f5431,f5432,f5433,f5434,f5435,f5436,f5437,f5438,f5439,f5440,f5441,f5442,f5443,f5445,f5447,f5448,f5449,f5450,f5451,f5452,f5453,f5454,f5455,f5456,f5457,f5458,f5459,f5460,f5461,f5462,f5463,f5464,f5465,f5466,f5467,f5470,f5473,f5474,f5475,f5476,f5477,f5478,f5483,f5484,f5485,f5486,f5487,f5490,f5493,f5496,f5499,f5502,f5505,f5508,f5511,f5512,f5513,f5514,f5515,f5516,f5517,f5518,f5521,f5524,f5527,f5530,f5533,f5536,f5539,f5542,f5543,f5544,f5547,f5548,f5549,f5552,f5562,f5564,f5566,f5568,f5570,f5572,f5574,f5576,f5578,f5580,f5584,f5585,f5589,f5590,f5592,f5594,f5595,f5597,f5599,f5601,f5603,f5605,f5607,f5609,f5611,f5613,f5615,f5619,f5621,f5623,f5625,f5627,f5629,f5631,f5633,f5635,f5637,f5639,f5641,f5643,f5645,f5647,f5648,f5649,f5650,f5652,f5654,f5656,f7217,f7220,f7219,f7229,f7231,f7233,f7237,f7239,f7243,f7245,f7247,f7249,f7259,f7261,f7271,f7273,f7277,f7281,f7291,f7301,f7321,f7323,f7348,f7352,f7357,f7364,f7389,f7398,f7417,f7419,f7421,f7427,f7432,f7441,f7443,f7445,f7447,f7449,f7451,f7902,f7903,f7461,f7463,f7465,f7467,f7477,f7479,f7484,f7489,f7497,f7503,f7505,f7514,f7520,f7522,f7529,f7534,f7543,f7545,f7547,f7556,f7558,f7563,f7565,f7574,f7576,f7581,f7583,f7592,f7594,f7599,f7601,f7607,f7612,f7618,f7623,f7628,f7633,f7641,f7651,f7653,f7659,f7661,f7663,f7668,f7670,f7675,f7677,f7682,f7684,f7689,f7691,f7697,f7702,f7710,f7716,f7718,f7732,f7734,f7736,f7745,f7747,f7756,f7758,f7767,f7769,f7778,f7780,f7782,f7788,f7793,f7798,f7800,f7805,f7807,f7813,f7818,f7824,f7829,f7834,f7836,f7838,f7843,f7845,f7847,f7857,f7859,f7861,f7863,f7866,f7881,f7883,f7921,f7922,f7923,f7924,f7925,f7926,f7927,f7928,f7929,f7930,f7931,f7932,f7933,f7934,f7935,f7936,f7937,f7938,f7939,f7940,f7941,f7942,f7943,f7944,f7945,f7946,f7947,f7948,f7949,f7950,f7951,f7952,f7953,f7954,f7955,f7956,f7957,f7958,f7959,f7960,f7961,f7962,f7963,f7964,f7965,f7966,f7967,f7968,f7969,f7970,f7971,f7972,f7973,f7974,f7975,f7976,f7977,f7978,f7979,f7980,f7981,f7982,f7983,f7984,f7985,f7986,f7987,f7988,f7989,f7990,f7991,f7992,f7993,f7994,f7995,f7996,f7997,f7998,f7999,f8000,f8001,f8002,f8003,f8004,f8005,f8006,f8007,f8008,f8009,f8010,f8011,f8012,f8013,f8014,f8015,f8016,f8017,f8018,f8019,f8020,f8021,f8022,f8023,f8024,f8025,f8026,f8027,f8028,f8029,f8030,f8031,f8032,f8033,f8034,f8035,f8036,f8037,f8038,f8039,f8040,f8041,f8042,f8043,f8044,f8045,f8046,f8126,f8128,f8127,f8973,f8976,f8974,f9049,f9052,f9050,f9120,f9123,f9121,f9206,f9209,f9207,f9290,f9293,f9291,f9471,f9474,f9472,f9608,f9611,f9609,f9752,f9755,f9753,f9911,f9912,f9913,f9915,f9914,f9934,f9935,f9936,f9938,f9937,f11084,f14441,f14442,f14557,f14558,f7218,f15240,f15243,f15241,f15326,f15329,f5030,f15327,f16278])).
fof(f16278,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f16257,f677])).
fof(f16257,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) | $spl0),
  inference(backward_demodulation,[],[f16196,f15548])).
fof(f15548,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(sK22,sK23,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),sK20,sK24,sK21)))))) | $spl0),
  inference(unit_resulting_resolution,[],[f11098,f1852,f1884,f554])).
fof(f554,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK50(X5,X4,X3,X2,X1,X0)))))) | sP6(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f328,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP7(X0,X1,X2,X3,X4,X5) | sP6(X0,X2,X5,X4,X1,X3) | (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK50(X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK51(X5,X4,X3,X2,X1,X0)))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',sK50(X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK51(X5,X4,X3,X2,X1,X0)))))) | (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0)))))))) & ((~sP6(X0,X2,X5,X4,X1,X3) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X7),s('type.conSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP7(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK50,sK51,sK52])],[f327])).
fof(f327,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP7(X0,X1,X2,X3,X4,X5) | sP6(X0,X2,X5,X4,X1,X3) | ? [X10,X11] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X10))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X11))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))))) & ((~sP6(X0,X2,X5,X4,X1,X3) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X7),s('type.conSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP7(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f326])).
fof(f326,plain,(
  ! [X1,X5,X0,X4,X3,X2] : ((~sP7(X1,X5,X0,X4,X3,X2) | sP6(X1,X0,X2,X3,X5,X4) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) & ((~sP6(X1,X0,X2,X3,X5,X4) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP7(X1,X5,X0,X4,X3,X2)))),
  inference(flattening,[],[f325])).
fof(f325,plain,(
  ! [X1,X5,X0,X4,X3,X2] : ((~sP7(X1,X5,X0,X4,X3,X2) | (sP6(X1,X0,X2,X3,X5,X4) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) & ((~sP6(X1,X0,X2,X3,X5,X4) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP7(X1,X5,X0,X4,X3,X2)))),
  inference(nnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X1,X5,X0,X4,X3,X2] : (sP7(X1,X5,X0,X4,X3,X2) <=> (sP6(X1,X0,X2,X3,X5,X4) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f1884,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),'const.semanticPrimitives.Rraise_1'(s(X1,X3)))))) )),
  inference(unit_resulting_resolution,[],[f469,f511])).
fof(f511,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3)) )),
  inference(cnf_transformation,[],[f308])).
fof(f308,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3)) & (s('type.semanticPrimitives.error_result'(X1),X2) != s('type.semanticPrimitives.error_result'(X1),X3) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))))),
  inference(nnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) <=> s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) <=> s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X7] : ! [X11,X33] : (s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X11))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X33))) <=> s('type.semanticPrimitives.error_result'(X7),X11) = s('type.semanticPrimitives.error_result'(X7),X33))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.semanticPrimitives.result_|49||49||split|1')).
fof(f469,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) != s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) != s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2)))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2)))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6] : ! [X33,X11] : ~s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X33))) = s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rraise_1'(s(X6,X11)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.semanticPrimitives.error_result_distinct')).
fof(f1852,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6(X0,X1,X2,X3,X4,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X5)))) )),
  inference(unit_resulting_resolution,[],[f513,f560])).
fof(f560,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK53(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f331])).
fof(f331,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP6(X0,X1,X2,X3,X4,X5) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK53(X5,X4,X3,X2,X1,X0)))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK54(X5,X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,sK53(X5,X4,X3,X2,X1,X0)))),s(X0,sK54(X5,X4,X3,X2,X1,X0))))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7))))) | sP6(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK53,sK54])],[f330])).
fof(f330,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP6(X0,X1,X2,X3,X4,X5) | ? [X8,X9] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X8))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X8))),s(X0,X9)))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7))))) | sP6(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f329])).
fof(f329,plain,(
  ! [X1,X0,X2,X3,X5,X4] : ((~sP6(X1,X0,X2,X3,X5,X4) | ? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X9))),s(X1,X10)))))) & (! [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X9))),s(X1,X10))))) | sP6(X1,X0,X2,X3,X5,X4)))),
  inference(nnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X1,X0,X2,X3,X5,X4] : (sP6(X1,X0,X2,X3,X5,X4) <=> ? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X9))),s(X1,X10))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f513,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ! [X2,X3] : ~s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X7] : ! [X33,X11] : ~s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X11))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X33)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.semanticPrimitives.result_distinct')).
fof(f11098,plain,(
  sP7(sK21,sK24,sK20,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),sK23,sK22) | $spl0),
  inference(unit_resulting_resolution,[],[f674,f564])).
fof(f564,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | sP7(X1,X5,X0,X4,X3,X2)) )),
  inference(cnf_transformation,[],[f332])).
fof(f332,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | sP7(X1,X5,X0,X4,X3,X2)) & (~sP7(X1,X5,X0,X4,X3,X2) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(nnf_transformation,[],[f228])).
fof(f228,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> sP7(X1,X5,X0,X4,X3,X2))),
  inference(definition_folding,[],[f165,f227,f226])).
fof(f165,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> (? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X9))),s(X1,X10))))) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  inference(flattening,[],[f164])).
fof(f164,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> (? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X9))),s(X1,X10))))) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X7),s('type.conSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : ! [X8,X23,X24,X25] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X23),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X24),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X25)))) <=> (? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X24) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X25) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20))) & p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X23))),s(X6,X19))),s(X7,X20))))) | ? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X24) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X25) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X20))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X23),s('type.modSem.v',X19),s('type.conSem.v',X20))))) | ? [X11] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X24) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X25) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.result_rel_cases')).
fof(f16196,plain,(
  s('type.semanticPrimitives.abort',sK25) = s('type.semanticPrimitives.abort',sK52(sK22,sK23,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),sK20,sK24,sK21)) | $spl0),
  inference(unit_resulting_resolution,[],[f15993,f464])).
fof(f464,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) != s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))) | s('type.semanticPrimitives.abort',X1) = s('type.semanticPrimitives.abort',X2)) )),
  inference(cnf_transformation,[],[f290])).
fof(f290,plain,(
  ! [X0,X1,X2] : ((s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) != s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))) | s('type.semanticPrimitives.abort',X1) = s('type.semanticPrimitives.abort',X2)) & (s('type.semanticPrimitives.abort',X1) != s('type.semanticPrimitives.abort',X2) | s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))) <=> s('type.semanticPrimitives.abort',X1) = s('type.semanticPrimitives.abort',X2))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))) <=> s('type.semanticPrimitives.abort',X1) = s('type.semanticPrimitives.abort',X2))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X6] : ! [X11,X33] : (s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))) = s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X33))) <=> s('type.semanticPrimitives.abort',X11) = s('type.semanticPrimitives.abort',X33))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.semanticPrimitives.error_result_|49||49||split|1')).
fof(f15993,plain,(
  s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))) = s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(sK22,sK23,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),sK20,sK24,sK21)))) | $spl0),
  inference(unit_resulting_resolution,[],[f15554,f511])).
fof(f15554,plain,(
  s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) = s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(sK22,sK23,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),sK20,sK24,sK21)))))) | $spl0),
  inference(unit_resulting_resolution,[],[f11098,f1852,f1884,f551])).
fof(f551,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK50(X5,X4,X3,X2,X1,X0)))))) | sP6(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f15327,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,X1)))) ) | $spl68),
  inference(cnf_transformation,[],[f15327_D])).
fof(f15327_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,X1)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f5030,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f5030_D])).
fof(f5030_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f15329,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,X1)))) )),
  inference(condensation,[],[f15328])).
fof(f15328,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X30)) | p(s(bool,X31)) | ~sP15(X31,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X32),s(bool,X30))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f15316,f835])).
fof(f835,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f832,f678])).
fof(f678,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f386,f383])).
fof(f383,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2',aHL_TRUTH)).
fof(f386,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f248])).
fof(f248,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f37])).
fof(f37,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.NOT_CLAUSES|split|1')).
fof(f832,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f471,f390])).
fof(f390,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2',aHL_BOOL_CASES)).
fof(f471,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f195])).
fof(f195,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X21,X22] : ((p(s(bool,X21)) => p(s(bool,X22))) => ((p(s(bool,X22)) => p(s(bool,X21))) => s(bool,X21) = s(bool,X22)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.IMP_ANTISYM_AX')).
fof(f15316,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | ~p(s(bool,X30)) | p(s(bool,X31)) | ~sP15(X31,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X32),s(bool,X30))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f1120,f786])).
fof(f786,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f390,f390])).
fof(f1120,plain,(
  ( ! [X12,X10,X13,X11] : (~p(s(bool,X12)) | ~p(s(bool,X11)) | p(s(bool,X13)) | ~sP15(X13,X12,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11)))) )),
  inference(superposition,[],[f628,f459])).
fof(f459,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X6] : ! [X21,X22] : s(X6,X22) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X21),s(X6,X22)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.COND_CLAUSES|split|1')).
fof(f628,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP15(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f364])).
fof(f364,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP15(X2,X0,X1)) & (~sP15(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f363])).
fof(f363,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP15(X2,X0,X1)) & (~sP15(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f239])).
fof(f239,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP15(X2,X0,X1))),
  inference(definition_folding,[],[f175,f238,f237])).
fof(f237,plain,(
  ! [X0,X1,X2] : (sP14(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP14])])).
fof(f238,plain,(
  ! [X2,X0,X1] : (sP15(X2,X0,X1) <=> (sP14(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP15])])).
fof(f175,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X10,X36,X37] : ((p(s(bool,X37)) <=> (p(s(bool,X36)) & p(s(bool,X10)))) <=> ((p(s(bool,X37)) | ~p(s(bool,X36)) | ~p(s(bool,X10))) & (p(s(bool,X36)) | ~p(s(bool,X37))) & (p(s(bool,X10)) | ~p(s(bool,X37)))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.sat.sat_23_prove_ltb')).
fof(f15326,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,X1)))) )),
  inference(condensation,[],[f15325])).
fof(f15325,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X25)) | p(s(bool,X26)) | ~sP15(X26,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X27),s(bool,X25))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f15315,f835])).
fof(f15315,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | ~sP15(X26,'T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X27),s(bool,X25))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f1120,f786])).
fof(f15241,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X3)))) ) | $spl66),
  inference(cnf_transformation,[],[f15241_D])).
fof(f15241_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X3)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f15243,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X3)))) )),
  inference(condensation,[],[f15242])).
fof(f15242,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X30)) | p(s(bool,X31)) | ~sP15(X31,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X30),s(bool,X32))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f15230,f835])).
fof(f15230,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | ~p(s(bool,X30)) | p(s(bool,X31)) | ~sP15(X31,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X30),s(bool,X32))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f1119,f786])).
fof(f1119,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,X8)) | ~p(s(bool,X6)) | p(s(bool,X9)) | ~sP15(X9,X8,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7)))) )),
  inference(superposition,[],[f628,f458])).
fof(f458,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X6] : ! [X21,X22] : s(X6,X21) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X21),s(X6,X22)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.COND_CLAUSES|split|0')).
fof(f15240,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X3)))) )),
  inference(condensation,[],[f15239])).
fof(f15239,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X25)) | p(s(bool,X26)) | ~sP15(X26,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X25),s(bool,X27))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f15229,f835])).
fof(f15229,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | ~sP15(X26,'T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X25),s(bool,X27))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f1119,f786])).
fof(f7218,plain,(
  ( ! [X8] : (p(s(bool,X8))) ) | $spl32),
  inference(cnf_transformation,[],[f7218_D])).
fof(f7218_D,plain,(
  ( ! [X8] : (p(s(bool,X8))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f14558,plain,(
  ( ! [X17,X18] : (sP1('const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0')),'T_0') | s(bool,'T_0') = s(bool,X17)) ) | $spl64),
  inference(cnf_transformation,[],[f14558_D])).
fof(f14558_D,plain,(
  ( ! [X17,X18] : (sP1('const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0')),'T_0') | s(bool,'T_0') = s(bool,X17)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f14557,plain,(
  ( ! [X17,X18,X16] : (sP1('const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0')),'T_0') | p(s(bool,X16)) | s(bool,'T_0') = s(bool,X17)) ) | $spl8),
  inference(subsumption_resolution,[],[f14531,f398])).
fof(f398,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X32] : (s(bool,'T_0') = s(bool,X32) <=> p(s(bool,X32)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.EQ_CLAUSES|split|1')).
fof(f14531,plain,(
  ( ! [X17,X18,X16] : (sP1('const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0')),'T_0') | p(s(bool,X16)) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X16)) ) | $spl8),
  inference(superposition,[],[f8095,f390])).
fof(f8095,plain,(
  ( ! [X2,X0,X1] : (sP1('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),'T_0') | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(superposition,[],[f6099,f390])).
fof(f6099,plain,(
  ( ! [X434,X435] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X434),s(bool,X435)),'T_0') | p(s(bool,X435))) ) | $spl8),
  inference(superposition,[],[f5033,f459])).
fof(f14442,plain,(
  ( ! [X17,X18] : (sP1('T_0','const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X17)) ) | $spl62),
  inference(cnf_transformation,[],[f14442_D])).
fof(f14442_D,plain,(
  ( ! [X17,X18] : (sP1('T_0','const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X17)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f14441,plain,(
  ( ! [X17,X18,X16] : (sP1('T_0','const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0'))) | p(s(bool,X16)) | s(bool,'T_0') = s(bool,X17)) ) | $spl4),
  inference(subsumption_resolution,[],[f14415,f398])).
fof(f14415,plain,(
  ( ! [X17,X18,X16] : (sP1('T_0','const.bool.COND_3'(s(bool,X17),s(bool,X18),s(bool,'F_0'))) | p(s(bool,X16)) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X16)) ) | $spl4),
  inference(superposition,[],[f7186,f390])).
fof(f7186,plain,(
  ( ! [X2,X0,X1] : (sP1('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))) | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(superposition,[],[f6098,f390])).
fof(f6098,plain,(
  ( ! [X432,X433] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X432),s(bool,X433))) | p(s(bool,X433))) ) | $spl4),
  inference(superposition,[],[f5029,f459])).
fof(f11084,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f11083,f2163])).
fof(f2163,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(sK21,bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24))))) ) | $spl2),
  inference(forward_demodulation,[],[f2162,f459])).
fof(f2162,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(sK21,bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f2113,f565])).
fof(f565,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X1,X5,X0,X4,X3,X2) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))) )),
  inference(cnf_transformation,[],[f332])).
fof(f2113,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(sK21,sK24,X0,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X2,X3)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f459,f676,f559])).
fof(f559,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f11083,plain,(
  ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | $spl1),
  inference(unit_resulting_resolution,[],[f678,f1524,f496])).
fof(f496,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f302])).
fof(f302,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f301])).
fof(f301,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f300])).
fof(f300,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f1524,plain,(
  ~sP1('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f678,f675,f494])).
fof(f494,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f302])).
fof(f9937,plain,(
  ( ! [X14,X13,X11] : (sP1(X11,X13) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X14) | s(bool,X13) = s(bool,X14)) ) | $spl60),
  inference(cnf_transformation,[],[f9937_D])).
fof(f9937_D,plain,(
  ( ! [X14,X13,X11] : (sP1(X11,X13) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X14) | s(bool,X13) = s(bool,X14)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f9938,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,X16)) | sP1(X15,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f9928,f398])).
fof(f9928,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,X16)) | sP1(X15,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f5072,f786])).
fof(f5072,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f3578,f383])).
fof(f3578,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f499,f786])).
fof(f499,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f302])).
fof(f9936,plain,(
  ( ! [X14,X12,X13,X11] : (p(s(bool,X12)) | sP1(X11,X13) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f9927,f398])).
fof(f9927,plain,(
  ( ! [X14,X12,X13,X11] : (p(s(bool,X12)) | sP1(X11,X13) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f5072,f786])).
fof(f9935,plain,(
  ( ! [X2,X1] : (sP1('F_0',X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) | $spl58),
  inference(cnf_transformation,[],[f9935_D])).
fof(f9935_D,plain,(
  ( ! [X2,X1] : (sP1('F_0',X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f9934,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | sP1('F_0',X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f9924,f398])).
fof(f9924,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | sP1('F_0',X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f5072,f390])).
fof(f9914,plain,(
  ( ! [X14,X13,X11] : (sP1(X13,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X14) | s(bool,X13) = s(bool,X14)) ) | $spl56),
  inference(cnf_transformation,[],[f9914_D])).
fof(f9914_D,plain,(
  ( ! [X14,X13,X11] : (sP1(X13,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X14) | s(bool,X13) = s(bool,X14)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f9915,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,X16)) | sP1(X17,X15) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f9905,f398])).
fof(f9905,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,X16)) | sP1(X17,X15) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f5071,f786])).
fof(f5071,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f3577,f383])).
fof(f3577,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f496,f786])).
fof(f9913,plain,(
  ( ! [X14,X12,X13,X11] : (p(s(bool,X12)) | sP1(X13,X11) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f9904,f398])).
fof(f9904,plain,(
  ( ! [X14,X12,X13,X11] : (p(s(bool,X12)) | sP1(X13,X11) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f5071,f786])).
fof(f9912,plain,(
  ( ! [X2,X1] : (sP1(X1,'F_0') | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) | $spl54),
  inference(cnf_transformation,[],[f9912_D])).
fof(f9912_D,plain,(
  ( ! [X2,X1] : (sP1(X1,'F_0') | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f9911,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | sP1(X1,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f9901,f398])).
fof(f9901,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | sP1(X1,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f5071,f390])).
fof(f9753,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) ) | $spl52),
  inference(cnf_transformation,[],[f9753_D])).
fof(f9753_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f9755,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) )),
  inference(condensation,[],[f9754])).
fof(f9754,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X34)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9747,f835])).
fof(f9747,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X34)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f942,f786])).
fof(f942,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X57)) | ~p(s(bool,X56)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X55),s(bool,X56)),X57,X58)) )),
  inference(superposition,[],[f659,f459])).
fof(f659,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP19(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f380])).
fof(f380,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP19(X2,X0,X1)) & (~sP19(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f379])).
fof(f379,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP19(X2,X0,X1)) & (~sP19(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP19(X2,X0,X1))),
  inference(definition_folding,[],[f215,f244,f243])).
fof(f243,plain,(
  ! [X2,X0,X1] : (sP18(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP18])])).
fof(f244,plain,(
  ! [X2,X0,X1] : (sP19(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP18(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP19])])).
fof(f215,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X10,X36,X37] : ((p(s(bool,X37)) <=> (p(s(bool,X36)) => p(s(bool,X10)))) <=> ((p(s(bool,X37)) | p(s(bool,X36))) & (p(s(bool,X37)) | ~p(s(bool,X10))) & (~p(s(bool,X36)) | p(s(bool,X10)) | ~p(s(bool,X37)))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.sat.sat_27_prove_ltb')).
fof(f9752,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) )),
  inference(condensation,[],[f9751])).
fof(f9751,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,X29)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9746,f835])).
fof(f9746,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,X29)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f942,f786])).
fof(f9609,plain,(
  ( ! [X2,X3,X1] : (sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X3,X1) | p(s(bool,X1))) ) | $spl50),
  inference(cnf_transformation,[],[f9609_D])).
fof(f9609_D,plain,(
  ( ! [X2,X3,X1] : (sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X3,X1) | p(s(bool,X1))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f9611,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X3,X1)) )),
  inference(condensation,[],[f9610])).
fof(f9610,plain,(
  ( ! [X37,X35,X33,X36,X34] : (p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,'T_0')),X36,X34) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9603,f835])).
fof(f9603,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,'T_0')),X36,X34) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f941,f786])).
fof(f941,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X52)) | p(s(bool,X53)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X51),s(bool,X52)),X54,X53)) )),
  inference(superposition,[],[f658,f459])).
fof(f658,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP19(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f380])).
fof(f9608,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X3,X1)) )),
  inference(condensation,[],[f9607])).
fof(f9607,plain,(
  ( ! [X30,X28,X31,X29,X32] : (p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,'T_0')),X31,X29) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9602,f835])).
fof(f9602,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,'T_0')),X31,X29) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f941,f786])).
fof(f9472,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) ) | $spl48),
  inference(cnf_transformation,[],[f9472_D])).
fof(f9472_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f9474,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) )),
  inference(condensation,[],[f9473])).
fof(f9473,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X34)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9466,f835])).
fof(f9466,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X34)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f940,f786])).
fof(f940,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X49)) | ~p(s(bool,X48)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X47),s(bool,X48)),X49,X50)) )),
  inference(superposition,[],[f642,f459])).
fof(f642,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP17(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f372])).
fof(f372,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP17(X2,X0,X1)) & (~sP17(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f371])).
fof(f371,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP17(X2,X0,X1)) & (~sP17(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP17(X2,X0,X1))),
  inference(definition_folding,[],[f177,f241,f240])).
fof(f240,plain,(
  ! [X2,X0,X1] : (sP16(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP16])])).
fof(f241,plain,(
  ! [X2,X0,X1] : (sP17(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP16(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP17])])).
fof(f177,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X10,X36,X37] : ((p(s(bool,X37)) <=> (p(s(bool,X36)) | p(s(bool,X10)))) <=> ((p(s(bool,X37)) | ~p(s(bool,X36))) & (p(s(bool,X37)) | ~p(s(bool,X10))) & (p(s(bool,X36)) | p(s(bool,X10)) | ~p(s(bool,X37)))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.sat.sat_25_prove_ltb')).
fof(f9471,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),'T_0',X3)) )),
  inference(condensation,[],[f9470])).
fof(f9470,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,X29)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9465,f835])).
fof(f9465,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,X29)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f940,f786])).
fof(f9291,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),X3,'T_0')) ) | $spl46),
  inference(cnf_transformation,[],[f9291_D])).
fof(f9291_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),X3,'T_0')) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f9293,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),X3,'T_0')) )),
  inference(condensation,[],[f9292])).
fof(f9292,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X34)),X36,'T_0') | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9285,f835])).
fof(f9285,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X35),s(bool,X34)),X36,'T_0') | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f939,f786])).
fof(f939,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X45)) | ~p(s(bool,X44)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X43),s(bool,X44)),X46,X45)) )),
  inference(superposition,[],[f641,f459])).
fof(f641,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP17(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f372])).
fof(f9290,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X1)),X3,'T_0')) )),
  inference(condensation,[],[f9289])).
fof(f9289,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,X29)),X31,'T_0') | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9284,f835])).
fof(f9284,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X30),s(bool,X29)),X31,'T_0') | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f939,f786])).
fof(f9207,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) ) | $spl44),
  inference(cnf_transformation,[],[f9207_D])).
fof(f9207_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f9209,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) )),
  inference(condensation,[],[f9208])).
fof(f9208,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9201,f835])).
fof(f9201,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f892,f786])).
fof(f892,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X49)) | ~p(s(bool,X47)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50)) )),
  inference(superposition,[],[f659,f458])).
fof(f9206,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) )),
  inference(condensation,[],[f9205])).
fof(f9205,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9200,f835])).
fof(f9200,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f892,f786])).
fof(f9121,plain,(
  ( ! [X2,X3,X1] : (sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X3,X1) | p(s(bool,X1))) ) | $spl42),
  inference(cnf_transformation,[],[f9121_D])).
fof(f9121_D,plain,(
  ( ! [X2,X3,X1] : (sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X3,X1) | p(s(bool,X1))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f9123,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X3,X1)) )),
  inference(condensation,[],[f9122])).
fof(f9122,plain,(
  ( ! [X37,X35,X33,X36,X34] : (p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X35)),X36,X34) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9115,f835])).
fof(f9115,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | p(s(bool,X34)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X35)),X36,X34) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f891,f786])).
fof(f891,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X43)) | p(s(bool,X45)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X43),s(bool,X44)),X46,X45)) )),
  inference(superposition,[],[f658,f458])).
fof(f9120,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X3,X1)) )),
  inference(condensation,[],[f9119])).
fof(f9119,plain,(
  ( ! [X30,X28,X31,X29,X32] : (p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X30)),X31,X29) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9114,f835])).
fof(f9114,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | p(s(bool,X29)) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X30)),X31,X29) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f891,f786])).
fof(f9050,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) ) | $spl40),
  inference(cnf_transformation,[],[f9050_D])).
fof(f9050_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f9052,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) )),
  inference(condensation,[],[f9051])).
fof(f9051,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f9044,f835])).
fof(f9044,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),'T_0',X36) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f890,f786])).
fof(f890,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,X41)) | ~p(s(bool,X39)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X39),s(bool,X40)),X41,X42)) )),
  inference(superposition,[],[f642,f458])).
fof(f9049,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),'T_0',X3)) )),
  inference(condensation,[],[f9048])).
fof(f9048,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f9043,f835])).
fof(f9043,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),'T_0',X31) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f890,f786])).
fof(f8974,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),X3,'T_0')) ) | $spl38),
  inference(cnf_transformation,[],[f8974_D])).
fof(f8974_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),X3,'T_0')) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f8976,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),X3,'T_0')) )),
  inference(condensation,[],[f8975])).
fof(f8975,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),X36,'T_0') | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f8968,f835])).
fof(f8968,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),X36,'T_0') | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f889,f786])).
fof(f889,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | ~p(s(bool,X35)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X35),s(bool,X36)),X38,X37)) )),
  inference(superposition,[],[f641,f458])).
fof(f8973,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X2)),X3,'T_0')) )),
  inference(condensation,[],[f8972])).
fof(f8972,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),X31,'T_0') | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f8967,f835])).
fof(f8967,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | ~p(s(bool,X29)) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),X31,'T_0') | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f889,f786])).
fof(f8127,plain,(
  ( ! [X10,X9] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9)),'T_0') | s(bool,'T_0') = s(bool,X9)) ) | $spl36),
  inference(cnf_transformation,[],[f8127_D])).
fof(f8127_D,plain,(
  ( ! [X10,X9] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9)),'T_0') | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f8128,plain,(
  ( ! [X12,X13,X11] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X13),s(bool,X12)),'T_0') | p(s(bool,X11)) | s(bool,'T_0') = s(bool,X12)) ) | $spl8),
  inference(subsumption_resolution,[],[f8115,f398])).
fof(f8115,plain,(
  ( ! [X12,X13,X11] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X13),s(bool,X12)),'T_0') | p(s(bool,X11)) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) ) | $spl8),
  inference(superposition,[],[f6099,f786])).
fof(f8126,plain,(
  ( ! [X10,X8,X9] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9)),'T_0') | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X9)) ) | $spl8),
  inference(subsumption_resolution,[],[f8114,f398])).
fof(f8114,plain,(
  ( ! [X10,X8,X9] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9)),'T_0') | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl8),
  inference(superposition,[],[f6099,f786])).
fof(f8046,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7232,f7241])).
fof(f7241,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f7218,f474])).
fof(f474,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f195])).
fof(f7232,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f402])).
fof(f402,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f252])).
fof(f252,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X32] : (s(bool,'F_0') = s(bool,X32) <=> ~p(s(bool,X32)))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.EQ_CLAUSES|split|2')).
fof(f8045,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7236,f383])).
fof(f7236,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f700,f7218,f474])).
fof(f700,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f678,f398])).
fof(f8044,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7242,f383])).
fof(f7242,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f700,f7218,f474])).
fof(f8043,plain,(
  $false | ($spl4 | $spl32)),
  inference(subsumption_resolution,[],[f7251,f7218])).
fof(f7251,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0))))) ) | ($spl4 | $spl32)),
  inference(unit_resulting_resolution,[],[f7042,f7218,f495])).
fof(f495,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f302])).
fof(f7042,plain,(
  ( ! [X0] : (sP1('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f678,f5864])).
fof(f5864,plain,(
  ( ! [X14,X15] : (sP1('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X14),s(bool,X15))) | p(s(bool,X14))) ) | $spl4),
  inference(superposition,[],[f5029,f458])).
fof(f8042,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7252,f383])).
fof(f7252,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f716,f7218,f495])).
fof(f716,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f678,f383,f499])).
fof(f8041,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7253,f7218])).
fof(f7253,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f1836,f7218,f495])).
fof(f1836,plain,(
  ( ! [X0] : (sP1('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f383,f678,f888])).
fof(f888,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X34)) | sP1(X34,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X32),s(bool,X33)))) )),
  inference(superposition,[],[f499,f458])).
fof(f8040,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7254,f7218])).
fof(f7254,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0'))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f1978,f7218,f495])).
fof(f1978,plain,(
  ( ! [X0] : (sP1('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f383,f678,f938])).
fof(f938,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,X41)) | p(s(bool,X42)) | sP1(X42,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X40),s(bool,X41)))) )),
  inference(superposition,[],[f499,f459])).
fof(f8039,plain,(
  $false | ($spl8 | $spl32)),
  inference(subsumption_resolution,[],[f7257,f383])).
fof(f7257,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl32)),
  inference(unit_resulting_resolution,[],[f7110,f7218,f495])).
fof(f7110,plain,(
  ( ! [X0] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'T_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f678,f5878])).
fof(f5878,plain,(
  ( ! [X14,X15] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X14),s(bool,X15)),'T_0') | p(s(bool,X14))) ) | $spl8),
  inference(superposition,[],[f5033,f458])).
fof(f8038,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7262,f383])).
fof(f7262,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f711,f7218,f495])).
fof(f711,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f678,f383,f496])).
fof(f8037,plain,(
  $false | ($spl4 | $spl32)),
  inference(subsumption_resolution,[],[f7263,f383])).
fof(f7263,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl32)),
  inference(unit_resulting_resolution,[],[f7042,f7218,f495])).
fof(f8036,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7267,f7218])).
fof(f7267,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f1817,f7218,f495])).
fof(f1817,plain,(
  ( ! [X0] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f887])).
fof(f887,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,X29)) | p(s(bool,X31)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X29),s(bool,X30)),X31)) )),
  inference(superposition,[],[f496,f458])).
fof(f8035,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7268,f7218])).
fof(f7268,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0'))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f1855,f7218,f495])).
fof(f1855,plain,(
  ( ! [X0] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f937])).
fof(f937,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X38)) | p(s(bool,X39)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X37),s(bool,X38)),X39)) )),
  inference(superposition,[],[f496,f459])).
fof(f8034,plain,(
  $false | ($spl8 | $spl32)),
  inference(subsumption_resolution,[],[f7269,f7218])).
fof(f7269,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0))))) ) | ($spl8 | $spl32)),
  inference(unit_resulting_resolution,[],[f7110,f7218,f495])).
fof(f8033,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7282,f383])).
fof(f7282,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f844,f678,f7218,f592])).
fof(f592,plain,(
  ( ! [X2,X0,X1] : (~sP13(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f348])).
fof(f348,plain,(
  ! [X0,X1,X2] : ((~sP13(X0,X1,X2) | (sP10(X2,X1,X0) & sP11(X1,X2,X0) & sP12(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP10(X2,X1,X0) | ~sP11(X1,X2,X0) | ~sP12(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP13(X0,X1,X2)))),
  inference(rectify,[],[f347])).
fof(f347,plain,(
  ! [X2,X1,X0] : ((~sP13(X2,X1,X0) | (sP10(X0,X1,X2) & sP11(X1,X0,X2) & sP12(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP10(X0,X1,X2) | ~sP11(X1,X0,X2) | ~sP12(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP13(X2,X1,X0)))),
  inference(flattening,[],[f346])).
fof(f346,plain,(
  ! [X2,X1,X0] : ((~sP13(X2,X1,X0) | (sP10(X0,X1,X2) & sP11(X1,X0,X2) & sP12(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP10(X0,X1,X2) | ~sP11(X1,X0,X2) | ~sP12(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP13(X2,X1,X0)))),
  inference(nnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X2,X1,X0] : (sP13(X2,X1,X0) <=> (sP10(X0,X1,X2) & sP11(X1,X0,X2) & sP12(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP13])])).
fof(f844,plain,(
  sP13('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f678,f700,f608])).
fof(f608,plain,(
  ( ! [X2,X0,X1] : (sP13(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f357])).
fof(f357,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP13(X2,X1,X0)) & (~sP13(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f236])).
fof(f236,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP13(X2,X1,X0))),
  inference(definition_folding,[],[f173,f235,f234,f233,f232])).
fof(f232,plain,(
  ! [X0,X1,X2] : (sP10(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f233,plain,(
  ! [X1,X0,X2] : (sP11(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f234,plain,(
  ! [X2,X0,X1] : (sP12(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f173,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X10,X36,X37] : ((p(s(bool,X37)) <=> s(bool,X10) = s(bool,X36)) <=> ((p(s(bool,X37)) | p(s(bool,X36)) | p(s(bool,X10))) & (p(s(bool,X37)) | ~p(s(bool,X10)) | ~p(s(bool,X36))) & (p(s(bool,X36)) | ~p(s(bool,X10)) | ~p(s(bool,X37))) & (p(s(bool,X10)) | ~p(s(bool,X36)) | ~p(s(bool,X37)))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.sat.sat_2|49|_prove_ltb')).
fof(f8032,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7284,f7218])).
fof(f7284,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f864,f678,f7218,f592])).
fof(f864,plain,(
  ( ! [X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) )),
  inference(unit_resulting_resolution,[],[f383,f458,f609])).
fof(f609,plain,(
  ( ! [X2,X0,X1] : (sP13(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f357])).
fof(f8031,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7285,f7218])).
fof(f7285,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0'))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f908,f678,f7218,f592])).
fof(f908,plain,(
  ( ! [X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) )),
  inference(unit_resulting_resolution,[],[f383,f459,f609])).
fof(f8030,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7317,f383])).
fof(f7317,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1298,f678,f7218,f592])).
fof(f1298,plain,(
  sP13('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f688,f683,f686,f678,f594])).
fof(f594,plain,(
  ( ! [X2,X0,X1] : (~sP11(X1,X2,X0) | p(s(bool,X1)) | ~sP12(X0,X2,X1) | sP13(X0,X1,X2) | ~sP10(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f348])).
fof(f686,plain,(
  ( ! [X0,X1] : (sP11(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f678,f602])).
fof(f602,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f354])).
fof(f354,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f353])).
fof(f353,plain,(
  ! [X1,X0,X2] : ((~sP11(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP11(X1,X0,X2)))),
  inference(flattening,[],[f352])).
fof(f352,plain,(
  ! [X1,X0,X2] : ((~sP11(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP11(X1,X0,X2)))),
  inference(nnf_transformation,[],[f233])).
fof(f683,plain,(
  ( ! [X0,X1] : (sP12(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f678,f598])).
fof(f598,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f351])).
fof(f351,plain,(
  ! [X0,X1,X2] : ((~sP12(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP12(X0,X1,X2)))),
  inference(rectify,[],[f350])).
fof(f350,plain,(
  ! [X2,X0,X1] : ((~sP12(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP12(X2,X0,X1)))),
  inference(flattening,[],[f349])).
fof(f349,plain,(
  ! [X2,X0,X1] : ((~sP12(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP12(X2,X0,X1)))),
  inference(nnf_transformation,[],[f234])).
fof(f688,plain,(
  ( ! [X0,X1] : (sP10(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f605])).
fof(f605,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f356])).
fof(f356,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP10(X0,X1,X2)))),
  inference(flattening,[],[f355])).
fof(f355,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP10(X0,X1,X2)))),
  inference(nnf_transformation,[],[f232])).
fof(f8029,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7318,f383])).
fof(f7318,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f864,f678,f7218,f592])).
fof(f8028,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7319,f383])).
fof(f7319,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f908,f678,f7218,f592])).
fof(f8027,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7324,f7444])).
fof(f7444,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f601])).
fof(f601,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f354])).
fof(f7324,plain,(
  ~sP11('T_0','F_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f682,f7218,f593])).
fof(f593,plain,(
  ( ! [X2,X0,X1] : (~sP11(X1,X2,X0) | ~p(s(bool,X2)) | ~sP12(X0,X2,X1) | sP13(X0,X1,X2) | ~sP10(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f348])).
fof(f682,plain,(
  ( ! [X0,X1] : (sP12(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f597])).
fof(f597,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f351])).
fof(f854,plain,(
  ~sP13('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f383,f700,f610])).
fof(f610,plain,(
  ( ! [X2,X0,X1] : (~sP13(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f357])).
fof(f689,plain,(
  ( ! [X0,X1] : (sP10(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f383,f606])).
fof(f606,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f356])).
fof(f8026,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7328,f7444])).
fof(f7328,plain,(
  ~sP11('T_0','F_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f683,f7218,f593])).
fof(f8025,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7335,f7420])).
fof(f7420,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f597])).
fof(f7335,plain,(
  ~sP12('T_0','F_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f685,f7218,f593])).
fof(f685,plain,(
  ( ! [X0,X1] : (sP11(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f601])).
fof(f8024,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7347,f7450])).
fof(f7450,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f607])).
fof(f607,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f356])).
fof(f7347,plain,(
  ~sP10('F_0','T_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f854,f682,f685,f7218,f593])).
fof(f8023,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7351,f7450])).
fof(f7351,plain,(
  ~sP10('F_0','T_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f854,f683,f685,f7218,f593])).
fof(f8022,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7353,f7420])).
fof(f7353,plain,(
  ~sP12('T_0','F_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f686,f7218,f593])).
fof(f8021,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7355,f7476])).
fof(f7476,plain,(
  ( ! [X0] : (~sP13(X0,'T_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f700,f7218,f610])).
fof(f7355,plain,(
  ( ! [X0] : (sP13(X0,'T_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f689,f683,f686,f7218,f593])).
fof(f8020,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7356,f7450])).
fof(f7356,plain,(
  ~sP10('F_0','T_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f854,f683,f686,f7218,f593])).
fof(f8019,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7361,f7476])).
fof(f7361,plain,(
  ( ! [X0] : (sP13(X0,'T_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f689,f682,f686,f7218,f593])).
fof(f8018,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7362,f854])).
fof(f7362,plain,(
  sP13('T_0','T_0','F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f688,f682,f686,f7218,f593])).
fof(f8017,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7363,f7450])).
fof(f7363,plain,(
  ~sP10('F_0','T_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f854,f682,f686,f7218,f593])).
fof(f8016,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7381,f7218])).
fof(f7381,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f684,f678,f7218,f596])).
fof(f596,plain,(
  ( ! [X2,X0,X1] : (~sP12(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f351])).
fof(f684,plain,(
  ( ! [X0,X1] : (sP12('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f678,f599])).
fof(f599,plain,(
  ( ! [X2,X0,X1] : (sP12(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f351])).
fof(f8015,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7382,f7218])).
fof(f7382,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f995,f678,f7218,f596])).
fof(f995,plain,(
  ( ! [X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) )),
  inference(unit_resulting_resolution,[],[f866,f591])).
fof(f591,plain,(
  ( ! [X2,X0,X1] : (~sP13(X0,X1,X2) | sP12(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f348])).
fof(f866,plain,(
  ( ! [X0,X1] : (sP13('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f383,f458,f609])).
fof(f8014,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7383,f7218])).
fof(f7383,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0'))))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f1099,f678,f7218,f596])).
fof(f1099,plain,(
  ( ! [X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) )),
  inference(unit_resulting_resolution,[],[f910,f591])).
fof(f910,plain,(
  ( ! [X0,X1] : (sP13('T_0',X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f383,f459,f609])).
fof(f8013,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7388,f7420])).
fof(f7388,plain,(
  ( ! [X0] : (~sP12(X0,'T_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f383,f7218,f596])).
fof(f8012,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7397,f7420])).
fof(f7397,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f7218,f596])).
fof(f8011,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7412,f7218])).
fof(f7412,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f683,f678,f7218,f596])).
fof(f8010,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7414,f383])).
fof(f7414,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f995,f678,f7218,f596])).
fof(f8009,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7415,f383])).
fof(f7415,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1099,f678,f7218,f596])).
fof(f8008,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7416,f7420])).
fof(f7416,plain,(
  ( ! [X0] : (~sP12('T_0',X0,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f383,f678,f7218,f596])).
fof(f8007,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7418,f7420])).
fof(f7418,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f678,f7218,f596])).
fof(f8006,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7423,f7218])).
fof(f7423,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f687,f678,f7218,f600])).
fof(f600,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f354])).
fof(f687,plain,(
  ( ! [X0,X1] : (sP11('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f678,f603])).
fof(f603,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f354])).
fof(f8005,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7426,f7444])).
fof(f7426,plain,(
  ( ! [X0] : (~sP11(X0,'T_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f383,f7218,f600])).
fof(f8004,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7431,f7444])).
fof(f7431,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f7218,f600])).
fof(f8003,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7438,f7218])).
fof(f7438,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f686,f678,f7218,f600])).
fof(f8002,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7440,f7444])).
fof(f7440,plain,(
  ( ! [X0] : (~sP11('T_0',X0,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f383,f678,f7218,f600])).
fof(f8001,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7442,f7444])).
fof(f7442,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f678,f7218,f600])).
fof(f8000,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7454,f458])).
fof(f7454,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f865,f7218,f609])).
fof(f865,plain,(
  ( ! [X0,X1] : (~sP13('F_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f678,f458,f611])).
fof(f611,plain,(
  ( ! [X2,X0,X1] : (~sP13(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f357])).
fof(f7999,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7455,f459])).
fof(f7455,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f909,f7218,f609])).
fof(f909,plain,(
  ( ! [X0,X1] : (~sP13('F_0',X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f678,f459,f611])).
fof(f7998,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7458,f458])).
fof(f7458,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f863,f7218,f609])).
fof(f863,plain,(
  ( ! [X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X0)) )),
  inference(unit_resulting_resolution,[],[f678,f458,f611])).
fof(f7997,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7459,f459])).
fof(f7459,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f907,f7218,f609])).
fof(f907,plain,(
  ( ! [X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) )),
  inference(unit_resulting_resolution,[],[f678,f459,f611])).
fof(f7996,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7468,f700])).
fof(f7468,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f843,f7218,f610])).
fof(f843,plain,(
  sP13('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f678,f700,f608])).
fof(f7995,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7469,f700])).
fof(f7469,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f844,f7218,f610])).
fof(f7994,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7483,f7600])).
fof(f7600,plain,(
  ( ! [X2,X0,X1] : (sP15(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f7218,f7218,f625])).
fof(f625,plain,(
  ( ! [X2,X0,X1] : (sP15(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f364])).
fof(f7483,plain,(
  ( ! [X0,X1] : (~sP15(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f613])).
fof(f613,plain,(
  ( ! [X2,X0,X1] : (~sP15(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f360])).
fof(f360,plain,(
  ! [X0,X1,X2] : ((~sP15(X0,X1,X2) | (sP14(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP14(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP15(X0,X1,X2)))),
  inference(rectify,[],[f359])).
fof(f359,plain,(
  ! [X2,X0,X1] : ((~sP15(X2,X0,X1) | (sP14(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP14(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP15(X2,X0,X1)))),
  inference(flattening,[],[f358])).
fof(f358,plain,(
  ! [X2,X0,X1] : ((~sP15(X2,X0,X1) | (sP14(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP14(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP15(X2,X0,X1)))),
  inference(nnf_transformation,[],[f238])).
fof(f7993,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7488,f7600])).
fof(f7488,plain,(
  ( ! [X0,X1] : (~sP15(X0,'F_0',X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f614])).
fof(f614,plain,(
  ( ! [X2,X0,X1] : (~sP15(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f360])).
fof(f7992,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7491,f7218])).
fof(f7491,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f693,f725,f7218,f615])).
fof(f615,plain,(
  ( ! [X2,X0,X1] : (sP15(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP14(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f360])).
fof(f725,plain,(
  ( ! [X0] : (~sP15('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f383,f678,f614])).
fof(f693,plain,(
  ( ! [X0,X1] : (sP14('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f678,f622])).
fof(f622,plain,(
  ( ! [X2,X0,X1] : (sP14(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f362])).
fof(f362,plain,(
  ! [X0,X1,X2] : ((~sP14(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP14(X0,X1,X2)))),
  inference(flattening,[],[f361])).
fof(f361,plain,(
  ! [X0,X1,X2] : ((~sP14(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP14(X0,X1,X2)))),
  inference(nnf_transformation,[],[f237])).
fof(f7991,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7492,f7218])).
fof(f7492,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f691,f725,f7218,f615])).
fof(f691,plain,(
  ( ! [X0,X1] : (sP14(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f620])).
fof(f620,plain,(
  ( ! [X2,X0,X1] : (sP14(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f362])).
fof(f7990,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7496,f7546])).
fof(f7546,plain,(
  ( ! [X2,X0,X1] : (sP14(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f620])).
fof(f7496,plain,(
  ~sP14('F_0','T_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f725,f383,f7218,f615])).
fof(f7989,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7502,f7546])).
fof(f7502,plain,(
  ( ! [X0] : (~sP14(X0,'F_0','T_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f615])).
fof(f724,plain,(
  ( ! [X0] : (~sP15('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f613])).
fof(f7988,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7504,f7546])).
fof(f7504,plain,(
  ( ! [X0] : (~sP14('F_0',X0,'T_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f7218,f615])).
fof(f7987,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7507,f7218])).
fof(f7507,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f692,f724,f7218,f615])).
fof(f692,plain,(
  ( ! [X0,X1] : (sP14(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f678,f621])).
fof(f621,plain,(
  ( ! [X2,X0,X1] : (sP14(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f362])).
fof(f7986,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7508,f7218])).
fof(f7508,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f691,f724,f7218,f615])).
fof(f7985,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7513,f7546])).
fof(f7513,plain,(
  ~sP14('T_0','F_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f724,f383,f7218,f615])).
fof(f7984,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7519,f7546])).
fof(f7519,plain,(
  ( ! [X0] : (~sP14(X0,'F_0','T_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f615])).
fof(f7983,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7521,f7546])).
fof(f7521,plain,(
  ( ! [X0] : (~sP14('F_0',X0,'T_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f7218,f615])).
fof(f7982,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7525,f7218])).
fof(f7525,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f693,f678,f7218,f619])).
fof(f619,plain,(
  ( ! [X2,X0,X1] : (~sP14(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f362])).
fof(f7981,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7528,f7546])).
fof(f7528,plain,(
  ( ! [X0] : (~sP14(X0,'T_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f383,f7218,f619])).
fof(f7980,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7533,f7546])).
fof(f7533,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f7218,f619])).
fof(f7979,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7540,f7218])).
fof(f7540,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f692,f678,f7218,f619])).
fof(f7978,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7542,f7546])).
fof(f7542,plain,(
  ( ! [X0] : (~sP14('T_0',X0,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f383,f678,f7218,f619])).
fof(f7977,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7544,f7546])).
fof(f7544,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f678,f7218,f619])).
fof(f7976,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7549,f7218])).
fof(f7549,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f383,f7218,f625])).
fof(f7975,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7551,f7218])).
fof(f7551,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f7218,f625])).
fof(f7974,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7552,f383])).
fof(f7552,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f7218,f7218,f625])).
fof(f1075,plain,(
  ~sP15('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1070,f612])).
fof(f612,plain,(
  ( ! [X2,X0,X1] : (~sP15(X0,X1,X2) | sP14(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f360])).
fof(f1070,plain,(
  ~sP14('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f383,f678,f383,f619])).
fof(f7973,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7553,f383])).
fof(f7553,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f383,f7218,f625])).
fof(f7972,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7559,f383])).
fof(f7559,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f625])).
fof(f7971,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7560,f383])).
fof(f7560,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f7218,f625])).
fof(f7970,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7566,f7218])).
fof(f7566,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f383,f7218,f625])).
fof(f7969,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7568,f7218])).
fof(f7568,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f625])).
fof(f7968,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7570,f383])).
fof(f7570,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f7218,f7218,f625])).
fof(f7967,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7571,f383])).
fof(f7571,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f383,f7218,f625])).
fof(f7966,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7577,f383])).
fof(f7577,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f625])).
fof(f7965,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7578,f383])).
fof(f7578,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f7218,f625])).
fof(f7964,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7585,f383])).
fof(f7585,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f383,f7218,f625])).
fof(f7963,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7586,f7218])).
fof(f7586,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f625])).
fof(f7962,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7588,f383])).
fof(f7588,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f7218,f7218,f625])).
fof(f7961,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7590,f383])).
fof(f7590,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f383,f7218,f625])).
fof(f7960,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7596,f7218])).
fof(f7596,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f7218,f625])).
fof(f7959,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7597,f383])).
fof(f7597,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f7218,f7218,f625])).
fof(f7958,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7603,f7218])).
fof(f7603,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f734,f678,f7218,f628])).
fof(f734,plain,(
  ( ! [X0] : (sP15('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f678,f678,f624])).
fof(f624,plain,(
  ( ! [X2,X0,X1] : (sP15(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f364])).
fof(f7957,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7613,f7218])).
fof(f7613,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f727,f678,f7218,f628])).
fof(f727,plain,(
  ( ! [X0] : (sP15('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f678,f623])).
fof(f623,plain,(
  ( ! [X2,X0,X1] : (sP15(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f364])).
fof(f7956,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7627,f7846])).
fof(f7846,plain,(
  ( ! [X0,X1] : (sP17('F_0',X0,X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f696,f7218,f664])).
fof(f664,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP16(X0,X1,X2) | sP17(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f632])).
fof(f632,plain,(
  ( ! [X2,X0,X1] : (sP17(X0,X1,X2) | ~sP16(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f367])).
fof(f367,plain,(
  ! [X0,X1,X2] : ((~sP17(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP16(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP16(X0,X1,X2) | sP17(X0,X1,X2)))),
  inference(rectify,[],[f366])).
fof(f366,plain,(
  ! [X2,X0,X1] : ((~sP17(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP16(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP16(X2,X0,X1) | sP17(X2,X0,X1)))),
  inference(flattening,[],[f365])).
fof(f365,plain,(
  ! [X2,X0,X1] : ((~sP17(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP16(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP16(X2,X0,X1)) | sP17(X2,X0,X1)))),
  inference(nnf_transformation,[],[f241])).
fof(f696,plain,(
  ( ! [X0,X1] : (sP16('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f678,f639])).
fof(f639,plain,(
  ( ! [X2,X0,X1] : (sP16(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f370])).
fof(f370,plain,(
  ! [X0,X1,X2] : ((~sP16(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP16(X0,X1,X2)))),
  inference(rectify,[],[f369])).
fof(f369,plain,(
  ! [X2,X0,X1] : ((~sP16(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP16(X2,X0,X1)))),
  inference(flattening,[],[f368])).
fof(f368,plain,(
  ! [X2,X0,X1] : ((~sP16(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP16(X2,X0,X1)))),
  inference(nnf_transformation,[],[f240])).
fof(f7627,plain,(
  ( ! [X0,X1] : (~sP17('F_0',X0,X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f629])).
fof(f629,plain,(
  ( ! [X2,X0,X1] : (~sP17(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f367])).
fof(f7955,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7632,f7846])).
fof(f7632,plain,(
  ( ! [X0,X1] : (~sP17('F_0',X0,X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f630])).
fof(f630,plain,(
  ( ! [X2,X0,X1] : (~sP17(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f367])).
fof(f7954,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7640,f7662])).
fof(f7662,plain,(
  ( ! [X2,X0,X1] : (sP16(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f638])).
fof(f638,plain,(
  ( ! [X2,X0,X1] : (sP16(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f370])).
fof(f7640,plain,(
  ~sP16('F_0','T_0','F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f739,f678,f7218,f633])).
fof(f633,plain,(
  ( ! [X2,X0,X1] : (sP17(X0,X1,X2) | ~sP16(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f367])).
fof(f739,plain,(
  ( ! [X0] : (~sP17('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f383,f678,f630])).
fof(f7953,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7648,f7662])).
fof(f7648,plain,(
  ~sP16('F_0','F_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f738,f678,f7218,f634])).
fof(f634,plain,(
  ( ! [X2,X0,X1] : (sP17(X0,X1,X2) | ~sP16(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f367])).
fof(f738,plain,(
  ( ! [X0] : (~sP17('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f629])).
fof(f7952,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7658,f7662])).
fof(f7658,plain,(
  ( ! [X0] : (~sP16(X0,'F_0','F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f678,f7218,f636])).
fof(f636,plain,(
  ( ! [X2,X0,X1] : (~sP16(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f370])).
fof(f7951,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7666,f383])).
fof(f7666,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1182,f7218,f641])).
fof(f1182,plain,(
  ~sP17('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1177,f631])).
fof(f631,plain,(
  ( ! [X2,X0,X1] : (~sP17(X0,X1,X2) | sP16(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f367])).
fof(f1177,plain,(
  ~sP16('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f383,f678,f678,f636])).
fof(f7950,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7671,f383])).
fof(f7671,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f641])).
fof(f7949,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7672,f7218])).
fof(f7672,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f739,f7218,f641])).
fof(f7948,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7680,f383])).
fof(f7680,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1182,f7218,f642])).
fof(f7947,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7685,f7218])).
fof(f7685,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f642])).
fof(f7946,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7686,f383])).
fof(f7686,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f739,f7218,f642])).
fof(f7945,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7701,f7837])).
fof(f7837,plain,(
  ( ! [X0,X1] : (sP19('F_0',X0,X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f699,f7218,f663])).
fof(f663,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP18(X0,X1,X2) | sP19(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f649])).
fof(f649,plain,(
  ( ! [X2,X0,X1] : (sP19(X0,X1,X2) | ~sP18(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f375])).
fof(f375,plain,(
  ! [X0,X1,X2] : ((~sP19(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP18(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP18(X0,X1,X2) | sP19(X0,X1,X2)))),
  inference(rectify,[],[f374])).
fof(f374,plain,(
  ! [X2,X0,X1] : ((~sP19(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP18(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP18(X2,X0,X1) | sP19(X2,X0,X1)))),
  inference(flattening,[],[f373])).
fof(f373,plain,(
  ! [X2,X0,X1] : ((~sP19(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP18(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP18(X2,X0,X1)) | sP19(X2,X0,X1)))),
  inference(nnf_transformation,[],[f244])).
fof(f699,plain,(
  ( ! [X0,X1] : (sP18('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f678,f656])).
fof(f656,plain,(
  ( ! [X2,X0,X1] : (sP18(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f378])).
fof(f378,plain,(
  ! [X0,X1,X2] : ((~sP18(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP18(X0,X1,X2)))),
  inference(rectify,[],[f377])).
fof(f377,plain,(
  ! [X2,X0,X1] : ((~sP18(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP18(X2,X0,X1)))),
  inference(flattening,[],[f376])).
fof(f376,plain,(
  ! [X2,X0,X1] : ((~sP18(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP18(X2,X0,X1)))),
  inference(nnf_transformation,[],[f243])).
fof(f7701,plain,(
  ( ! [X0,X1] : (~sP19('F_0',X0,X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218,f647])).
fof(f647,plain,(
  ( ! [X2,X0,X1] : (~sP19(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f375])).
fof(f7944,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7704,f7218])).
fof(f7704,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f699,f753,f7218,f650])).
fof(f650,plain,(
  ( ! [X2,X0,X1] : (sP19(X0,X1,X2) | ~sP18(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f375])).
fof(f753,plain,(
  ( ! [X0] : (~sP19('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f383,f678,f647])).
fof(f7943,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7705,f7218])).
fof(f7705,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f698,f753,f7218,f650])).
fof(f698,plain,(
  ( ! [X0,X1] : (sP18(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f383,f655])).
fof(f655,plain,(
  ( ! [X2,X0,X1] : (sP18(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f378])).
fof(f7942,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7709,f7781])).
fof(f7781,plain,(
  ( ! [X2,X0,X1] : (sP18(X0,X1,X2)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f655])).
fof(f7709,plain,(
  ~sP18('F_0','T_0','T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f753,f383,f7218,f650])).
fof(f7941,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7715,f7781])).
fof(f7715,plain,(
  ( ! [X0] : (~sP18('F_0',X0,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f749,f7218,f7218,f650])).
fof(f749,plain,(
  ( ! [X0] : (~sP19('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f678,f646])).
fof(f646,plain,(
  ( ! [X2,X0,X1] : (~sP19(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f375])).
fof(f7940,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7717,f7781])).
fof(f7717,plain,(
  ( ! [X0] : (~sP18('F_0','T_0',X0)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f753,f7218,f7218,f650])).
fof(f7939,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7728,f7781])).
fof(f7728,plain,(
  ( ! [X0] : (~sP18('F_0',X0,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f749,f7218,f7218,f650])).
fof(f7938,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7729,f7781])).
fof(f7729,plain,(
  ( ! [X0] : (~sP18('F_0','T_0',X0)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f753,f7218,f7218,f650])).
fof(f7937,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7742,f7781])).
fof(f7742,plain,(
  ~sP18('F_0','F_0','F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f749,f678,f7218,f651])).
fof(f651,plain,(
  ( ! [X2,X0,X1] : (sP19(X0,X1,X2) | ~sP18(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f375])).
fof(f7936,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7753,f7781])).
fof(f7753,plain,(
  ~sP18('F_0','F_0','F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f749,f678,f7218,f652])).
fof(f652,plain,(
  ( ! [X2,X0,X1] : (sP19(X0,X1,X2) | ~sP18(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f375])).
fof(f7935,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7765,f7218])).
fof(f7765,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f699,f678,f7218,f653])).
fof(f653,plain,(
  ( ! [X2,X0,X1] : (~sP18(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f378])).
fof(f7934,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7766,f7781])).
fof(f7766,plain,(
  ( ! [X0] : (~sP18(X0,'F_0','T_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f383,f678,f7218,f653])).
fof(f7933,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7768,f7781])).
fof(f7768,plain,(
  ( ! [X0,X1] : (~sP18(X0,'F_0',X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f678,f7218,f653])).
fof(f7932,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7775,f7218])).
fof(f7775,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f697,f678,f7218,f653])).
fof(f697,plain,(
  ( ! [X0,X1] : (sP18(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f654])).
fof(f654,plain,(
  ( ! [X2,X0,X1] : (sP18(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f378])).
fof(f7931,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7777,f7781])).
fof(f7777,plain,(
  ( ! [X0] : (~sP18('T_0','F_0',X0)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f383,f678,f7218,f653])).
fof(f7930,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7779,f7781])).
fof(f7779,plain,(
  ( ! [X0,X1] : (~sP18(X0,'F_0',X1)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f678,f7218,f653])).
fof(f7929,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7796,f383])).
fof(f7796,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1214,f7218,f659])).
fof(f1214,plain,(
  ~sP19('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1209,f648])).
fof(f648,plain,(
  ( ! [X2,X0,X1] : (~sP19(X0,X1,X2) | sP18(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f375])).
fof(f1209,plain,(
  ~sP18('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f383,f383,f678,f653])).
fof(f7928,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7801,f7218])).
fof(f7801,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl32),
  inference(unit_resulting_resolution,[],[f749,f7218,f659])).
fof(f7927,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7802,f383])).
fof(f7802,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f753,f7218,f659])).
fof(f7926,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7808,f383])).
fof(f7808,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f756,f678,f7218,f660])).
fof(f660,plain,(
  ( ! [X2,X0,X1] : (~sP19(X2,X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f380])).
fof(f756,plain,(
  ( ! [X0] : (sP19('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f383,f658])).
fof(f7925,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7820,f383])).
fof(f7820,plain,(
  ~p(s(bool,'T_0')) | $spl32),
  inference(unit_resulting_resolution,[],[f1203,f678,f7218,f660])).
fof(f1203,plain,(
  sP19('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f699,f383,f678,f652])).
fof(f7924,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7830,f697])).
fof(f7830,plain,(
  ( ! [X0] : (~sP18('F_0',X0,'F_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f749,f7218,f663])).
fof(f7923,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7831,f698])).
fof(f7831,plain,(
  ( ! [X0] : (~sP18('F_0','T_0',X0)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f753,f7218,f663])).
fof(f7922,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7839,f694])).
fof(f694,plain,(
  ( ! [X0,X1] : (sP16(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f637])).
fof(f637,plain,(
  ( ! [X2,X0,X1] : (sP16(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f370])).
fof(f7839,plain,(
  ( ! [X0] : (~sP16('F_0',X0,'T_0')) ) | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f664])).
fof(f7921,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f7840,f695])).
fof(f695,plain,(
  ( ! [X0,X1] : (sP16(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f383,f638])).
fof(f7840,plain,(
  ( ! [X0] : (~sP16('F_0','T_0',X0)) ) | $spl32),
  inference(unit_resulting_resolution,[],[f739,f7218,f664])).
fof(f7883,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f513,f7218,f549])).
fof(f549,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4)))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))) )),
  inference(cnf_transformation,[],[f324])).
fof(f324,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4)))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))) & (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4))))))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4)))) <=> s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4)))) <=> s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6,X7] : ! [X8,X26,X10,X11] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X26),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X10)))) <=> s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X10) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.source_to_modProof.source_to_modProof_26_prove_ltb|split|2')).
fof(f7881,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f2606,f7218,f530])).
fof(f530,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) | sP3(X1,X5,X0,X4,X3,X2)) )),
  inference(cnf_transformation,[],[f316])).
fof(f316,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) | sP3(X1,X5,X0,X4,X3,X2)) & (~sP3(X1,X5,X0,X4,X3,X2) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(nnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> sP3(X1,X5,X0,X4,X3,X2))),
  inference(definition_folding,[],[f159,f221,f220])).
fof(f220,plain,(
  ! [X1,X0,X2,X3,X5,X4] : (sP2(X1,X0,X2,X3,X5,X4) <=> ? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X9))),s(X1,X10))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f221,plain,(
  ! [X1,X5,X0,X4,X3,X2] : (sP3(X1,X5,X0,X4,X3,X2) <=> (sP2(X1,X0,X2,X3,X5,X4) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f159,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> (? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X9))),s(X1,X10))))) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> (? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X9))),s(X1,X10))))) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X8,X23,X24,X25] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X23),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X24),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X25)))) <=> (? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X24) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X25) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20))) & p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s(X6,X19))),s(X7,X20))))) | ? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X24) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X19))))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X25) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X20))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X23),s('type.semanticPrimitives.v',X19),s('type.modSem.v',X20))))) | ? [X11] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X24) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X25) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.source_to_modProof.result_rel_cases')).
fof(f2606,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X1)),X2,'const.semanticPrimitives.Rval_1'(s(X2,X3)),X4,X5)) )),
  inference(unit_resulting_resolution,[],[f1824,f513,f513,f517])).
fof(f517,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK36(X5,X4,X3,X2,X1,X0)))))) | sP2(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP3(X0,X1,X2,X3,X4,X5) | sP2(X0,X2,X5,X4,X1,X3) | (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK36(X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK37(X5,X4,X3,X2,X1,X0)))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',sK36(X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK37(X5,X4,X3,X2,X1,X0)))))) | (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0)))))))) & ((~sP2(X0,X2,X5,X4,X1,X3) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP3(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK36,sK37,sK38])],[f311])).
fof(f311,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP3(X0,X1,X2,X3,X4,X5) | sP2(X0,X2,X5,X4,X1,X3) | ? [X10,X11] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X10))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',X10),s('type.modSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))))) & ((~sP2(X0,X2,X5,X4,X1,X3) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP3(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f310])).
fof(f310,plain,(
  ! [X1,X5,X0,X4,X3,X2] : ((~sP3(X1,X5,X0,X4,X3,X2) | sP2(X1,X0,X2,X3,X5,X4) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) & ((~sP2(X1,X0,X2,X3,X5,X4) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP3(X1,X5,X0,X4,X3,X2)))),
  inference(flattening,[],[f309])).
fof(f309,plain,(
  ! [X1,X5,X0,X4,X3,X2] : ((~sP3(X1,X5,X0,X4,X3,X2) | (sP2(X1,X0,X2,X3,X5,X4) | ? [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) | ? [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) & ((~sP2(X1,X0,X2,X3,X5,X4) & ! [X7,X8] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8))))) & ! [X6] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP3(X1,X5,X0,X4,X3,X2)))),
  inference(nnf_transformation,[],[f221])).
fof(f1824,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP2(X0,X1,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X4)),X5)) )),
  inference(unit_resulting_resolution,[],[f513,f527])).
fof(f527,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP2(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK40(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP2(X0,X1,X2,X3,X4,X5) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK39(X5,X4,X3,X2,X1,X0)))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK40(X5,X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,sK39(X5,X4,X3,X2,X1,X0)))),s(X0,sK40(X5,X4,X3,X2,X1,X0))))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7))))) | sP2(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK39,sK40])],[f314])).
fof(f314,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP2(X0,X1,X2,X3,X4,X5) | ? [X8,X9] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X8))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X8))),s(X0,X9)))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7))))) | sP2(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f313])).
fof(f313,plain,(
  ! [X1,X0,X2,X3,X5,X4] : ((~sP2(X1,X0,X2,X3,X5,X4) | ? [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X9))),s(X1,X10)))))) & (! [X9,X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X10))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X9))),s(X1,X10))))) | sP2(X1,X0,X2,X3,X5,X4)))),
  inference(nnf_transformation,[],[f220])).
fof(f7866,plain,(
  $false | ($spl2 | $spl32)),
  inference(unit_resulting_resolution,[],[f2699,f7218,f564])).
fof(f2699,plain,(
  ( ! [X2,X0,X3,X1] : (~sP7(sK21,sK24,X0,'const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X3)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f1862,f513,f513,f551])).
fof(f1862,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6(sK21,X0,X1,X2,sK24,X3)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f1242,f561])).
fof(f561,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK54(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f331])).
fof(f1242,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(sK21,X0)))) ) | $spl2),
  inference(superposition,[],[f513,f676])).
fof(f7863,plain,(
  $false | ($spl18 | $spl32)),
  inference(unit_resulting_resolution,[],[f1214,f7218,f5048])).
fof(f7861,plain,(
  $false | ($spl14 | $spl32)),
  inference(unit_resulting_resolution,[],[f1182,f7218,f5042])).
fof(f7859,plain,(
  $false | ($spl12 | $spl32)),
  inference(unit_resulting_resolution,[],[f1182,f7218,f5039])).
fof(f7857,plain,(
  $false | ($spl10 | $spl32)),
  inference(unit_resulting_resolution,[],[f734,f678,f7218,f5036])).
fof(f7847,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f696,f7218,f664])).
fof(f7845,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f739,f695,f7218,f664])).
fof(f7843,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f694,f7218,f664])).
fof(f7838,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f699,f7218,f663])).
fof(f7836,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f753,f698,f7218,f663])).
fof(f7834,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f697,f7218,f663])).
fof(f7829,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f756,f678,f7218,f7218,f660])).
fof(f7824,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1203,f678,f383,f7218,f660])).
fof(f7818,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f756,f678,f7218,f7218,f660])).
fof(f7813,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f756,f678,f383,f7218,f660])).
fof(f7807,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f7218,f7218,f659])).
fof(f7805,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f753,f383,f7218,f659])).
fof(f7800,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f7218,f7218,f659])).
fof(f7798,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1214,f383,f7218,f659])).
fof(f7793,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f678,f7218,f658])).
fof(f7788,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f678,f678,f7218,f657])).
fof(f657,plain,(
  ( ! [X2,X0,X1] : (sP19(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f380])).
fof(f7782,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1209,f7218,f655])).
fof(f7780,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f697,f7218,f678,f7218,f653])).
fof(f7778,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f697,f383,f678,f7218,f653])).
fof(f7769,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f697,f7218,f678,f7218,f653])).
fof(f7767,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f699,f383,f678,f7218,f653])).
fof(f7758,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f699,f678,f7218,f652])).
fof(f7756,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f697,f678,f7218,f652])).
fof(f7747,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f699,f678,f7218,f651])).
fof(f7745,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f697,f678,f7218,f651])).
fof(f7736,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f699,f7218,f7218,f650])).
fof(f7734,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f753,f698,f7218,f7218,f650])).
fof(f7732,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f749,f697,f7218,f7218,f650])).
fof(f7718,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f699,f753,f7218,f7218,f650])).
fof(f7716,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f699,f749,f7218,f7218,f650])).
fof(f7710,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f699,f753,f383,f7218,f650])).
fof(f7702,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1203,f678,f7218,f647])).
fof(f7697,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1171,f678,f678,f7218,f643])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (~sP17(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f372])).
fof(f1171,plain,(
  sP17('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f696,f678,f678,f635])).
fof(f635,plain,(
  ( ! [X2,X0,X1] : (sP17(X0,X1,X2) | ~sP16(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f367])).
fof(f7691,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f7218,f642])).
fof(f7689,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f739,f383,f7218,f642])).
fof(f7684,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f7218,f642])).
fof(f7682,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1182,f383,f7218,f642])).
fof(f7677,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f7218,f641])).
fof(f7675,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f383,f7218,f641])).
fof(f7670,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f7218,f7218,f641])).
fof(f7668,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1182,f383,f7218,f641])).
fof(f7663,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1177,f7218,f638])).
fof(f7661,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1177,f7218,f637])).
fof(f7659,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f696,f678,f678,f7218,f636])).
fof(f7653,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f696,f678,f7218,f634])).
fof(f7651,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f738,f694,f678,f7218,f634])).
fof(f7641,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f696,f739,f678,f7218,f633])).
fof(f7633,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1171,f678,f7218,f630])).
fof(f7628,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1171,f678,f7218,f629])).
fof(f7623,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f727,f678,f7218,f7218,f628])).
fof(f7618,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f727,f678,f383,f7218,f628])).
fof(f7612,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f727,f678,f7218,f7218,f628])).
fof(f7607,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f734,f678,f383,f7218,f628])).
fof(f7601,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f7218,f625])).
fof(f7599,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f725,f383,f7218,f7218,f625])).
fof(f7594,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f383,f7218,f625])).
fof(f7592,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1075,f383,f383,f7218,f625])).
fof(f7583,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f7218,f625])).
fof(f7581,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f383,f7218,f7218,f625])).
fof(f7576,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f383,f7218,f625])).
fof(f7574,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f383,f383,f7218,f625])).
fof(f7565,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f7218,f7218,f7218,f625])).
fof(f7563,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f724,f383,f7218,f7218,f625])).
fof(f7558,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f725,f7218,f383,f7218,f625])).
fof(f7556,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f725,f383,f383,f7218,f625])).
fof(f7547,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1070,f7218,f620])).
fof(f7545,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f692,f7218,f678,f7218,f619])).
fof(f7543,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f692,f383,f678,f7218,f619])).
fof(f7534,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f692,f678,f7218,f7218,f619])).
fof(f7529,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f693,f678,f383,f7218,f619])).
fof(f7522,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f693,f725,f7218,f7218,f615])).
fof(f7520,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f692,f724,f7218,f7218,f615])).
fof(f7514,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f692,f724,f383,f7218,f615])).
fof(f7505,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f693,f725,f7218,f7218,f615])).
fof(f7503,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f692,f724,f7218,f7218,f615])).
fof(f7497,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f693,f725,f383,f7218,f615])).
fof(f7489,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f734,f678,f7218,f614])).
fof(f7484,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f727,f678,f7218,f613])).
fof(f7479,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f843,f700,f7218,f610])).
fof(f7477,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f844,f700,f7218,f610])).
fof(f7467,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f909,f459,f7218,f609])).
fof(f7465,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f865,f458,f7218,f609])).
fof(f7463,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f907,f459,f7218,f609])).
fof(f7461,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f863,f458,f7218,f609])).
fof(f7903,plain,(
  $false | $spl32),
  inference(trivial_inequality_removal,[],[f7457])).
fof(f7457,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl32),
  inference(unit_resulting_resolution,[],[f1043,f7218,f609])).
fof(f1043,plain,(
  ~sP13('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1038,f589])).
fof(f589,plain,(
  ( ! [X2,X0,X1] : (~sP13(X0,X1,X2) | sP10(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f348])).
fof(f1038,plain,(
  ~sP10('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f678,f678,f678,f604])).
fof(f604,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f356])).
fof(f7902,plain,(
  $false | $spl32),
  inference(trivial_inequality_removal,[],[f7456])).
fof(f7456,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl32),
  inference(unit_resulting_resolution,[],[f1034,f7218,f609])).
fof(f1034,plain,(
  ~sP13('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1029,f590])).
fof(f590,plain,(
  ( ! [X2,X0,X1] : (~sP13(X0,X1,X2) | sP11(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f348])).
fof(f1029,plain,(
  ~sP11('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f383,f678,f383,f600])).
fof(f7451,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1038,f7218,f607])).
fof(f7449,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1038,f7218,f606])).
fof(f7447,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1038,f7218,f605])).
fof(f7445,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1029,f7218,f601])).
fof(f7443,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f686,f7218,f678,f7218,f600])).
fof(f7441,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f686,f383,f678,f7218,f600])).
fof(f7432,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f686,f678,f7218,f7218,f600])).
fof(f7427,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f687,f678,f383,f7218,f600])).
fof(f7421,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1009,f7218,f597])).
fof(f1009,plain,(
  ~sP12('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f383,f678,f383,f596])).
fof(f7419,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f683,f7218,f678,f7218,f596])).
fof(f7417,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f995,f383,f678,f7218,f596])).
fof(f7398,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f683,f678,f7218,f7218,f596])).
fof(f7389,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f684,f678,f383,f7218,f596])).
fof(f7364,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f682,f686,f7218,f593])).
fof(f7357,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f683,f686,f7218,f593])).
fof(f7352,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f683,f685,f7218,f593])).
fof(f7348,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f689,f854,f682,f685,f7218,f593])).
fof(f7323,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f844,f7218,f678,f7218,f592])).
fof(f7321,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f1298,f383,f678,f7218,f592])).
fof(f7301,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f844,f678,f7218,f7218,f592])).
fof(f7291,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f844,f678,f383,f7218,f592])).
fof(f7281,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f707,f678,f7218,f499])).
fof(f707,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f678,f678,f494])).
fof(f7277,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f707,f678,f7218,f496])).
fof(f7273,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f711,f7218,f7218,f495])).
fof(f7271,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f711,f383,f7218,f495])).
fof(f7261,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f711,f7218,f7218,f495])).
fof(f7259,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f716,f383,f7218,f495])).
fof(f7249,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f719,f7218,f481])).
fof(f481,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f295])).
fof(f295,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f294])).
fof(f294,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f719,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f678,f678,f679])).
fof(f679,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f479,f678])).
fof(f479,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f295])).
fof(f7247,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f719,f7218,f480])).
fof(f480,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f295])).
fof(f7245,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f700,f7218,f474])).
fof(f7243,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f383,f700,f7218,f474])).
fof(f7239,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f7218,f700,f7218,f474])).
fof(f7237,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f383,f700,f7218,f474])).
fof(f7233,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f458,f7218,f402])).
fof(f7231,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f700,f7218,f399])).
fof(f399,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f250])).
fof(f7229,plain,(
  $false | $spl32),
  inference(unit_resulting_resolution,[],[f678,f7218])).
fof(f7219,plain,(
  ( ! [X10,X9] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl34),
  inference(cnf_transformation,[],[f7219_D])).
fof(f7219_D,plain,(
  ( ! [X10,X9] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f7220,plain,(
  ( ! [X12,X13,X11] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X13),s(bool,X12))) | p(s(bool,X11)) | s(bool,'T_0') = s(bool,X12)) ) | $spl4),
  inference(subsumption_resolution,[],[f7206,f398])).
fof(f7206,plain,(
  ( ! [X12,X13,X11] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X13),s(bool,X12))) | p(s(bool,X11)) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) ) | $spl4),
  inference(superposition,[],[f6098,f786])).
fof(f7217,plain,(
  ( ! [X10,X8,X9] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9))) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X9)) ) | $spl4),
  inference(subsumption_resolution,[],[f7205,f398])).
fof(f7205,plain,(
  ( ! [X10,X8,X9] : (sP1('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X9))) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl4),
  inference(superposition,[],[f6098,f786])).
fof(f5656,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640,f5642,f5644,f5646,f5651,f5653,f5655])).
fof(f5655,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | sP3(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(subsumption_resolution,[],[f5404,f383])).
fof(f5404,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | sP3(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f524])).
fof(f5653,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X3))))) | s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X7) != s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X5))))) | sP3(X6,X7,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X4,X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f5403,f383])).
fof(f5403,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X3))))) | s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X7) != s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X5))))) | sP3(X6,X7,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X4,X8)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2574])).
fof(f5651,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X2))))) | sP3(X3,X4,X5,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X1)))),X0,X6)) ) | $spl6),
  inference(subsumption_resolution,[],[f5402,f383])).
fof(f5402,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X2))))) | sP3(X3,X4,X5,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X1)))),X0,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2578])).
fof(f5646,plain,(
  ( ! [X4,X5,X1] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5396,f383])).
fof(f5396,plain,(
  ( ! [X4,X5,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f549])).
fof(f5644,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP5(X0,X3,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5393,f383])).
fof(f5393,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP5(X0,X3,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2042])).
fof(f5642,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP5(X3,X0,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X6,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5392,f383])).
fof(f5392,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP5(X3,X0,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X6,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2040])).
fof(f5640,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP5(X3,X2,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1)),X5,X6,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5391,f383])).
fof(f5391,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP5(X3,X2,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1)),X5,X6,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2038])).
fof(f5638,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP5(X1,X0,X4,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5390,f383])).
fof(f5390,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP5(X1,X0,X4,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2036])).
fof(f5636,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X3,X6,X5,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5389,f383])).
fof(f5389,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X3,X6,X5,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1991])).
fof(f5634,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X3,X6,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X5,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5388,f383])).
fof(f5388,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP3(X3,X6,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X5,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1989])).
fof(f5632,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X3,X6,X2,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1)),X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5387,f383])).
fof(f5387,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP3(X3,X6,X2,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1)),X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1987])).
fof(f5630,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X1,X6,X0,X5,X4,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5386,f383])).
fof(f5386,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP3(X1,X6,X0,X5,X4,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1985])).
fof(f5628,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5(X1,X0,X3,X4,X5,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f5384,f383])).
fof(f5384,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP5(X1,X0,X3,X4,X5,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f547])).
fof(f5626,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP3(X1,X5,X0,X4,X3,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f5382,f383])).
fof(f5382,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP3(X1,X5,X0,X4,X3,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f530])).
fof(f5624,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X2))))) | sP7(X3,X4,X5,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X1)))),X0,X6)) ) | $spl6),
  inference(subsumption_resolution,[],[f5379,f383])).
fof(f5379,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X2))))) | sP7(X3,X4,X5,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X1)))),X0,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2798])).
fof(f5622,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X3))))) | s('type.semanticPrimitives.result'(X6,'type.conSem.v'),X7) != s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5))))) | sP7(X6,X7,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X4,X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f5378,f383])).
fof(f5378,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X3))))) | s('type.semanticPrimitives.result'(X6,'type.conSem.v'),X7) != s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5))))) | sP7(X6,X7,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X4,X8)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2794])).
fof(f5620,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | sP7(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(subsumption_resolution,[],[f5377,f383])).
fof(f5377,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | sP7(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f558])).
fof(f5612,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(subsumption_resolution,[],[f5352,f383])).
fof(f5352,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP5(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f542])).
fof(f5610,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP9(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(subsumption_resolution,[],[f5348,f383])).
fof(f5348,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP9(X0,X1,X2,X3,X4,X5)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f576])).
fof(f5608,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5338,f383])).
fof(f5338,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP2(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f529])).
fof(f5606,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP4(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5337,f383])).
fof(f5337,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP4(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f546])).
fof(f5604,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5334,f383])).
fof(f5334,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP6(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f563])).
fof(f5602,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP8(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5333,f383])).
fof(f5333,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP8(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f580])).
fof(f5600,plain,(
  ( ! [X6,X8,X7,X5] : (s(X5,X6) = s(X5,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7)),X8,X5))) ) | $spl6),
  inference(subsumption_resolution,[],[f5331,f383])).
fof(f5331,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,'T_0')) | s(X5,X6) = s(X5,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7)),X8,X5))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1501])).
fof(f5598,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X3) = s(X0,sK26(X3,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f5330,f383])).
fof(f5330,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X3) = s(X0,sK26(X3,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1492])).
fof(f5596,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK26(X2,X1,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f5329,f383])).
fof(f5329,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK26(X2,X1,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f467])).
fof(f5588,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK64(X5,X4,X3,X2,X1,X0))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5317,f383])).
fof(f5317,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK64(X5,X4,X3,X2,X1,X0))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f584])).
fof(f5583,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK65(X5,X4,X3,X2,X1,X0))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5312,f383])).
fof(f5312,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK65(X5,X4,X3,X2,X1,X0))))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f587])).
fof(f5579,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (sP9(X4,X7,X9,X10,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X6)),X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f5307,f383])).
fof(f5307,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | sP9(X4,X7,X9,X10,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X6)),X8)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2193])).
fof(f5577,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP9(X3,X0,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X6,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5306,f383])).
fof(f5306,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP9(X3,X0,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X6,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2190])).
fof(f5575,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP9(X3,X2,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)),X5,X6,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5305,f383])).
fof(f5305,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP9(X3,X2,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)),X5,X6,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2188])).
fof(f5573,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP9(X1,X0,X4,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5304,f383])).
fof(f5304,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP9(X1,X0,X4,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2186])).
fof(f5571,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (sP7(X4,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X6)),X7,X10,X9,X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f5303,f383])).
fof(f5303,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | sP7(X4,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X6)),X7,X10,X9,X8)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2131])).
fof(f5569,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X3,X6,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X5,X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5302,f383])).
fof(f5302,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP7(X3,X6,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X5,X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2128])).
fof(f5567,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X3,X6,X2,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)),X4)) ) | $spl6),
  inference(subsumption_resolution,[],[f5301,f383])).
fof(f5301,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP7(X3,X6,X2,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)),X4)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2126])).
fof(f5565,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X1,X6,X0,X5,X4,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5300,f383])).
fof(f5300,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP7(X1,X6,X0,X5,X4,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X3)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2124])).
fof(f5563,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP9(X1,X0,X3,X4,X5,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f5298,f383])).
fof(f5298,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP9(X1,X0,X3,X4,X5,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f581])).
fof(f5561,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X1,X5,X0,X4,X3,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f5296,f383])).
fof(f5296,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP7(X1,X5,X0,X4,X3,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f564])).
fof(f5551,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (sP7(X15,X16,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X10),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11)),X13,X17) | s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | s('type.semanticPrimitives.result'(X15,'type.conSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X14)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5550,f383])).
fof(f5550,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (~p(s(bool,'T_0')) | sP7(X15,X16,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X10),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11)),X13,X17) | s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | s('type.semanticPrimitives.result'(X15,'type.conSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X14)))))) ) | $spl6),
  inference(forward_demodulation,[],[f5254,f5030])).
fof(f5254,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (sP7(X15,X16,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X10),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11)),X13,X17) | s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X12),s('type.conSem.v',X14)))) | s('type.semanticPrimitives.result'(X15,'type.conSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X14)))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2795])).
fof(f5546,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (sP3(X15,X16,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X10),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11)),X13,X17) | s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X12))))) | s('type.semanticPrimitives.result'(X15,'type.modSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X14)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5545,f383])).
fof(f5545,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (~p(s(bool,'T_0')) | sP3(X15,X16,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X10),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11)),X13,X17) | s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X12))))) | s('type.semanticPrimitives.result'(X15,'type.modSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X14)))))) ) | $spl6),
  inference(forward_demodulation,[],[f5247,f5030])).
fof(f5247,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (sP3(X15,X16,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X10),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11)),X13,X17) | s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X13),s('type.semanticPrimitives.v',X12),s('type.modSem.v',X14)))) | s('type.semanticPrimitives.result'(X15,'type.modSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X14)))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2575])).
fof(f5244,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2303])).
fof(f5243,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X5),s(bool,X6)),X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2301])).
fof(f5541,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (sP9(X11,X14,X16,X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X15)) ) | $spl6),
  inference(subsumption_resolution,[],[f5540,f383])).
fof(f5540,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (~p(s(bool,'T_0')) | sP9(X11,X14,X16,X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X15)) ) | $spl6),
  inference(forward_demodulation,[],[f5238,f5030])).
fof(f5238,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (sP9(X11,X14,X16,X17,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X15) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X14,fun(X11,bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.semanticPrimitives.result'(X14,'type.modSem.v'),X17),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2194])).
fof(f5538,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP9(X10,X7,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X13,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5537,f383])).
fof(f5537,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP9(X10,X7,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X13,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5237,f5030])).
fof(f5237,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP9(X10,X7,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X13,X11) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2191])).
fof(f5535,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP9(X10,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X12,X13,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5534,f383])).
fof(f5534,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP9(X10,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X12,X13,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5236,f5030])).
fof(f5236,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP9(X10,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X12,X13,X11) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X9,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2189])).
fof(f5532,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP9(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5531,f383])).
fof(f5531,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP9(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(forward_demodulation,[],[f5235,f5030])).
fof(f5235,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP9(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X8,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2187])).
fof(f5529,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (sP7(X11,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X14,X17,X16,X15)) ) | $spl6),
  inference(subsumption_resolution,[],[f5528,f383])).
fof(f5528,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (~p(s(bool,'T_0')) | sP7(X11,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X14,X17,X16,X15)) ) | $spl6),
  inference(forward_demodulation,[],[f5232,f5030])).
fof(f5232,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (sP7(X11,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X14,X17,X16,X15) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X14,fun(X11,bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.semanticPrimitives.result'(X14,'type.modSem.v'),X17),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2132])).
fof(f5526,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP7(X10,X13,X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X12,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5525,f383])).
fof(f5525,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP7(X10,X13,X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X12,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5231,f5030])).
fof(f5231,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP7(X10,X13,X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X12,X11) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2129])).
fof(f5523,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP7(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5522,f383])).
fof(f5522,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP7(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5230,f5030])).
fof(f5230,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP7(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X11) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X9,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2127])).
fof(f5520,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP7(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5519,f383])).
fof(f5519,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP7(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(forward_demodulation,[],[f5229,f5030])).
fof(f5229,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP7(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X8,'type.conSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2125])).
fof(f5228,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X5,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2117])).
fof(f5227,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4)),X5,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2116])).
fof(f5226,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X2)),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))),X5,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2115])).
fof(f5224,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X5,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2090])).
fof(f5223,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4)),X5,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2089])).
fof(f5222,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))),X5,X6)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2088])).
fof(f5510,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X7,X10,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5509,f383])).
fof(f5509,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP5(X7,X10,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5221,f5030])).
fof(f5221,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X7,X10,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X11) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X10,fun(X7,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X10,'type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2043])).
fof(f5507,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X10,X7,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X13,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5506,f383])).
fof(f5506,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP5(X10,X7,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X13,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5220,f5030])).
fof(f5220,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X10,X7,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X13,X11) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2041])).
fof(f5504,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X10,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X12,X13,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5503,f383])).
fof(f5503,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP5(X10,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X12,X13,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5219,f5030])).
fof(f5219,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X10,X9,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X12,X13,X11) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X9,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2039])).
fof(f5501,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5500,f383])).
fof(f5500,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP5(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(forward_demodulation,[],[f5218,f5030])).
fof(f5218,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP5(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10))) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X8,'type.modSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f2037])).
fof(f5498,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X10,X13,X12,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5497,f383])).
fof(f5497,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP3(X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X10,X13,X12,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5217,f5030])).
fof(f5217,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X10,X13,X12,X11) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X10,fun(X7,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X10,'type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1992])).
fof(f5495,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X10,X13,X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X12,X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5494,f383])).
fof(f5494,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP3(X10,X13,X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X12,X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5216,f5030])).
fof(f5216,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X10,X13,X7,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X12,X11) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1990])).
fof(f5492,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X11)) ) | $spl6),
  inference(subsumption_resolution,[],[f5491,f383])).
fof(f5491,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP3(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X11)) ) | $spl6),
  inference(forward_demodulation,[],[f5215,f5030])).
fof(f5215,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X11) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X9,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1988])).
fof(f5489,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5488,f383])).
fof(f5488,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | sP3(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10)))) ) | $spl6),
  inference(forward_demodulation,[],[f5214,f5030])).
fof(f5214,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (sP3(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10))) | ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X8,'type.modSem.v'),X13))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1986])).
fof(f5213,plain,(
  ( ! [X0] : (sP1('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1978])).
fof(f5207,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.error_result'(X5),X9) = s('type.semanticPrimitives.error_result'(X5),'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.error_result'(X5),X6),s('type.semanticPrimitives.error_result'(X5),X7))) | s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))) != s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1888])).
fof(f5205,plain,(
  ( ! [X0] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1855])).
fof(f5196,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(X13,X17) = s(X13,'const.bool.COND_3'(s(bool,'T_0'),s(X13,X14),s(X13,X15))) | s('type.semanticPrimitives.result'(X13,X16),'const.semanticPrimitives.Rval_1'(s(X13,X15))) != s('type.semanticPrimitives.result'(X13,X16),'const.semanticPrimitives.Rval_1'(s(X13,X17)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1717])).
fof(f5191,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1686])).
fof(f5187,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,'T_0')))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1503])).
fof(f5472,plain,(
  ( ! [X12,X10,X11,X9] : (s(X9,X11) = s(X9,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X9,X10),s(X9,X11)),X12,X9))) ) | $spl6),
  inference(subsumption_resolution,[],[f5471,f383])).
fof(f5471,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s(X9,X11) = s(X9,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X9,X10),s(X9,X11)),X12,X9))) ) | $spl6),
  inference(forward_demodulation,[],[f5186,f5030])).
fof(f5186,plain,(
  ( ! [X12,X10,X11,X9] : (s(X9,X11) = s(X9,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X9,X10),s(X9,X11)),X12,X9)) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X11))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1502])).
fof(f5469,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,X7) = s(X4,sK26(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))) ) | $spl6),
  inference(subsumption_resolution,[],[f5468,f383])).
fof(f5468,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | s(X4,X7) = s(X4,sK26(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))) ) | $spl6),
  inference(forward_demodulation,[],[f5183,f5030])).
fof(f5183,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,X7) = s(X4,sK26(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4)) | ~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,X7))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1493])).
fof(f5181,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.abort',X7) = s('type.semanticPrimitives.abort','const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.abort',X4),s('type.semanticPrimitives.abort',X5))) | s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))) != s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1445])).
fof(f5178,plain,(
  ( ! [X12,X10,X11,X9] : (s(X9,X12) = s(X9,'const.bool.COND_3'(s(bool,'T_0'),s(X9,X10),s(X9,X11))) | s('type.semanticPrimitives.error_result'(X9),'const.semanticPrimitives.Rraise_1'(s(X9,X11))) != s('type.semanticPrimitives.error_result'(X9),'const.semanticPrimitives.Rraise_1'(s(X9,X12)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1377])).
fof(f5174,plain,(
  ( ! [X0] : (~sP10('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1336])).
fof(f5173,plain,(
  ( ! [X0] : (~sP10('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1335])).
fof(f5172,plain,(
  ( ! [X0] : (~sP11('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1328])).
fof(f5171,plain,(
  ( ! [X0] : (~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'F_0','F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1291])).
fof(f5170,plain,(
  ( ! [X0] : (~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0','F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1290])).
fof(f5169,plain,(
  ( ! [X0] : (~sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,'T_0')),'T_0','F_0')) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1258])).
fof(f5167,plain,(
  ( ! [X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X9),s(bool,X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1153])).
fof(f5165,plain,(
  ( ! [X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1135])).
fof(f5163,plain,(
  ( ! [X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1125])).
fof(f5161,plain,(
  ( ! [X12,X10,X13,X11] : (~sP15(X13,X12,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X10),s(bool,X11))) | ~p(s(bool,X11)) | ~p(s(bool,X12)) | p(s(bool,X13))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1120])).
fof(f5159,plain,(
  ( ! [X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1099])).
fof(f5157,plain,(
  ( ! [X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X9),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1066])).
fof(f5155,plain,(
  ( ! [X0,X1] : (sP12('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1054])).
fof(f5154,plain,(
  ( ! [X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X9),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1026])).
fof(f5152,plain,(
  ( ! [X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1001])).
fof(f5150,plain,(
  ( ! [X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f987])).
fof(f5148,plain,(
  ( ! [X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f973])).
fof(f5146,plain,(
  ( ! [X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X7),s(bool,X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f960])).
fof(f5446,plain,(
  ( ! [X66,X64,X65,X63] : (sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X63),s(bool,X64)),X65,X66) | ~sP16('const.bool.COND_3'(s(bool,'T_0'),s(bool,X63),s(bool,X64)),X65,X66) | ~p(s(bool,X64))) ) | $spl6),
  inference(forward_demodulation,[],[f5144,f5030])).
fof(f5144,plain,(
  ( ! [X66,X64,X65,X63] : (~sP16('const.bool.COND_3'(s(bool,'T_0'),s(bool,X63),s(bool,X64)),X65,X66) | ~p(s(bool,X64)) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X63),s(bool,X64)),X65,X66)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f944])).
fof(f5444,plain,(
  ( ! [X61,X59,X62,X60] : (sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X59),s(bool,X60)),X61,X62) | ~sP18('const.bool.COND_3'(s(bool,'T_0'),s(bool,X59),s(bool,X60)),X61,X62) | ~p(s(bool,X60))) ) | $spl6),
  inference(forward_demodulation,[],[f5143,f5030])).
fof(f5143,plain,(
  ( ! [X61,X59,X62,X60] : (~sP18('const.bool.COND_3'(s(bool,'T_0'),s(bool,X59),s(bool,X60)),X61,X62) | ~p(s(bool,X60)) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X59),s(bool,X60)),X61,X62)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f943])).
fof(f5142,plain,(
  ( ! [X57,X58,X56,X55] : (sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X55),s(bool,X56)),X57,X58) | ~p(s(bool,X56)) | ~p(s(bool,X57))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f942])).
fof(f5141,plain,(
  ( ! [X54,X52,X53,X51] : (sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X54,X53) | ~p(s(bool,X52)) | p(s(bool,X53))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f941])).
fof(f5140,plain,(
  ( ! [X47,X50,X48,X49] : (sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X47),s(bool,X48)),X49,X50) | ~p(s(bool,X48)) | ~p(s(bool,X49))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f940])).
fof(f5139,plain,(
  ( ! [X45,X43,X46,X44] : (sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X43),s(bool,X44)),X46,X45) | ~p(s(bool,X44)) | ~p(s(bool,X45))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f939])).
fof(f5138,plain,(
  ( ! [X41,X42,X40] : (sP1(X42,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X40),s(bool,X41))) | ~p(s(bool,X41)) | p(s(bool,X42))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f938])).
fof(f5137,plain,(
  ( ! [X39,X37,X38] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X37),s(bool,X38)),X39) | ~p(s(bool,X38)) | p(s(bool,X39))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f937])).
fof(f5136,plain,(
  ( ! [X35,X36,X34] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X34),s(bool,X35)),X36) | ~p(s(bool,X35))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f936])).
fof(f5135,plain,(
  ( ! [X33,X31,X32] : (sP0(X33,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X31),s(bool,X32))) | ~p(s(bool,X32))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f935])).
fof(f5133,plain,(
  ( ! [X0,X1] : (sP13('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f910])).
fof(f5132,plain,(
  ( ! [X0,X1] : (~sP13('F_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f909])).
fof(f5131,plain,(
  ( ! [X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f908])).
fof(f5130,plain,(
  ( ! [X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f907])).
fof(f5127,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f459])).
fof(f5428,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f5125,f5030])).
fof(f5125,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f402])).
fof(f3820,plain,(
  ( ! [X808,X806,X809,X807] : (s(X808,f(s(bool,'T_0'))) != s(X808,g(s(bool,'T_0'))) | s(fun(bool,X808),X806) = s(fun(bool,X808),X807) | s(bool,X809) = s(bool,sK35(X806,X807,X808,bool)) | s(bool,'T_0') = s(bool,X809)) )),
  inference(superposition,[],[f508,f786])).
fof(f3817,plain,(
  ( ! [X798,X796,X799,X797] : (s(bool,'T_0') != s(bool,f(s(X796,sK35(X797,X798,bool,X796)))) | s(fun(X796,bool),X797) = s(fun(X796,bool),X798) | s(bool,X799) = s(bool,g(s(X796,sK35(X797,X798,bool,X796)))) | s(bool,'T_0') = s(bool,X799)) )),
  inference(superposition,[],[f508,f786])).
fof(f3809,plain,(
  ( ! [X753,X755,X756,X754] : (s(bool,'T_0') != s(bool,X754) | s('type.semanticPrimitives.result'(bool,X755),'const.semanticPrimitives.Rval_1'(s(bool,X753))) = s('type.semanticPrimitives.result'(bool,X755),'const.semanticPrimitives.Rval_1'(s(bool,X754))) | s(bool,X753) = s(bool,X756) | s(bool,'T_0') = s(bool,X756)) )),
  inference(superposition,[],[f510,f786])).
fof(f3807,plain,(
  ( ! [X745,X747,X748,X746] : (s('type.semanticPrimitives.result'(bool,X746),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X746),'const.semanticPrimitives.Rval_1'(s(bool,X747))) | s(bool,X745) = s(bool,X747) | s(bool,X745) = s(bool,X748) | s(bool,'T_0') = s(bool,X748)) )),
  inference(superposition,[],[f509,f786])).
fof(f3805,plain,(
  ( ! [X741,X739,X740] : (~p(s(bool,happ(s(fun(bool,bool),X740),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X740),s(bool,sK26(X739,X740,bool))))) | s(bool,X739) = s(bool,X741) | s(bool,'T_0') = s(bool,X741)) )),
  inference(superposition,[],[f468,f786])).
fof(f3804,plain,(
  ( ! [X736,X738,X737] : (~p(s(bool,happ(s(fun(bool,bool),X737),s(bool,'T_0')))) | s(bool,X736) = s(bool,sK26(X736,X737,bool)) | s(bool,X736) = s(bool,X738) | s(bool,'T_0') = s(bool,X738)) )),
  inference(superposition,[],[f467,f786])).
fof(f3803,plain,(
  ( ! [X732,X734,X733,X735] : (~p(s(bool,happ(s(fun(bool,bool),X733),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X733),s(bool,X734)))) | s(bool,X732) != s(bool,X734) | s(bool,X732) = s(bool,X735) | s(bool,'T_0') = s(bool,X735)) )),
  inference(superposition,[],[f466,f786])).
fof(f3801,plain,(
  ( ! [X728,X726,X727] : (s(bool,'T_0') != s(bool,X727) | s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X726))) = s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X727))) | s(bool,X726) = s(bool,X728) | s(bool,'T_0') = s(bool,X728)) )),
  inference(superposition,[],[f463,f786])).
fof(f3799,plain,(
  ( ! [X720,X722,X721] : (s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X721))) | s(bool,X720) = s(bool,X721) | s(bool,X720) = s(bool,X722) | s(bool,'T_0') = s(bool,X722)) )),
  inference(superposition,[],[f462,f786])).
fof(f5094,plain,(
  ( ! [X707,X703,X702,X706,X704,X701,X705] : (s('type.semanticPrimitives.result'(X702,'type.modSem.v'),X706) = s('type.semanticPrimitives.result'(X702,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X705))))) | s(bool,X707) = s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X701,fun(X702,bool))),X703),s('type.list.list'('type.option.option'('type.modSem.v')),X704),s('type.semanticPrimitives.result'(X701,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X705))))),s('type.semanticPrimitives.result'(X702,'type.modSem.v'),X706))) | s(bool,'T_0') = s(bool,X707)) )),
  inference(subsumption_resolution,[],[f3794,f383])).
fof(f3794,plain,(
  ( ! [X707,X703,X702,X706,X704,X701,X705] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X702,'type.modSem.v'),X706) = s('type.semanticPrimitives.result'(X702,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X705))))) | s(bool,X707) = s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X701,fun(X702,bool))),X703),s('type.list.list'('type.option.option'('type.modSem.v')),X704),s('type.semanticPrimitives.result'(X701,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X705))))),s('type.semanticPrimitives.result'(X702,'type.modSem.v'),X706))) | s(bool,'T_0') = s(bool,X707)) )),
  inference(superposition,[],[f549,f786])).
fof(f5093,plain,(
  ( ! [X697,X699,X695,X700,X696,X698,X694] : (sP3(X695,X699,X694,X698,X697,X696) | s(bool,X700) = s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X694,fun(X695,bool))),X696),s('type.list.list'('type.option.option'('type.modSem.v')),X697),s('type.semanticPrimitives.result'(X694,'type.semanticPrimitives.v'),X698),s('type.semanticPrimitives.result'(X695,'type.modSem.v'),X699))) | s(bool,'T_0') = s(bool,X700)) )),
  inference(subsumption_resolution,[],[f3793,f383])).
fof(f3793,plain,(
  ( ! [X697,X699,X695,X700,X696,X698,X694] : (~p(s(bool,'T_0')) | sP3(X695,X699,X694,X698,X697,X696) | s(bool,X700) = s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X694,fun(X695,bool))),X696),s('type.list.list'('type.option.option'('type.modSem.v')),X697),s('type.semanticPrimitives.result'(X694,'type.semanticPrimitives.v'),X698),s('type.semanticPrimitives.result'(X695,'type.modSem.v'),X699))) | s(bool,'T_0') = s(bool,X700)) )),
  inference(superposition,[],[f530,f786])).
fof(f5092,plain,(
  ( ! [X693,X689,X691,X687,X692,X688,X690] : (sP5(X688,X687,X690,X691,X692,X689) | s(bool,X693) = s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X687,fun(X688,bool))),X689),s('type.list.list'('type.option.option'('type.modSem.v')),X690),s('type.semanticPrimitives.result'(X687,'type.semanticPrimitives.v'),X691),s('type.semanticPrimitives.result'(X688,'type.modSem.v'),X692))) | s(bool,'T_0') = s(bool,X693)) )),
  inference(subsumption_resolution,[],[f3792,f383])).
fof(f3792,plain,(
  ( ! [X693,X689,X691,X687,X692,X688,X690] : (~p(s(bool,'T_0')) | sP5(X688,X687,X690,X691,X692,X689) | s(bool,X693) = s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X687,fun(X688,bool))),X689),s('type.list.list'('type.option.option'('type.modSem.v')),X690),s('type.semanticPrimitives.result'(X687,'type.semanticPrimitives.v'),X691),s('type.semanticPrimitives.result'(X688,'type.modSem.v'),X692))) | s(bool,'T_0') = s(bool,X693)) )),
  inference(superposition,[],[f547,f786])).
fof(f5090,plain,(
  ( ! [X681,X683,X684,X682] : (s(X681,X683) = s(X681,sK26(X683,X682,X681)) | s(bool,X684) = s(bool,happ(s(fun(X681,bool),X682),s(X681,X683))) | s(bool,'T_0') = s(bool,X684)) )),
  inference(subsumption_resolution,[],[f3790,f383])).
fof(f3790,plain,(
  ( ! [X681,X683,X684,X682] : (~p(s(bool,'T_0')) | s(X681,X683) = s(X681,sK26(X683,X682,X681)) | s(bool,X684) = s(bool,happ(s(fun(X681,bool),X682),s(X681,X683))) | s(bool,'T_0') = s(bool,X684)) )),
  inference(superposition,[],[f467,f786])).
fof(f5089,plain,(
  ( ! [X677,X679,X680,X678] : (p(s(bool,happ(s(fun(X677,bool),X678),s(X677,sK26(X679,X678,X677))))) | s(bool,X680) = s(bool,happ(s(fun(X677,bool),X678),s(X677,X679))) | s(bool,'T_0') = s(bool,X680)) )),
  inference(subsumption_resolution,[],[f3789,f383])).
fof(f3789,plain,(
  ( ! [X677,X679,X680,X678] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X677,bool),X678),s(X677,sK26(X679,X678,X677))))) | s(bool,X680) = s(bool,happ(s(fun(X677,bool),X678),s(X677,X679))) | s(bool,'T_0') = s(bool,X680)) )),
  inference(superposition,[],[f468,f786])).
fof(f5088,plain,(
  ( ! [X673,X675,X676,X672,X674] : (p(s(bool,happ(s(fun(X672,bool),X673),s(X672,X675)))) | s(X672,X674) != s(X672,X675) | s(bool,X676) = s(bool,happ(s(fun(X672,bool),X673),s(X672,X674))) | s(bool,'T_0') = s(bool,X676)) )),
  inference(subsumption_resolution,[],[f3788,f383])).
fof(f3788,plain,(
  ( ! [X673,X675,X676,X672,X674] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X672,bool),X673),s(X672,X675)))) | s(X672,X674) != s(X672,X675) | s(bool,X676) = s(bool,happ(s(fun(X672,bool),X673),s(X672,X674))) | s(bool,'T_0') = s(bool,X676)) )),
  inference(superposition,[],[f466,f786])).
fof(f5087,plain,(
  ( ! [X666,X668,X670,X667,X669,X671,X665] : (sP7(X666,X670,X665,X669,X668,X667) | s(bool,X671) = s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X665,fun(X666,bool))),X667),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X668),s('type.semanticPrimitives.result'(X665,'type.modSem.v'),X669),s('type.semanticPrimitives.result'(X666,'type.conSem.v'),X670))) | s(bool,'T_0') = s(bool,X671)) )),
  inference(subsumption_resolution,[],[f3787,f383])).
fof(f3787,plain,(
  ( ! [X666,X668,X670,X667,X669,X671,X665] : (~p(s(bool,'T_0')) | sP7(X666,X670,X665,X669,X668,X667) | s(bool,X671) = s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X665,fun(X666,bool))),X667),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X668),s('type.semanticPrimitives.result'(X665,'type.modSem.v'),X669),s('type.semanticPrimitives.result'(X666,'type.conSem.v'),X670))) | s(bool,'T_0') = s(bool,X671)) )),
  inference(superposition,[],[f564,f786])).
fof(f5086,plain,(
  ( ! [X660,X662,X664,X658,X661,X663,X659] : (sP9(X659,X658,X661,X662,X663,X660) | s(bool,X664) = s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X658,fun(X659,bool))),X660),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X661),s('type.semanticPrimitives.result'(X658,'type.modSem.v'),X662),s('type.semanticPrimitives.result'(X659,'type.conSem.v'),X663))) | s(bool,'T_0') = s(bool,X664)) )),
  inference(subsumption_resolution,[],[f3786,f383])).
fof(f3786,plain,(
  ( ! [X660,X662,X664,X658,X661,X663,X659] : (~p(s(bool,'T_0')) | sP9(X659,X658,X661,X662,X663,X660) | s(bool,X664) = s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X658,fun(X659,bool))),X660),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X661),s('type.semanticPrimitives.result'(X658,'type.modSem.v'),X662),s('type.semanticPrimitives.result'(X659,'type.conSem.v'),X663))) | s(bool,'T_0') = s(bool,X664)) )),
  inference(superposition,[],[f581,f786])).
fof(f3665,plain,(
  ( ! [X321,X323,X324,X322] : (sP12('T_0','const.bool.COND_3'(s(bool,X322),s(bool,X323),s(bool,'T_0')),X321) | s(bool,'T_0') = s(bool,X322) | s(bool,X321) = s(bool,X324) | s(bool,'T_0') = s(bool,X324)) )),
  inference(superposition,[],[f1156,f786])).
fof(f3660,plain,(
  ( ! [X302,X304,X303,X305] : (sP12('T_0',X302,'const.bool.COND_3'(s(bool,X303),s(bool,X304),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X303) | s(bool,X302) = s(bool,X305) | s(bool,'T_0') = s(bool,X305)) )),
  inference(superposition,[],[f1144,f786])).
fof(f3650,plain,(
  ( ! [X269,X271,X270,X272] : (sP13('T_0',X269,'const.bool.COND_3'(s(bool,X270),s(bool,X271),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X270) | s(bool,X269) = s(bool,X272) | s(bool,'T_0') = s(bool,X272)) )),
  inference(superposition,[],[f1102,f786])).
fof(f3648,plain,(
  ( ! [X263,X262,X264] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X263),s(bool,'T_0')),X262) | s(bool,X262) = s(bool,X264) | s(bool,'T_0') = s(bool,X264)) )),
  inference(superposition,[],[f1099,f786])).
fof(f3642,plain,(
  ( ! [X243,X244,X242,X245] : (~sP13('F_0',X242,'const.bool.COND_3'(s(bool,X243),s(bool,X244),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X243) | s(bool,X242) = s(bool,X245) | s(bool,'T_0') = s(bool,X245)) )),
  inference(superposition,[],[f1086,f786])).
fof(f3637,plain,(
  ( ! [X227,X225,X228,X226] : (sP13('T_0','const.bool.COND_3'(s(bool,X226),s(bool,X227),s(bool,'T_0')),X225) | s(bool,'T_0') = s(bool,X226) | s(bool,X225) = s(bool,X228) | s(bool,'T_0') = s(bool,X228)) )),
  inference(superposition,[],[f1057,f786])).
fof(f3633,plain,(
  ( ! [X212,X213,X211] : (sP12('T_0',X211,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X212),s(bool,'T_0'))) | s(bool,X211) = s(bool,X213) | s(bool,'T_0') = s(bool,X213)) )),
  inference(superposition,[],[f1054,f786])).
fof(f3629,plain,(
  ( ! [X198,X200,X199,X201] : (~sP13('F_0','const.bool.COND_3'(s(bool,X199),s(bool,X200),s(bool,'T_0')),X198) | s(bool,'T_0') = s(bool,X199) | s(bool,X198) = s(bool,X201) | s(bool,'T_0') = s(bool,X201)) )),
  inference(superposition,[],[f1017,f786])).
fof(f3622,plain,(
  ( ! [X177,X175,X176] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X176)),X175) | s(bool,X175) = s(bool,X177) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f995,f786])).
fof(f3614,plain,(
  ( ! [X152,X151,X153] : (sP12('T_0',X151,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X152))) | s(bool,X151) = s(bool,X153) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f967,f786])).
fof(f5085,plain,(
  ( ! [X140,X138,X141,X139] : (p(s(bool,X139)) | sP1(X139,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X140),s(bool,X138))) | s(bool,X138) = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) )),
  inference(subsumption_resolution,[],[f3610,f383])).
fof(f3610,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'T_0')) | p(s(bool,X139)) | sP1(X139,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X140),s(bool,X138))) | s(bool,X138) = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) )),
  inference(superposition,[],[f938,f786])).
fof(f5084,plain,(
  ( ! [X134,X136,X135,X137] : (p(s(bool,X135)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X136),s(bool,X134)),X135) | s(bool,X134) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) )),
  inference(subsumption_resolution,[],[f3609,f383])).
fof(f3609,plain,(
  ( ! [X134,X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,X135)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X136),s(bool,X134)),X135) | s(bool,X134) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f937,f786])).
fof(f3605,plain,(
  ( ! [X121,X122,X120] : (sP13('T_0',X120,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X121),s(bool,'T_0'))) | s(bool,X120) = s(bool,X122) | s(bool,'T_0') = s(bool,X122)) )),
  inference(superposition,[],[f910,f786])).
fof(f3603,plain,(
  ( ! [X116,X114,X115] : (~sP13('F_0',X114,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X115),s(bool,'T_0'))) | s(bool,X114) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f909,f786])).
fof(f3602,plain,(
  ( ! [X111,X112,X113] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X112),s(bool,'T_0')),X111) | s(bool,X111) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f908,f786])).
fof(f3600,plain,(
  ( ! [X107,X105,X106] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X106),s(bool,'T_0')),X105) | s(bool,X105) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f907,f786])).
fof(f5083,plain,(
  ( ! [X101,X99,X100,X98] : (p(s(bool,X99)) | sP1(X99,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X98),s(bool,X100))) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(subsumption_resolution,[],[f3598,f383])).
fof(f3598,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | sP1(X99,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X98),s(bool,X100))) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f888,f786])).
fof(f5082,plain,(
  ( ! [X94,X97,X95,X96] : (p(s(bool,X95)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X94),s(bool,X96)),X95) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f3597,f383])).
fof(f3597,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,X95)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,X94),s(bool,X96)),X95) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f887,f786])).
fof(f5081,plain,(
  ( ! [X92,X90,X93,X91] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X90),s(bool,X91)),X92) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f3596,f383])).
fof(f3596,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,'T_0')) | sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X90),s(bool,X91)),X92) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f886,f786])).
fof(f5080,plain,(
  ( ! [X88,X87,X89,X86] : (sP0(X87,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X86),s(bool,X88))) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f3595,f383])).
fof(f3595,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,'T_0')) | sP0(X87,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X86),s(bool,X88))) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f885,f786])).
fof(f3593,plain,(
  ( ! [X80,X81,X82] : (sP13('T_0',X80,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X81))) | s(bool,X80) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f866,f786])).
fof(f3591,plain,(
  ( ! [X76,X74,X75] : (~sP13('F_0',X74,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X75))) | s(bool,X74) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f865,f786])).
fof(f3589,plain,(
  ( ! [X70,X68,X69] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X69)),X68) | s(bool,X68) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f864,f786])).
fof(f3587,plain,(
  ( ! [X64,X62,X63] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X63)),X62) | s(bool,X62) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f863,f786])).
fof(f5079,plain,(
  ( ! [X57,X58,X56,X55] : (~sP16(X55,X56,X57) | sP17(X55,X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f3585,f383])).
fof(f3585,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~sP16(X55,X56,X57) | sP17(X55,X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f664,f786])).
fof(f5078,plain,(
  ( ! [X54,X52,X53,X51] : (~sP18(X51,X52,X53) | sP19(X51,X52,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f3584,f383])).
fof(f3584,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | ~sP18(X51,X52,X53) | sP19(X51,X52,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f663,f786])).
fof(f5077,plain,(
  ( ! [X47,X50,X48,X49] : (sP19(X47,X48,X49) | ~p(s(bool,X48)) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f3583,f383])).
fof(f3583,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X48)) | sP19(X47,X48,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f659,f786])).
fof(f5076,plain,(
  ( ! [X45,X43,X46,X44] : (sP19(X43,X45,X44) | p(s(bool,X44)) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f3582,f383])).
fof(f3582,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | p(s(bool,X44)) | sP19(X43,X45,X44) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f658,f786])).
fof(f5075,plain,(
  ( ! [X39,X41,X42,X40] : (sP17(X39,X40,X41) | ~p(s(bool,X40)) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f3581,f383])).
fof(f3581,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X40)) | sP17(X39,X40,X41) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f642,f786])).
fof(f5074,plain,(
  ( ! [X37,X35,X38,X36] : (sP17(X35,X37,X36) | ~p(s(bool,X36)) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f3580,f383])).
fof(f3580,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X36)) | sP17(X35,X37,X36) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f641,f786])).
fof(f5073,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | ~sP15(X33,X32,X31) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f3579,f383])).
fof(f3579,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~sP15(X33,X32,X31) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f628,f786])).
fof(f5070,plain,(
  ( ! [X24,X23,X22] : (sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f3576,f383])).
fof(f3576,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f481,f786])).
fof(f5069,plain,(
  ( ! [X21,X19,X20] : (sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f3575,f383])).
fof(f3575,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f480,f786])).
fof(f5068,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f3574,f383])).
fof(f3574,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f474,f786])).
fof(f5067,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3570,f383])).
fof(f3570,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f402,f786])).
fof(f3560,plain,(
  ( ! [X629,X627,X628,X626] : (s(bool,X626) != s(bool,X627) | s('type.semanticPrimitives.result'(bool,X628),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X628),'const.semanticPrimitives.Rval_1'(s(bool,X627))) | s(bool,X626) = s(bool,X629) | s(bool,'T_0') = s(bool,X629)) )),
  inference(superposition,[],[f510,f786])).
fof(f3556,plain,(
  ( ! [X613,X612,X614] : (~p(s(bool,happ(s(fun(bool,bool),X613),s(bool,X612)))) | p(s(bool,happ(s(fun(bool,bool),X613),s(bool,sK26('T_0',X613,bool))))) | s(bool,X612) = s(bool,X614) | s(bool,'T_0') = s(bool,X614)) )),
  inference(superposition,[],[f468,f786])).
fof(f3555,plain,(
  ( ! [X609,X611,X610] : (~p(s(bool,happ(s(fun(bool,bool),X610),s(bool,X609)))) | s(bool,'T_0') = s(bool,sK26('T_0',X610,bool)) | s(bool,X609) = s(bool,X611) | s(bool,'T_0') = s(bool,X611)) )),
  inference(superposition,[],[f467,f786])).
fof(f3554,plain,(
  ( ! [X606,X605,X607,X608] : (~p(s(bool,happ(s(fun(bool,bool),X606),s(bool,X605)))) | p(s(bool,happ(s(fun(bool,bool),X606),s(bool,X607)))) | s(bool,'T_0') != s(bool,X607) | s(bool,X605) = s(bool,X608) | s(bool,'T_0') = s(bool,X608)) )),
  inference(superposition,[],[f466,f786])).
fof(f3552,plain,(
  ( ! [X600,X601,X599] : (s(bool,X599) != s(bool,X600) | s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X600))) | s(bool,X599) = s(bool,X601) | s(bool,'T_0') = s(bool,X601)) )),
  inference(superposition,[],[f463,f786])).
fof(f3498,plain,(
  ( ! [X455,X457,X454,X456] : (sP12('T_0','T_0','const.bool.COND_3'(s(bool,X455),s(bool,X456),s(bool,X454))) | s(bool,'T_0') = s(bool,X455) | s(bool,X454) = s(bool,X457) | s(bool,'T_0') = s(bool,X457)) )),
  inference(superposition,[],[f1144,f786])).
fof(f3488,plain,(
  ( ! [X424,X426,X425,X427] : (sP13('T_0','T_0','const.bool.COND_3'(s(bool,X425),s(bool,X426),s(bool,X424))) | s(bool,'T_0') = s(bool,X425) | s(bool,X424) = s(bool,X427) | s(bool,'T_0') = s(bool,X427)) )),
  inference(superposition,[],[f1102,f786])).
fof(f3480,plain,(
  ( ! [X399,X401,X400,X402] : (~sP13('F_0','T_0','const.bool.COND_3'(s(bool,X400),s(bool,X401),s(bool,X399))) | s(bool,'T_0') = s(bool,X400) | s(bool,X399) = s(bool,X402) | s(bool,'T_0') = s(bool,X402)) )),
  inference(superposition,[],[f1086,f786])).
fof(f3475,plain,(
  ( ! [X385,X387,X384,X386] : (sP13('T_0','const.bool.COND_3'(s(bool,X385),s(bool,X386),s(bool,X384)),'T_0') | s(bool,'T_0') = s(bool,X385) | s(bool,X384) = s(bool,X387) | s(bool,'T_0') = s(bool,X387)) )),
  inference(superposition,[],[f1057,f786])).
fof(f3471,plain,(
  ( ! [X372,X373,X371] : (sP12('T_0','T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X372),s(bool,X371))) | s(bool,X371) = s(bool,X373) | s(bool,'T_0') = s(bool,X373)) )),
  inference(superposition,[],[f1054,f786])).
fof(f3467,plain,(
  ( ! [X360,X362,X359,X361] : (~sP13('F_0','const.bool.COND_3'(s(bool,X360),s(bool,X361),s(bool,X359)),'T_0') | s(bool,'T_0') = s(bool,X360) | s(bool,X359) = s(bool,X362) | s(bool,'T_0') = s(bool,X362)) )),
  inference(superposition,[],[f1017,f786])).
fof(f3452,plain,(
  ( ! [X316,X318,X317] : (sP12('T_0','T_0','const.bool.COND_3'(s(bool,X316),s(bool,X316),s(bool,X317))) | s(bool,X316) = s(bool,X318) | s(bool,'T_0') = s(bool,X318)) )),
  inference(superposition,[],[f967,f786])).
fof(f3443,plain,(
  ( ! [X288,X287,X286] : (sP13('T_0','T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X287),s(bool,X286))) | s(bool,X286) = s(bool,X288) | s(bool,'T_0') = s(bool,X288)) )),
  inference(superposition,[],[f910,f786])).
fof(f3441,plain,(
  ( ! [X280,X282,X281] : (~sP13('F_0','T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X281),s(bool,X280))) | s(bool,X280) = s(bool,X282) | s(bool,'T_0') = s(bool,X282)) )),
  inference(superposition,[],[f909,f786])).
fof(f3440,plain,(
  ( ! [X277,X279,X278] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X278),s(bool,X277)),'T_0') | s(bool,X277) = s(bool,X279) | s(bool,'T_0') = s(bool,X279)) )),
  inference(superposition,[],[f908,f786])).
fof(f3438,plain,(
  ( ! [X271,X273,X272] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X272),s(bool,X271)),'T_0') | s(bool,X271) = s(bool,X273) | s(bool,'T_0') = s(bool,X273)) )),
  inference(superposition,[],[f907,f786])).
fof(f3431,plain,(
  ( ! [X246,X248,X247] : (sP13('T_0','T_0','const.bool.COND_3'(s(bool,X246),s(bool,X246),s(bool,X247))) | s(bool,X246) = s(bool,X248) | s(bool,'T_0') = s(bool,X248)) )),
  inference(superposition,[],[f866,f786])).
fof(f3429,plain,(
  ( ! [X241,X242,X240] : (~sP13('F_0','T_0','const.bool.COND_3'(s(bool,X240),s(bool,X240),s(bool,X241))) | s(bool,X240) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f865,f786])).
fof(f3427,plain,(
  ( ! [X235,X236,X234] : (sP13('T_0','const.bool.COND_3'(s(bool,X234),s(bool,X234),s(bool,X235)),'T_0') | s(bool,X234) = s(bool,X236) | s(bool,'T_0') = s(bool,X236)) )),
  inference(superposition,[],[f864,f786])).
fof(f3425,plain,(
  ( ! [X229,X230,X228] : (~sP13('F_0','const.bool.COND_3'(s(bool,X228),s(bool,X228),s(bool,X229)),'T_0') | s(bool,X228) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f863,f786])).
fof(f3404,plain,(
  ( ! [X158,X161,X159,X160] : (sP1('F_0','const.bool.COND_3'(s(bool,X159),s(bool,X160),s(bool,X158))) | s(bool,'T_0') = s(bool,X159) | s(bool,X158) = s(bool,X161) | s(bool,'T_0') = s(bool,X161)) )),
  inference(superposition,[],[f1995,f786])).
fof(f3403,plain,(
  ( ! [X156,X157,X155] : (sP1('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X156),s(bool,X155))) | s(bool,X155) = s(bool,X157) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f1978,f786])).
fof(f3402,plain,(
  ( ! [X154,X152,X151,X153] : (sP1('const.bool.COND_3'(s(bool,X152),s(bool,X153),s(bool,X151)),'F_0') | s(bool,'T_0') = s(bool,X152) | s(bool,X151) = s(bool,X154) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f1870,f786])).
fof(f3401,plain,(
  ( ! [X149,X150,X148] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X149),s(bool,X148)),'F_0') | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f1855,f786])).
fof(f3400,plain,(
  ( ! [X146,X147,X145] : (sP1('F_0','const.bool.COND_3'(s(bool,X145),s(bool,X145),s(bool,X146))) | s(bool,X145) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f1836,f786])).
fof(f3399,plain,(
  ( ! [X144,X142,X143] : (sP1('const.bool.COND_3'(s(bool,X142),s(bool,X142),s(bool,X143)),'F_0') | s(bool,X142) = s(bool,X144) | s(bool,'T_0') = s(bool,X144)) )),
  inference(superposition,[],[f1817,f786])).
fof(f3398,plain,(
  ( ! [X138,X136,X135,X139,X137] : (sP0('const.bool.COND_3'(s(bool,X136),s(bool,X137),s(bool,X135)),X138) | s(bool,'T_0') = s(bool,X136) | s(bool,X135) = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) )),
  inference(superposition,[],[f1694,f786])).
fof(f3397,plain,(
  ( ! [X134,X132,X133,X131] : (sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X132),s(bool,X131)),X133) | s(bool,X131) = s(bool,X134) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f1686,f786])).
fof(f3396,plain,(
  ( ! [X127,X130,X128,X126,X129] : (sP0(X127,'const.bool.COND_3'(s(bool,X128),s(bool,X129),s(bool,X126))) | s(bool,'T_0') = s(bool,X128) | s(bool,X126) = s(bool,X130) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f1511,f786])).
fof(f3395,plain,(
  ( ! [X125,X123,X124,X122] : (sP0(X123,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X124),s(bool,X122))) | s(bool,X122) = s(bool,X125) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f1503,f786])).
fof(f3394,plain,(
  ( ! [X121,X118,X120,X119] : (sP0('const.bool.COND_3'(s(bool,X118),s(bool,X118),s(bool,X119)),X120) | s(bool,X118) = s(bool,X121) | s(bool,'T_0') = s(bool,X121)) )),
  inference(superposition,[],[f1479,f786])).
fof(f3393,plain,(
  ( ! [X116,X114,X117,X115] : (~sP10('F_0','const.bool.COND_3'(s(bool,X114),s(bool,X115),s(bool,X116)),'F_0') | s(bool,'T_0') = s(bool,X115) | s(bool,X114) = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f1437,f786])).
fof(f3392,plain,(
  ( ! [X111,X112,X110,X113] : (~sP11('T_0','const.bool.COND_3'(s(bool,X111),s(bool,X112),s(bool,X110)),'F_0') | s(bool,'T_0') = s(bool,X111) | s(bool,X110) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f1426,f786])).
fof(f3391,plain,(
  ( ! [X107,X105,X108,X106] : (~sP10('const.bool.COND_3'(s(bool,X105),s(bool,X106),s(bool,X107)),'F_0','F_0') | s(bool,'T_0') = s(bool,X106) | s(bool,X105) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f1347,f786])).
fof(f3390,plain,(
  ( ! [X103,X102,X104] : (~sP10('F_0','const.bool.COND_3'(s(bool,X102),s(bool,'F_0'),s(bool,X103)),'F_0') | s(bool,X102) = s(bool,X104) | s(bool,'T_0') = s(bool,X104)) )),
  inference(superposition,[],[f1335,f786])).
fof(f3389,plain,(
  ( ! [X101,X99,X100] : (~sP11('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X100),s(bool,X99)),'F_0') | s(bool,X99) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f1328,f786])).
fof(f3388,plain,(
  ( ! [X97,X98,X96] : (~sP11('T_0','const.bool.COND_3'(s(bool,X96),s(bool,X96),s(bool,X97)),'F_0') | s(bool,X96) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f1327,f786])).
fof(f3387,plain,(
  ( ! [X94,X92,X95,X93] : (~sP11('const.bool.COND_3'(s(bool,X93),s(bool,X94),s(bool,X92)),'T_0','F_0') | s(bool,'T_0') = s(bool,X93) | s(bool,X92) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f1310,f786])).
fof(f3386,plain,(
  ( ! [X90,X91,X89] : (~sP10('const.bool.COND_3'(s(bool,X89),s(bool,'F_0'),s(bool,X90)),'F_0','F_0') | s(bool,X89) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f1290,f786])).
fof(f3385,plain,(
  ( ! [X88,X87,X86] : (~sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X87),s(bool,X86)),'T_0','F_0') | s(bool,X86) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f1258,f786])).
fof(f3384,plain,(
  ( ! [X85,X83,X84] : (~sP11('const.bool.COND_3'(s(bool,X83),s(bool,X83),s(bool,X84)),'T_0','F_0') | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f1257,f786])).
fof(f3383,plain,(
  ( ! [X80,X81,X79,X82] : (sP0(X80,'const.bool.COND_3'(s(bool,X79),s(bool,X79),s(bool,X81))) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f1229,f786])).
fof(f3382,plain,(
  ( ! [X78,X76,X77,X75] : (sP12('T_0','const.bool.COND_3'(s(bool,X75),s(bool,'F_0'),s(bool,X76)),X77) | s(bool,'T_0') = s(bool,X77) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f1133,f786])).
fof(f3381,plain,(
  ( ! [X74,X72,X71,X73] : (sP12('T_0','const.bool.COND_3'(s(bool,X71),s(bool,X72),s(bool,X73)),'F_0') | s(bool,'T_0') = s(bool,X72) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1132,f786])).
fof(f3380,plain,(
  ( ! [X70,X68,X69,X67] : (sP12('T_0',X68,'const.bool.COND_3'(s(bool,X67),s(bool,'F_0'),s(bool,X69))) | s(bool,'T_0') = s(bool,X68) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f1123,f786])).
fof(f3379,plain,(
  ( ! [X66,X64,X65,X63] : (sP13('T_0',X64,'const.bool.COND_3'(s(bool,X63),s(bool,'F_0'),s(bool,X65))) | s(bool,'T_0') = s(bool,X64) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f999,f786])).
fof(f3378,plain,(
  ( ! [X61,X59,X62,X60] : (sP13('T_0','F_0','const.bool.COND_3'(s(bool,X59),s(bool,X60),s(bool,X61))) | s(bool,'T_0') = s(bool,X60) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f998,f786])).
fof(f3377,plain,(
  ( ! [X57,X58,X56,X55] : (sP12('T_0','const.bool.COND_3'(s(bool,X55),s(bool,X56),s(bool,X57)),X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f995,f786])).
fof(f3376,plain,(
  ( ! [X54,X52,X53,X51] : (~sP13('F_0',X52,'const.bool.COND_3'(s(bool,X51),s(bool,'F_0'),s(bool,X53))) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f985,f786])).
fof(f3375,plain,(
  ( ! [X47,X50,X48,X49] : (~sP13('F_0','F_0','const.bool.COND_3'(s(bool,X47),s(bool,X48),s(bool,X49))) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f984,f786])).
fof(f3374,plain,(
  ( ! [X45,X43,X46,X44] : (sP13('T_0','const.bool.COND_3'(s(bool,X43),s(bool,'F_0'),s(bool,X44)),X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f971,f786])).
fof(f3373,plain,(
  ( ! [X39,X41,X42,X40] : (sP13('T_0','const.bool.COND_3'(s(bool,X39),s(bool,X40),s(bool,X41)),'F_0') | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f970,f786])).
fof(f3372,plain,(
  ( ! [X37,X35,X38,X36] : (sP12('T_0',X36,'const.bool.COND_3'(s(bool,X35),s(bool,X36),s(bool,X37))) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f967,f786])).
fof(f3371,plain,(
  ( ! [X33,X31,X34,X32] : (~sP13('F_0','const.bool.COND_3'(s(bool,X31),s(bool,'F_0'),s(bool,X32)),X33) | s(bool,'T_0') = s(bool,X33) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f958,f786])).
fof(f3370,plain,(
  ( ! [X30,X28,X29,X27] : (~sP13('F_0','const.bool.COND_3'(s(bool,X27),s(bool,X28),s(bool,X29)),'F_0') | s(bool,'T_0') = s(bool,X28) | s(bool,X27) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f957,f786])).
fof(f3369,plain,(
  ( ! [X26,X24,X23,X25] : (sP13('T_0',X24,'const.bool.COND_3'(s(bool,X23),s(bool,X24),s(bool,X25))) | s(bool,X23) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f866,f786])).
fof(f3368,plain,(
  ( ! [X21,X19,X22,X20] : (~sP13('F_0',X20,'const.bool.COND_3'(s(bool,X19),s(bool,X20),s(bool,X21))) | s(bool,X19) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f865,f786])).
fof(f3367,plain,(
  ( ! [X17,X15,X18,X16] : (sP13('T_0','const.bool.COND_3'(s(bool,X15),s(bool,X16),s(bool,X17)),X16) | s(bool,X15) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f864,f786])).
fof(f3366,plain,(
  ( ! [X14,X12,X13,X11] : (~sP13('F_0','const.bool.COND_3'(s(bool,X11),s(bool,X12),s(bool,X13)),X12) | s(bool,X11) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f863,f786])).
fof(f3365,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,X7) = s(X6,'const.bool.COND_3'(s(bool,X5),s(X6,X7),s(X6,X8))) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f458,f786])).
fof(f3364,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f398,f786])).
fof(f3108,plain,(
  ( ! [X810,X812,X811,X813] : (s(X812,f(s(bool,X813))) != s(X812,g(s(bool,X813))) | s(fun(bool,X812),X810) = s(fun(bool,X812),X811) | s(bool,'T_0') = s(bool,X813) | s(bool,'T_0') = s(bool,sK35(X810,X811,X812,bool))) )),
  inference(superposition,[],[f508,f786])).
fof(f3105,plain,(
  ( ! [X802,X800,X803,X801] : (s(bool,X803) != s(bool,f(s(X800,sK35(X801,X802,bool,X800)))) | s(fun(X800,bool),X801) = s(fun(X800,bool),X802) | s(bool,'T_0') = s(bool,X803) | s(bool,'T_0') = s(bool,g(s(X800,sK35(X801,X802,bool,X800))))) )),
  inference(superposition,[],[f508,f786])).
fof(f3097,plain,(
  ( ! [X757,X759,X756,X758] : (s(bool,X757) != s(bool,X758) | s('type.semanticPrimitives.result'(bool,X759),'const.semanticPrimitives.Rval_1'(s(bool,X756))) = s('type.semanticPrimitives.result'(bool,X759),'const.semanticPrimitives.Rval_1'(s(bool,X758))) | s(bool,'T_0') = s(bool,X757) | s(bool,'T_0') = s(bool,X756)) )),
  inference(superposition,[],[f510,f786])).
fof(f3095,plain,(
  ( ! [X749,X751,X748,X750] : (s('type.semanticPrimitives.result'(bool,X750),'const.semanticPrimitives.Rval_1'(s(bool,X749))) != s('type.semanticPrimitives.result'(bool,X750),'const.semanticPrimitives.Rval_1'(s(bool,X751))) | s(bool,X748) = s(bool,X751) | s(bool,'T_0') = s(bool,X749) | s(bool,'T_0') = s(bool,X748)) )),
  inference(superposition,[],[f509,f786])).
fof(f3093,plain,(
  ( ! [X743,X744,X742] : (~p(s(bool,happ(s(fun(bool,bool),X744),s(bool,X743)))) | p(s(bool,happ(s(fun(bool,bool),X744),s(bool,sK26(X742,X744,bool))))) | s(bool,'T_0') = s(bool,X743) | s(bool,'T_0') = s(bool,X742)) )),
  inference(superposition,[],[f468,f786])).
fof(f3092,plain,(
  ( ! [X741,X739,X740] : (~p(s(bool,happ(s(fun(bool,bool),X741),s(bool,X740)))) | s(bool,X739) = s(bool,sK26(X739,X741,bool)) | s(bool,'T_0') = s(bool,X740) | s(bool,'T_0') = s(bool,X739)) )),
  inference(superposition,[],[f467,f786])).
fof(f3091,plain,(
  ( ! [X736,X738,X737,X735] : (~p(s(bool,happ(s(fun(bool,bool),X737),s(bool,X736)))) | p(s(bool,happ(s(fun(bool,bool),X737),s(bool,X738)))) | s(bool,X735) != s(bool,X738) | s(bool,'T_0') = s(bool,X736) | s(bool,'T_0') = s(bool,X735)) )),
  inference(superposition,[],[f466,f786])).
fof(f3089,plain,(
  ( ! [X730,X729,X731] : (s(bool,X730) != s(bool,X731) | s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X729))) = s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X731))) | s(bool,'T_0') = s(bool,X730) | s(bool,'T_0') = s(bool,X729)) )),
  inference(superposition,[],[f463,f786])).
fof(f3087,plain,(
  ( ! [X724,X725,X723] : (s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X724))) != s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X725))) | s(bool,X723) = s(bool,X725) | s(bool,'T_0') = s(bool,X724) | s(bool,'T_0') = s(bool,X723)) )),
  inference(superposition,[],[f462,f786])).
fof(f2953,plain,(
  ( ! [X321,X323,X324,X322] : (sP12('T_0','const.bool.COND_3'(s(bool,X323),s(bool,X324),s(bool,X322)),X321) | s(bool,'T_0') = s(bool,X323) | s(bool,'T_0') = s(bool,X322) | s(bool,'T_0') = s(bool,X321)) )),
  inference(superposition,[],[f1156,f786])).
fof(f2948,plain,(
  ( ! [X302,X304,X303,X305] : (sP12('T_0',X302,'const.bool.COND_3'(s(bool,X304),s(bool,X305),s(bool,X303))) | s(bool,'T_0') = s(bool,X304) | s(bool,'T_0') = s(bool,X303) | s(bool,'T_0') = s(bool,X302)) )),
  inference(superposition,[],[f1144,f786])).
fof(f2938,plain,(
  ( ! [X269,X271,X270,X272] : (sP13('T_0',X269,'const.bool.COND_3'(s(bool,X271),s(bool,X272),s(bool,X270))) | s(bool,'T_0') = s(bool,X271) | s(bool,'T_0') = s(bool,X270) | s(bool,'T_0') = s(bool,X269)) )),
  inference(superposition,[],[f1102,f786])).
fof(f2936,plain,(
  ( ! [X263,X262,X264] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X264),s(bool,X263)),X262) | s(bool,'T_0') = s(bool,X263) | s(bool,'T_0') = s(bool,X262)) )),
  inference(superposition,[],[f1099,f786])).
fof(f2930,plain,(
  ( ! [X243,X244,X242,X245] : (~sP13('F_0',X242,'const.bool.COND_3'(s(bool,X244),s(bool,X245),s(bool,X243))) | s(bool,'T_0') = s(bool,X244) | s(bool,'T_0') = s(bool,X243) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f1086,f786])).
fof(f2925,plain,(
  ( ! [X227,X225,X228,X226] : (sP13('T_0','const.bool.COND_3'(s(bool,X227),s(bool,X228),s(bool,X226)),X225) | s(bool,'T_0') = s(bool,X227) | s(bool,'T_0') = s(bool,X226) | s(bool,'T_0') = s(bool,X225)) )),
  inference(superposition,[],[f1057,f786])).
fof(f2921,plain,(
  ( ! [X212,X213,X211] : (sP12('T_0',X211,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X213),s(bool,X212))) | s(bool,'T_0') = s(bool,X212) | s(bool,'T_0') = s(bool,X211)) )),
  inference(superposition,[],[f1054,f786])).
fof(f2917,plain,(
  ( ! [X198,X200,X199,X201] : (~sP13('F_0','const.bool.COND_3'(s(bool,X200),s(bool,X201),s(bool,X199)),X198) | s(bool,'T_0') = s(bool,X200) | s(bool,'T_0') = s(bool,X199) | s(bool,'T_0') = s(bool,X198)) )),
  inference(superposition,[],[f1017,f786])).
fof(f2893,plain,(
  ( ! [X121,X122,X120] : (sP13('T_0',X120,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X122),s(bool,X121))) | s(bool,'T_0') = s(bool,X121) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f910,f786])).
fof(f2891,plain,(
  ( ! [X116,X114,X115] : (~sP13('F_0',X114,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X116),s(bool,X115))) | s(bool,'T_0') = s(bool,X115) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f909,f786])).
fof(f2890,plain,(
  ( ! [X111,X112,X113] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X113),s(bool,X112)),X111) | s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f908,f786])).
fof(f2888,plain,(
  ( ! [X107,X105,X106] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X107),s(bool,X106)),X105) | s(bool,'T_0') = s(bool,X106) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f907,f786])).
fof(f2842,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X17),s(bool,X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f786,f459])).
fof(f2841,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X14) | s(bool,X16) = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X14),s(bool,X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f786,f458])).
fof(f2831,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f786,f786])).
fof(f2820,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X23),s(bool,X24)))) )),
  inference(superposition,[],[f786,f459])).
fof(f2819,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X20),s(bool,X21)))) )),
  inference(superposition,[],[f786,f458])).
fof(f2798,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X2))))) | sP7(X3,X4,X5,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X1)))),X0,X6)) )),
  inference(equality_resolution,[],[f558])).
fof(f2795,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X12),s('type.conSem.v',X14)))) | s('type.semanticPrimitives.result'(X15,'type.conSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X14))))) | sP7(X15,X16,X9,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X10),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X11)),X13,X17)) )),
  inference(superposition,[],[f558,f459])).
fof(f2794,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X3))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | s('type.semanticPrimitives.result'(X6,'type.conSem.v'),X7) != s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5))))) | sP7(X6,X7,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X4,X8)) )),
  inference(superposition,[],[f558,f458])).
fof(f2772,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5))))))) )),
  inference(unit_resulting_resolution,[],[f2769,f564])).
fof(f2769,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,'const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X3)),X4,X5)) )),
  inference(unit_resulting_resolution,[],[f1852,f513,f513,f555])).
fof(f2708,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X5))))))) )),
  inference(unit_resulting_resolution,[],[f2698,f564])).
fof(f2698,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X1)),X2,'const.semanticPrimitives.Rval_1'(s(X2,X3)),X4,X5)) )),
  inference(unit_resulting_resolution,[],[f1863,f513,f513,f551])).
fof(f2681,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5))))))) )),
  inference(unit_resulting_resolution,[],[f2680,f530])).
fof(f2680,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,'const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),X3)),X4,X5)) )),
  inference(unit_resulting_resolution,[],[f1814,f513,f513,f521])).
fof(f2651,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1163,f390])).
fof(f2647,plain,(
  ( ! [X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1163,f390])).
fof(f2628,plain,(
  ( ! [X12,X10,X13,X11] : (sP12('T_0','const.bool.COND_3'(s(bool,X12),s(bool,X13),s(bool,X11)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1156,f459])).
fof(f2627,plain,(
  ( ! [X6,X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,X8),s(bool,X9),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1156,f458])).
fof(f2626,plain,(
  ( ! [X4,X5,X3] : (sP12('T_0','const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'F_0')),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1156,f390])).
fof(f2625,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1156,f390])).
fof(f2607,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X5))))))) )),
  inference(unit_resulting_resolution,[],[f2606,f530])).
fof(f2603,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1151,f390])).
fof(f2599,plain,(
  ( ! [X0,X1] : (sP12('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1151,f390])).
fof(f2593,plain,(
  ( ! [X12,X10,X13,X11] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11)),'const.bool.COND_3'(s(bool,X12),s(bool,X13),s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1144,f459])).
fof(f2592,plain,(
  ( ! [X6,X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7)),'const.bool.COND_3'(s(bool,X8),s(bool,X9),s(bool,X6))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1144,f458])).
fof(f2591,plain,(
  ( ! [X4,X5,X3] : (sP12('T_0',X3,'const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1144,f390])).
fof(f2578,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2)))) | s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X2))))) | sP3(X3,X4,X5,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X1)))),X0,X6)) )),
  inference(equality_resolution,[],[f524])).
fof(f2575,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11) != s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X13),s('type.semanticPrimitives.v',X12),s('type.modSem.v',X14)))) | s('type.semanticPrimitives.result'(X15,'type.modSem.v'),X16) != s('type.semanticPrimitives.result'(X15,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X14))))) | sP3(X15,X16,X9,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X10),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X11)),X13,X17)) )),
  inference(superposition,[],[f524,f459])).
fof(f2574,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X3))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',X3),s('type.modSem.v',X5)))) | s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X7) != s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X5))))) | sP3(X6,X7,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X4,X8)) )),
  inference(superposition,[],[f524,f458])).
fof(f2567,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1133,f390])).
fof(f2546,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0',X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1123,f390])).
fof(f2524,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1109,f390])).
fof(f2520,plain,(
  ( ! [X0,X1] : (sP13('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1109,f390])).
fof(f2513,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))))) )),
  inference(forward_demodulation,[],[f2507,f459])).
fof(f2507,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))))))) )),
  inference(unit_resulting_resolution,[],[f459,f550])).
fof(f2488,plain,(
  ( ! [X12,X10,X13,X11] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11)),'const.bool.COND_3'(s(bool,X12),s(bool,X13),s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1102,f459])).
fof(f2487,plain,(
  ( ! [X6,X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7)),'const.bool.COND_3'(s(bool,X8),s(bool,X9),s(bool,X6))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1102,f458])).
fof(f2486,plain,(
  ( ! [X4,X5,X3] : (sP13('T_0',X3,'const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1102,f390])).
fof(f2485,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0','F_0','const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1102,f390])).
fof(f2462,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5))))))) )),
  inference(unit_resulting_resolution,[],[f513,f549])).
fof(f2459,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1093,f390])).
fof(f2455,plain,(
  ( ! [X0,X1] : (~sP13('F_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1093,f390])).
fof(f2251,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(X0,X1,X2,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3)))),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3)))),X4)) )),
  inference(unit_resulting_resolution,[],[f514,f581])).
fof(f2252,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7(X0,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))),X2,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))),X3,X4)) )),
  inference(unit_resulting_resolution,[],[f514,f564])).
fof(f2257,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f514,f474])).
fof(f2258,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))) = s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f514,f474])).
fof(f2259,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP0(X0,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f480])).
fof(f2260,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP0('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5)) )),
  inference(unit_resulting_resolution,[],[f514,f481])).
fof(f2261,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP1('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f514,f495])).
fof(f2263,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP1('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f514,f495])).
fof(f2264,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP1('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f514,f495])).
fof(f2265,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f514,f496])).
fof(f2266,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP1('F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f678,f514,f499])).
fof(f2269,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP13('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f592])).
fof(f2270,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f514,f678,f514,f592])).
fof(f2276,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP13('T_0','T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f688,f682,f685,f514,f593])).
fof(f2277,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP12('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f596])).
fof(f2281,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP12('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f596])).
fof(f2282,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP12('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f514,f678,f514,f596])).
fof(f2287,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP12(X0,X1,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f597])).
fof(f2288,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP11('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f600])).
fof(f2292,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP11('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f600])).
fof(f2293,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP11('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f514,f678,f514,f600])).
fof(f2296,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP11(X0,X1,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f601])).
fof(f2297,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP10(X0,X1,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f605])).
fof(f2298,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP10(X0,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))),X6)) )),
  inference(unit_resulting_resolution,[],[f514,f606])).
fof(f2299,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP10('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f514,f607])).
fof(f2300,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X5),s(bool,X6)),X5)) )),
  inference(unit_resulting_resolution,[],[f458,f514,f609])).
fof(f2301,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X5),s(bool,X6)),X6)) )),
  inference(unit_resulting_resolution,[],[f459,f514,f609])).
fof(f2302,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X5),s(bool,X6)))) )),
  inference(unit_resulting_resolution,[],[f458,f514,f609])).
fof(f2303,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X6),s(bool,X5)))) )),
  inference(unit_resulting_resolution,[],[f459,f514,f609])).
fof(f2304,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f700,f514,f610])).
fof(f2305,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f700,f514,f610])).
fof(f2306,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP15('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f514,f613])).
fof(f2307,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP15('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0',X5)) )),
  inference(unit_resulting_resolution,[],[f678,f514,f614])).
fof(f2314,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP14('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f619])).
fof(f2318,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP14('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f619])).
fof(f2319,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP14('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f514,f678,f514,f619])).
fof(f2322,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP14(X0,X1,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f620])).
fof(f2323,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP15('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f383,f514,f625])).
fof(f2328,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP15('T_0','T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f383,f514,f625])).
fof(f2330,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP15('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f514,f514,f625])).
fof(f2333,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP15('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f383,f514,f625])).
fof(f2334,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP15('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f514,f383,f514,f625])).
fof(f2335,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP15('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f514,f514,f625])).
fof(f2336,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (sP15('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X10,fun(X11,bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X14))))),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X14)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f514,f514,f625])).
fof(f2337,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP15('F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f628])).
fof(f2340,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP15('F_0','T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f628])).
fof(f2341,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP15('F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f678,f514,f628])).
fof(f2343,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP17('F_0',X0,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))) )),
  inference(unit_resulting_resolution,[],[f678,f514,f629])).
fof(f2345,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP17('F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5)) )),
  inference(unit_resulting_resolution,[],[f678,f514,f630])).
fof(f2349,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP16('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f678,f514,f636])).
fof(f2352,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP16(X0,X1,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f637])).
fof(f2353,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP16(X0,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))),X6)) )),
  inference(unit_resulting_resolution,[],[f514,f638])).
fof(f2354,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP17('T_0',X0,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f514,f641])).
fof(f2358,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP17('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f514,f641])).
fof(f2359,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP17('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5)) )),
  inference(unit_resulting_resolution,[],[f383,f514,f642])).
fof(f2363,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP17('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),X10)) )),
  inference(unit_resulting_resolution,[],[f514,f514,f642])).
fof(f2364,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP17('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f678,f514,f643])).
fof(f2365,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP19('F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5)) )),
  inference(unit_resulting_resolution,[],[f678,f514,f647])).
fof(f2377,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP18('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f678,f383,f514,f653])).
fof(f2381,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP18('T_0','F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f383,f678,f514,f653])).
fof(f2382,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP18('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f514,f678,f514,f653])).
fof(f2385,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP18(X0,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))),X6)) )),
  inference(unit_resulting_resolution,[],[f514,f655])).
fof(f2386,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP19('F_0','F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f678,f678,f514,f657])).
fof(f2389,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP19('T_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5)) )),
  inference(unit_resulting_resolution,[],[f383,f514,f659])).
fof(f2393,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP19('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))),X10)) )),
  inference(unit_resulting_resolution,[],[f514,f514,f659])).
fof(f2394,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19('T_0','F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))))) )),
  inference(unit_resulting_resolution,[],[f678,f383,f514,f660])).
fof(f2397,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f678,f383,f514,f660])).
fof(f2398,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP19('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'F_0','const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X5,fun(X6,bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X5,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9))))),s('type.semanticPrimitives.result'(X6,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X9)))))))) )),
  inference(unit_resulting_resolution,[],[f678,f514,f514,f660])).
fof(f2399,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP19('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'F_0')) )),
  inference(unit_resulting_resolution,[],[f697,f514,f663])).
fof(f2400,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP19('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0',X5)) )),
  inference(unit_resulting_resolution,[],[f698,f514,f663])).
fof(f2401,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP17('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),X5,'T_0')) )),
  inference(unit_resulting_resolution,[],[f694,f514,f664])).
fof(f2402,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP17('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4)))))),'T_0',X5)) )),
  inference(unit_resulting_resolution,[],[f695,f514,f664])).
fof(f2403,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),s(bool,X6)))) )),
  inference(unit_resulting_resolution,[],[f514,f885])).
fof(f2404,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))),s(bool,X5)),X6)) )),
  inference(unit_resulting_resolution,[],[f514,f886])).
fof(f2405,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))),s(bool,X5)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f514,f887])).
fof(f2406,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))),s(bool,X5)))) )),
  inference(unit_resulting_resolution,[],[f678,f514,f888])).
fof(f2407,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))))) )),
  inference(unit_resulting_resolution,[],[f514,f935])).
fof(f2408,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))),X6)) )),
  inference(unit_resulting_resolution,[],[f514,f936])).
fof(f2409,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f678,f514,f937])).
fof(f2410,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X2,bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X2,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))))) )),
  inference(unit_resulting_resolution,[],[f678,f514,f938])).
fof(f2246,plain,(
  ( ! [X12,X10,X13,X11] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11)),'const.bool.COND_3'(s(bool,X12),s(bool,X13),s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1086,f459])).
fof(f2245,plain,(
  ( ! [X6,X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7)),'const.bool.COND_3'(s(bool,X8),s(bool,X9),s(bool,X6))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1086,f458])).
fof(f2244,plain,(
  ( ! [X4,X5,X3] : (~sP13('F_0',X3,'const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1086,f390])).
fof(f2243,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0','F_0','const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1086,f390])).
fof(f2231,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1064,f390])).
fof(f2227,plain,(
  ( ! [X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1064,f390])).
fof(f2208,plain,(
  ( ! [X12,X10,X13,X11] : (sP13('T_0','const.bool.COND_3'(s(bool,X12),s(bool,X13),s(bool,X11)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1057,f459])).
fof(f2207,plain,(
  ( ! [X6,X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,X8),s(bool,X9),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1057,f458])).
fof(f2206,plain,(
  ( ! [X4,X5,X3] : (sP13('T_0','const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'F_0')),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1057,f390])).
fof(f2205,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1057,f390])).
fof(f2194,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X14,fun(X11,bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.semanticPrimitives.result'(X14,'type.modSem.v'),X17),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)))) | sP9(X11,X14,X16,X17,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X15)) )),
  inference(superposition,[],[f581,f459])).
fof(f2193,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X4,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X10),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5)))) | sP9(X4,X7,X9,X10,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X6)),X8)) )),
  inference(superposition,[],[f581,f458])).
fof(f2191,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13)))) | sP9(X10,X7,X12,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X13,X11)) )),
  inference(superposition,[],[f581,f459])).
fof(f2190,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X6)))) | sP9(X3,X0,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X6,X4)) )),
  inference(superposition,[],[f581,f458])).
fof(f2189,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X9,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13)))) | sP9(X10,X9,'const.bool.COND_3'(s(bool,'F_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X12,X13,X11)) )),
  inference(superposition,[],[f581,f459])).
fof(f2188,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X6)))) | sP9(X3,X2,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)),X5,X6,X4)) )),
  inference(superposition,[],[f581,f458])).
fof(f2187,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X8,'type.conSem.v'),X13)))) | sP9(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10)))) )),
  inference(superposition,[],[f581,f459])).
fof(f2186,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | sP9(X1,X0,X4,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X3)))) )),
  inference(superposition,[],[f581,f458])).
fof(f2183,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1024,f390])).
fof(f2179,plain,(
  ( ! [X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1024,f390])).
fof(f2156,plain,(
  ( ! [X12,X10,X13,X11] : (~sP13('F_0','const.bool.COND_3'(s(bool,X12),s(bool,X13),s(bool,X11)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X10),s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1017,f459])).
fof(f2155,plain,(
  ( ! [X6,X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,X8),s(bool,X9),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X6),s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1017,f458])).
fof(f2154,plain,(
  ( ! [X4,X5,X3] : (~sP13('F_0','const.bool.COND_3'(s(bool,X4),s(bool,X5),s(bool,'F_0')),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1017,f390])).
fof(f2153,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1017,f390])).
fof(f2132,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X14,fun(X11,bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.semanticPrimitives.result'(X14,'type.modSem.v'),X17),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)))) | sP7(X11,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X12),s('type.semanticPrimitives.result'(X11,'type.conSem.v'),X13)),X14,X17,X16,X15)) )),
  inference(superposition,[],[f564,f459])).
fof(f2131,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X4,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X10),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5)))) | sP7(X4,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X5),s('type.semanticPrimitives.result'(X4,'type.conSem.v'),X6)),X7,X10,X9,X8)) )),
  inference(superposition,[],[f564,f458])).
fof(f2129,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13)))) | sP7(X10,X13,X7,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X12,X11)) )),
  inference(superposition,[],[f564,f459])).
fof(f2128,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X6)))) | sP7(X3,X6,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X5,X4)) )),
  inference(superposition,[],[f564,f458])).
fof(f2127,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X9,fun(X10,bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.semanticPrimitives.result'(X9,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X10,'type.conSem.v'),X13)))) | sP7(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'F_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)),X11)) )),
  inference(superposition,[],[f564,f459])).
fof(f2126,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X2,fun(X3,bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X3,'type.conSem.v'),X6)))) | sP7(X3,X6,X2,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)),X4)) )),
  inference(superposition,[],[f564,f458])).
fof(f2125,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X12),s('type.semanticPrimitives.result'(X8,'type.conSem.v'),X13)))) | sP7(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X9),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X7,fun(X8,bool))),X10)))) )),
  inference(superposition,[],[f564,f459])).
fof(f2124,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | sP7(X1,X6,X0,X5,X4,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X3)))) )),
  inference(superposition,[],[f564,f458])).
fof(f2114,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X2)),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4)),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f458,f458,f559])).
fof(f2115,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X2)),X3,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f459,f458,f559])).
fof(f2116,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4)),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f458,f459,f559])).
fof(f2117,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f459,f459,f559])).
fof(f2105,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0',X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f999,f390])).
fof(f2087,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4)),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f458,f458,f525])).
fof(f2088,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X3,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f459,f458,f525])).
fof(f2089,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4)),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f458,f459,f525])).
fof(f2090,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X3,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))),X5,X6)) )),
  inference(unit_resulting_resolution,[],[f459,f459,f525])).
fof(f2080,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0',X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f985,f390])).
fof(f2059,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f971,f390])).
fof(f2043,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X10,fun(X7,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X10,'type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)))) | sP5(X7,X10,X12,X13,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X11)) )),
  inference(superposition,[],[f547,f459])).
fof(f2042,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X3,fun(X0,bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1)))) | sP5(X0,X3,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X4)) )),
  inference(superposition,[],[f547,f458])).
fof(f2041,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13)))) | sP5(X10,X7,X12,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X13,X11)) )),
  inference(superposition,[],[f547,f459])).
fof(f2040,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X3,bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X6)))) | sP5(X3,X0,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X6,X4)) )),
  inference(superposition,[],[f547,f458])).
fof(f2039,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X9,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13)))) | sP5(X10,X9,'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X12,X13,X11)) )),
  inference(superposition,[],[f547,f459])).
fof(f2038,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X2,fun(X3,bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X6)))) | sP5(X3,X2,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1)),X5,X6,X4)) )),
  inference(superposition,[],[f547,f458])).
fof(f2037,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X8,'type.modSem.v'),X13)))) | sP5(X8,X7,X11,X12,X13,'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10)))) )),
  inference(superposition,[],[f547,f459])).
fof(f2036,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X6)))) | sP5(X1,X0,X4,X5,X6,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X3)))) )),
  inference(superposition,[],[f547,f458])).
fof(f2029,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f958,f390])).
fof(f1995,plain,(
  ( ! [X0,X1] : (sP1('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1978,f390])).
fof(f1992,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X10,fun(X7,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X10,'type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)))) | sP3(X7,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X8),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X9)),X10,X13,X12,X11)) )),
  inference(superposition,[],[f530,f459])).
fof(f1991,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X3,fun(X0,bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.result'(X3,'type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1)))) | sP3(X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X2)),X3,X6,X5,X4)) )),
  inference(superposition,[],[f530,f458])).
fof(f1990,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13)))) | sP3(X10,X13,X7,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X9)),X12,X11)) )),
  inference(superposition,[],[f530,f459])).
fof(f1989,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X3,bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X6)))) | sP3(X3,X6,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X2)),X5,X4)) )),
  inference(superposition,[],[f530,f458])).
fof(f1988,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X9,fun(X10,bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X8),s('type.semanticPrimitives.result'(X9,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X10,'type.modSem.v'),X13)))) | sP3(X10,X13,X9,X12,'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8)),X11)) )),
  inference(superposition,[],[f530,f459])).
fof(f1987,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X2,fun(X3,bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.result'(X3,'type.modSem.v'),X6)))) | sP3(X3,X6,X2,X5,'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1)),X4)) )),
  inference(superposition,[],[f530,f458])).
fof(f1986,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.result'(X7,'type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.result'(X8,'type.modSem.v'),X13)))) | sP3(X8,X13,X7,X12,X11,'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X9),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X7,fun(X8,bool))),X10)))) )),
  inference(superposition,[],[f530,f459])).
fof(f1985,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X6)))) | sP3(X1,X6,X0,X5,X4,'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X3)))) )),
  inference(superposition,[],[f530,f458])).
fof(f1964,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK35(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK35(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f508,f390])).
fof(f1963,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK35(X0,X1,X2,bool))) )),
  inference(superposition,[],[f508,f390])).
fof(f1940,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X6),s(bool,X7)))) | s(bool,X5) != s(bool,X7) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f466,f390])).
fof(f1939,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,'F_0') != s(bool,X4) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f466,f390])).
fof(f1888,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))) != s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9))) | s('type.semanticPrimitives.error_result'(X5),X9) = s('type.semanticPrimitives.error_result'(X5),'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.error_result'(X5),X6),s('type.semanticPrimitives.error_result'(X5),X7)))) )),
  inference(superposition,[],[f511,f459])).
fof(f1887,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1))) != s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X4))) | s('type.semanticPrimitives.error_result'(X0),X4) = s('type.semanticPrimitives.error_result'(X0),'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.error_result'(X0),X1),s('type.semanticPrimitives.error_result'(X0),X2)))) )),
  inference(superposition,[],[f511,f458])).
fof(f1886,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(X0,bool),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'(X0,bool),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f1369,f511])).
fof(f1878,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8(X0,X1,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X4)),X5)) )),
  inference(unit_resulting_resolution,[],[f513,f578])).
fof(f1870,plain,(
  ( ! [X0,X1] : (sP1('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1855,f390])).
fof(f1866,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8(X0,X1,X2,X3,X4,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X5)))) )),
  inference(unit_resulting_resolution,[],[f513,f577])).
fof(f1863,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6(X0,X1,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X4)),X5)) )),
  inference(unit_resulting_resolution,[],[f513,f561])).
fof(f1843,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4(X0,X1,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),X4)),X5)) )),
  inference(unit_resulting_resolution,[],[f513,f544])).
fof(f1833,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4(X0,X1,X2,X3,X4,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),X5)))) )),
  inference(unit_resulting_resolution,[],[f513,f543])).
fof(f1814,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP2(X0,X1,X2,X3,X4,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),X5)))) )),
  inference(unit_resulting_resolution,[],[f513,f526])).
fof(f1794,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X11)))) | p(s(bool,happ(s(fun(X9,bool),X12),s(X9,sK26('const.bool.COND_3'(s(bool,'F_0'),s(X9,X10),s(X9,X11)),X12,X9)))))) )),
  inference(superposition,[],[f468,f459])).
fof(f1793,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,X6)))) | p(s(bool,happ(s(fun(X5,bool),X8),s(X5,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7)),X8,X5)))))) )),
  inference(superposition,[],[f468,f458])).
fof(f1792,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK26(X3,X4,bool))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f468,f390])).
fof(f1791,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X1)))) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK26('F_0',X2,bool))))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f468,f390])).
fof(f1797,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X6),s(X4,sK26(X7,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,X7))))) )),
  inference(forward_demodulation,[],[f1789,f459])).
fof(f1789,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,X7)))) | p(s(bool,happ(s(fun(X4,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6))),s(X4,sK26(X7,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4)))))) )),
  inference(superposition,[],[f468,f459])).
fof(f1796,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK26(X3,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(forward_demodulation,[],[f1788,f458])).
fof(f1788,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'T_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,sK26(X3,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(superposition,[],[f468,f458])).
fof(f1750,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,X6) | s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X5))) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f510,f390])).
fof(f1749,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f510,f390])).
fof(f1734,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f1707,f509])).
fof(f1735,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.error_result'('type.semanticPrimitives.result'(bool,X0)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.error_result'('type.semanticPrimitives.result'(bool,X0)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f1707,f462])).
fof(f1717,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.semanticPrimitives.result'(X13,X16),'const.semanticPrimitives.Rval_1'(s(X13,X15))) != s('type.semanticPrimitives.result'(X13,X16),'const.semanticPrimitives.Rval_1'(s(X13,X17))) | s(X13,X17) = s(X13,'const.bool.COND_3'(s(bool,'F_0'),s(X13,X14),s(X13,X15)))) )),
  inference(superposition,[],[f509,f459])).
fof(f1716,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rval_1'(s(X8,X9))) != s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rval_1'(s(X8,X12))) | s(X8,X12) = s(X8,'const.bool.COND_3'(s(bool,'T_0'),s(X8,X9),s(X8,X10)))) )),
  inference(superposition,[],[f509,f458])).
fof(f1715,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X7))) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f509,f390])).
fof(f1714,plain,(
  ( ! [X4,X2,X3] : (s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2))) != s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X4))) | s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f509,f390])).
fof(f1707,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) )),
  inference(unit_resulting_resolution,[],[f700,f509])).
fof(f1708,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X3)))))) )),
  inference(unit_resulting_resolution,[],[f469,f509])).
fof(f1710,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f1369,f509])).
fof(f1711,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4)))))) )),
  inference(unit_resulting_resolution,[],[f513,f509])).
fof(f1694,plain,(
  ( ! [X2,X0,X1] : (sP0('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1686,f390])).
fof(f1686,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f383,f936])).
fof(f1511,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1503,f390])).
fof(f1503,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f383,f935])).
fof(f1502,plain,(
  ( ! [X12,X10,X11,X9] : (s(X9,X11) = s(X9,sK26('const.bool.COND_3'(s(bool,'F_0'),s(X9,X10),s(X9,X11)),X12,X9)) | ~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X11))))) )),
  inference(forward_demodulation,[],[f1498,f459])).
fof(f1498,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X12),s(X9,X11)))) | s(X9,'const.bool.COND_3'(s(bool,'F_0'),s(X9,X10),s(X9,X11))) = s(X9,sK26('const.bool.COND_3'(s(bool,'F_0'),s(X9,X10),s(X9,X11)),X12,X9))) )),
  inference(superposition,[],[f467,f459])).
fof(f1501,plain,(
  ( ! [X6,X8,X7,X5] : (s(X5,X6) = s(X5,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7)),X8,X5)) | ~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,X6))))) )),
  inference(forward_demodulation,[],[f1497,f458])).
fof(f1497,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,happ(s(fun(X5,bool),X8),s(X5,X6)))) | s(X5,'const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7))) = s(X5,sK26('const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7)),X8,X5))) )),
  inference(superposition,[],[f467,f458])).
fof(f1496,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,X3) = s(bool,sK26(X3,X4,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f467,f390])).
fof(f1495,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X1)))) | s(bool,'F_0') = s(bool,sK26('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f467,f390])).
fof(f1493,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,X7)))) | s(X4,X7) = s(X4,sK26(X7,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))) )),
  inference(superposition,[],[f467,f459])).
fof(f1492,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X3) = s(X0,sK26(X3,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) )),
  inference(superposition,[],[f467,f458])).
fof(f1479,plain,(
  ( ! [X0,X1] : (sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f383,f886])).
fof(f1463,plain,(
  s('type.semanticPrimitives.error_result'('type.semanticPrimitives.error_result'(bool)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.error_result'('type.semanticPrimitives.error_result'(bool)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f1369,f462])).
fof(f1457,plain,(
  ( ! [X0,X1] : (~sP10('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1336,f390])).
fof(f1453,plain,(
  ( ! [X0] : (~sP10('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1336,f390])).
fof(f1445,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))) != s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))) | s('type.semanticPrimitives.abort',X7) = s('type.semanticPrimitives.abort','const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.abort',X4),s('type.semanticPrimitives.abort',X5)))) )),
  inference(superposition,[],[f464,f459])).
fof(f1444,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.error_result'(X2),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X0))) != s('type.semanticPrimitives.error_result'(X2),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))) | s('type.semanticPrimitives.abort',X3) = s('type.semanticPrimitives.abort','const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.abort',X0),s('type.semanticPrimitives.abort',X1)))) )),
  inference(superposition,[],[f464,f458])).
fof(f1437,plain,(
  ( ! [X0,X1] : (~sP10('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1335,f390])).
fof(f1426,plain,(
  ( ! [X0,X1] : (~sP11('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1328,f390])).
fof(f1407,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') != s(bool,X4) | s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X3))) = s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X4))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f463,f390])).
fof(f1406,plain,(
  ( ! [X2,X1] : (s(bool,X1) != s(bool,X2) | s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f463,f390])).
fof(f1377,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.semanticPrimitives.error_result'(X9),'const.semanticPrimitives.Rraise_1'(s(X9,X11))) != s('type.semanticPrimitives.error_result'(X9),'const.semanticPrimitives.Rraise_1'(s(X9,X12))) | s(X9,X12) = s(X9,'const.bool.COND_3'(s(bool,'F_0'),s(X9,X10),s(X9,X11)))) )),
  inference(superposition,[],[f462,f459])).
fof(f1376,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.semanticPrimitives.error_result'(X5),'const.semanticPrimitives.Rraise_1'(s(X5,X6))) != s('type.semanticPrimitives.error_result'(X5),'const.semanticPrimitives.Rraise_1'(s(X5,X8))) | s(X5,X8) = s(X5,'const.bool.COND_3'(s(bool,'T_0'),s(X5,X6),s(X5,X7)))) )),
  inference(superposition,[],[f462,f458])).
fof(f1375,plain,(
  ( ! [X4,X3] : (s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X4))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f462,f390])).
fof(f1374,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X1))) != s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,X2))) | s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f462,f390])).
fof(f1369,plain,(
  s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f700,f462])).
fof(f1370,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'('type.semanticPrimitives.error_result'(X0)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))) != s('type.semanticPrimitives.error_result'('type.semanticPrimitives.error_result'(X0)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2)))))) )),
  inference(unit_resulting_resolution,[],[f469,f462])).
fof(f1371,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.error_result'('type.semanticPrimitives.result'(X0,X1)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))))) != s('type.semanticPrimitives.error_result'('type.semanticPrimitives.result'(X0,X1)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))))) )),
  inference(unit_resulting_resolution,[],[f513,f462])).
fof(f1362,plain,(
  ( ! [X0,X1] : (~sP10('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1291,f390])).
fof(f1358,plain,(
  ( ! [X0] : (~sP10('const.bool.COND_3'(s(bool,X0),s(bool,X0),s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1291,f390])).
fof(f1347,plain,(
  ( ! [X0,X1] : (~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1290,f390])).
fof(f1327,plain,(
  ( ! [X0] : (~sP11('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f689,f865,f682,f678,f595])).
fof(f1328,plain,(
  ( ! [X0] : (~sP11('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f689,f909,f682,f678,f595])).
fof(f1335,plain,(
  ( ! [X0] : (~sP10('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f863,f683,f686,f678,f595])).
fof(f1336,plain,(
  ( ! [X0] : (~sP10('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f907,f683,f686,f678,f595])).
fof(f1310,plain,(
  ( ! [X0,X1] : (~sP11('const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,'T_0')),'T_0','F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1258,f390])).
fof(f1290,plain,(
  ( ! [X0] : (~sP10('const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f865,f684,f687,f678,f594])).
fof(f1291,plain,(
  ( ! [X0] : (~sP10('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'F_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f909,f684,f687,f678,f594])).
fof(f1257,plain,(
  ( ! [X0] : (~sP11('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f690,f863,f684,f383,f593])).
fof(f1258,plain,(
  ( ! [X0] : (~sP11('const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,'T_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f690,f907,f684,f383,f593])).
fof(f1264,plain,(
  sP13('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f690,f682,f685,f383,f593])).
fof(f1229,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f383,f885])).
fof(f1163,plain,(
  ( ! [X2,X3] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0')),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1099,f390])).
fof(f1162,plain,(
  ( ! [X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1099,f390])).
fof(f1156,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1099,f390])).
fof(f1153,plain,(
  ( ! [X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X9),s(bool,X8)))) )),
  inference(superposition,[],[f1054,f459])).
fof(f1151,plain,(
  ( ! [X2,X3] : (sP12('T_0',X2,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1054,f390])).
fof(f1144,plain,(
  ( ! [X2,X0,X1] : (sP12('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1054,f390])).
fof(f1135,plain,(
  ( ! [X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)))) )),
  inference(superposition,[],[f995,f459])).
fof(f1133,plain,(
  ( ! [X2,X3] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3)),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f995,f390])).
fof(f1132,plain,(
  ( ! [X0,X1] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f995,f390])).
fof(f1125,plain,(
  ( ! [X8,X7,X9] : (sP12('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f967,f459])).
fof(f1124,plain,(
  ( ! [X6,X4,X5] : (sP12('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,X5)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,X6)))) )),
  inference(superposition,[],[f967,f458])).
fof(f1123,plain,(
  ( ! [X2,X3] : (sP12('T_0',X2,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f967,f390])).
fof(f1109,plain,(
  ( ! [X2,X3] : (sP13('T_0',X2,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f910,f390])).
fof(f1108,plain,(
  ( ! [X0,X1] : (sP13('T_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f910,f390])).
fof(f1102,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f910,f390])).
fof(f1093,plain,(
  ( ! [X2,X3] : (~sP13('F_0',X2,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f909,f390])).
fof(f1092,plain,(
  ( ! [X0,X1] : (~sP13('F_0','F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f909,f390])).
fof(f1086,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0',X1,'const.bool.COND_3'(s(bool,X0),s(bool,X2),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f909,f390])).
fof(f1066,plain,(
  ( ! [X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X9),s(bool,X8)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)))) )),
  inference(superposition,[],[f908,f459])).
fof(f1064,plain,(
  ( ! [X2,X3] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0')),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f908,f390])).
fof(f1063,plain,(
  ( ! [X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f908,f390])).
fof(f1057,plain,(
  ( ! [X2,X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f908,f390])).
fof(f1054,plain,(
  ( ! [X0,X1] : (sP12('T_0',X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f908,f591])).
fof(f1047,plain,(
  sP15('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f691,f383,f383,f615])).
fof(f1026,plain,(
  ( ! [X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X9),s(bool,X8)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)))) )),
  inference(superposition,[],[f907,f459])).
fof(f1024,plain,(
  ( ! [X2,X3] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X3),s(bool,'F_0')),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f907,f390])).
fof(f1023,plain,(
  ( ! [X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f907,f390])).
fof(f1017,plain,(
  ( ! [X2,X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)),X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f907,f390])).
fof(f1001,plain,(
  ( ! [X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f866,f459])).
fof(f999,plain,(
  ( ! [X2,X3] : (sP13('T_0',X2,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f866,f390])).
fof(f998,plain,(
  ( ! [X0,X1] : (sP13('T_0','F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f866,f390])).
fof(f987,plain,(
  ( ! [X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)))) )),
  inference(superposition,[],[f865,f459])).
fof(f985,plain,(
  ( ! [X2,X3] : (~sP13('F_0',X2,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f865,f390])).
fof(f984,plain,(
  ( ! [X0,X1] : (~sP13('F_0','F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f865,f390])).
fof(f973,plain,(
  ( ! [X8,X7,X9] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)))) )),
  inference(superposition,[],[f864,f459])).
fof(f972,plain,(
  ( ! [X6,X4,X5] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,X5)))) )),
  inference(superposition,[],[f864,f458])).
fof(f971,plain,(
  ( ! [X2,X3] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3)),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f864,f390])).
fof(f970,plain,(
  ( ! [X0,X1] : (sP13('T_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f864,f390])).
fof(f967,plain,(
  ( ! [X0,X1] : (sP12('T_0',X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f864,f591])).
fof(f960,plain,(
  ( ! [X8,X7,X9] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X8),s(bool,X9)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)))) )),
  inference(superposition,[],[f863,f459])).
fof(f959,plain,(
  ( ! [X6,X4,X5] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,X6)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X4),s(bool,X5)))) )),
  inference(superposition,[],[f863,f458])).
fof(f958,plain,(
  ( ! [X2,X3] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,'F_0'),s(bool,X3)),X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f863,f390])).
fof(f957,plain,(
  ( ! [X0,X1] : (~sP13('F_0','const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),'F_0') | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f863,f390])).
fof(f944,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,X64)) | ~sP16('const.bool.COND_3'(s(bool,'F_0'),s(bool,X63),s(bool,X64)),X65,X66) | sP17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X63),s(bool,X64)),X65,X66)) )),
  inference(superposition,[],[f664,f459])).
fof(f943,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,X60)) | ~sP18('const.bool.COND_3'(s(bool,'F_0'),s(bool,X59),s(bool,X60)),X61,X62) | sP19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X59),s(bool,X60)),X61,X62)) )),
  inference(superposition,[],[f663,f459])).
fof(f936,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X35)) | sP0('const.bool.COND_3'(s(bool,'F_0'),s(bool,X34),s(bool,X35)),X36)) )),
  inference(superposition,[],[f481,f459])).
fof(f935,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X32)) | sP0(X33,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X31),s(bool,X32)))) )),
  inference(superposition,[],[f480,f459])).
fof(f923,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f459,f390])).
fof(f911,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.bool.COND_3'(s(bool,X0),s(X1,X3),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f459,f390])).
fof(f894,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X55)) | ~sP16('const.bool.COND_3'(s(bool,'T_0'),s(bool,X55),s(bool,X56)),X57,X58) | sP17('const.bool.COND_3'(s(bool,'T_0'),s(bool,X55),s(bool,X56)),X57,X58)) )),
  inference(superposition,[],[f664,f458])).
fof(f893,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X51)) | ~sP18('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54) | sP19('const.bool.COND_3'(s(bool,'T_0'),s(bool,X51),s(bool,X52)),X53,X54)) )),
  inference(superposition,[],[f663,f458])).
fof(f886,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,X26)) | sP0('const.bool.COND_3'(s(bool,'T_0'),s(bool,X26),s(bool,X27)),X28)) )),
  inference(superposition,[],[f481,f458])).
fof(f885,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,X23)) | sP0(X25,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X23),s(bool,X24)))) )),
  inference(superposition,[],[f480,f458])).
fof(f875,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f458,f390])).
fof(f852,plain,(
  ~sP13('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f383,f700,f610])).
fof(f759,plain,(
  ( ! [X0] : (sP19('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f383,f383,f659])).
fof(f748,plain,(
  ( ! [X0] : (sP17('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f383,f383,f642])).
fof(f742,plain,(
  ( ! [X0] : (sP17('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f383,f641])).
fof(f708,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f383,f383,f495])).
fof(f690,plain,(
  ( ! [X0,X1] : (sP10('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f383,f607])).
fof(f681,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f383,f481])).
fof(f680,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f383,f480])).
fof(f640,plain,(
  ( ! [X2,X0,X1] : (sP17(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f372])).
fof(f665,plain,(
  ( ! [X2,X0,X1] : (sP15(X0,X1,X2) | p(s(bool,X0)) | ~sP14(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f618])).
fof(f618,plain,(
  ( ! [X2,X0,X1] : (sP15(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP14(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f360])).
fof(f595,plain,(
  ( ! [X2,X0,X1] : (~sP11(X1,X2,X0) | p(s(bool,X0)) | ~sP12(X0,X2,X1) | sP13(X0,X1,X2) | ~sP10(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f348])).
fof(f586,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',sK65(X5,X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f345])).
fof(f345,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',sK65(X5,X4,X3,X2,X1,X0))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK65(X5,X4,X3,X2,X1,X0)))))))) & (! [X6] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6)))))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK65])],[f344])).
fof(f344,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ? [X7] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X7)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))))) & (! [X6] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6)))))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(rectify,[],[f343])).
fof(f343,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ? [X6] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6))))))) & (! [X6] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6)))))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(nnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ? [X6] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6)))))))),
  inference(flattening,[],[f170])).
fof(f170,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ? [X6] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6)))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X7] : ! [X8,X9,X19,X10] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10)))) <=> ? [X20] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X19),s('type.conSem.v',X20)))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X20)))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|1')).
fof(f587,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK65(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f345])).
fof(f588,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6))))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X6))))) )),
  inference(cnf_transformation,[],[f345])).
fof(f583,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,sK64(X5,X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,sK64(X5,X4,X3,X2,X1,X0))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK64(X5,X4,X3,X2,X1,X0)))))) & (! [X6] : (~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK64])],[f341])).
fof(f341,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ? [X7] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X7)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X7))))) & (! [X6] : (~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(rectify,[],[f340])).
fof(f340,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ? [X6] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))))) & (! [X6] : (~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(nnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ? [X6] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ? [X6] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6)))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : ! [X8,X9,X19,X10] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10)))) <=> ? [X20] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X6,X19))),s(X7,X20)))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20)))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|0')).
fof(f584,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK64(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f342])).
fof(f585,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X6))))) )),
  inference(cnf_transformation,[],[f342])).
fof(f581,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | sP9(X1,X0,X3,X4,X5,X2)) )),
  inference(cnf_transformation,[],[f339])).
fof(f339,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | sP9(X1,X0,X3,X4,X5,X2)) & (~sP9(X1,X0,X3,X4,X5,X2) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(nnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> sP9(X1,X0,X3,X4,X5,X2))),
  inference(definition_folding,[],[f214,f230,f229])).
fof(f229,plain,(
  ! [X1,X0,X2,X7,X9,X8] : (sP8(X1,X0,X2,X7,X9,X8) <=> ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f230,plain,(
  ! [X1,X0,X3,X4,X5,X2] : (sP9(X1,X0,X3,X4,X5,X2) <=> ! [X6] : (? [X7,X8,X9] : ((sP8(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f214,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ! [X6] : (? [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(ennf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(flattening,[],[f166])).
fof(f166,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X5,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X13),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X14)))) <=> ! [X15] : (! [X16,X17,X18] : ((? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X17) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X18) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20))) & p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s(X6,X19))),s(X7,X20))))) | ? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X17) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X18) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X20))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.modSem.v',X19),s('type.conSem.v',X20))))) | ? [X11] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X17) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X18) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X17))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X13))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X14))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.result_rel_def')).
fof(f582,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9(X1,X0,X3,X4,X5,X2) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))) )),
  inference(cnf_transformation,[],[f339])).
fof(f577,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK62(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f338])).
fof(f338,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP8(X0,X1,X2,X3,X4,X5) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK62(X5,X4,X3,X2,X1,X0)))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK63(X5,X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,sK62(X5,X4,X3,X2,X1,X0)))),s(X0,sK63(X5,X4,X3,X2,X1,X0))))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7))))) | sP8(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK62,sK63])],[f337])).
fof(f337,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP8(X0,X1,X2,X3,X4,X5) | ? [X8,X9] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X8))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X8))),s(X0,X9)))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7))))) | sP8(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f336])).
fof(f336,plain,(
  ! [X1,X0,X2,X7,X9,X8] : ((~sP8(X1,X0,X2,X7,X9,X8) | ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14)))))) & (! [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | sP8(X1,X0,X2,X7,X9,X8)))),
  inference(nnf_transformation,[],[f229])).
fof(f578,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK63(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f338])).
fof(f579,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8(X0,X1,X2,X3,X4,X5) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,sK62(X5,X4,X3,X2,X1,X0)))),s(X0,sK63(X5,X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f338])).
fof(f580,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7)))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | sP8(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f338])).
fof(f566,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK58(X13,X5,X4,X3,X2,X1,X0)))))) | sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f335,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP9(X0,X1,X2,X3,X4,X5) | ! [X13] : (((sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK58(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK59(X13,X5,X4,X3,X2,X1,X0)))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK55(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK58(X13,X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK59(X13,X5,X4,X3,X2,X1,X0)))))) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK55(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4)))))) & ((! [X7,X8,X9] : ((~sP8(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK61(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK61(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) | sP9(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK55,sK56,sK57,sK58,sK59,sK60,sK61])],[f334])).
fof(f334,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP9(X0,X1,X2,X3,X4,X5) | ! [X13] : (? [X14,X15,X16] : ((sP8(X0,X1,X5,X14,X16,X15) | ? [X18,X19] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X18))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X19))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.modSem.v',X18),s('type.conSem.v',X19))))) | ? [X17] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X15))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X16))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP8(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) | sP9(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f333])).
fof(f333,plain,(
  ! [X1,X0,X3,X4,X5,X2] : ((~sP9(X1,X0,X3,X4,X5,X2) | ! [X6] : (? [X7,X8,X9] : ((sP8(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP8(X1,X0,X2,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))) | sP9(X1,X0,X3,X4,X5,X2)))),
  inference(nnf_transformation,[],[f230])).
fof(f567,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK59(X13,X5,X4,X3,X2,X1,X0)))))) | sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f568,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK55(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK58(X13,X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK59(X13,X5,X4,X3,X2,X1,X0))))) | sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f569,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK58(X13,X5,X4,X3,X2,X1,X0)))))) | sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f570,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK59(X13,X5,X4,X3,X2,X1,X0)))))) | sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f571,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK60(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK55(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK58(X13,X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK59(X13,X5,X4,X3,X2,X1,X0))))) | sP8(X0,X1,X5,sK55(X13,X5,X4,X3,X2,X1,X0),sK57(X13,X5,X4,X3,X2,X1,X0),sK56(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f572,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP9(X0,X1,X2,X3,X4,X5) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK55(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK56(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK57(X13,X5,X4,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f335])).
fof(f573,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP8(X0,X1,X5,X7,X9,X8) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK61(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9)))) | sP9(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f335])).
fof(f574,plain,(
  ( ! [X4,X2,X0,X12,X8,X7,X5,X3,X1,X11,X9] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK61(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12)))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | sP9(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f335])).
fof(f575,plain,(
  ( ! [X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK61(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9)))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | sP9(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f335])).
fof(f576,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK61(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4)))) | sP9(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f335])).
fof(f562,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6(X0,X1,X2,X3,X4,X5) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,sK53(X5,X4,X3,X2,X1,X0)))),s(X0,sK54(X5,X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f331])).
fof(f563,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7)))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | sP6(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f331])).
fof(f552,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK51(X5,X4,X3,X2,X1,X0)))))) | sP6(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f553,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2,X3,X4,X5) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',sK50(X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK51(X5,X4,X3,X2,X1,X0))))) | sP6(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f555,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK51(X5,X4,X3,X2,X1,X0)))))) | sP6(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f556,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2,X3,X4,X5) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',sK50(X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK51(X5,X4,X3,X2,X1,X0))))) | sP6(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f557,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2,X3,X4,X5) | ~sP6(X0,X2,X5,X4,X1,X3)) )),
  inference(cnf_transformation,[],[f328])).
fof(f558,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X7),s('type.conSem.v',X8)))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))) | sP7(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f328])).
fof(f550,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f324])).
fof(f547,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) | sP5(X1,X0,X3,X4,X5,X2)) )),
  inference(cnf_transformation,[],[f323])).
fof(f323,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) | sP5(X1,X0,X3,X4,X5,X2)) & (~sP5(X1,X0,X3,X4,X5,X2) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(nnf_transformation,[],[f225])).
fof(f225,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> sP5(X1,X0,X3,X4,X5,X2))),
  inference(definition_folding,[],[f213,f224,f223])).
fof(f223,plain,(
  ! [X1,X0,X2,X7,X9,X8] : (sP4(X1,X0,X2,X7,X9,X8) <=> ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f224,plain,(
  ! [X1,X0,X3,X4,X5,X2] : (sP5(X1,X0,X3,X4,X5,X2) <=> ! [X6] : (? [X7,X8,X9] : ((sP4(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f213,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> ! [X6] : (? [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(ennf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7] : ! [X5,X12,X13,X14] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X14)))) <=> ! [X15] : (! [X16,X17,X18] : ((? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X17) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X18) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20))) & p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s(X6,X19))),s(X7,X20))))) | ? [X19,X20] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X17) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X19))))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X18) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X20))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X16),s('type.semanticPrimitives.v',X19),s('type.modSem.v',X20))))) | ? [X11] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X17) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X18) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X16))),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X17))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X18))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X12))),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X13))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X14))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.source_to_modProof.result_rel_def')).
fof(f548,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5(X1,X0,X3,X4,X5,X2) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))) )),
  inference(cnf_transformation,[],[f323])).
fof(f543,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK48(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f322])).
fof(f322,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP4(X0,X1,X2,X3,X4,X5) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK48(X5,X4,X3,X2,X1,X0)))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK49(X5,X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,sK48(X5,X4,X3,X2,X1,X0)))),s(X0,sK49(X5,X4,X3,X2,X1,X0))))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7))))) | sP4(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK48,sK49])],[f321])).
fof(f321,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP4(X0,X1,X2,X3,X4,X5) | ? [X8,X9] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X8))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X8))),s(X0,X9)))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7))))) | sP4(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f320])).
fof(f320,plain,(
  ! [X1,X0,X2,X7,X9,X8] : ((~sP4(X1,X0,X2,X7,X9,X8) | ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14)))))) & (! [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | sP4(X1,X0,X2,X7,X9,X8)))),
  inference(nnf_transformation,[],[f223])).
fof(f544,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK49(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f322])).
fof(f545,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4(X0,X1,X2,X3,X4,X5) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,sK48(X5,X4,X3,X2,X1,X0)))),s(X0,sK49(X5,X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f322])).
fof(f546,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7)))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | sP4(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f322])).
fof(f532,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK44(X13,X5,X4,X3,X2,X1,X0)))))) | sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f319,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP5(X0,X1,X2,X3,X4,X5) | ! [X13] : (((sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK44(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK45(X13,X5,X4,X3,X2,X1,X0)))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK41(X13,X5,X4,X3,X2,X1,X0)),s('type.semanticPrimitives.v',sK44(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK45(X13,X5,X4,X3,X2,X1,X0)))))) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),sK41(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4)))))) & ((! [X7,X8,X9] : ((~sP4(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK47(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK47(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) | sP5(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK41,sK42,sK43,sK44,sK45,sK46,sK47])],[f318])).
fof(f318,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP5(X0,X1,X2,X3,X4,X5) | ! [X13] : (? [X14,X15,X16] : ((sP4(X0,X1,X5,X14,X16,X15) | ? [X18,X19] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X18))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.semanticPrimitives.v',X18),s('type.modSem.v',X19))))) | ? [X17] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X15))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X16))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP4(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) | sP5(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f317])).
fof(f317,plain,(
  ! [X1,X0,X3,X4,X5,X2] : ((~sP5(X1,X0,X3,X4,X5,X2) | ! [X6] : (? [X7,X8,X9] : ((sP4(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP4(X1,X0,X2,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))) | sP5(X1,X0,X3,X4,X5,X2)))),
  inference(nnf_transformation,[],[f224])).
fof(f533,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK45(X13,X5,X4,X3,X2,X1,X0)))))) | sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f534,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK41(X13,X5,X4,X3,X2,X1,X0)),s('type.semanticPrimitives.v',sK44(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK45(X13,X5,X4,X3,X2,X1,X0))))) | sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f535,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK44(X13,X5,X4,X3,X2,X1,X0)))))) | sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f536,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK45(X13,X5,X4,X3,X2,X1,X0)))))) | sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f537,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK46(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK41(X13,X5,X4,X3,X2,X1,X0)),s('type.semanticPrimitives.v',sK44(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK45(X13,X5,X4,X3,X2,X1,X0))))) | sP4(X0,X1,X5,sK41(X13,X5,X4,X3,X2,X1,X0),sK43(X13,X5,X4,X3,X2,X1,X0),sK42(X13,X5,X4,X3,X2,X1,X0)) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f538,plain,(
  ( ! [X4,X2,X0,X5,X3,X1,X13] : (~sP5(X0,X1,X2,X3,X4,X5) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),sK41(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK42(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK43(X13,X5,X4,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f539,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP4(X0,X1,X5,X7,X9,X8) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK47(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9)))) | sP5(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f319])).
fof(f540,plain,(
  ( ! [X4,X2,X0,X12,X8,X7,X5,X3,X1,X11,X9] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK47(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9)))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12)))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | sP5(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f319])).
fof(f541,plain,(
  ( ! [X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK47(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9)))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | sP5(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f319])).
fof(f542,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK47(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4)))) | sP5(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f319])).
fof(f531,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X1,X5,X0,X4,X3,X2) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))) )),
  inference(cnf_transformation,[],[f316])).
fof(f526,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP2(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK39(X5,X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f315])).
fof(f528,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP2(X0,X1,X2,X3,X4,X5) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,sK39(X5,X4,X3,X2,X1,X0)))),s(X0,sK40(X5,X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f315])).
fof(f529,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7)))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | sP2(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f315])).
fof(f518,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK37(X5,X4,X3,X2,X1,X0)))))) | sP2(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f519,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,X1,X2,X3,X4,X5) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',sK36(X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK37(X5,X4,X3,X2,X1,X0))))) | sP2(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f520,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) = s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK36(X5,X4,X3,X2,X1,X0)))))) | sP2(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f521,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK37(X5,X4,X3,X2,X1,X0)))))) | sP2(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f522,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3(X0,X1,X2,X3,X4,X5) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',sK36(X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK37(X5,X4,X3,X2,X1,X0))))) | sP2(X0,X2,X5,X4,X1,X3) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK38(X5,X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f523,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP3(X0,X1,X2,X3,X4,X5) | ~sP2(X0,X2,X5,X4,X1,X3)) )),
  inference(cnf_transformation,[],[f312])).
fof(f524,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X7))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X4),s('type.semanticPrimitives.v',X7),s('type.modSem.v',X8)))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X8))))) | sP3(X0,X1,X2,X3,X4,X5)) )),
  inference(cnf_transformation,[],[f312])).
fof(f525,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP3(X0,X1,X2,X3,X4,X5) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),X3) != s('type.semanticPrimitives.result'(X2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f516,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5))))))) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(ennf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7] : ! [X8,X9,X19,X20] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X6,X19))),s(X7,X20)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20)))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.result_rel_rules|split|0')).
fof(f515,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X5)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5))))))))) )),
  inference(cnf_transformation,[],[f211])).
fof(f211,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X5)))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5)))))))))),
  inference(ennf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X5)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5)))))))))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X4),s('type.conSem.v',X5)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X5)))))))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X8,X9,X19,X20] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X19),s('type.conSem.v',X20)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X20)))))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.result_rel_rules|split|1')).
fof(f514,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3,X4] : p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X4))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : ! [X8,X9,X11] : p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.result_rel_rules|split|2')).
fof(f512,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.error_result'(X1),X2) != s('type.semanticPrimitives.error_result'(X1),X3) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))) )),
  inference(cnf_transformation,[],[f308])).
fof(f509,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) )),
  inference(cnf_transformation,[],[f307])).
fof(f307,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) & (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))))),
  inference(nnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X7,X6] : ! [X11,X33] : (s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X11))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X33))) <=> s(X6,X11) = s(X6,X33))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.semanticPrimitives.result_|49||49||split|0')).
fof(f510,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))) )),
  inference(cnf_transformation,[],[f307])).
fof(f508,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK35(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK35(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK35(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK35(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK35])],[f210])).
fof(f210,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2',aHL_EXT)).
fof(f504,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK33(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0))))))))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK30(X3,X2,X1,X0)),s('type.modSem.v',sK31(X3,X2,X1,X0)),s('type.conSem.v',sK32(X3,X2,X1,X0))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK27(X3,X2,X1,X0)))),s(X0,sK28(X3,X2,X1,X0)))),s(X1,sK29(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f305])).
fof(f305,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK27(X3,X2,X1,X0)))),s(X0,sK28(X3,X2,X1,X0)))),s(X1,sK29(X3,X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK27(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK28(X3,X2,X1,X0)))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK29(X3,X2,X1,X0)))))))) | (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK30(X3,X2,X1,X0)),s('type.modSem.v',sK31(X3,X2,X1,X0)),s('type.conSem.v',sK32(X3,X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK30(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK31(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK32(X3,X2,X1,X0)))))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK33(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0))))))))) | ! [X4,X5,X6] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34])],[f304])).
fof(f304,plain,(
  ! [X0,X1,X2,X3] : (? [X12,X13,X14] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s(X0,X13))),s(X1,X14)))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))))))) | ? [X9,X10,X11] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X10))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X11))))))))) | ? [X7,X8] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X8))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X8)))))))) | ! [X4,X5,X6] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6))))))),
  inference(rectify,[],[f209])).
fof(f209,plain,(
  ! [X0,X1,X2,X3] : (? [X9,X10,X11] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X0,X10))),s(X1,X11)))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X10))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X11))))))) | ? [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))))))) | ? [X4,X5] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))) | ! [X12,X13,X14] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14))))))),
  inference(flattening,[],[f208])).
fof(f208,plain,(
  ! [X0,X1,X2,X3] : ((? [X9,X10,X11] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X0,X10))),s(X1,X11)))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X10))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X11))))))) | ? [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))))))) | ? [X4,X5] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))))) | ! [X12,X13,X14] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14))))))),
  inference(ennf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3] : ((! [X9,X10,X11] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X0,X10))),s(X1,X11)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X10))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X11))))))) & ! [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X8)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))))))) & ! [X4,X5] : p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))))) => ! [X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14))))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : ! [X2,X3] : ((! [X9,X10,X11] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X0,X10))),s(X1,X11)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X10))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X11))))))) & ! [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X8)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X7))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X8))))))))) & ! [X4,X5] : p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))))) => ! [X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X13))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X14))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : ! [X8,X15] : ((! [X9,X19,X20] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X6,X19))),s(X7,X20)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X19))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X20))))))) & ! [X9,X19,X20] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X19),s('type.conSem.v',X20)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X20))))))))) & ! [X9,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))))) => ! [X23,X24,X25] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X23),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X24),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X25)))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X23))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X24))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X25))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.result_rel_ind')).
fof(f505,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK33(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0))))))))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK30(X3,X2,X1,X0)),s('type.modSem.v',sK31(X3,X2,X1,X0)),s('type.conSem.v',sK32(X3,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK27(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK28(X3,X2,X1,X0)))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK29(X3,X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f305])).
fof(f506,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK33(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0))))))))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK30(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK31(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK32(X3,X2,X1,X0))))))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK27(X3,X2,X1,X0)))),s(X0,sK28(X3,X2,X1,X0)))),s(X1,sK29(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f305])).
fof(f507,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK33(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK34(X3,X2,X1,X0))))))))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X5))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X6)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK30(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK31(X3,X2,X1,X0)))))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK32(X3,X2,X1,X0))))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK27(X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK28(X3,X2,X1,X0)))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK29(X3,X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f305])).
fof(f470,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X3),s('type.modLang.dec',X4))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X3))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X3))),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X5))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))) | s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X3),s('type.modLang.dec',X4))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X3))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X3))),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X5))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))))),
  inference(flattening,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X3),s('type.modLang.dec',X4))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6)))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X3))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X3))),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X5))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))))),
  inference(ennf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6) != s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X3),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6)))) => s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X3))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X3))),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X5))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((~s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X3),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6)))) => s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X3))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X3))),s('type.modLang.dec',X4))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))),s('type.num.num',X1))))),s('type.modSem.state'(X0),X5))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X6))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X27,X28,X29,X30,X31,X10] : ((~s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X10) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X28),s('type.modSem.state'(X6),X29),s('type.modLang.dec',X30))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X31),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X10)))) => s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.modSem.evaluate_dec_3'(s('type.modSem.environment',X28),s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X29))),s('type.num.num',X27))))),s('type.modSem.state'(X6),X29))),s('type.modLang.dec',X30))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X31))),s('type.num.num',X27))))),s('type.modSem.state'(X6),X31))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.modSem.v')),'type.modSem.v'),X10))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.modProps.modProps_8_prove_ltb')).
fof(f466,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK26(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK26(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26])],[f292])).
fof(f292,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f291])).
fof(f291,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : ! [X38,X11] : (? [X34] : (s(X6,X11) = s(X6,X34) & p(s(bool,happ(s(fun(X6,bool),X38),s(X6,X34))))) <=> p(s(bool,happ(s(fun(X6,bool),X38),s(X6,X11)))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.bool.UNWIND_THM2')).
fof(f467,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK26(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f293])).
fof(f468,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK26(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f293])).
fof(f465,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.abort',X1) != s('type.semanticPrimitives.abort',X2) | s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))) )),
  inference(cnf_transformation,[],[f290])).
fof(f462,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X1))) != s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f289])).
fof(f289,plain,(
  ! [X0,X1,X2] : ((s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X1))) != s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : (s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6] : ! [X11,X33] : (s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rraise_1'(s(X6,X11))) = s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rraise_1'(s(X6,X33))) <=> s(X6,X11) = s(X6,X33))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.semanticPrimitives.error_result_|49||49||split|0')).
fof(f463,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X1))) = s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rraise_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f289])).
fof(f403,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f252])).
fof(f5654,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640,f5642,f5644,f5646,f5651,f5653])).
fof(f5652,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640,f5642,f5644,f5646,f5651])).
fof(f5650,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f5401,f383])).
fof(f5401,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f5030,f2607])).
fof(f5649,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f5399,f383])).
fof(f5399,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f5030,f2681])).
fof(f5648,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f5398,f383])).
fof(f5398,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f5030,f2462])).
fof(f5647,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640,f5642,f5644,f5646])).
fof(f5645,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640,f5642,f5644])).
fof(f5643,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640,f5642])).
fof(f5641,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638,f5640])).
fof(f5639,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636,f5638])).
fof(f5637,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634,f5636])).
fof(f5635,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632,f5634])).
fof(f5633,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630,f5632])).
fof(f5631,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628,f5630])).
fof(f5629,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626,f5628])).
fof(f5627,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624,f5626])).
fof(f5625,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622,f5624])).
fof(f5623,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620,f5622])).
fof(f5621,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612,f5620])).
fof(f5619,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5618,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612])).
fof(f5618,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f5366,f383])).
fof(f5366,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f1500])).
fof(f1500,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X0),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | $spl2),
  inference(forward_demodulation,[],[f1494,f676])).
fof(f1494,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X0),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | $spl2),
  inference(superposition,[],[f467,f676])).
fof(f5615,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5614,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612])).
fof(f5614,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X0),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X1)),'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f5364,f383])).
fof(f5364,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X0),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X1)),'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f1811])).
fof(f1811,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X0),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X0),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X1)),'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | $spl2),
  inference(superposition,[],[f1500,f458])).
fof(f5613,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610,f5612])).
fof(f5611,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608,f5610])).
fof(f5609,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606,f5608])).
fof(f5607,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604,f5606])).
fof(f5605,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602,f5604])).
fof(f5603,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600,f5602])).
fof(f5601,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598,f5600])).
fof(f5599,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596,f5598])).
fof(f5597,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588,f5596])).
fof(f5595,plain,(
  $false | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f5323,f383])).
fof(f5323,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f2700])).
fof(f2700,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(sK21,bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X3))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f2699,f564])).
fof(f5594,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5593,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588])).
fof(f5593,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(sK21,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,X3,X2,X1)) ) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f5321,f383])).
fof(f5321,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | sP7(sK21,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,X3,X2,X1)) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f2130])).
fof(f2130,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(sK21,bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X3),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | sP7(sK21,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X0,X3,X2,X1)) ) | $spl2),
  inference(superposition,[],[f564,f676])).
fof(f5592,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5591,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588])).
fof(f5591,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(sK21,X0,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X1)) ) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f5320,f383])).
fof(f5320,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | sP9(sK21,X0,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X1)) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f2192])).
fof(f2192,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(sK21,bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X3),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | sP9(sK21,X0,X2,X3,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),X1)) ) | $spl2),
  inference(superposition,[],[f581,f676])).
fof(f5590,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f5319,f383])).
fof(f5319,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f5030,f2708])).
fof(f5589,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583,f5588])).
fof(f5585,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f5314,f383])).
fof(f5314,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f5030,f2772])).
fof(f5584,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579,f5583])).
fof(f5580,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577,f5579])).
fof(f5578,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575,f5577])).
fof(f5576,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573,f5575])).
fof(f5574,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571,f5573])).
fof(f5572,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569,f5571])).
fof(f5570,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567,f5569])).
fof(f5568,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565,f5567])).
fof(f5566,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563,f5565])).
fof(f5564,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561,f5563])).
fof(f5562,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551,f5561])).
fof(f5552,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546,f5551])).
fof(f5549,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5253,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546])).
fof(f5253,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X0,X1,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X2,sK24,sK21))))))) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f2771])).
fof(f2771,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X0,X1,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),X3),s('type.semanticPrimitives.result'(X2,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X2,sK24,sK21))))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f2113,f1862,f1894,f555])).
fof(f1894,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X0)))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f469,f1889])).
fof(f1889,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X0))) | s('type.semanticPrimitives.error_result'('type.conSem.v'),X0) = s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))) ) | $spl2),
  inference(superposition,[],[f511,f676])).
fof(f5548,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5252,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546])).
fof(f5252,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X2,X3,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X0,sK24,sK21))))))) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f2720])).
fof(f2720,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X2,X3,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X0,sK24,sK21))))))) ) | $spl2),
  inference(forward_demodulation,[],[f2718,f459])).
fof(f2718,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))))) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK52(X2,X3,'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X0,sK24,sK21))))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f2113,f1862,f1894,f552])).
fof(f5547,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244,f5546])).
fof(f5544,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243,f5244])).
fof(f5543,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541,f5243])).
fof(f5542,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538,f5541])).
fof(f5539,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535,f5538])).
fof(f5536,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532,f5535])).
fof(f5533,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529,f5532])).
fof(f5530,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526,f5529])).
fof(f5527,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523,f5526])).
fof(f5524,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520,f5523])).
fof(f5521,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228,f5520])).
fof(f5518,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227,f5228])).
fof(f5517,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226,f5227])).
fof(f5516,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224,f5226])).
fof(f5515,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5225,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224])).
fof(f5225,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(sK21,sK24,X0,'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X1),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))),X2,X3)) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f2113])).
fof(f5514,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223,f5224])).
fof(f5513,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222,f5223])).
fof(f5512,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510,f5222])).
fof(f5511,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507,f5510])).
fof(f5508,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504,f5507])).
fof(f5505,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501,f5504])).
fof(f5502,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498,f5501])).
fof(f5499,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495,f5498])).
fof(f5496,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492,f5495])).
fof(f5493,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489,f5492])).
fof(f5490,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213,f5489])).
fof(f5487,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207,f5213])).
fof(f5486,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5208,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207])).
fof(f5208,plain,(
  ( ! [X2,X3] : (s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))) = s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.bool.COND_3'(s(bool,'T_0'),s('type.semanticPrimitives.error_result'('type.conSem.v'),X2),s('type.semanticPrimitives.error_result'('type.conSem.v'),X3))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X3)))) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f1897])).
fof(f1897,plain,(
  ( ! [X2,X3] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),X3))) | s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))) = s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.bool.COND_3'(s(bool,'F_0'),s('type.semanticPrimitives.error_result'('type.conSem.v'),X2),s('type.semanticPrimitives.error_result'('type.conSem.v'),X3)))) ) | $spl2),
  inference(superposition,[],[f1889,f459])).
fof(f5485,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205,f5207])).
fof(f5484,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196,f5205])).
fof(f5483,plain,(
  $false | ($spl2 | $spl6)),
  inference(global_subsumption,[],[f5482,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196])).
fof(f5482,plain,(
  ( ! [X2,X3] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X2),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X3)),'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f5481,f383])).
fof(f5481,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X2),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X3)),'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f5204,f5030])).
fof(f5204,plain,(
  ( ! [X2,X3] : (s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'T_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X2),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X3)),'type.semanticPrimitives.result'(sK21,'type.conSem.v'))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X3),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24))))) ) | ($spl2 | $spl6)),
  inference(backward_demodulation,[],[f5030,f1812])).
fof(f1812,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X3),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK26('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X2),s(fun('type.semanticPrimitives.result'(sK21,'type.conSem.v'),bool),X3)),'type.semanticPrimitives.result'(sK21,'type.conSem.v')))) ) | $spl2),
  inference(superposition,[],[f1500,f459])).
fof(f5478,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191,f5196])).
fof(f5477,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187,f5191])).
fof(f5476,plain,(
  $false | ($spl1 | $spl6)),
  inference(global_subsumption,[],[f5190,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187])).
fof(f5190,plain,(
  ( ! [X0,X1] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)),X0,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X1),s(bool,X0)))) ) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f5030,f1574])).
fof(f1574,plain,(
  ( ! [X0,X1] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)),X0,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X1),s(bool,X0)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f459,f675,f611])).
fof(f5475,plain,(
  $false | ($spl1 | $spl6)),
  inference(global_subsumption,[],[f5189,f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187])).
fof(f5189,plain,(
  ( ! [X0,X1] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)),'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)),X1)) ) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f5030,f1572])).
fof(f1572,plain,(
  ( ! [X0,X1] : (~sP13('const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)),'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f459,f675,f611])).
fof(f5474,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472,f5187])).
fof(f5473,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469,f5472])).
fof(f5470,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181,f5469])).
fof(f5467,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178,f5181])).
fof(f5466,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174,f5178])).
fof(f5465,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173,f5174])).
fof(f5464,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172,f5173])).
fof(f5463,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171,f5172])).
fof(f5462,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170,f5171])).
fof(f5461,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169,f5170])).
fof(f5460,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167,f5169])).
fof(f5459,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165,f5167])).
fof(f5458,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163,f5165])).
fof(f5457,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161,f5163])).
fof(f5456,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159,f5161])).
fof(f5455,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157,f5159])).
fof(f5454,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155,f5157])).
fof(f5453,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154,f5155])).
fof(f5452,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152,f5154])).
fof(f5451,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150,f5152])).
fof(f5450,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148,f5150])).
fof(f5449,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146,f5148])).
fof(f5448,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446,f5146])).
fof(f5447,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444,f5446])).
fof(f5445,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142,f5444])).
fof(f5443,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141,f5142])).
fof(f5442,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140,f5141])).
fof(f5441,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139,f5140])).
fof(f5440,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138,f5139])).
fof(f5439,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137,f5138])).
fof(f5438,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136,f5137])).
fof(f5437,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135,f5136])).
fof(f5436,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133,f5135])).
fof(f5435,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132,f5133])).
fof(f5434,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131,f5132])).
fof(f5433,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130,f5131])).
fof(f5432,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127,f5130])).
fof(f5431,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f5128,f383])).
fof(f5128,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f5030,f678])).
fof(f5430,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428,f5127])).
fof(f5429,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f382,f381,f383,f678,f390,f399,f398,f403,f402,f458,f459,f463,f462,f465,f464,f468,f467,f466,f469,f470,f474,f471,f481,f480,f679,f499,f496,f495,f494,f507,f506,f505,f504,f508,f510,f509,f512,f511,f513,f514,f515,f516,f525,f524,f523,f522,f521,f520,f519,f518,f517,f529,f528,f527,f526,f531,f530,f542,f541,f540,f539,f538,f537,f536,f535,f534,f533,f532,f546,f545,f544,f543,f548,f547,f550,f549,f559,f558,f557,f556,f555,f554,f553,f552,f551,f563,f562,f561,f560,f565,f564,f576,f575,f574,f573,f572,f571,f570,f569,f568,f567,f566,f580,f579,f578,f577,f582,f581,f585,f584,f583,f588,f587,f586,f595,f594,f593,f592,f591,f590,f589,f599,f598,f597,f596,f603,f602,f601,f600,f607,f606,f605,f604,f611,f610,f609,f608,f665,f615,f614,f613,f612,f622,f621,f620,f619,f628,f625,f624,f623,f635,f634,f633,f664,f631,f630,f629,f639,f638,f637,f636,f643,f642,f641,f640,f652,f651,f650,f663,f648,f647,f646,f656,f655,f654,f653,f660,f659,f658,f657,f680,f681,f682,f683,f684,f685,f686,f687,f688,f689,f690,f691,f692,f693,f694,f695,f696,f697,f698,f699,f700,f707,f708,f711,f716,f719,f724,f725,f727,f734,f738,f739,f742,f748,f749,f753,f756,f759,f786,f835,f844,f843,f854,f852,f866,f865,f864,f863,f875,f885,f886,f887,f888,f889,f890,f891,f892,f893,f894,f910,f909,f908,f907,f911,f923,f935,f936,f937,f938,f939,f940,f941,f942,f943,f944,f957,f958,f959,f960,f967,f970,f971,f972,f973,f984,f985,f987,f995,f998,f999,f1001,f1009,f1017,f1023,f1024,f1026,f1029,f1034,f1038,f1043,f1047,f1054,f1057,f1063,f1064,f1066,f1070,f1075,f1086,f1092,f1093,f1099,f1102,f1108,f1109,f1119,f1120,f1123,f1124,f1125,f1132,f1133,f1135,f1144,f1151,f1153,f1156,f1162,f1163,f1171,f1177,f1182,f1203,f1209,f1214,f1229,f1264,f1258,f1257,f1298,f1291,f1290,f1310,f1336,f1335,f1328,f1327,f1347,f1358,f1362,f1371,f1370,f1369,f1374,f1375,f1376,f1377,f1406,f1407,f1426,f1437,f1444,f1445,f1453,f1457,f1463,f1479,f1492,f1493,f1495,f1496,f1501,f1502,f1503,f1511,f1686,f1694,f1711,f1710,f1708,f1707,f1714,f1715,f1716,f1717,f1735,f1734,f1749,f1750,f1796,f1797,f1791,f1792,f1793,f1794,f1814,f1817,f1824,f1833,f1836,f1843,f1852,f1855,f1863,f1866,f1870,f1878,f1886,f1884,f1887,f1888,f1939,f1940,f1963,f1964,f1978,f1985,f1986,f1987,f1988,f1989,f1990,f1991,f1992,f1995,f2029,f2036,f2037,f2038,f2039,f2040,f2041,f2042,f2043,f2059,f2080,f2090,f2089,f2088,f2087,f2105,f2117,f2116,f2115,f2114,f2124,f2125,f2126,f2127,f2128,f2129,f2131,f2132,f2153,f2154,f2155,f2156,f2179,f2183,f2186,f2187,f2188,f2189,f2190,f2191,f2193,f2194,f2205,f2206,f2207,f2208,f2227,f2231,f2243,f2244,f2245,f2246,f2410,f2409,f2408,f2407,f2406,f2405,f2404,f2403,f2402,f2401,f2400,f2399,f2398,f2397,f2394,f2393,f2389,f2386,f2385,f2382,f2381,f2377,f2365,f2364,f2363,f2359,f2358,f2354,f2353,f2352,f2349,f2345,f2343,f2341,f2340,f2337,f2336,f2335,f2334,f2333,f2330,f2328,f2323,f2322,f2319,f2318,f2314,f2307,f2306,f2305,f2304,f2303,f2302,f2301,f2300,f2299,f2298,f2297,f2296,f2293,f2292,f2288,f2287,f2282,f2281,f2277,f2276,f2270,f2269,f2266,f2265,f2264,f2263,f2261,f2260,f2259,f2258,f2257,f2252,f2251,f2455,f2459,f2462,f2485,f2486,f2487,f2488,f2513,f2520,f2524,f2546,f2567,f2574,f2575,f2578,f2591,f2592,f2593,f2599,f2603,f2606,f2607,f2625,f2626,f2627,f2628,f2647,f2651,f2680,f2681,f2698,f2708,f2769,f2772,f2794,f2795,f2798,f2819,f2820,f2831,f2841,f2842,f2888,f2890,f2891,f2893,f2917,f2921,f2925,f2930,f2936,f2938,f2948,f2953,f3087,f3089,f3091,f3092,f3093,f3095,f3097,f3105,f3108,f3364,f3365,f3366,f3367,f3368,f3369,f3370,f3371,f3372,f3373,f3374,f3375,f3376,f3377,f3378,f3379,f3380,f3381,f3382,f3383,f3384,f3385,f3386,f3387,f3388,f3389,f3390,f3391,f3392,f3393,f3394,f3395,f3396,f3397,f3398,f3399,f3400,f3401,f3402,f3403,f3404,f5028,f5032,f5035,f5038,f5041,f5044,f5047,f5050,f5053,f3425,f3427,f3429,f3431,f5056,f5059,f3438,f3440,f3441,f3443,f5062,f5065,f3452,f3467,f3471,f3475,f3480,f3488,f3498,f3552,f3554,f3555,f3556,f3560,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5074,f5075,f5076,f5077,f5078,f5079,f3587,f3589,f3591,f3593,f5080,f5081,f5082,f5083,f3600,f3602,f3603,f3605,f5084,f5085,f3614,f3622,f3629,f3633,f3637,f3642,f3648,f3650,f3660,f3665,f5086,f5087,f5088,f5089,f5090,f5092,f5093,f5094,f3799,f3801,f3803,f3804,f3805,f3807,f3809,f3817,f3820,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5122,f5124,f5030,f5428])).
fof(f5427,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5175])).
fof(f5175,plain,(
  s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))) | $spl6),
  inference(backward_demodulation,[],[f5030,f1369])).
fof(f5426,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5182])).
fof(f5182,plain,(
  s('type.semanticPrimitives.error_result'('type.semanticPrimitives.error_result'(bool)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.error_result'('type.semanticPrimitives.error_result'(bool)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) | $spl6),
  inference(backward_demodulation,[],[f5030,f1463])).
fof(f5425,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5192])).
fof(f5192,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1707])).
fof(f5424,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5193])).
fof(f5193,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(bool),X0),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0')))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1710])).
fof(f5423,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5197])).
fof(f5197,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1734])).
fof(f5422,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5198])).
fof(f5198,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.error_result'('type.semanticPrimitives.result'(bool,X0)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.error_result'('type.semanticPrimitives.result'(bool,X0)),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1735])).
fof(f5421,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f5206])).
fof(f5206,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(X0,bool),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'(X0,bool),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(bool),'const.semanticPrimitives.Rraise_1'(s(bool,'T_0')))))) ) | $spl6),
  inference(backward_demodulation,[],[f5030,f1886])).
fof(f5066,plain,(
  ( ! [X2,X1] : (sP1(X1,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0'))) | p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f5066_D])).
fof(f5066_D,plain,(
  ( ! [X2,X1] : (sP1(X1,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0'))) | p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f5124,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')))) )),
  inference(condensation,[],[f5123])).
fof(f5123,plain,(
  ( ! [X304,X306,X305,X307] : (p(s(bool,X305)) | sP1(X305,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X306),s(bool,'T_0'))) | s(bool,X304) = s(bool,X307) | s(bool,'T_0') = s(bool,X307)) )),
  inference(subsumption_resolution,[],[f3906,f835])).
fof(f3906,plain,(
  ( ! [X304,X306,X305,X307] : (~p(s(bool,X304)) | p(s(bool,X305)) | sP1(X305,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X306),s(bool,'T_0'))) | s(bool,X304) = s(bool,X307) | s(bool,'T_0') = s(bool,X307)) )),
  inference(superposition,[],[f938,f786])).
fof(f5063,plain,(
  ( ! [X2,X1] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X1) | p(s(bool,X1))) ) | $spl28),
  inference(cnf_transformation,[],[f5063_D])).
fof(f5063_D,plain,(
  ( ! [X2,X1] : (sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X1) | p(s(bool,X1))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f5122,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X1)) )),
  inference(condensation,[],[f5121])).
fof(f5121,plain,(
  ( ! [X300,X302,X301,X303] : (p(s(bool,X301)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X302),s(bool,'T_0')),X301) | s(bool,X300) = s(bool,X303) | s(bool,'T_0') = s(bool,X303)) )),
  inference(subsumption_resolution,[],[f3905,f835])).
fof(f3905,plain,(
  ( ! [X300,X302,X301,X303] : (~p(s(bool,X300)) | p(s(bool,X301)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X302),s(bool,'T_0')),X301) | s(bool,X300) = s(bool,X303) | s(bool,'T_0') = s(bool,X303)) )),
  inference(superposition,[],[f937,f786])).
fof(f5060,plain,(
  ( ! [X2,X1] : (sP1(X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2))) | p(s(bool,X1))) ) | $spl26),
  inference(cnf_transformation,[],[f5060_D])).
fof(f5060_D,plain,(
  ( ! [X2,X1] : (sP1(X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2))) | p(s(bool,X1))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f5120,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)))) )),
  inference(condensation,[],[f5119])).
fof(f5119,plain,(
  ( ! [X265,X267,X264,X266] : (p(s(bool,X265)) | sP1(X265,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X266))) | s(bool,X264) = s(bool,X267) | s(bool,'T_0') = s(bool,X267)) )),
  inference(subsumption_resolution,[],[f3894,f835])).
fof(f3894,plain,(
  ( ! [X265,X267,X264,X266] : (~p(s(bool,X264)) | p(s(bool,X265)) | sP1(X265,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X266))) | s(bool,X264) = s(bool,X267) | s(bool,'T_0') = s(bool,X267)) )),
  inference(superposition,[],[f888,f786])).
fof(f5057,plain,(
  ( ! [X2,X1] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X1) | p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f5057_D])).
fof(f5057_D,plain,(
  ( ! [X2,X1] : (sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X1) | p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f5118,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X1)) )),
  inference(condensation,[],[f5117])).
fof(f5117,plain,(
  ( ! [X261,X263,X260,X262] : (p(s(bool,X261)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X262)),X261) | s(bool,X260) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) )),
  inference(subsumption_resolution,[],[f3893,f835])).
fof(f3893,plain,(
  ( ! [X261,X263,X260,X262] : (~p(s(bool,X260)) | p(s(bool,X261)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X262)),X261) | s(bool,X260) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) )),
  inference(superposition,[],[f887,f786])).
fof(f5054,plain,(
  ( ! [X2,X1] : (sP17('T_0',X1,X2) | ~sP16('T_0',X1,X2)) ) | $spl22),
  inference(cnf_transformation,[],[f5054_D])).
fof(f5054_D,plain,(
  ( ! [X2,X1] : (sP17('T_0',X1,X2) | ~sP16('T_0',X1,X2)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f5116,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP16('T_0',X1,X2) | sP17('T_0',X1,X2)) )),
  inference(condensation,[],[f5115])).
fof(f5115,plain,(
  ( ! [X222,X223,X221,X224] : (~sP16('T_0',X222,X223) | sP17('T_0',X222,X223) | s(bool,X221) = s(bool,X224) | s(bool,'T_0') = s(bool,X224)) )),
  inference(subsumption_resolution,[],[f3881,f835])).
fof(f3881,plain,(
  ( ! [X222,X223,X221,X224] : (~p(s(bool,X221)) | ~sP16('T_0',X222,X223) | sP17('T_0',X222,X223) | s(bool,X221) = s(bool,X224) | s(bool,'T_0') = s(bool,X224)) )),
  inference(superposition,[],[f664,f786])).
fof(f5051,plain,(
  ( ! [X2,X1] : (sP19('T_0',X1,X2) | ~sP18('T_0',X1,X2)) ) | $spl20),
  inference(cnf_transformation,[],[f5051_D])).
fof(f5051_D,plain,(
  ( ! [X2,X1] : (sP19('T_0',X1,X2) | ~sP18('T_0',X1,X2)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f5114,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP18('T_0',X1,X2) | sP19('T_0',X1,X2)) )),
  inference(condensation,[],[f5113])).
fof(f5113,plain,(
  ( ! [X218,X220,X219,X217] : (~sP18('T_0',X218,X219) | sP19('T_0',X218,X219) | s(bool,X217) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) )),
  inference(subsumption_resolution,[],[f3880,f835])).
fof(f3880,plain,(
  ( ! [X218,X220,X219,X217] : (~p(s(bool,X217)) | ~sP18('T_0',X218,X219) | sP19('T_0',X218,X219) | s(bool,X217) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) )),
  inference(superposition,[],[f663,f786])).
fof(f5048,plain,(
  ( ! [X2,X1] : (sP19('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl18),
  inference(cnf_transformation,[],[f5048_D])).
fof(f5048_D,plain,(
  ( ! [X2,X1] : (sP19('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f5112,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP19('T_0',X1,X2)) )),
  inference(condensation,[],[f5111])).
fof(f5111,plain,(
  ( ! [X216,X215,X213,X214] : (~p(s(bool,X214)) | sP19('T_0',X214,X215) | s(bool,X213) = s(bool,X216) | s(bool,'T_0') = s(bool,X216)) )),
  inference(subsumption_resolution,[],[f3879,f835])).
fof(f3879,plain,(
  ( ! [X216,X215,X213,X214] : (~p(s(bool,X213)) | ~p(s(bool,X214)) | sP19('T_0',X214,X215) | s(bool,X213) = s(bool,X216) | s(bool,'T_0') = s(bool,X216)) )),
  inference(superposition,[],[f659,f786])).
fof(f5045,plain,(
  ( ! [X2,X1] : (sP19('T_0',X2,X1) | p(s(bool,X1))) ) | $spl16),
  inference(cnf_transformation,[],[f5045_D])).
fof(f5045_D,plain,(
  ( ! [X2,X1] : (sP19('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f5110,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP19('T_0',X2,X1)) )),
  inference(condensation,[],[f5109])).
fof(f5109,plain,(
  ( ! [X212,X210,X211,X209] : (p(s(bool,X210)) | sP19('T_0',X211,X210) | s(bool,X209) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(subsumption_resolution,[],[f3878,f835])).
fof(f3878,plain,(
  ( ! [X212,X210,X211,X209] : (~p(s(bool,X209)) | p(s(bool,X210)) | sP19('T_0',X211,X210) | s(bool,X209) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f658,f786])).
fof(f5042,plain,(
  ( ! [X2,X1] : (sP17('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl14),
  inference(cnf_transformation,[],[f5042_D])).
fof(f5042_D,plain,(
  ( ! [X2,X1] : (sP17('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f5108,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('T_0',X1,X2)) )),
  inference(condensation,[],[f5107])).
fof(f5107,plain,(
  ( ! [X208,X206,X207,X205] : (~p(s(bool,X206)) | sP17('T_0',X206,X207) | s(bool,X205) = s(bool,X208) | s(bool,'T_0') = s(bool,X208)) )),
  inference(subsumption_resolution,[],[f3877,f835])).
fof(f3877,plain,(
  ( ! [X208,X206,X207,X205] : (~p(s(bool,X205)) | ~p(s(bool,X206)) | sP17('T_0',X206,X207) | s(bool,X205) = s(bool,X208) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f642,f786])).
fof(f5039,plain,(
  ( ! [X2,X1] : (sP17('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl12),
  inference(cnf_transformation,[],[f5039_D])).
fof(f5039_D,plain,(
  ( ! [X2,X1] : (sP17('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f5106,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('T_0',X2,X1)) )),
  inference(condensation,[],[f5105])).
fof(f5105,plain,(
  ( ! [X204,X202,X203,X201] : (~p(s(bool,X202)) | sP17('T_0',X203,X202) | s(bool,X201) = s(bool,X204) | s(bool,'T_0') = s(bool,X204)) )),
  inference(subsumption_resolution,[],[f3876,f835])).
fof(f3876,plain,(
  ( ! [X204,X202,X203,X201] : (~p(s(bool,X201)) | ~p(s(bool,X202)) | sP17('T_0',X203,X202) | s(bool,X201) = s(bool,X204) | s(bool,'T_0') = s(bool,X204)) )),
  inference(superposition,[],[f641,f786])).
fof(f5036,plain,(
  ( ! [X2,X1] : (~sP15(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl10),
  inference(cnf_transformation,[],[f5036_D])).
fof(f5036_D,plain,(
  ( ! [X2,X1] : (~sP15(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f5104,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,X1,'T_0')) )),
  inference(condensation,[],[f5103])).
fof(f5103,plain,(
  ( ! [X198,X200,X199,X197] : (~p(s(bool,X198)) | p(s(bool,X199)) | ~sP15(X199,X198,'T_0') | s(bool,X197) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) )),
  inference(subsumption_resolution,[],[f3875,f835])).
fof(f3875,plain,(
  ( ! [X198,X200,X199,X197] : (~p(s(bool,X197)) | ~p(s(bool,X198)) | p(s(bool,X199)) | ~sP15(X199,X198,'T_0') | s(bool,X197) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) )),
  inference(superposition,[],[f628,f786])).
fof(f5033,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl8),
  inference(cnf_transformation,[],[f5033_D])).
fof(f5033_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f5102,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f5101])).
fof(f5101,plain,(
  ( ! [X196,X194,X195] : (p(s(bool,X195)) | sP1(X195,'T_0') | s(bool,X194) = s(bool,X196) | s(bool,'T_0') = s(bool,X196)) )),
  inference(subsumption_resolution,[],[f3874,f835])).
fof(f3874,plain,(
  ( ! [X196,X194,X195] : (~p(s(bool,X194)) | p(s(bool,X195)) | sP1(X195,'T_0') | s(bool,X194) = s(bool,X196) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f499,f786])).
fof(f5029,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl4),
  inference(cnf_transformation,[],[f5029_D])).
fof(f5029_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f5100,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f5099])).
fof(f5099,plain,(
  ( ! [X191,X192,X193] : (p(s(bool,X192)) | sP1('T_0',X192) | s(bool,X191) = s(bool,X193) | s(bool,'T_0') = s(bool,X193)) )),
  inference(subsumption_resolution,[],[f3873,f835])).
fof(f3873,plain,(
  ( ! [X191,X192,X193] : (~p(s(bool,X191)) | p(s(bool,X192)) | sP1('T_0',X192) | s(bool,X191) = s(bool,X193) | s(bool,'T_0') = s(bool,X193)) )),
  inference(superposition,[],[f496,f786])).
fof(f5065,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')))) )),
  inference(condensation,[],[f5064])).
fof(f5064,plain,(
  ( ! [X304,X306,X305,X307] : (p(s(bool,X305)) | sP1(X305,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X306),s(bool,'T_0'))) | s(bool,X304) = s(bool,X307) | s(bool,'T_0') = s(bool,X307)) )),
  inference(subsumption_resolution,[],[f3448,f835])).
fof(f3448,plain,(
  ( ! [X304,X306,X305,X307] : (~p(s(bool,X304)) | p(s(bool,X305)) | sP1(X305,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X306),s(bool,'T_0'))) | s(bool,X304) = s(bool,X307) | s(bool,'T_0') = s(bool,X307)) )),
  inference(superposition,[],[f938,f786])).
fof(f5062,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,'T_0')),X1)) )),
  inference(condensation,[],[f5061])).
fof(f5061,plain,(
  ( ! [X300,X302,X301,X303] : (p(s(bool,X301)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X302),s(bool,'T_0')),X301) | s(bool,X300) = s(bool,X303) | s(bool,'T_0') = s(bool,X303)) )),
  inference(subsumption_resolution,[],[f3447,f835])).
fof(f3447,plain,(
  ( ! [X300,X302,X301,X303] : (~p(s(bool,X300)) | p(s(bool,X301)) | sP1('const.bool.COND_3'(s(bool,'F_0'),s(bool,X302),s(bool,'T_0')),X301) | s(bool,X300) = s(bool,X303) | s(bool,'T_0') = s(bool,X303)) )),
  inference(superposition,[],[f937,f786])).
fof(f5059,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)))) )),
  inference(condensation,[],[f5058])).
fof(f5058,plain,(
  ( ! [X265,X267,X264,X266] : (p(s(bool,X265)) | sP1(X265,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X266))) | s(bool,X264) = s(bool,X267) | s(bool,'T_0') = s(bool,X267)) )),
  inference(subsumption_resolution,[],[f3436,f835])).
fof(f3436,plain,(
  ( ! [X265,X267,X264,X266] : (~p(s(bool,X264)) | p(s(bool,X265)) | sP1(X265,'const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X266))) | s(bool,X264) = s(bool,X267) | s(bool,'T_0') = s(bool,X267)) )),
  inference(superposition,[],[f888,f786])).
fof(f5056,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X2)),X1)) )),
  inference(condensation,[],[f5055])).
fof(f5055,plain,(
  ( ! [X261,X263,X260,X262] : (p(s(bool,X261)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X262)),X261) | s(bool,X260) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) )),
  inference(subsumption_resolution,[],[f3435,f835])).
fof(f3435,plain,(
  ( ! [X261,X263,X260,X262] : (~p(s(bool,X260)) | p(s(bool,X261)) | sP1('const.bool.COND_3'(s(bool,'T_0'),s(bool,'T_0'),s(bool,X262)),X261) | s(bool,X260) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) )),
  inference(superposition,[],[f887,f786])).
fof(f5053,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP16('T_0',X1,X2) | sP17('T_0',X1,X2)) )),
  inference(condensation,[],[f5052])).
fof(f5052,plain,(
  ( ! [X222,X223,X221,X224] : (~sP16('T_0',X222,X223) | sP17('T_0',X222,X223) | s(bool,X221) = s(bool,X224) | s(bool,'T_0') = s(bool,X224)) )),
  inference(subsumption_resolution,[],[f3423,f835])).
fof(f3423,plain,(
  ( ! [X222,X223,X221,X224] : (~p(s(bool,X221)) | ~sP16('T_0',X222,X223) | sP17('T_0',X222,X223) | s(bool,X221) = s(bool,X224) | s(bool,'T_0') = s(bool,X224)) )),
  inference(superposition,[],[f664,f786])).
fof(f5050,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP18('T_0',X1,X2) | sP19('T_0',X1,X2)) )),
  inference(condensation,[],[f5049])).
fof(f5049,plain,(
  ( ! [X218,X220,X219,X217] : (~sP18('T_0',X218,X219) | sP19('T_0',X218,X219) | s(bool,X217) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) )),
  inference(subsumption_resolution,[],[f3422,f835])).
fof(f3422,plain,(
  ( ! [X218,X220,X219,X217] : (~p(s(bool,X217)) | ~sP18('T_0',X218,X219) | sP19('T_0',X218,X219) | s(bool,X217) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) )),
  inference(superposition,[],[f663,f786])).
fof(f5047,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP19('T_0',X1,X2)) )),
  inference(condensation,[],[f5046])).
fof(f5046,plain,(
  ( ! [X216,X215,X213,X214] : (~p(s(bool,X214)) | sP19('T_0',X214,X215) | s(bool,X213) = s(bool,X216) | s(bool,'T_0') = s(bool,X216)) )),
  inference(subsumption_resolution,[],[f3421,f835])).
fof(f3421,plain,(
  ( ! [X216,X215,X213,X214] : (~p(s(bool,X213)) | ~p(s(bool,X214)) | sP19('T_0',X214,X215) | s(bool,X213) = s(bool,X216) | s(bool,'T_0') = s(bool,X216)) )),
  inference(superposition,[],[f659,f786])).
fof(f5044,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP19('T_0',X2,X1)) )),
  inference(condensation,[],[f5043])).
fof(f5043,plain,(
  ( ! [X212,X210,X211,X209] : (p(s(bool,X210)) | sP19('T_0',X211,X210) | s(bool,X209) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(subsumption_resolution,[],[f3420,f835])).
fof(f3420,plain,(
  ( ! [X212,X210,X211,X209] : (~p(s(bool,X209)) | p(s(bool,X210)) | sP19('T_0',X211,X210) | s(bool,X209) = s(bool,X212) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f658,f786])).
fof(f5041,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('T_0',X1,X2)) )),
  inference(condensation,[],[f5040])).
fof(f5040,plain,(
  ( ! [X208,X206,X207,X205] : (~p(s(bool,X206)) | sP17('T_0',X206,X207) | s(bool,X205) = s(bool,X208) | s(bool,'T_0') = s(bool,X208)) )),
  inference(subsumption_resolution,[],[f3419,f835])).
fof(f3419,plain,(
  ( ! [X208,X206,X207,X205] : (~p(s(bool,X205)) | ~p(s(bool,X206)) | sP17('T_0',X206,X207) | s(bool,X205) = s(bool,X208) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f642,f786])).
fof(f5038,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP17('T_0',X2,X1)) )),
  inference(condensation,[],[f5037])).
fof(f5037,plain,(
  ( ! [X204,X202,X203,X201] : (~p(s(bool,X202)) | sP17('T_0',X203,X202) | s(bool,X201) = s(bool,X204) | s(bool,'T_0') = s(bool,X204)) )),
  inference(subsumption_resolution,[],[f3418,f835])).
fof(f3418,plain,(
  ( ! [X204,X202,X203,X201] : (~p(s(bool,X201)) | ~p(s(bool,X202)) | sP17('T_0',X203,X202) | s(bool,X201) = s(bool,X204) | s(bool,'T_0') = s(bool,X204)) )),
  inference(superposition,[],[f641,f786])).
fof(f5035,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP15(X2,X1,'T_0')) )),
  inference(condensation,[],[f5034])).
fof(f5034,plain,(
  ( ! [X198,X200,X199,X197] : (~p(s(bool,X198)) | p(s(bool,X199)) | ~sP15(X199,X198,'T_0') | s(bool,X197) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) )),
  inference(subsumption_resolution,[],[f3417,f835])).
fof(f3417,plain,(
  ( ! [X198,X200,X199,X197] : (~p(s(bool,X197)) | ~p(s(bool,X198)) | p(s(bool,X199)) | ~sP15(X199,X198,'T_0') | s(bool,X197) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) )),
  inference(superposition,[],[f628,f786])).
fof(f5032,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f5031])).
fof(f5031,plain,(
  ( ! [X196,X194,X195] : (p(s(bool,X195)) | sP1(X195,'T_0') | s(bool,X194) = s(bool,X196) | s(bool,'T_0') = s(bool,X196)) )),
  inference(subsumption_resolution,[],[f3416,f835])).
fof(f3416,plain,(
  ( ! [X196,X194,X195] : (~p(s(bool,X194)) | p(s(bool,X195)) | sP1(X195,'T_0') | s(bool,X194) = s(bool,X196) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f499,f786])).
fof(f5028,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f5027])).
fof(f5027,plain,(
  ( ! [X191,X192,X193] : (p(s(bool,X192)) | sP1('T_0',X192) | s(bool,X191) = s(bool,X193) | s(bool,'T_0') = s(bool,X193)) )),
  inference(subsumption_resolution,[],[f3415,f835])).
fof(f3415,plain,(
  ( ! [X191,X192,X193] : (~p(s(bool,X191)) | p(s(bool,X192)) | sP1('T_0',X192) | s(bool,X191) = s(bool,X193) | s(bool,'T_0') = s(bool,X193)) )),
  inference(superposition,[],[f496,f786])).
fof(f674,plain,(
  p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | $spl0),
  inference(cnf_transformation,[],[f674_D])).
fof(f674_D,plain,(
  p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f676,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) | $spl2),
  inference(cnf_transformation,[],[f676_D])).
fof(f676_D,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f381,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24))))),
  inference(cnf_transformation,[],[f247])).
fof(f247,plain,(
  (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) = s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25)))))) & (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21,sK22,sK23,sK24,sK25])],[f246])).
fof(f246,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))) & (~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4)))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5)))))))),
  inference(nnf_transformation,[],[f180])).
fof(f180,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4)))) <~> s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4)))) <=> s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4)))) <=> s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10)))) <=> s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10)))) <=> s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X10) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X11))))))),
  file('thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2','thm.mod_to_conProof.mod_to_conProof_52_prove_ltb|split|2')).
fof(f675,plain,(
  ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) | $spl1),
  inference(cnf_transformation,[],[f675_D])).
fof(f675_D,plain,(
  ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f677,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) | $spl3),
  inference(cnf_transformation,[],[f677_D])).
fof(f677_D,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f382,plain,(
  s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24) != s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))) | ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK20,fun(sK21,bool))),sK22),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK23),s('type.semanticPrimitives.result'(sK20,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK25))))),s('type.semanticPrimitives.result'(sK21,'type.conSem.v'),sK24))))),
  inference(cnf_transformation,[],[f247])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 643
% Passive clauses: 2276
% Generated clauses: 15881
% Final active clauses: 520
% Final passive clauses: 1106
% Input formulas: 69
% Initial clauses: 282
% 
% Duplicate literals: 596
% Trivial inequalities: 39
% Fw subsumption resolutions: 499
% Fw demodulations: 979
% Bw demodulations: 361
% Condensations: 1479
% Global subsumptions: 121
% 
% Simple tautologies: 82
% Equational tautologies: 129
% Forward subsumptions: 9185
% Fw demodulations to eq. taut.: 46
% Bw demodulations to eq. taut.: 11
% 
% Unit resulting resolution: 3128
% Factoring: 1
% Forward superposition: 5050
% Backward superposition: 2909
% Self superposition: 35
% Equality factoring: 26
% Equality resolution: 29
% 
% Split clauses: 60
% Split components: 120
% SAT solver clauses: 2909
% SAT solver unit clauses: 664
% SAT solver binary clauses: 987
% 
% Sat splits: 60
% Sat splitting refutations: 390
% 
% Memory used [KB]: 14583
% Time elapsed: 0.731 s
% ------------------------------
% ------------------------------
% Success in time 2.07 s
