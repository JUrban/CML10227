Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_removeProof
% (47448)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 905
% Passive clauses: 5623
% Generated clauses: 33978
% Final active clauses: 750
% Final passive clauses: 3692
% Input formulas: 133
% Initial clauses: 301
% 
% Duplicate literals: 214
% Trivial inequalities: 49
% Fw subsumption resolutions: 1616
% Fw demodulations: 2895
% Bw demodulations: 98
% 
% Simple tautologies: 191
% Equational tautologies: 24
% Forward subsumptions: 23054
% Fw demodulations to eq. taut.: 32
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 5369
% Factoring: 1305
% Forward superposition: 11231
% Backward superposition: 10653
% Self superposition: 70
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 293
% Split components: 603
% SAT solver clauses: 504
% SAT solver unit clauses: 14
% SAT solver binary clauses: 75
% 
% Sat splits: 293
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 485
% TWLsolver calls for satisfiability: 412
% 
% Memory used [KB]: 18166
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stack_removeProof
% (47473)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 218
% Passive clauses: 616
% Generated clauses: 4439
% Final active clauses: 201
% Final passive clauses: 314
% Input formulas: 133
% Initial clauses: 301
% 
% Duplicate literals: 60
% Trivial inequalities: 4
% Fw subsumption resolutions: 276
% Fw demodulations: 669
% Bw demodulations: 94
% Condensations: 33
% Global subsumptions: 27
% 
% Simple tautologies: 167
% Equational tautologies: 5
% Forward subsumptions: 1724
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 598
% Factoring: 46
% Forward superposition: 690
% Backward superposition: 866
% Self superposition: 26
% Equality factoring: 2
% Equality resolution: 1
% 
% Split clauses: 26
% Split components: 58
% SAT solver clauses: 1133
% SAT solver unit clauses: 367
% SAT solver binary clauses: 92
% SAT solver learnt clauses: 57
% SAT solver learnt literals: 279
% 
% Sat splits: 26
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1028
% TWLsolver calls for satisfiability: 39196
% 
% Memory used [KB]: 8443
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stack_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_removeProof
% SZS output start Proof for thm.stack_removeProof
fof(f20442,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f20441])).
fof(f20441,plain,(
  s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK19))))))) != s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK19)))))))),
  inference(forward_demodulation,[],[f20440,f480])).
fof(f480,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f104])).
fof(f104,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))),
  file('thm.stack_removeProof.read_mem_def_compute|split|2','thm.numeral.numeral_suc|split|1')).
fof(f20440,plain,(
  s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK19))))))) != s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK19)))))))))),
  inference(forward_demodulation,[],[f20433,f490])).
fof(f490,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.stack_removeProof.read_mem_def_compute|split|2','thm.numeral.numeral_distrib|split|14')).
fof(f20433,plain,(
  s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK19))))))) != s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK19)))))))))),
  inference(superposition,[],[f451,f680])).
fof(f680,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),X2),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.fcp.cart'(bool,X0),X2))),s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num',X4)))))) )),
  inference(cnf_transformation,[],[f271])).
fof(f271,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),X2),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.fcp.cart'(bool,X0),X2))),s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num',X4)))))),
  inference(flattening,[],[f270])).
fof(f270,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),X2),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.fcp.cart'(bool,X0),X2))),s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num',X4)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.list.list'(X7),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X6),X8),s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,happ(s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.fcp.cart'(bool,X6),X8))),s('type.list.list'(X7),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.num.num',X10)))))),
  file('thm.stack_removeProof.read_mem_def_compute|split|2','thm.stack_removeProof.read_mem_def|split|1')).
fof(f451,plain,(
  s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK19))))))) != s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,happ(s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.fcp.cart'(bool,sK15),sK17))),s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK15),sK17),s('type.fcp.cart'(bool,sK15),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK19)))))))))),
  inference(cnf_transformation,[],[f336])).
fof(f336,plain,(
  s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),sK17),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK19))))))) != s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,happ(s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.fcp.cart'(bool,sK15),sK17))),s('type.list.list'(sK16),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,sK15),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK15),sK17),s('type.fcp.cart'(bool,sK15),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,sK15),sK16),sK18),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK19)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15,sK16,sK17,sK18,sK19])],[f289])).
fof(f289,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),X2),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))) != s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.fcp.cart'(bool,X0),X2))),s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4)))))))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),X2),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.fcp.cart'(bool,X0),X2))),s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4)))))))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),X2),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.fcp.cart'(bool,X0),X2))),s('type.list.list'(X1),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X0),X1),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.list.list'(X7),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X6),X8),s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,happ(s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.fcp.cart'(bool,X6),X8))),s('type.list.list'(X7),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.list.list'(X7),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X6),X8),s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,happ(s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.fcp.cart'(bool,X6),X8))),s('type.list.list'(X7),'const.stack_removeProof.read_mem_3'(s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X8),s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'))),s(fun('type.fcp.cart'(bool,X6),X7),X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))))))),
  file('thm.stack_removeProof.read_mem_def_compute|split|2','thm.stack_removeProof.read_mem_def_compute|split|2')).
% SZS output end Proof for thm.stack_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 419
% Passive clauses: 1680
% Generated clauses: 19983
% Final active clauses: 409
% Final passive clauses: 1191
% Input formulas: 133
% Initial clauses: 301
% 
% Duplicate literals: 26
% Trivial inequalities: 8
% Fw subsumption resolutions: 118
% Fw demodulations: 3491
% Bw demodulations: 76
% Condensations: 19
% 
% Simple tautologies: 100
% Equational tautologies: 19
% Forward subsumptions: 14380
% Fw demodulations to eq. taut.: 127
% Bw demodulations to eq. taut.: 3
% 
% Unit resulting resolution: 1824
% Factoring: 2
% Forward superposition: 7825
% Backward superposition: 6193
% Self superposition: 85
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 1699
% SAT solver unit clauses: 836
% SAT solver binary clauses: 526
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% Memory used [KB]: 21364
% Time elapsed: 0.658 s
% ------------------------------
% ------------------------------
% Success in time 1.988 s
