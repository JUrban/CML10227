Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.misc
% (25781)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 787
% Passive clauses: 8410
% Generated clauses: 23084
% Final active clauses: 777
% Final passive clauses: 7288
% Input formulas: 47
% Initial clauses: 181
% 
% Duplicate literals: 628
% Trivial inequalities: 105
% Fw subsumption resolutions: 2373
% Fw demodulations: 1120
% Bw demodulations: 7
% 
% Simple tautologies: 275
% Equational tautologies: 56
% Forward subsumptions: 9168
% 
% Binary resolution: 9001
% Factoring: 1396
% Forward superposition: 4457
% Backward superposition: 3430
% Self superposition: 41
% Equality factoring: 28
% Equality resolution: 39
% 
% Split clauses: 833
% Split components: 1685
% SAT solver clauses: 1276
% SAT solver unit clauses: 23
% SAT solver binary clauses: 155
% 
% Sat splits: 833
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1265
% TWLsolver calls for satisfiability: 460
% 
% Memory used [KB]: 12153
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f3280,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3269,f251,f452,f297,f476,f3228,f3230,f295,f474,f341,f500,f3168,f3170,f252,f456,f342,f501,f947,f956,f250,f454,f268,f465,f2888,f2889,f259,f463,f294,f473,f339,f498])).
fof(f498,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X3))))),s('type.list.list'(X1),X3)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),X3))))) ) | $spl60),
  inference(cnf_transformation,[],[f498_D])).
fof(f498_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X3))))),s('type.list.list'(X1),X3)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),X3))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f339,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X3))))),s('type.list.list'(X1),X3)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),X3))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),X3)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X3))))),s('type.list.list'(X1),X3)))))))),
  inference(ennf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),X3)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X3))))),s('type.list.list'(X1),X3)))))))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),X3)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X0),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X3))))),s('type.list.list'(X1),X3)))))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X7,X6] : ! [X9,X24] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X24)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X6,X7)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X9),s('type.list.list'(X6),X24))))),s('type.list.list'(X6),X24)))))))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.misc.anub_all_distinct_keys')).
fof(f473,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl20),
  inference(cnf_transformation,[],[f473_D])).
fof(f473_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f294,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X22] : s('type.list.list'(X6),X22) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X22),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.list.APPEND_NIL')).
fof(f463,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl8),
  inference(cnf_transformation,[],[f463_D])).
fof(f463_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f259,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.list.ALL_DISTINCT|split|0')).
fof(f2889,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s('type.list.list'(X0),'const.list.NIL_0'))))))))) ) | $spl1190),
  inference(cnf_transformation,[],[f2889_D])).
fof(f2889_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s('type.list.list'(X0),'const.list.NIL_0'))))))))) ) <=> ~$spl1190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1190])])).
fof(f2888,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s('type.list.list'(X0),'const.list.NIL_0'))))))))) ) | ($spl4 | $spl8 | $spl20 | $spl60)),
  inference(subsumption_resolution,[],[f2887,f456])).
fof(f2887,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s('type.list.list'(X0),'const.list.NIL_0'))))))))) ) | ($spl8 | $spl20 | $spl60)),
  inference(forward_demodulation,[],[f2867,f463])).
fof(f2867,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s('type.list.list'(X0),'const.list.NIL_0')))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0'))))) ) | ($spl20 | $spl60)),
  inference(superposition,[],[f498,f473])).
fof(f465,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f465_D])).
fof(f465_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f268,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.bool.EQ_CLAUSES|split|1')).
fof(f454,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0')))))))) | $spl2),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0')))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f250,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))))))),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0')))))))) & s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) != s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16])],[f124])).
fof(f124,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X3),s('type.list.list'(X0),'const.list.NIL_0')))))))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X3),s(X0,X4))))),
  inference(ennf_transformation,[],[f50])).
fof(f50,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X3),s('type.list.list'(X0),'const.list.NIL_0')))))))) => s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X3),s(X0,X4))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X3),s('type.list.list'(X0),'const.list.NIL_0')))))))) => s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X3),s(X0,X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X10),s(X7,X8))),s(fun('type.pair.prod'(X6,X7),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X6,X7)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X9),s('type.list.list'(X6),'const.list.NIL_0')))))))) => s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X9),s(X6,X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X10),s(X7,X8))),s(fun('type.pair.prod'(X6,X7),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X6,X7)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X9),s('type.list.list'(X6),'const.list.NIL_0')))))))) => s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X9),s(X6,X10))))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.misc.MEM_anub_ALOOKUP')).
fof(f956,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))))) | $spl388),
  inference(cnf_transformation,[],[f956_D])).
fof(f956_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))))) <=> ~$spl388),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl388])])).
fof(f947,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.pair.prod'(sK12,sK13),'const.pair.,_2'(s(sK12,sK16),s(sK13,sK14))),s(fun('type.pair.prod'(sK12,sK13),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))))) | ($spl2 | $spl12)),
  inference(resolution,[],[f454,f465])).
fof(f501,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4))))))) ) | $spl66),
  inference(cnf_transformation,[],[f501_D])).
fof(f501_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4))))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f342,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))) | ~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4))))))) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) | ~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) | ~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4))))))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))))),
  inference(ennf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) & p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4))))))) => s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4)))))) & p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))),s(fun('type.pair.prod'(X0,X1),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X4))))))) => s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X8,X10,X11] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X11)))))) & p(s(bool,'const.bool.IN_2'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X10),s(X7,X8))),s(fun('type.pair.prod'(X6,X7),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'(X6,X7)),X11))))))) => s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X11),s(X6,X10))))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.alist.ALOOKUP_ALL_DISTINCT_MEM')).
fof(f456,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f456_D])).
fof(f456_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f252,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.misc.MEM_anub_ALOOKUP',aHL_TRUTH)).
fof(f3170,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))),s(sK12,sK16))) | $spl1246),
  inference(cnf_transformation,[],[f3170_D])).
fof(f3170_D,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))),s(sK12,sK16))) <=> ~$spl1246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1246])])).
fof(f3168,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))),s(sK12,sK16))) | ($spl4 | $spl66 | $spl388 | $spl1190)),
  inference(subsumption_resolution,[],[f3167,f2889])).
fof(f3167,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))),s(sK12,sK16))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun('type.pair.prod'(sK12,sK13),sK12),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0')))))))) | ($spl4 | $spl66 | $spl388)),
  inference(subsumption_resolution,[],[f3102,f456])).
fof(f3102,plain,(
  ~p(s(bool,'T_0')) | s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))),s(sK12,sK16))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun('type.pair.prod'(sK12,sK13),sK12),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s('type.list.list'(sK12),'const.list.NIL_0')))))))) | ($spl66 | $spl388)),
  inference(superposition,[],[f501,f956])).
fof(f500,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))) = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(X1,X3),s(fun(X1,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X1),X4))))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s(X1,X3)))))) ) | $spl64),
  inference(cnf_transformation,[],[f500_D])).
fof(f500_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))) = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(X1,X3),s(fun(X1,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X1),X4))))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s(X1,X3)))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f341,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))) = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(X1,X3),s(fun(X1,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X1),X4))))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))) = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(X1,X3),s(fun(X1,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X1),X4))))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s(X1,X3)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))) = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(X1,X3),s(fun(X1,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X1),X4))))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s('type.list.list'(X1),X4))),s(X1,X3))),s('type.option.option'(X0),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X1,X0)),X2),s(X1,X3)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6,X7] : ! [X9,X10,X24] : s('type.option.option'(X6),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X7,X6)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X7,X6)),X9),s('type.list.list'(X7),X24))),s(X7,X10))) = s('type.option.option'(X6),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(X7,X10),s(fun(X7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X7),X24))))),s('type.option.option'(X6),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X7,X6)),'const.misc.anub_2'(s('type.list.list'('type.pair.prod'(X7,X6)),X9),s('type.list.list'(X7),X24))),s(X7,X10))),s('type.option.option'(X6),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X7,X6)),X9),s(X7,X10)))))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.misc.ALOOKUP_anub')).
fof(f474,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl22),
  inference(cnf_transformation,[],[f474_D])).
fof(f474_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f295,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0] : ! [X1] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X13] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X6,X13),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.list.MEM|split|0')).
fof(f3230,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))),s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))))) | $spl1266),
  inference(cnf_transformation,[],[f3230_D])).
fof(f3230_D,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))),s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))))) <=> ~$spl1266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1266])])).
fof(f3228,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))),s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))))) | ($spl22 | $spl64 | $spl1246)),
  inference(forward_demodulation,[],[f3211,f474])).
fof(f3211,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.bool.COND_3'(s(bool,'const.bool.IN_2'(s(sK12,sK16),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0'))))),s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))),s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))))) | ($spl64 | $spl1246)),
  inference(superposition,[],[f500,f3170])).
fof(f476,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) ) | $spl26),
  inference(cnf_transformation,[],[f476_D])).
fof(f476_D,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f297,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f83])).
fof(f83,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X15,X16] : s(X6,X16) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X15),s(X6,X16)))),
  file('thm.misc.MEM_anub_ALOOKUP','thm.bool.COND_CLAUSES|split|1')).
fof(f452,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) != s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))) | $spl1),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) != s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f251,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) != s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16)))),
  inference(cnf_transformation,[],[f176])).
fof(f3269,plain,(
  $false | ($spl1 | $spl26 | $spl1266)),
  inference(subsumption_resolution,[],[f3251,f452])).
fof(f3251,plain,(
  s('type.option.option'(sK13),'const.option.SOME_1'(s(sK13,sK14))) = s('type.option.option'(sK13),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),sK15),s(sK12,sK16))) | ($spl26 | $spl1266)),
  inference(superposition,[],[f3230,f476])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 223
% Passive clauses: 633
% Generated clauses: 3012
% Final active clauses: 222
% Final passive clauses: 410
% Input formulas: 47
% Initial clauses: 181
% 
% Duplicate literals: 79
% Trivial inequalities: 3
% Fw subsumption resolutions: 238
% Fw demodulations: 177
% Bw demodulations: 1
% Condensations: 47
% Global subsumptions: 13
% 
% Simple tautologies: 168
% Equational tautologies: 3
% Forward subsumptions: 956
% 
% Binary resolution: 983
% Factoring: 90
% Forward superposition: 299
% Backward superposition: 248
% Self superposition: 9
% Equality factoring: 2
% Equality resolution: 6
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 907
% SAT solver unit clauses: 193
% SAT solver binary clauses: 64
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 2
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 853
% TWLsolver calls for satisfiability: 1734
% 
% Memory used [KB]: 4093
% Time elapsed: 0.088 s
% ------------------------------
% ------------------------------
% Success in time 0.72 s
