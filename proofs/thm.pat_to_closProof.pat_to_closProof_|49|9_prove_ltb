Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.pat_to_closProof
% (58674)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 830
% Passive clauses: 5171
% Generated clauses: 22247
% Final active clauses: 820
% Final passive clauses: 4097
% Input formulas: 261
% Initial clauses: 530
% 
% Duplicate literals: 173
% Trivial inequalities: 31
% Fw subsumption resolutions: 1378
% Fw demodulations: 1752
% Bw demodulations: 9
% 
% Simple tautologies: 266
% Equational tautologies: 25
% Forward subsumptions: 13336
% 
% Binary resolution: 5121
% Factoring: 549
% Forward superposition: 7054
% Backward superposition: 5866
% Self superposition: 35
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 235
% Split components: 472
% SAT solver clauses: 365
% SAT solver unit clauses: 15
% SAT solver binary clauses: 80
% 
% Sat splits: 235
% 
% TWLsolver clauses: 365
% TWLsolver calls for satisfiability: 267
% 
% Memory used [KB]: 12153
% Time elapsed: 0.608 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.pat_to_closProof
% (58691)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 596
% Passive clauses: 3778
% Generated clauses: 27165
% Final active clauses: 568
% Final passive clauses: 3018
% Input formulas: 261
% Initial clauses: 530
% 
% Duplicate literals: 98
% Trivial inequalities: 17
% Fw subsumption resolutions: 912
% Fw demodulations: 3495
% Bw demodulations: 168
% Condensations: 89
% Global subsumptions: 37
% 
% Simple tautologies: 269
% Equational tautologies: 20
% Forward subsumptions: 13442
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 2635
% Factoring: 186
% Forward superposition: 8531
% Backward superposition: 6432
% Self superposition: 98
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 5536
% SAT solver unit clauses: 717
% SAT solver binary clauses: 214
% SAT solver learnt clauses: 77
% SAT solver learnt literals: 18
% 
% Sat splits: 8
% Sat splitting refutations: 50
% 
% TWLsolver clauses: 5385
% TWLsolver calls for satisfiability: 8641
% 
% Memory used [KB]: 29935
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.pat_to_closProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pat_to_closProof
% SZS output start Proof for thm.pat_to_closProof
fof(f341962,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f930,f1164])).
fof(f1164,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK95(X3,X2,X1,X0)),s('type.closSem.state'(X0),sK96(X3,X2,X1,X0)))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f829])).
fof(f829,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK95(X3,X2,X1,X0)),s('type.closSem.state'(X0),sK96(X3,X2,X1,X0)))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK95,sK96])],[f454])).
fof(f454,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))),
  inference(flattening,[],[f453])).
fof(f453,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X31,X28,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X31),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X28)))))))),
  file('thm.pat_to_closProof.pat_to_closProof_|49|9_prove_ltb','thm.clos_numberProof.clos_numberProof_42_prove_ltb')).
fof(f930,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(sK22),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',sK23))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),sK25))),s('type.closSem.state'(sK22),sK24)))))))) )),
  inference(cnf_transformation,[],[f734])).
fof(f734,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(sK22),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',sK23))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),sK25))),s('type.closSem.state'(sK22),sK24)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23,sK24,sK25])],[f649])).
fof(f649,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X3))),s('type.closSem.state'(X0),X2)))))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X3))),s('type.closSem.state'(X0),X2)))))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X3))),s('type.closSem.state'(X0),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X9))),s('type.closSem.state'(X6),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X9))),s('type.closSem.state'(X6),X8)))))))),
  file('thm.pat_to_closProof.pat_to_closProof_|49|9_prove_ltb','thm.pat_to_closProof.pat_to_closProof_|49|9_prove_ltb')).
% SZS output end Proof for thm.pat_to_closProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1235
% Passive clauses: 10662
% Generated clauses: 341198
% Final active clauses: 1006
% Final passive clauses: 2787
% Input formulas: 261
% Initial clauses: 530
% Discarded non-redundant clauses: 80235
% 
% Duplicate literals: 11
% Trivial inequalities: 52
% Fw subsumption resolutions: 2710
% Fw demodulations: 108641
% Bw demodulations: 3196
% Condensations: 25
% Global subsumptions: 1
% 
% Simple tautologies: 141
% Equational tautologies: 62
% Forward subsumptions: 68890
% Fw demodulations to eq. taut.: 83822
% Bw demodulations to eq. taut.: 61
% 
% Unit resulting resolution: 168444
% Factoring: 3
% Forward superposition: 28823
% Backward superposition: 26734
% Self superposition: 176
% Equality factoring: 2
% Equality resolution: 30
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 13414
% SAT solver unit clauses: 4590
% SAT solver binary clauses: 6548
% 
% Sat splits: 7
% Sat splitting refutations: 2735
% 
% Memory used [KB]: 153259
% Time elapsed: 9.780 s
% ------------------------------
% ------------------------------
% Success in time 11.14 s
