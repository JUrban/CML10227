Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (36731)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 98
% Passive clauses: 3028
% Generated clauses: 13892
% Final active clauses: 90
% Final passive clauses: 2630
% Input formulas: 10
% Initial clauses: 23
% 
% Duplicate literals: 759
% Trivial inequalities: 173
% Fw subsumption resolutions: 2304
% Fw demodulations: 913
% Bw demodulations: 3
% 
% Simple tautologies: 260
% Equational tautologies: 81
% Forward subsumptions: 5117
% 
% Binary resolution: 410
% Factoring: 9
% Forward superposition: 5207
% Backward superposition: 3588
% Self superposition: 243
% Equality factoring: 195
% Equality resolution: 13
% 
% Split clauses: 592
% Split components: 1187
% SAT solver clauses: 1500
% SAT solver unit clauses: 41
% SAT solver binary clauses: 238
% 
% Sat splits: 592
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1500
% TWLsolver calls for satisfiability: 252
% 
% Memory used [KB]: 9083
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (36754)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 45
% Passive clauses: 217
% Generated clauses: 4893
% Final active clauses: 40
% Final passive clauses: 158
% Input formulas: 10
% Initial clauses: 23
% 
% Duplicate literals: 818
% Trivial inequalities: 44
% Fw subsumption resolutions: 319
% Fw demodulations: 62
% Bw demodulations: 18
% Condensations: 1377
% 
% Simple tautologies: 109
% Equational tautologies: 68
% Forward subsumptions: 1457
% 
% Binary resolution: 79
% Factoring: 1
% Forward superposition: 958
% Backward superposition: 1316
% Self superposition: 218
% Equality factoring: 200
% Equality resolution: 7
% 
% Split clauses: 33
% Split components: 66
% SAT solver clauses: 431
% SAT solver unit clauses: 31
% SAT solver binary clauses: 28
% 
% Sat splits: 33
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 431
% TWLsolver calls for satisfiability: 209
% 
% Memory used [KB]: 4861
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (36769)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 325
% Passive clauses: 2542
% Generated clauses: 140131
% Final active clauses: 134
% Final passive clauses: 663
% Input formulas: 10
% Initial clauses: 23
% Discarded non-redundant clauses: 11
% 
% Duplicate literals: 8551
% Trivial inequalities: 1187
% Fw subsumption resolutions: 13858
% Fw demodulations: 12021
% Bw demodulations: 1314
% Condensations: 18474
% Global subsumptions: 44
% 
% Simple tautologies: 1370
% Equational tautologies: 686
% Forward subsumptions: 81191
% Fw demodulations to eq. taut.: 5
% Bw demodulations to eq. taut.: 103
% 
% Unit resulting resolution: 2005
% Factoring: 1
% Forward superposition: 37993
% Backward superposition: 32463
% Self superposition: 778
% Equality factoring: 405
% Equality resolution: 72
% 
% Split clauses: 315
% Split components: 640
% SAT solver clauses: 3273
% SAT solver unit clauses: 67
% SAT solver binary clauses: 99
% 
% Sat splits: 315
% Sat splitting refutations: 55
% 
% Memory used [KB]: 59231
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f9596,plain,(
  $false),
  inference(subsumption_resolution,[],[f9595,f52])).
fof(f52,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.s_rel_rules',aHL_TRUTH)).
fof(f9595,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f9594,f188])).
fof(f188,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3)))))),
  inference(subsumption_resolution,[],[f176,f51])).
fof(f51,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.s_rel_rules',aHL_FALSITY)).
fof(f176,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3)))))),
  inference(superposition,[],[f32,f48])).
fof(f48,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.mod_to_conProof.s_rel_rules',aHL_BOOL_CASES)).
fof(f32,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK3))) & s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) = s('type.ffi.ffi_state'(sK0),'const.conSem.state_ffi_1'(s('type.conSem.state'(sK0),sK3))) & ~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f23])).
fof(f23,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X3)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X3)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X3))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X3))) & ~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X3)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X3)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X3))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X3)))) & ~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X3)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X3)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X3))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X3)))) => p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X3)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X3)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X3))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X3)))) => p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X6),X9)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X6),X9)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X6),X9))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8))) = s('type.ffi.ffi_state'(X6),'const.conSem.state_ffi_1'(s('type.conSem.state'(X6),X9)))) => p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.state'(X6),X8),s('type.conSem.state'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X6),X9)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X6),X9)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X6),X9))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8))) = s('type.ffi.ffi_state'(X6),'const.conSem.state_ffi_1'(s('type.conSem.state'(X6),X9)))) => p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.state'(X6),X8),s('type.conSem.state'(X6),X9)))))),
  file('thm.mod_to_conProof.s_rel_rules','thm.mod_to_conProof.s_rel_rules')).
fof(f9594,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(subsumption_resolution,[],[f9593,f52])).
fof(f9593,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(forward_demodulation,[],[f9592,f695])).
fof(f695,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))),
  inference(subsumption_resolution,[],[f685,f51])).
fof(f685,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))),
  inference(superposition,[],[f33,f48])).
fof(f33,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(cnf_transformation,[],[f28])).
fof(f9592,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(subsumption_resolution,[],[f9591,f51])).
fof(f9591,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(forward_demodulation,[],[f9590,f69])).
fof(f69,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3)))),
  inference(subsumption_resolution,[],[f61,f52])).
fof(f61,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3)))),
  inference(superposition,[],[f36,f48])).
fof(f36,plain,(
  ~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3))))),
  inference(cnf_transformation,[],[f28])).
fof(f9590,plain,(
  p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(subsumption_resolution,[],[f9589,f34])).
fof(f34,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK3)))),
  inference(cnf_transformation,[],[f28])).
fof(f9589,plain,(
  p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3)))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK3))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(subsumption_resolution,[],[f9546,f35])).
fof(f35,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) = s('type.ffi.ffi_state'(sK0),'const.conSem.state_ffi_1'(s('type.conSem.state'(sK0),sK3)))),
  inference(cnf_transformation,[],[f28])).
fof(f9546,plain,(
  p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1),s('type.modSem.state'(sK0),sK2),s('type.conSem.state'(sK0),sK3)))) | s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) != s('type.ffi.ffi_state'(sK0),'const.conSem.state_ffi_1'(s('type.conSem.state'(sK0),sK3))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK3))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK3)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(sK0),sK3))))))),
  inference(resolution,[],[f58,f42])).
fof(f42,plain,(
  ( ! [X6,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),sK7(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7)))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) != s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) != s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7))))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) | ! [X8] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4(X8,X3,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK5(X8,X3,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),sK6(X8,X3,X2,X1,X0))))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4(X8,X3,X2,X1,X0)))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK5(X8,X3,X2,X1,X0)))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),sK6(X8,X3,X2,X1,X0))))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),sK5(X8,X3,X2,X1,X0)))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),sK6(X8,X3,X2,X1,X0)))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),sK5(X8,X3,X2,X1,X0)))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),sK6(X8,X3,X2,X1,X0)))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4(X8,X3,X2,X1,X0)))),s('type.modSem.state'(X0),sK5(X8,X3,X2,X1,X0)))),s('type.conSem.state'(X0),sK6(X8,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3)))))) & ((! [X5,X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) != s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) != s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),sK7(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),sK7(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))) | p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7])],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) | ! [X8] : (? [X9,X10,X11] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X10))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X11)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X10))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X11)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X10))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X11))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X10))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X11))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.state'(X0),X10))),s('type.conSem.state'(X0),X11))))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3)))))) & (? [X4] : (! [X5,X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) != s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) != s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))) | p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3))))))),
  inference(rectify,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) | ! [X4] : (? [X5,X6,X7] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3)))))) & (? [X4] : (! [X5,X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) != s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) != s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))) | p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3))))))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) <=> ! [X4] : (? [X5,X6,X7] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) <=> ! [X4] : (? [X5,X6,X7] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) | p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) <=> ! [X4] : (! [X5,X6,X7] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7)))) => p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) => p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) <=> ! [X4] : (! [X5,X6,X7] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X7)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X6))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X7)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X6))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X7))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X6))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X7)))) => p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X0),X6))),s('type.conSem.state'(X0),X7))))) => p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X5,X12,X13] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.modSem.state'(X6),X12),s('type.conSem.state'(X6),X13)))) <=> ! [X14] : (! [X15,X16,X17] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),'const.mod_to_conProof.sv_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X16))),s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X6),X17)))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.option.option'('type.modSem.v'),fun('type.option.option'('type.conSem.v'),bool)),'const.option.OPTREL_1'(s(fun('type.modSem.v',fun('type.conSem.v',bool)),'const.mod_to_conProof.v_rel_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))))),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X16))),s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X6),X17)))))) & s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X16))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X6),X17))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X16))) = s('type.ffi.ffi_state'(X6),'const.conSem.state_ffi_1'(s('type.conSem.state'(X6),X17)))) => p(s(bool,happ(s(fun('type.conSem.state'(X6),bool),happ(s(fun('type.modSem.state'(X6),fun('type.conSem.state'(X6),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X6),fun('type.conSem.state'(X6),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.modSem.state'(X6),X16))),s('type.conSem.state'(X6),X17))))) => p(s(bool,happ(s(fun('type.conSem.state'(X6),bool),happ(s(fun('type.modSem.state'(X6),fun('type.conSem.state'(X6),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X6),fun('type.conSem.state'(X6),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.state'(X6),X12))),s('type.conSem.state'(X6),X13))))))),
  file('thm.mod_to_conProof.s_rel_rules','thm.mod_to_conProof.s_rel_def')).
fof(f58,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.state'(sK0),bool),happ(s(fun('type.modSem.state'(sK0),fun('type.conSem.state'(sK0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(sK0),fun('type.conSem.state'(sK0),bool))),sK7(sK3,sK2,sK1,sK0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK1))),s('type.modSem.state'(sK0),sK2))),s('type.conSem.state'(sK0),sK3))))),
  inference(resolution,[],[f36,f43])).
fof(f43,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.s_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.state'(X0),X2),s('type.conSem.state'(X0),X3)))) | ~p(s(bool,happ(s(fun('type.conSem.state'(X0),bool),happ(s(fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.state'(X0),fun('type.conSem.state'(X0),bool))),sK7(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.state'(X0),X2))),s('type.conSem.state'(X0),X3))))) )),
  inference(cnf_transformation,[],[f31])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 126
% Passive clauses: 2182
% Generated clauses: 9369
% Final active clauses: 74
% Final passive clauses: 1700
% Input formulas: 10
% Initial clauses: 22
% 
% Selected by SInE selection: 9
% SInE iterations: 1
% 
% Duplicate literals: 565
% Trivial inequalities: 209
% Fw subsumption resolutions: 1639
% Fw demodulations: 298
% Bw demodulations: 39
% 
% Simple tautologies: 414
% Equational tautologies: 52
% Forward subsumptions: 3704
% 
% Binary resolution: 973
% Forward superposition: 3604
% Backward superposition: 1641
% Self superposition: 118
% Equality factoring: 116
% Equality resolution: 23
% 
% Split clauses: 393
% Split components: 786
% SAT solver clauses: 408
% SAT solver unit clauses: 11
% SAT solver binary clauses: 199
% 
% Sat splits: 393
% Sat splitting refutations: 14
% 
% Memory used [KB]: 4989
% Time elapsed: 0.431 s
% ------------------------------
% ------------------------------
% Success in time 12.161 s
