Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% (122084)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 2628
% Generated clauses: 11080
% Final active clauses: 110
% Final passive clauses: 2368
% Input formulas: 20
% Initial clauses: 26
% 
% Duplicate literals: 577
% Trivial inequalities: 77
% Fw subsumption resolutions: 1101
% Fw demodulations: 1357
% Bw demodulations: 5
% 
% Simple tautologies: 201
% Equational tautologies: 22
% Forward subsumptions: 4745
% 
% Binary resolution: 182
% Forward superposition: 4562
% Backward superposition: 2939
% Self superposition: 161
% Equality factoring: 30
% Equality resolution: 20
% 
% Split clauses: 210
% Split components: 426
% SAT solver clauses: 511
% SAT solver unit clauses: 12
% SAT solver binary clauses: 95
% 
% Sat splits: 210
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 510
% TWLsolver calls for satisfiability: 141
% 
% Memory used [KB]: 17654
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSysProps
% (122112)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 86
% Passive clauses: 1057
% Generated clauses: 7554
% Final active clauses: 79
% Final passive clauses: 962
% Input formulas: 20
% Initial clauses: 26
% 
% Duplicate literals: 429
% Trivial inequalities: 57
% Fw subsumption resolutions: 391
% Fw demodulations: 747
% Bw demodulations: 12
% Condensations: 387
% 
% Simple tautologies: 124
% Equational tautologies: 22
% Forward subsumptions: 2994
% 
% Binary resolution: 59
% Forward superposition: 2872
% Backward superposition: 1719
% Self superposition: 133
% Equality factoring: 30
% Equality resolution: 14
% 
% Split clauses: 23
% Split components: 51
% SAT solver clauses: 1371
% SAT solver unit clauses: 38
% SAT solver binary clauses: 48
% 
% Sat splits: 23
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1371
% TWLsolver calls for satisfiability: 151
% 
% Memory used [KB]: 15095
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f2740,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f2739])).
fof(f2739,plain,(
  ( ! [X0] : (s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5))))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),X0))) != s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5))))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),X0)))) )),
  inference(backward_demodulation,[],[f2737,f573])).
fof(f573,plain,(
  ( ! [X0] : (s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5))))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),X0))) != s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5))))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),X0)))) )),
  inference(unit_resulting_resolution,[],[f63,f76])).
fof(f76,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) & (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X14,X15,X16] : (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X14))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X16),s('type.list.list'(X6),X14))) <=> s('type.list.list'(X6),X15) = s('type.list.list'(X6),X16))),
  file('thm.typeSysProps.flat_to_ctMap_list_append','thm.list.APPEND_|49||49||split|1')).
fof(f63,plain,(
  s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5))))) != s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5)))))),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4),s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5))))) != s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK4))),s('type.list.list'('type.pair.prod'('type.pair.prod'(sK0,sK3),'type.pair.prod'(sK1,sK2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,sK3)))),sK5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X5))))) != s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X5)))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X5))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X5)))))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2,X3] : ! [X4,X5] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X5))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ! [X10,X11] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X10),s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X11))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X10))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ! [X10,X11] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X10),s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X11))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X10))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X9),'type.pair.prod'(X7,X8))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,X9)))),X11)))))),
  file('thm.typeSysProps.flat_to_ctMap_list_append','thm.typeSysProps.flat_to_ctMap_list_append')).
fof(f2737,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X5),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X4))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X5))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X4)))))) )),
  inference(forward_demodulation,[],[f2736,f83])).
fof(f83,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3))),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),happ(s(fun(fun(X0,fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3))),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X1,fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))))),'_dst_x00x11_2'(s(fun(fun(X2,fun(X3,'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X1,fun(X2,fun(X3,'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X0,X3),fun('type.pair.prod'(X1,X2),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.,_0'),s(fun(X0,fun(X3,'type.pair.prod'(X0,X3))),'const.pair.,_0'),s(fun(X1,fun(X2,'type.pair.prod'(X1,X2))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3))),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),happ(s(fun(fun(X0,fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3))),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X1,fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))))),'_dst_x00x11_2'(s(fun(fun(X2,fun(X3,'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X1,fun(X2,fun(X3,'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X0,X3),fun('type.pair.prod'(X1,X2),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.,_0'),s(fun(X0,fun(X3,'type.pair.prod'(X0,X3))),'const.pair.,_0'),s(fun(X1,fun(X2,'type.pair.prod'(X1,X2))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4)))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3] : ! [X4] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3))),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))),happ(s(fun(fun(X0,fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3))),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'_dst_x0x1_2'(s(fun(fun(X1,fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X1,'type.pair.prod'(X2,X3)),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X1,fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2))))),'_dst_x00x11_2'(s(fun(fun(X2,fun(X3,'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X1,fun(X2,fun(X3,'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X0,X3),fun('type.pair.prod'(X1,X2),'type.pair.prod'('type.pair.prod'(X0,X3),'type.pair.prod'(X1,X2)))),'const.pair.,_0'),s(fun(X0,fun(X3,'type.pair.prod'(X0,X3))),'const.pair.,_0'),s(fun(X1,fun(X2,'type.pair.prod'(X1,X2))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,X3)))),X4)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X8,X9,X7] : ! [X17] : s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X8,'type.pair.prod'(X9,X7)))),X17))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9))),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,'type.pair.prod'(X8,'type.pair.prod'(X9,X7))),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9))),happ(s(fun(fun(X6,fun('type.pair.prod'(X8,'type.pair.prod'(X9,X7)),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),fun('type.pair.prod'(X6,'type.pair.prod'(X8,'type.pair.prod'(X9,X7))),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),'const.pair.UNCURRY_0'),s(fun(X6,fun('type.pair.prod'(X8,'type.pair.prod'(X9,X7)),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),'_dst_x0x1_2'(s(fun(fun(X8,fun('type.pair.prod'(X9,X7),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),fun('type.pair.prod'(X8,'type.pair.prod'(X9,X7)),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X8,fun('type.pair.prod'(X9,X7),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9))))),'_dst_x00x11_2'(s(fun(fun(X9,fun(X7,'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),fun('type.pair.prod'(X9,X7),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),'const.pair.UNCURRY_0'),s(fun(X6,fun(X8,fun(X9,fun(X7,'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X6,X7),fun('type.pair.prod'(X8,X9),'type.pair.prod'('type.pair.prod'(X6,X7),'type.pair.prod'(X8,X9)))),'const.pair.,_0'),s(fun(X6,fun(X7,'type.pair.prod'(X6,X7))),'const.pair.,_0'),s(fun(X8,fun(X9,'type.pair.prod'(X8,X9))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'(X8,'type.pair.prod'(X9,X7)))),X17)))),
  file('thm.typeSysProps.flat_to_ctMap_list_append','thm.typeSoundInvariants.flat_to_ctMap_list_def')).
fof(f2736,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X5))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X4))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1))),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),happ(s(fun(fun(X0,fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1))),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X2,fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))))),'_dst_x00x11_2'(s(fun(fun(X3,fun(X1,'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X2,fun(X3,fun(X1,'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X0,X1),fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.,_0'),s(fun(X0,fun(X1,'type.pair.prod'(X0,X1))),'const.pair.,_0'),s(fun(X2,fun(X3,'type.pair.prod'(X2,X3))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X5),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X4)))))) )),
  inference(forward_demodulation,[],[f2715,f83])).
fof(f2715,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1))),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),happ(s(fun(fun(X0,fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1))),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X2,fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))))),'_dst_x00x11_2'(s(fun(fun(X3,fun(X1,'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X2,fun(X3,fun(X1,'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X0,X1),fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.,_0'),s(fun(X0,fun(X1,'type.pair.prod'(X0,X1))),'const.pair.,_0'),s(fun(X2,fun(X3,'type.pair.prod'(X2,X3))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X5),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X4))))) = s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1))),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),happ(s(fun(fun(X0,fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1))),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'_dst_x0x1_2'(s(fun(fun(X2,fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X2,'type.pair.prod'(X3,X1)),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X2,fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))))),'_dst_x00x11_2'(s(fun(fun(X3,fun(X1,'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),fun('type.pair.prod'(X3,X1),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.UNCURRY_0'),s(fun(X0,fun(X2,fun(X3,fun(X1,'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))))),'_dst_x0000x1001x0110_3'(s(fun('type.pair.prod'(X0,X1),fun('type.pair.prod'(X2,X3),'type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3)))),'const.pair.,_0'),s(fun(X0,fun(X1,'type.pair.prod'(X0,X1))),'const.pair.,_0'),s(fun(X2,fun(X3,'type.pair.prod'(X2,X3))),'const.pair.,_0'))))))))),s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X5))),s('type.list.list'('type.pair.prod'('type.pair.prod'(X0,X1),'type.pair.prod'(X2,X3))),'const.typeSoundInvariants.flat_to_ctMap_list_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'(X2,'type.pair.prod'(X3,X1)))),X4)))))) )),
  inference(superposition,[],[f81,f83])).
fof(f81,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X7,X6] : ! [X13,X14,X15] : s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X13),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X14),s('type.list.list'(X6),X15))))) = s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X13),s('type.list.list'(X6),X14))),s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X13),s('type.list.list'(X6),X15)))))),
  file('thm.typeSysProps.flat_to_ctMap_list_append','thm.list.MAP_APPEND')).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 50
% Passive clauses: 372
% Generated clauses: 2697
% Final active clauses: 41
% Final passive clauses: 235
% Input formulas: 20
% Initial clauses: 26
% 
% Duplicate literals: 160
% Trivial inequalities: 36
% Fw subsumption resolutions: 107
% Fw demodulations: 50
% Bw demodulations: 86
% Condensations: 203
% Global subsumptions: 4
% 
% Simple tautologies: 54
% Equational tautologies: 36
% Forward subsumptions: 1600
% Fw demodulations to eq. taut.: 8
% Bw demodulations to eq. taut.: 5
% 
% Unit resulting resolution: 73
% Forward superposition: 872
% Backward superposition: 805
% Self superposition: 121
% Equality factoring: 40
% Equality resolution: 12
% 
% Split clauses: 39
% Split components: 83
% SAT solver clauses: 467
% SAT solver unit clauses: 94
% SAT solver binary clauses: 121
% 
% Sat splits: 39
% Sat splitting refutations: 11
% 
% Memory used [KB]: 7036
% Time elapsed: 0.167 s
% ------------------------------
% ------------------------------
% Success in time 1.48 s
