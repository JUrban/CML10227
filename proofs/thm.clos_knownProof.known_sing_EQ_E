Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (115813)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 861
% Passive clauses: 11411
% Generated clauses: 30854
% Final active clauses: 806
% Final passive clauses: 9873
% Input formulas: 40
% Initial clauses: 168
% 
% Duplicate literals: 1175
% Trivial inequalities: 260
% Fw subsumption resolutions: 3171
% Fw demodulations: 871
% Bw demodulations: 53
% 
% Simple tautologies: 368
% Equational tautologies: 80
% Forward subsumptions: 10724
% 
% Binary resolution: 12153
% Factoring: 1516
% Forward superposition: 4825
% Backward superposition: 6185
% Self superposition: 49
% Equality factoring: 54
% Equality resolution: 61
% 
% Split clauses: 811
% Split components: 1632
% SAT solver clauses: 1389
% SAT solver unit clauses: 30
% SAT solver binary clauses: 251
% 
% Sat splits: 811
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1384
% TWLsolver calls for satisfiability: 527
% 
% Memory used [KB]: 12792
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (115846)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 401
% Passive clauses: 2089
% Generated clauses: 10030
% Final active clauses: 393
% Final passive clauses: 1671
% Input formulas: 40
% Initial clauses: 168
% 
% Duplicate literals: 288
% Trivial inequalities: 18
% Fw subsumption resolutions: 811
% Fw demodulations: 141
% Bw demodulations: 21
% Condensations: 361
% Global subsumptions: 13
% 
% Simple tautologies: 228
% Equational tautologies: 24
% Forward subsumptions: 3524
% 
% Binary resolution: 3386
% Factoring: 358
% Forward superposition: 1351
% Backward superposition: 945
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 20
% 
% Split clauses: 33
% Split components: 71
% SAT solver clauses: 2688
% SAT solver unit clauses: 184
% SAT solver binary clauses: 75
% SAT solver learnt clauses: 26
% SAT solver learnt literals: 10
% 
% Sat splits: 33
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2636
% TWLsolver calls for satisfiability: 1805
% 
% Memory used [KB]: 11001
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 137 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f2951,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f223,f2752])).
fof(f2752,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),X3))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X0)))) )),
  inference(superposition,[],[f1603,f390])).
fof(f390,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',sK19(X2,X1,X0)),s('type.clos_known.val_approx',sK20(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))),s('type.sptree.spt'('type.clos_known.val_approx'),sK21(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',sK19(X2,X1,X0)),s('type.clos_known.val_approx',sK20(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))),s('type.sptree.spt'('type.clos_known.val_approx'),sK21(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21])],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : ? [X3,X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X3),s('type.clos_known.val_approx',X4))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))),s('type.sptree.spt'('type.clos_known.val_approx'),X5)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6,X7,X10] : ? [X11,X21,X22] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X11),s('type.clos_known.val_approx',X21))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))),s('type.sptree.spt'('type.clos_known.val_approx'),X22)))),
  file('thm.clos_knownProof.known_sing_EQ_E','thm.clos_knownProof.known_sing')).
fof(f1603,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK16),s(X0,X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X2),s('type.clos_known.val_approx',X3))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))),s(X0,X4)))) )),
  inference(unit_resulting_resolution,[],[f224,f303])).
fof(f303,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4))) | s(X0,X3) = s(X0,X5)) )),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4))) | (s(X0,X3) = s(X0,X5) & s(X1,X2) = s(X1,X4))) & (s(X0,X3) != s(X0,X5) | s(X1,X2) != s(X1,X4) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4)))))),
  inference(flattening,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4))) | (s(X0,X3) = s(X0,X5) & s(X1,X2) = s(X1,X4))) & ((s(X0,X3) != s(X0,X5) | s(X1,X2) != s(X1,X4)) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4)))))),
  inference(nnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4))) <=> (s(X0,X3) = s(X0,X5) & s(X1,X2) = s(X1,X4)))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X5),s(X1,X4))) <=> (s(X0,X3) = s(X0,X5) & s(X1,X2) = s(X1,X4)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X13,X19] : ! [X23,X15,X24,X21] : (s('type.pair.prod'(X13,X19),'const.pair.,_2'(s(X13,X15),s(X19,X23))) = s('type.pair.prod'(X13,X19),'const.pair.,_2'(s(X13,X21),s(X19,X24))) <=> (s(X13,X15) = s(X13,X21) & s(X19,X23) = s(X19,X24)))),
  file('thm.clos_knownProof.known_sing_EQ_E','thm.pair.PAIR_EQ')).
fof(f224,plain,(
  ( ! [X6,X5] : (s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK16) != s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X5),s('type.clos_known.val_approx',X6))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),sK17))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK13),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),sK14),s('type.sptree.spt'('type.clos_known.val_approx'),sK15))) & ! [X5,X6] : s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK16) != s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X5),s('type.clos_known.val_approx',X6))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17])],[f102])).
fof(f102,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) & ! [X5,X6] : s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3) != s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X5),s('type.clos_known.val_approx',X6))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) => ? [X5,X6] : s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3) = s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X5),s('type.clos_known.val_approx',X6))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) => ? [X11,X12] : s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9) = s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X11),s('type.clos_known.val_approx',X12))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),X7),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) => ? [X11,X12] : s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9) = s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.CONS_2'(s('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx'),'const.pair.,_2'(s('type.closLang.exp',X11),s('type.clos_known.val_approx',X12))),s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.list.NIL_0'))))),
  file('thm.clos_knownProof.known_sing_EQ_E','thm.clos_knownProof.known_sing_EQ_E')).
fof(f223,plain,(
  s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK16),s('type.sptree.spt'('type.clos_known.val_approx'),sK17))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK13),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),sK14),s('type.sptree.spt'('type.clos_known.val_approx'),sK15)))),
  inference(cnf_transformation,[],[f150])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 216
% Passive clauses: 367
% Generated clauses: 2716
% Final active clauses: 211
% Final passive clauses: 108
% Input formulas: 40
% Initial clauses: 168
% 
% Duplicate literals: 52
% Trivial inequalities: 12
% Fw subsumption resolutions: 198
% Fw demodulations: 54
% Bw demodulations: 6
% Condensations: 150
% Global subsumptions: 3
% 
% Simple tautologies: 52
% Equational tautologies: 79
% Forward subsumptions: 1424
% Fw demodulations to eq. taut.: 40
% 
% Unit resulting resolution: 1295
% Factoring: 1
% Forward superposition: 402
% Backward superposition: 297
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 40
% Split components: 80
% SAT solver clauses: 695
% SAT solver unit clauses: 322
% SAT solver binary clauses: 140
% 
% Sat splits: 40
% Sat splitting refutations: 243
% 
% Memory used [KB]: 2558
% Time elapsed: 0.071 s
% ------------------------------
% ------------------------------
% Success in time 1.38 s
