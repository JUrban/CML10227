Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviProps
% (119997)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 57
% Passive clauses: 1111
% Generated clauses: 8966
% Final active clauses: 55
% Final passive clauses: 991
% Input formulas: 31
% Initial clauses: 42
% 
% Duplicate literals: 715
% Trivial inequalities: 73
% Fw subsumption resolutions: 892
% Fw demodulations: 73
% Bw demodulations: 1
% 
% Simple tautologies: 174
% Equational tautologies: 96
% Forward subsumptions: 4349
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 24
% Forward superposition: 3713
% Backward superposition: 2728
% Self superposition: 370
% Equality factoring: 256
% Equality resolution: 7
% 
% Split clauses: 399
% Split components: 804
% SAT solver clauses: 1306
% SAT solver unit clauses: 236
% SAT solver binary clauses: 460
% 
% Sat splits: 399
% 
% TWLsolver clauses: 1302
% TWLsolver calls for satisfiability: 63
% 
% Memory used [KB]: 7036
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bviProps
% (120026)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 36
% Passive clauses: 160
% Generated clauses: 5826
% Final active clauses: 33
% Final passive clauses: 122
% Input formulas: 31
% Initial clauses: 42
% 
% Duplicate literals: 1141
% Trivial inequalities: 61
% Fw subsumption resolutions: 141
% Fw demodulations: 12
% Bw demodulations: 1
% Condensations: 1720
% Global subsumptions: 4
% 
% Simple tautologies: 131
% Equational tautologies: 79
% Forward subsumptions: 1570
% 
% Binary resolution: 16
% Forward superposition: 1101
% Backward superposition: 1167
% Self superposition: 276
% Equality factoring: 222
% Equality resolution: 5
% 
% Split clauses: 27
% Split components: 54
% SAT solver clauses: 396
% SAT solver unit clauses: 64
% SAT solver binary clauses: 87
% SAT solver learnt clauses: 8
% 
% Sat splits: 27
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 380
% TWLsolver calls for satisfiability: 84
% 
% Memory used [KB]: 5245
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bviProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviProps
% SZS output start Proof for thm.bviProps
fof(f16365,plain,(
  $false),
  inference(subsumption_resolution,[],[f16330,f11249])).
fof(f11249,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X8),s('type.num.num',X4))) = s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X8),s('type.num.num',happ(s(fun(X3,'type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s(X3,X5)))))) )),
  inference(forward_demodulation,[],[f11222,f146])).
fof(f146,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f145,f135])).
fof(f135,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X1),X2)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X1),X2)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X18,X14] : ! [X15,X16,X9] : s('type.bviSem.state'(X18),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X16),s('type.bviSem.state'(X18),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X14),'type.ffi.ffi_state'(X18)),X9),s('type.bviSem.state'(X14),X15))))) = s('type.bviSem.state'(X18),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X14),'type.ffi.ffi_state'(X18)),X9),s('type.bviSem.state'(X14),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X16),s('type.bviSem.state'(X14),X15)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.bviSem_6|48|_prove_ltb')).
fof(f145,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f144,f134])).
fof(f134,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bviSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bviSem.state'(X1),X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X3),s('type.bviSem.state'(X1),X2)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X18,X14] : ! [X15,X16,X9] : s('type.bviSem.state'(X18),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X16),s('type.bviSem.state'(X18),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X14),'type.ffi.ffi_state'(X18)),X9),s('type.bviSem.state'(X14),X15))))) = s('type.bviSem.state'(X18),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X14),'type.ffi.ffi_state'(X18)),X9),s('type.bviSem.state'(X14),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X16),s('type.bviSem.state'(X14),X15)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.bviSem_59_prove_ltb')).
fof(f144,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(backward_demodulation,[],[f136,f143])).
fof(f143,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f142,f126])).
fof(f126,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bviSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bviSem.state'(X0),X1)))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X2),s('type.bviSem.state'(X0),X1)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X14] : ! [X15,X16,X9] : s('type.bviSem.state'(X14),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X16),s('type.bviSem.state'(X14),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X9),s('type.bviSem.state'(X14),X15))))) = s('type.bviSem.state'(X14),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X9),s('type.bviSem.state'(X14),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),X16),s('type.bviSem.state'(X14),X15)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.bviSem_56_prove_ltb')).
fof(f142,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f130,f127])).
fof(f127,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bviSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bviSem.state'(X0),X1)))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X2),s('type.bviSem.state'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X14] : ! [X15,X16,X9] : s('type.bviSem.state'(X14),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.bviSem.state'(X14),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X9),s('type.bviSem.state'(X14),X15))))) = s('type.bviSem.state'(X14),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),X9),s('type.bviSem.state'(X14),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.bviSem.state'(X14),X15)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.bviSem_54_prove_ltb')).
fof(f130,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2),s('type.num.num',X3))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bviSem.state'(X0),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X2))),s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X0),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X0),'const.bool.ARB_0')))))))))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X19,X20,X8] : s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X19),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X20),s('type.num.num',X8))) = s('type.bviSem.state'(X6),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.bviSem.state'(X6),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X19))),s('type.bviSem.state'(X6),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X20))),s('type.bviSem.state'(X6),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X6),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X6),'const.bool.ARB_0')))))))))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.initial_state_def')).
fof(f136,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bviSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bviSem.state'(X1),X2)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),X2))))) = s('type.bviSem.state'(X0),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.bviSem.state'(X1),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X3),s('type.bviSem.state'(X1),X2)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X18,X14] : ! [X15,X16,X9] : s('type.bviSem.state'(X18),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.bviSem.state'(X18),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X14),'type.ffi.ffi_state'(X18)),X9),s('type.bviSem.state'(X14),X15))))) = s('type.bviSem.state'(X18),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X14),'type.ffi.ffi_state'(X18)),X9),s('type.bviSem.state'(X14),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),X16),s('type.bviSem.state'(X14),X15)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.bviSem_57_prove_ltb')).
fof(f11222,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X7),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X8),s('type.num.num',happ(s(fun(X3,'type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s(X3,X5))))) = s('type.bviSem.state'(X6),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.bviSem.state'(X6),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X6),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X6),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X8))),s('type.bviSem.state'(X6),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X7))),s('type.bviSem.state'(X6),'const.bool.ARB_0')))))))))))) )),
  inference(superposition,[],[f146,f378])).
fof(f378,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,X1),'const.combin.K_1'(s(X1,X3))) = s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),'const.combin.K_1'(s(X1,X3))),s(X2,X4)))))) )),
  inference(superposition,[],[f138,f137])).
fof(f137,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X1,X2),'const.combin.K_1'(s(X2,X4))) = s(fun(X1,X2),'const.combin.o_2'(s(fun(X0,X2),'const.combin.K_1'(s(X2,X4))),s(fun(X1,X0),X3)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X1,X2),'const.combin.K_1'(s(X2,X4))) = s(fun(X1,X2),'const.combin.o_2'(s(fun(X0,X2),'const.combin.K_1'(s(X2,X4))),s(fun(X1,X0),X3)))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X1,X2),'const.combin.K_1'(s(X2,X4))) = s(fun(X1,X2),'const.combin.o_2'(s(fun(X0,X2),'const.combin.K_1'(s(X2,X4))),s(fun(X1,X0),X3)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X11,X6,X21] : ! [X9,X22] : s(fun(X6,X21),'const.combin.K_1'(s(X21,X22))) = s(fun(X6,X21),'const.combin.o_2'(s(fun(X11,X21),'const.combin.K_1'(s(X21,X22))),s(fun(X6,X11),X9)))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.combin.K_o_THM|split|0')).
fof(f138,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X23,X24,X25] : ! [X9,X22] : s(fun(X23,X24),'const.combin.K_1'(s(X24,happ(s(fun(X25,X24),X9),s(X25,X22))))) = s(fun(X23,X24),'const.combin.o_2'(s(fun(X25,X24),X9),s(fun(X23,X25),'const.combin.K_1'(s(X25,X22)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.combin.K_o_THM|split|1')).
fof(f16330,plain,(
  s('type.bviSem.state'(sK0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),sK4),s('type.num.num',sK1))) != s('type.bviSem.state'(sK0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),sK4),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK1))),s('type.num.num',sK2)))))),
  inference(superposition,[],[f98,f11256])).
fof(f11256,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.bviSem.state'(X21),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X21),X24),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X23),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X25),s('type.num.num',X22))))) = s('type.bviSem.state'(X21),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.bviSem.state'(X21),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X21),X24),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X23),s('type.num.num',X22)))))) )),
  inference(forward_demodulation,[],[f11255,f146])).
fof(f11255,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.bviSem.state'(X21),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.bviSem.state'(X21),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X21),X24),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X23),s('type.num.num',X22))))) = s('type.bviSem.state'(X21),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X25),s('type.num.num',X22))))),s('type.bviSem.state'(X21),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X21),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X21),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X23))),s('type.bviSem.state'(X21),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X21)),'const.combin.K_1'(s('type.ffi.ffi_state'(X21),X24))),s('type.bviSem.state'(X21),'const.bool.ARB_0')))))))))))) )),
  inference(forward_demodulation,[],[f11229,f138])).
fof(f11229,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.bviSem.state'(X21),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.bviSem.state'(X21),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X21),X24),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X23),s('type.num.num',X22))))) = s('type.bviSem.state'(X21),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X25),s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X22))))),s('type.bviSem.state'(X21),'const.bviSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bviSem.state'(X21),'const.bviSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bviSem.state'(X21),'const.bviSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X23))),s('type.bviSem.state'(X21),'const.bviSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X21)),'const.combin.K_1'(s('type.ffi.ffi_state'(X21),X24))),s('type.bviSem.state'(X21),'const.bool.ARB_0')))))))))))) )),
  inference(superposition,[],[f120,f146])).
fof(f120,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.bviSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.bviSem.state'(X0),X1)))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bviSem.state'(X0),X1))))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.bviSem.state'(X0),X1)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X14] : ! [X15,X16,X9] : s('type.bviSem.state'(X14),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X9),s('type.bviSem.state'(X14),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X16),s('type.bviSem.state'(X14),X15))))) = s('type.bviSem.state'(X14),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X9),s(fun('type.num.num','type.num.num'),X16))),s('type.bviSem.state'(X14),X15)))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviSem.bviSem_45_prove_ltb')).
fof(f98,plain,(
  s('type.bviSem.state'(sK0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),sK4),s('type.num.num',sK1))) != s('type.bviSem.state'(sK0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK1))),s('type.bviSem.state'(sK0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),sK4),s('type.num.num',sK2)))))),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  s('type.bviSem.state'(sK0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),sK4),s('type.num.num',sK1))) != s('type.bviSem.state'(sK0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK1))),s('type.bviSem.state'(sK0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),sK4),s('type.num.num',sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f83])).
fof(f83,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X4),s('type.num.num',X1))) != s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X1))),s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X4),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f34])).
fof(f34,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X4),s('type.num.num',X1))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X1))),s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X4),s('type.num.num',X2)))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X4),s('type.num.num',X1))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X1))),s('type.bviSem.state'(X0),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X3),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X4),s('type.num.num',X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X9),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X10),s('type.num.num',X7))) = s('type.bviSem.state'(X6),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X9),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X10),s('type.num.num',X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X9),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X10),s('type.num.num',X7))) = s('type.bviSem.state'(X6),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bviSem.state'(X6),'const.bviSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X9),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),X10),s('type.num.num',X8)))))),
  file('thm.bviProps.initial_state_with_simp|split|0','thm.bviProps.initial_state_with_simp|split|0')).
% SZS output end Proof for thm.bviProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 83
% Passive clauses: 601
% Generated clauses: 16128
% Final active clauses: 63
% Final passive clauses: 334
% Input formulas: 31
% Initial clauses: 42
% 
% Duplicate literals: 2277
% Trivial inequalities: 103
% Fw subsumption resolutions: 652
% Fw demodulations: 187
% Bw demodulations: 112
% Condensations: 3751
% Global subsumptions: 3
% 
% Simple tautologies: 230
% Equational tautologies: 231
% Forward subsumptions: 8091
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 8
% 
% Unit resulting resolution: 208
% Forward superposition: 4526
% Backward superposition: 3488
% Self superposition: 396
% Equality factoring: 264
% Equality resolution: 8
% 
% Split clauses: 121
% Split components: 243
% SAT solver clauses: 851
% SAT solver unit clauses: 180
% SAT solver binary clauses: 133
% 
% Sat splits: 121
% Sat splitting refutations: 3
% 
% Memory used [KB]: 9978
% Time elapsed: 2.188 s
% ------------------------------
% ------------------------------
% Success in time 3.54 s
