Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.PairingHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.PairingHeap
% SZS output start Proof for thm.PairingHeap
fof(f2235,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2234,f133,f233,f231,f229,f1843,f2233])).
fof(f2233,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f233,f136])).
fof(f136,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X3),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),X5),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),X6),s('type.list.list'('type.PairingHeap.heap'(sK7)),X7)))))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))) | s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))))) | s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK14),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK15),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK16),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK17),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK18)))))))))) & ! [X11,X12] : s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))) & ! [X8,X9,X10] : s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X8),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),X10),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))))) & ! [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X3),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),X5),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),X6),s('type.list.list'('type.PairingHeap.heap'(sK7)),X7)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2] : ((? [X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X21),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X22),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X18,X19,X20] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X18),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X19),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X20),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X13,X14,X15,X16,X17] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X15),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X16),s('type.list.list'('type.PairingHeap.heap'(X1)),X17)))))))))) & ! [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) & ! [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X10),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) & ! [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X5),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X6),s('type.list.list'('type.PairingHeap.heap'(X1)),X7))))))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X10),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X5),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X6),s('type.list.list'('type.PairingHeap.heap'(X1)),X7)))))))))) & ! [X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X21),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X22),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) & ! [X18,X19,X20] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X18),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X19),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X20),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) & ! [X13,X14,X15,X16,X17] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X15),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X16),s('type.list.list'('type.PairingHeap.heap'(X1)),X17))))))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X10),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X5),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X6),s('type.list.list'('type.PairingHeap.heap'(X1)),X7)))))))))) & (! [X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X21),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X22),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) & ! [X18,X19,X20] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X18),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X19),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X20),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) & ! [X13,X14,X15,X16,X17] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X15),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X16),s('type.list.list'('type.PairingHeap.heap'(X1)),X17)))))))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X10),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X5),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X6),s('type.list.list'('type.PairingHeap.heap'(X1)),X7)))))))))) => (? [X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X21),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X22),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X18,X19,X20] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X18),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X19),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X20),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X13,X14,X15,X16,X17] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X15),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X16),s('type.list.list'('type.PairingHeap.heap'(X1)),X17)))))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : ! [X2] : ((? [X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X10),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X5),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X6),s('type.list.list'('type.PairingHeap.heap'(X1)),X7)))))))))) => (? [X21,X22] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X21),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X22),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))) | ? [X18,X19,X20] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X18),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X19),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X20),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.NIL_0'))))))) | ? [X13,X14,X15,X16,X17] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X15),s('type.list.list'('type.PairingHeap.heap'(X1)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X1),X16),s('type.list.list'('type.PairingHeap.heap'(X1)),X17)))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))) | ? [X9,X10,X11] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X11),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X12,X13,X14] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X12),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X13),s('type.list.list'('type.PairingHeap.heap'(X7)),X14)))))))))) => (? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))) | ? [X9,X10,X11] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X11),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X12,X13,X14] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X12),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X13),s('type.list.list'('type.PairingHeap.heap'(X7)),X14)))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))) | ? [X9,X10,X11] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X11),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X12,X13,X14] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X12),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X13),s('type.list.list'('type.PairingHeap.heap'(X7)),X14)))))))))) => (? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))) | ? [X9,X10,X11] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X11),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X12,X13,X14] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X12),s('type.list.list'('type.PairingHeap.heap'(X7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(X7),X13),s('type.list.list'('type.PairingHeap.heap'(X7)),X14)))))))))))),
  file('thm.PairingHeap.PairingHeap_63_prove_ltb','thm.PairingHeap.PairingHeap_63_prove_ltb')).
fof(f1843,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f229,f134])).
fof(f134,plain,(
  ( ! [X12,X11] : (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X12),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f229,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))) | $spl0),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f231,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))))) | $spl2),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f233,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK14),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK15),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK16),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK17),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK18))))))))) | $spl4),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK14),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK15),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK16),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK17),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK18))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f133,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK14),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK15),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK16),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK17),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK18))))))))) | s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0'))))))) | s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f91])).
fof(f2234,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f231,f135])).
fof(f135,plain,(
  ( ! [X10,X8,X9] : (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X8),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.list.list'('type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X9),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.CONS_2'(s('type.PairingHeap.heap'(sK7),X10),s('type.list.list'('type.PairingHeap.heap'(sK7)),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.PairingHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 186
% Passive clauses: 898
% Generated clauses: 2095
% Final active clauses: 186
% Final passive clauses: 648
% Input formulas: 26
% Initial clauses: 94
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 144
% 
% Simple tautologies: 61
% Equational tautologies: 15
% Forward subsumptions: 909
% 
% Binary resolution: 1410
% Factoring: 204
% Forward superposition: 106
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 43
% Split components: 88
% SAT solver clauses: 81
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 80
% TWLsolver calls for satisfiability: 60
% 
% Memory used [KB]: 1535
% Time elapsed: 0.080 s
% ------------------------------
% ------------------------------
% Success in time 0.099 s
