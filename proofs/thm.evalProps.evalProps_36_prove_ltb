Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.evalProps
% (37684)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 124
% Passive clauses: 3418
% Generated clauses: 14525
% Final active clauses: 108
% Final passive clauses: 3097
% Input formulas: 16
% Initial clauses: 20
% 
% Duplicate literals: 752
% Trivial inequalities: 190
% Fw subsumption resolutions: 1028
% Fw demodulations: 1057
% Bw demodulations: 7
% 
% Simple tautologies: 324
% Equational tautologies: 39
% Forward subsumptions: 7077
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 71
% Forward superposition: 6065
% Backward superposition: 4813
% Self superposition: 242
% Equality factoring: 89
% Equality resolution: 25
% 
% Split clauses: 452
% Split components: 913
% SAT solver clauses: 697
% SAT solver unit clauses: 20
% SAT solver binary clauses: 179
% 
% Sat splits: 452
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 694
% TWLsolver calls for satisfiability: 87
% 
% Memory used [KB]: 17526
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f1703,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1694,f449,f488,f64,f81,f67,f84,f1702,f50,f71,f65,f82,f1643,f1647,f1645,f69,f86])).
fof(f86,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) ) | $spl26),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f69,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X15,X16,X17] : ! [X18,X19,X20] : s(X15,happ(s(fun(X16,X15),X18),s(X16,happ(s(fun(X17,X16),X19),s(X17,X20))))) = s(X15,happ(s(fun(X17,X15),'_dst_x0x1_2'(s(fun(X16,X15),X18),s(fun(X17,X16),X19))),s(X17,X20)))),
  file('thm.evalProps.evalProps_36_prove_ltb','_dst_x0x1_ax')).
fof(f1645,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | $spl440),
  inference(cnf_transformation,[],[f1645_D])).
fof(f1645_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) <=> ~$spl440),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl440])])).
fof(f1647,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,happ(s(fun(sK1,sK2),sK6),s(sK1,sK7(sK3,sK1)))))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) | $spl443),
  inference(cnf_transformation,[],[f1647_D])).
fof(f1647_D,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,happ(s(fun(sK1,sK2),sK6),s(sK1,sK7(sK3,sK1)))))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) <=> ~$spl443),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl443])])).
fof(f1643,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,happ(s(fun(sK1,sK2),sK6),s(sK1,sK7(sK3,sK1)))))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | ($spl1 | $spl26 | $spl72)),
  inference(forward_demodulation,[],[f1576,f86])).
fof(f1576,plain,(
  s(sK0,happ(s(fun(sK1,sK0),'_dst_x0x1_2'(s(fun(sK2,sK0),sK5),s(fun(sK1,sK2),sK6))),s(sK1,sK7(sK3,sK1)))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | ($spl1 | $spl72)),
  inference(superposition,[],[f71,f488])).
fof(f82,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) ) | $spl18),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f65,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X8] : ! [X10,X12] : s(X8,X10) = s(X8,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s(X8,X10),s(fun(X7,X8),X12)))),
  file('thm.evalProps.evalProps_36_prove_ltb','thm.option.option_case_def|split|0')).
fof(f71,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) != s(sK0,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))),s(fun(sK1,sK0),'_dst_x0x1_2'(s(fun(sK2,sK0),sK5),s(fun(sK1,sK2),sK6))))) | $spl1),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) != s(sK0,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))),s(fun(sK1,sK0),'_dst_x0x1_2'(s(fun(sK2,sK0),sK5),s(fun(sK1,sK2),sK6))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f50,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) != s(sK0,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))),s(fun(sK1,sK0),'_dst_x0x1_2'(s(fun(sK2,sK0),sK5),s(fun(sK1,sK2),sK6)))))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) != s(sK0,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK3),s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))),s(fun(sK1,sK0),'_dst_x0x1_2'(s(fun(sK2,sK0),sK5),s(fun(sK1,sK2),sK6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : s(X0,happ(s(fun(X2,X0),X5),s(X2,'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(X2,X4),s(fun(X1,X2),X6))))) != s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(X0,happ(s(fun(X2,X0),X5),s(X2,X4))),s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X5),s(fun(X1,X2),X6)))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : s(X0,happ(s(fun(X2,X0),X5),s(X2,'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(X2,X4),s(fun(X1,X2),X6))))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(X0,happ(s(fun(X2,X0),X5),s(X2,X4))),s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X5),s(fun(X1,X2),X6)))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1,X2] : ! [X3,X4,X5,X6] : s(X0,happ(s(fun(X2,X0),X5),s(X2,'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(X2,X4),s(fun(X1,X2),X6))))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),X3),s(X0,happ(s(fun(X2,X0),X5),s(X2,X4))),s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X5),s(fun(X1,X2),X6)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10,X11,X12] : s(X6,happ(s(fun(X8,X6),X11),s(X8,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X8,X10),s(fun(X7,X8),X12))))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,happ(s(fun(X8,X6),X11),s(X8,X10))),s(fun(X7,X6),'_dst_x0x1_2'(s(fun(X8,X6),X11),s(fun(X7,X8),X12)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10,X11,X12] : s(X6,happ(s(fun(X8,X6),X11),s(X8,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X8,X10),s(fun(X7,X8),X12))))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,happ(s(fun(X8,X6),X11),s(X8,X10))),s(fun(X7,X6),'_dst_x0x1_2'(s(fun(X8,X6),X11),s(fun(X7,X8),X12)))))),
  file('thm.evalProps.evalProps_36_prove_ltb','thm.evalProps.evalProps_36_prove_ltb')).
fof(f1702,plain,(
  $false | ($spl1 | $spl18 | $spl440)),
  inference(trivial_inequality_removal,[],[f1701])).
fof(f1701,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))) | ($spl1 | $spl18 | $spl440)),
  inference(forward_demodulation,[],[f1700,f82])).
fof(f1700,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) | ($spl1 | $spl18 | $spl440)),
  inference(forward_demodulation,[],[f1696,f82])).
fof(f1696,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(sK2,sK4),s(fun(sK1,sK2),sK6))))) != s(sK0,'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,sK4))),s(fun(sK1,sK0),'_dst_x0x1_2'(s(fun(sK2,sK0),sK5),s(fun(sK1,sK2),sK6))))) | ($spl1 | $spl440)),
  inference(backward_demodulation,[],[f1645,f71])).
fof(f84,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) ) | $spl22),
  inference(cnf_transformation,[],[f84_D])).
fof(f84_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f67,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X8,X7] : ! [X9,X10,X12] : s(X8,happ(s(fun(X7,X8),X12),s(X7,X9))) = s(X8,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))),s(X8,X10),s(fun(X7,X8),X12)))),
  file('thm.evalProps.evalProps_36_prove_ltb','thm.option.option_case_def|split|1')).
fof(f81,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK7(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl16),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK7(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f64,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK7(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK7(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f30])).
fof(f30,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7] : ! [X14] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X14) | ? [X9] : s('type.option.option'(X7),X14) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))))),
  file('thm.evalProps.evalProps_36_prove_ltb','thm.option.option_nchotomy')).
fof(f488,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK7(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl72),
  inference(cnf_transformation,[],[f488_D])).
fof(f488_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK7(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f449,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK7(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | ($spl16 | $spl22)),
  inference(superposition,[],[f84,f81])).
fof(f1694,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | ($spl72 | $spl443)),
  inference(trivial_inequality_removal,[],[f1693])).
fof(f1693,plain,(
  s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,happ(s(fun(sK1,sK2),sK6),s(sK1,sK7(sK3,sK1)))))) != s(sK0,happ(s(fun(sK2,sK0),sK5),s(sK2,happ(s(fun(sK1,sK2),sK6),s(sK1,sK7(sK3,sK1)))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK3) | ($spl72 | $spl443)),
  inference(superposition,[],[f1647,f488])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 40
% Passive clauses: 220
% Generated clauses: 1615
% Final active clauses: 31
% Final passive clauses: 165
% Input formulas: 16
% Initial clauses: 20
% 
% Duplicate literals: 92
% Trivial inequalities: 24
% Fw subsumption resolutions: 56
% Fw demodulations: 57
% Bw demodulations: 18
% Condensations: 137
% 
% Simple tautologies: 43
% Equational tautologies: 19
% Forward subsumptions: 619
% 
% Binary resolution: 15
% Forward superposition: 434
% Backward superposition: 446
% Self superposition: 55
% Equality factoring: 30
% Equality resolution: 7
% 
% Split clauses: 21
% Split components: 47
% SAT solver clauses: 367
% SAT solver unit clauses: 27
% SAT solver binary clauses: 27
% SAT solver learnt clauses: 1
% 
% Sat splits: 21
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 366
% TWLsolver calls for satisfiability: 96
% 
% Memory used [KB]: 2942
% Time elapsed: 0.169 s
% ------------------------------
% ------------------------------
% Success in time 0.772 s
