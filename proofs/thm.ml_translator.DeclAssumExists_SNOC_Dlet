Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (19062)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 140
% Passive clauses: 2333
% Generated clauses: 21173
% Final active clauses: 121
% Final passive clauses: 1900
% Input formulas: 30
% Initial clauses: 73
% 
% Duplicate literals: 933
% Trivial inequalities: 376
% Fw subsumption resolutions: 3881
% Fw demodulations: 2507
% Bw demodulations: 14
% 
% Simple tautologies: 480
% Equational tautologies: 61
% Forward subsumptions: 8718
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 742
% Factoring: 6
% Forward superposition: 5759
% Backward superposition: 6282
% Self superposition: 218
% Equality factoring: 169
% Equality resolution: 31
% 
% Split clauses: 1170
% Split components: 2414
% SAT solver clauses: 1843
% SAT solver unit clauses: 57
% SAT solver binary clauses: 406
% 
% Sat splits: 1169
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1830
% TWLsolver calls for satisfiability: 200
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% (19089)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 93
% Passive clauses: 385
% Generated clauses: 9197
% Final active clauses: 82
% Final passive clauses: 273
% Input formulas: 30
% Initial clauses: 73
% 
% Duplicate literals: 335
% Trivial inequalities: 100
% Fw subsumption resolutions: 1312
% Fw demodulations: 1179
% Bw demodulations: 25
% Condensations: 920
% Global subsumptions: 8
% 
% Simple tautologies: 149
% Equational tautologies: 36
% Forward subsumptions: 4035
% 
% Binary resolution: 243
% Factoring: 7
% Forward superposition: 2160
% Backward superposition: 2176
% Self superposition: 146
% Equality factoring: 88
% Equality resolution: 22
% 
% Split clauses: 54
% Split components: 111
% SAT solver clauses: 768
% SAT solver unit clauses: 74
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 16
% 
% Sat splits: 54
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 736
% TWLsolver calls for satisfiability: 332
% 
% Memory used [KB]: 7291
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.ml_translator
% (19123)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 641
% Passive clauses: 5801
% Generated clauses: 136029
% Final active clauses: 118
% Final passive clauses: 591
% Input formulas: 30
% Initial clauses: 73
% 
% Duplicate literals: 8090
% Trivial inequalities: 1059
% Fw subsumption resolutions: 12997
% Fw demodulations: 16531
% Bw demodulations: 4689
% Condensations: 15669
% Global subsumptions: 1335
% 
% Simple tautologies: 1271
% Equational tautologies: 2596
% Forward subsumptions: 68741
% Fw demodulations to eq. taut.: 11
% Bw demodulations to eq. taut.: 73
% 
% Unit resulting resolution: 8506
% Factoring: 17
% Forward superposition: 35657
% Backward superposition: 21829
% Self superposition: 614
% Equality factoring: 418
% Equality resolution: 55
% 
% Split clauses: 555
% Split components: 1135
% SAT solver clauses: 9687
% SAT solver unit clauses: 111
% SAT solver binary clauses: 421
% 
% Sat splits: 555
% Sat splitting refutations: 1439
% 
% Memory used [KB]: 56033
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f28609,plain,(
  $false),
  inference(subsumption_resolution,[],[f28608,f278])).
fof(f278,plain,(
  ( ! [X0] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',sK3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X0))))))))) )),
  inference(subsumption_resolution,[],[f244,f127])).
fof(f127,plain,(
  p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1))))),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X5,X6] : (~p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s(fun('type.semanticPrimitives.tid_or_exn',bool),X6)))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',sK3),s(fun('type.semanticPrimitives.v',bool),sK4))))) & p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1)))) & ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),sK2))),s('type.ast.exp',sK3))),s('type.list.list'('type.ast.dec'),sK1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f93])).
fof(f93,plain,(
  ? [X0,X1,X2,X3,X4] : (! [X5,X6] : (~p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s(fun('type.semanticPrimitives.tid_or_exn',bool),X6)))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),X4))))) & p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1)))) & ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X2))),s('type.ast.exp',X3))),s('type.list.list'('type.ast.dec'),X1)))))))),
  inference(rectify,[],[f70])).
fof(f70,plain,(
  ? [X1,X2,X3,X5,X6] : (! [X7,X8] : (~p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s(fun('type.semanticPrimitives.tid_or_exn',bool),X8)))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.ast.exp',X5),s(fun('type.semanticPrimitives.v',bool),X6))))) & p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),X2)))) & ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X5))),s('type.list.list'('type.ast.dec'),X2)))))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ? [X1,X2,X3,X5,X6] : (! [X7,X8] : (~p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s(fun('type.semanticPrimitives.tid_or_exn',bool),X8)))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.ast.exp',X5),s(fun('type.semanticPrimitives.v',bool),X6))))) & (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),X2)))) & ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X5))),s('type.list.list'('type.ast.dec'),X2))))))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X1,X2,X3,X5,X6] : (! [X7,X8] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s(fun('type.semanticPrimitives.tid_or_exn',bool),X8)))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.ast.exp',X5),s(fun('type.semanticPrimitives.v',bool),X6))))) => (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),X2)))) => p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X5))),s('type.list.list'('type.ast.dec'),X2))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : (! [X13,X14] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s(fun('type.semanticPrimitives.tid_or_exn',bool),X14)))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s('type.ast.exp',X11),s(fun('type.semanticPrimitives.v',bool),X12))))) => (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),X8)))) => p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X9))),s('type.ast.exp',X11))),s('type.list.list'('type.ast.dec'),X8))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : (! [X13,X14] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s(fun('type.semanticPrimitives.tid_or_exn',bool),X14)))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s('type.ast.exp',X11),s(fun('type.semanticPrimitives.v',bool),X12))))) => (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),X8)))) => p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X9))),s('type.ast.exp',X11))),s('type.list.list'('type.ast.dec'),X8))))))))),
  file('thm.ml_translator.DeclAssumExists_SNOC_Dlet','thm.ml_translator.DeclAssumExists_SNOC_Dlet')).
fof(f244,plain,(
  ( ! [X0] : (~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',sK3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X0))))))))) )),
  inference(resolution,[],[f128,f130])).
fof(f130,plain,(
  ( ! [X6,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X2))),s('type.ast.exp',X3))),s('type.list.list'('type.ast.dec'),X1)))))) | ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(X3,X2,X1,X0)),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X6))))))))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(X3,X2,X1,X0)),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6(X3,X2,X1,X0))))) & ! [X6] : ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(X3,X2,X1,X0)),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X6))))))))) | ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1)))) | p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X2))),s('type.ast.exp',X3))),s('type.list.list'('type.ast.dec'),X1)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3] : (? [X4,X5] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s(fun('type.semanticPrimitives.tid_or_exn',bool),X5)))) & ! [X6] : ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X6))))))))) | ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1)))) | p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X2))),s('type.ast.exp',X3))),s('type.list.list'('type.ast.dec'),X1)))))))),
  inference(rectify,[],[f72])).
fof(f72,plain,(
  ! [X2,X3,X4,X6] : (? [X8,X9] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s(fun('type.semanticPrimitives.tid_or_exn',bool),X9)))) & ! [X10] : ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X10))))))))) | ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),X3)))) | p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X4))),s('type.ast.exp',X6))),s('type.list.list'('type.ast.dec'),X3)))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X2,X3,X4,X6] : (? [X8,X9] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s(fun('type.semanticPrimitives.tid_or_exn',bool),X9)))) & ! [X10] : ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X10))))))))) | (~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),X3)))) | p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X4))),s('type.ast.exp',X6))),s('type.list.list'('type.ast.dec'),X3))))))))),
  inference(ennf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X2,X3,X4,X6] : (! [X8,X9] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s(fun('type.semanticPrimitives.tid_or_exn',bool),X9)))) => ? [X10] : p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X10))))))))) => (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),X3)))) => p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X4))),s('type.ast.exp',X6))),s('type.list.list'('type.ast.dec'),X3))))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X24] : ! [X7,X8,X9,X10,X11,X12] : (! [X13,X14] : (p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s(fun('type.semanticPrimitives.tid_or_exn',bool),X14)))) => ? [X23] : p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X11),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X23))))))))) => (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),X8)))) => p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X9))),s('type.ast.exp',X11))),s('type.list.list'('type.ast.dec'),X8))))))))),
  file('thm.ml_translator.DeclAssumExists_SNOC_Dlet','thm.ml_translator.DeclAssumExists_SNOC_Dlet_ALT')).
fof(f128,plain,(
  ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),sK2))),s('type.ast.exp',sK3))),s('type.list.list'('type.ast.dec'),sK1))))))),
  inference(cnf_transformation,[],[f94])).
fof(f28608,plain,(
  p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',sK3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',sK7(sK4,sK3,sK5(sK3,sK2,sK1,sK0))))))))))),
  inference(trivial_inequality_removal,[],[f28577])).
fof(f28577,plain,(
  s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',sK3),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',sK7(sK4,sK3,sK5(sK3,sK2,sK1,sK0))))))))))),
  inference(superposition,[],[f2545,f996])).
fof(f996,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s('type.ast.exp',sK3),s(fun('type.semanticPrimitives.v',bool),sK4)))),
  inference(resolution,[],[f942,f180])).
fof(f180,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X17] : (s(bool,'T_0') = s(bool,X17) <=> p(s(bool,X17)))),
  file('thm.ml_translator.DeclAssumExists_SNOC_Dlet','thm.bool.EQ_CLAUSES|split|1')).
fof(f942,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s('type.ast.exp',sK3),s(fun('type.semanticPrimitives.v',bool),sK4))))),
  inference(resolution,[],[f277,f126])).
fof(f126,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s(fun('type.semanticPrimitives.tid_or_exn',bool),X6)))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',sK3),s(fun('type.semanticPrimitives.v',bool),sK4))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f277,plain,(
  p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6(sK3,sK2,sK1,sK0)))))),
  inference(subsumption_resolution,[],[f243,f127])).
fof(f243,plain,(
  ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1)))) | p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),sK0),s('type.list.list'('type.ast.dec'),sK1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(sK3,sK2,sK1,sK0)),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6(sK3,sK2,sK1,sK0)))))),
  inference(resolution,[],[f128,f129])).
fof(f129,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),'const.list.SNOC_2'(s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat','const.ast.Pvar_1'(s('type.list.list'('type.string.char'),X2))),s('type.ast.exp',X3))),s('type.list.list'('type.ast.dec'),X1)))))) | ~p(s(bool,'const.ml_translator.DeclAssumExists_2'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1)))) | p(s(bool,'const.ml_translator.DeclAssum_4'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.list.list'('type.ast.dec'),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK5(X3,X2,X1,X0)),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f96])).
fof(f2545,plain,(
  ( ! [X76,X74,X75] : (s(bool,'T_0') != s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X74),s('type.ast.exp',X75),s(fun('type.semanticPrimitives.v',bool),X76))) | p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X74),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X75),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',sK7(X76,X75,X74)))))))))) )),
  inference(resolution,[],[f131,f179])).
fof(f179,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f120])).
fof(f131,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',sK7(X2,X1,X0))))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2))))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2)))) | (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',sK7(X2,X1,X0))))))))) & p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',sK7(X2,X1,X0))))))) & (! [X3] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X3)))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',X3))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2)))) | ? [X4] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X4)))))))) & p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',X4)))))) & (! [X3] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X3)))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',X3))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2))))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2)))) | ? [X3] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X3)))))))) & p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',X3)))))) & (! [X3] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X3)))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',X3))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2))))))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),X2)))) <=> ? [X3] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X1),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X3)))))))) & p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X2),s('type.semanticPrimitives.v',X3))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X13,X11,X12] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s('type.ast.exp',X11),s(fun('type.semanticPrimitives.v',bool),X12)))) <=> ? [X23] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',X11),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',X23)))))))) & p(s(bool,happ(s(fun('type.semanticPrimitives.v',bool),X12),s('type.semanticPrimitives.v',X23))))))),
  file('thm.ml_translator.DeclAssumExists_SNOC_Dlet','thm.ml_translator.Eval_def')).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 236
% Passive clauses: 5133
% Generated clauses: 28693
% Final active clauses: 106
% Final passive clauses: 2339
% Input formulas: 30
% Initial clauses: 73
% 
% Selected by SInE selection: 30
% SInE iterations: 1
% 
% Duplicate literals: 1369
% Trivial inequalities: 478
% Fw subsumption resolutions: 5569
% Fw demodulations: 1266
% Bw demodulations: 70
% 
% Simple tautologies: 906
% Equational tautologies: 39
% Forward subsumptions: 12049
% 
% Binary resolution: 3758
% Factoring: 2
% Forward superposition: 7850
% Backward superposition: 6952
% Self superposition: 115
% Equality factoring: 104
% Equality resolution: 22
% 
% Split clauses: 1968
% Split components: 4269
% SAT solver clauses: 2053
% SAT solver unit clauses: 23
% SAT solver binary clauses: 465
% 
% Sat splits: 1968
% Sat splitting refutations: 51
% 
% Memory used [KB]: 8699
% Time elapsed: 0.890 s
% ------------------------------
% ------------------------------
% Success in time 12.61 s
