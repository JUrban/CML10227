Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (80687)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 121
% Passive clauses: 1198
% Generated clauses: 10918
% Final active clauses: 112
% Final passive clauses: 943
% Input formulas: 18
% Initial clauses: 28
% 
% Duplicate literals: 795
% Trivial inequalities: 85
% Fw subsumption resolutions: 1343
% Fw demodulations: 1605
% Bw demodulations: 8
% 
% Simple tautologies: 228
% Equational tautologies: 19
% Forward subsumptions: 4951
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 231
% Forward superposition: 3954
% Backward superposition: 2634
% Self superposition: 82
% Equality factoring: 32
% Equality resolution: 20
% 
% Split clauses: 318
% Split components: 641
% SAT solver clauses: 653
% SAT solver unit clauses: 5
% SAT solver binary clauses: 94
% 
% Sat splits: 318
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 653
% TWLsolver calls for satisfiability: 140
% 
% Memory used [KB]: 9210
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% (80701)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 94
% Passive clauses: 524
% Generated clauses: 7608
% Final active clauses: 82
% Final passive clauses: 402
% Input formulas: 18
% Initial clauses: 28
% 
% Duplicate literals: 551
% Trivial inequalities: 45
% Fw subsumption resolutions: 496
% Fw demodulations: 1070
% Bw demodulations: 34
% Condensations: 455
% 
% Simple tautologies: 140
% Equational tautologies: 19
% Forward subsumptions: 3410
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 60
% Forward superposition: 2924
% Backward superposition: 1312
% Self superposition: 61
% Equality factoring: 32
% Equality resolution: 13
% 
% Split clauses: 27
% Split components: 59
% SAT solver clauses: 738
% SAT solver unit clauses: 40
% SAT solver binary clauses: 22
% 
% Sat splits: 27
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 738
% TWLsolver calls for satisfiability: 251
% 
% Memory used [KB]: 10874
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvp_to_wordProps
% (80722)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 393
% Passive clauses: 7917
% Generated clauses: 79029
% Final active clauses: 51
% Final passive clauses: 633
% Input formulas: 18
% Initial clauses: 28
% Discarded non-redundant clauses: 1108
% 
% Duplicate literals: 5063
% Trivial inequalities: 453
% Fw subsumption resolutions: 5638
% Fw demodulations: 11244
% Bw demodulations: 4165
% Condensations: 7806
% Global subsumptions: 216
% 
% Simple tautologies: 575
% Equational tautologies: 619
% Forward subsumptions: 38725
% Fw demodulations to eq. taut.: 23
% Bw demodulations to eq. taut.: 231
% 
% Unit resulting resolution: 2630
% Forward superposition: 19833
% Backward superposition: 15175
% Self superposition: 598
% Equality factoring: 257
% Equality resolution: 45
% 
% Split clauses: 216
% Split components: 442
% SAT solver clauses: 8956
% SAT solver unit clauses: 115
% SAT solver binary clauses: 733
% 
% Sat splits: 216
% Sat splitting refutations: 389
% 
% Memory used [KB]: 100041
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f971,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f86,f123,f220,f100,f99,f541,f557,f562,f558,f578,f650,f652,f666,f675,f687,f711,f723,f671,f756,f758,f669,f759,f654,f677,f772,f776,f778,f780,f774,f795,f797,f799,f691,f689,f667,f843,f844,f951,f952])).
fof(f952,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f912,f146])).
fof(f146,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(subsumption_resolution,[],[f138,f89])).
fof(f89,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',sK5)))),
  inference(resolution,[],[f63,f78])).
fof(f78,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X20] : (s(bool,'T_0') = s(bool,X20) <=> p(s(bool,X20)))),
  file('thm.bvp_to_wordProps.word_el_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f63,plain,(
  ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',sK5))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X17,X18,X19] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',X18))))),s('type.bvp_to_word.config',X19)))) & ! [X12,X13,X14,X15,X16] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X12))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X13),s('type.wordSem.word_loc'(sK1),X14),s('type.num.num',X15))))),s('type.bvp_to_word.config',X16)))) & ! [X6,X7,X8,X9,X10,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X6))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),X7),s('type.num.num',X8),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X9),s('type.list.list'('type.wordSem.word_loc'(sK1)),X10))))))),s('type.bvp_to_word.config',X11)))) & ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',sK5))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2] : (! [X17,X18,X19] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X18))))),s('type.bvp_to_word.config',X19)))) & ! [X12,X13,X14,X15,X16] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X12))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X13),s('type.wordSem.word_loc'(X1),X14),s('type.num.num',X15))))),s('type.bvp_to_word.config',X16)))) & ! [X6,X7,X8,X9,X10,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X6))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X7),s('type.num.num',X8),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X9),s('type.list.list'('type.wordSem.word_loc'(X1)),X10))))))),s('type.bvp_to_word.config',X11)))) & ? [X3,X4,X5] : ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),X4))),s('type.bvp_to_word.config',X5)))))),
  inference(rectify,[],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2] : (! [X14,X15,X16] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X14))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))))),s('type.bvp_to_word.config',X16)))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))))),s('type.bvp_to_word.config',X13)))) & ! [X3,X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))))),s('type.bvp_to_word.config',X8)))) & ? [X17,X18,X19] : ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),X18))),s('type.bvp_to_word.config',X19)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2] : ((! [X14,X15,X16] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X14))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))))),s('type.bvp_to_word.config',X16)))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))))),s('type.bvp_to_word.config',X13)))) & ! [X3,X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))))),s('type.bvp_to_word.config',X8))))) & ? [X17,X18,X19] : ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),X18))),s('type.bvp_to_word.config',X19)))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2] : ((! [X14,X15,X16] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X14))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))))),s('type.bvp_to_word.config',X16)))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))))),s('type.bvp_to_word.config',X13)))) & ! [X3,X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))))),s('type.bvp_to_word.config',X8))))) => ! [X17,X18,X19] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),X18))),s('type.bvp_to_word.config',X19)))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1] : ! [X2] : ((! [X14,X15,X16] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X14))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))))),s('type.bvp_to_word.config',X16)))) & ! [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))))),s('type.bvp_to_word.config',X13)))) & ! [X3,X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))))),s('type.bvp_to_word.config',X8))))) => ! [X17,X18,X19] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),fun('type.bvp_to_word.config',bool))),X2),s('type.fcp.cart'(bool,X0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),X18))),s('type.bvp_to_word.config',X19)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((! [X9,X10,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.Unused_1'(s('type.num.num',X10))))),s('type.bvp_to_word.config',X11)))) & ! [X9,X12,X13,X10,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s('type.wordSem.word_loc'(X7),X13),s('type.num.num',X10))))),s('type.bvp_to_word.config',X11)))) & ! [X9,X14,X10,X15,X16,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X7))),X14),s('type.num.num',X10),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X15),s('type.list.list'('type.wordSem.word_loc'(X7)),X16))))))),s('type.bvp_to_word.config',X11))))) => ! [X17,X18,X19] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),X18))),s('type.bvp_to_word.config',X19)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((! [X9,X10,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.Unused_1'(s('type.num.num',X10))))),s('type.bvp_to_word.config',X11)))) & ! [X9,X12,X13,X10,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s('type.wordSem.word_loc'(X7),X13),s('type.num.num',X10))))),s('type.bvp_to_word.config',X11)))) & ! [X9,X14,X10,X15,X16,X11] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X9))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X7))),X14),s('type.num.num',X10),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X15),s('type.list.list'('type.wordSem.word_loc'(X7)),X16))))))),s('type.bvp_to_word.config',X11))))) => ! [X17,X18,X19] : p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),fun('type.bvp_to_word.config',bool))),X8),s('type.fcp.cart'(bool,X6),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),X18))),s('type.bvp_to_word.config',X19)))))),
  file('thm.bvp_to_wordProps.word_el_ind','thm.bvp_to_wordProps.word_el_ind')).
fof(f138,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',sK5)))),
  inference(superposition,[],[f89,f85])).
fof(f85,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.word_el_ind',aHL_BOOL_CASES)).
fof(f912,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl12),
  inference(backward_demodulation,[],[f785,f91])).
fof(f91,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',sK5)))),
  inference(resolution,[],[f63,f75])).
fof(f75,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X20] : (s(bool,'F_0') = s(bool,X20) <=> ~p(s(bool,X20)))),
  file('thm.bvp_to_wordProps.word_el_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f785,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X0))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X1)))) ) | $spl12),
  inference(superposition,[],[f383,f654])).
fof(f383,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X6))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),X7),s('type.num.num',X8),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),X9))))),s('type.bvp_to_word.config',X10)))) )),
  inference(resolution,[],[f249,f79])).
fof(f79,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f59])).
fof(f249,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X1))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),X2),s('type.num.num',X3),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),X0))))),s('type.bvp_to_word.config',X4))))) )),
  inference(superposition,[],[f62,f69])).
fof(f69,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK27(X2,X1,X0)),s(X1,sK28(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK27(X2,X1,X0)),s(X1,sK28(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27,sK28])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7] : ! [X25] : ? [X26,X27] : s('type.pair.prod'(X6,X7),X25) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X26),s(X7,X27)))),
  file('thm.bvp_to_wordProps.word_el_ind','thm.pair.ABS_PAIR_THM')).
fof(f62,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X6))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),X7),s('type.num.num',X8),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X9),s('type.list.list'('type.wordSem.word_loc'(sK1)),X10))))))),s('type.bvp_to_word.config',X11))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f951,plain,(
  $false | $spl12),
  inference(trivial_inequality_removal,[],[f923])).
fof(f923,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl12),
  inference(superposition,[],[f89,f785])).
fof(f844,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f803,f146])).
fof(f803,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl10),
  inference(backward_demodulation,[],[f713,f91])).
fof(f713,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X0))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X1)))) ) | $spl10),
  inference(superposition,[],[f103,f652])).
fof(f103,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',X5))))),s('type.bvp_to_word.config',X6)))) )),
  inference(resolution,[],[f60,f79])).
fof(f60,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X17))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',X18))))),s('type.bvp_to_word.config',X19))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f843,plain,(
  $false | $spl10),
  inference(trivial_inequality_removal,[],[f815])).
fof(f815,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl10),
  inference(superposition,[],[f89,f713])).
fof(f667,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) | $spl14),
  inference(cnf_transformation,[],[f667_D])).
fof(f667_D,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f689,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl22),
  inference(cnf_transformation,[],[f689_D])).
fof(f689_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f691,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl24),
  inference(cnf_transformation,[],[f691_D])).
fof(f691_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f799,plain,(
  ( ! [X4,X5] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X5))))) ) | $spl12),
  inference(forward_demodulation,[],[f798,f654])).
fof(f798,plain,(
  ( ! [X4,X5] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X5)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl12),
  inference(forward_demodulation,[],[f787,f654])).
fof(f787,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X5)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl12),
  inference(superposition,[],[f175,f654])).
fof(f175,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X1))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),X0))),s('type.bvp_to_word.config',X2)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),X0) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),X0) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) )),
  inference(superposition,[],[f61,f67])).
fof(f67,plain,(
  ( ! [X2,X0,X1] : (s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'(X0)),sK24(X2,X1,X0)),s('type.num.num',sK25(X2,X1,X0)),s(X1,sK26(X2,X1,X0)))) | s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(X2,X1,X0)),s(X0,sK22(X2,X1,X0)),s('type.num.num',sK23(X2,X1,X0)))) | s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.Unused_1'(s('type.num.num',sK20(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : (s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.Unused_1'(s('type.num.num',sK20(X2,X1,X0)))) | s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(X2,X1,X0)),s(X0,sK22(X2,X1,X0)),s('type.num.num',sK23(X2,X1,X0)))) | s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'(X0)),sK24(X2,X1,X0)),s('type.num.num',sK25(X2,X1,X0)),s(X1,sK26(X2,X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21,sK22,sK23,sK24,sK25,sK26])],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : (? [X9] : s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.Unused_1'(s('type.num.num',X9))) | ? [X6,X7,X8] : s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X6),s(X0,X7),s('type.num.num',X8))) | ? [X3,X4,X5] : s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'(X0)),X3),s('type.num.num',X4),s(X1,X5))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ! [X2] : (? [X9] : s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.Unused_1'(s('type.num.num',X9))) | ? [X6,X7,X8] : s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X6),s(X0,X7),s('type.num.num',X8))) | ? [X3,X4,X5] : s('type.copying_gc.heap_element'(X0,X1),X2) = s('type.copying_gc.heap_element'(X0,X1),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'(X0)),X3),s('type.num.num',X4),s(X1,X5))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X22] : (? [X12] : s('type.copying_gc.heap_element'(X6,X7),X22) = s('type.copying_gc.heap_element'(X6,X7),'const.copying_gc.Unused_1'(s('type.num.num',X12))) | ? [X12,X9,X23] : s('type.copying_gc.heap_element'(X6,X7),X22) = s('type.copying_gc.heap_element'(X6,X7),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s(X6,X9),s('type.num.num',X23))) | ? [X10,X12,X24] : s('type.copying_gc.heap_element'(X6,X7),X22) = s('type.copying_gc.heap_element'(X6,X7),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'(X6)),X10),s('type.num.num',X12),s(X7,X24))))),
  file('thm.bvp_to_wordProps.word_el_ind','thm.copying_gc.heap_element_nchotomy')).
fof(f61,plain,(
  ( ! [X14,X12,X15,X13,X16] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X12))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X13),s('type.wordSem.word_loc'(sK1),X14),s('type.num.num',X15))))),s('type.bvp_to_word.config',X16))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f797,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl34),
  inference(cnf_transformation,[],[f797_D])).
fof(f797_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f795,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f794,f654])).
fof(f794,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl12),
  inference(forward_demodulation,[],[f786,f654])).
fof(f786,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl12),
  inference(superposition,[],[f112,f654])).
fof(f112,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X1))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),X0))),s('type.bvp_to_word.config',X2)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),X0) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),X0) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(X0,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) )),
  inference(superposition,[],[f60,f67])).
fof(f774,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl28),
  inference(cnf_transformation,[],[f774_D])).
fof(f774_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f780,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl32),
  inference(cnf_transformation,[],[f780_D])).
fof(f780_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f778,plain,(
  ( ! [X4,X5] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X5))))) ) | $spl20),
  inference(forward_demodulation,[],[f777,f677])).
fof(f777,plain,(
  ( ! [X4,X5] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X5)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl20),
  inference(forward_demodulation,[],[f763,f677])).
fof(f763,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X4))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X5)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl20),
  inference(superposition,[],[f175,f677])).
fof(f776,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl30),
  inference(cnf_transformation,[],[f776_D])).
fof(f776_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f772,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) | $spl20),
  inference(forward_demodulation,[],[f771,f677])).
fof(f771,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl20),
  inference(forward_demodulation,[],[f762,f677])).
fof(f762,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl20),
  inference(superposition,[],[f112,f677])).
fof(f677,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl20),
  inference(cnf_transformation,[],[f677_D])).
fof(f677_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f654,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl12),
  inference(cnf_transformation,[],[f654_D])).
fof(f654_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f759,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))),
  inference(subsumption_resolution,[],[f746,f80])).
fof(f80,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.word_el_ind',aHL_FALSITY)).
fof(f746,plain,(
  p(s(bool,'F_0')) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))),
  inference(superposition,[],[f112,f91])).
fof(f669,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl16),
  inference(cnf_transformation,[],[f669_D])).
fof(f669_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f758,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl26),
  inference(cnf_transformation,[],[f758_D])).
fof(f758_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f756,plain,(
  ( ! [X17,X16] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X16))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X17))))) ) | $spl10),
  inference(forward_demodulation,[],[f755,f652])).
fof(f755,plain,(
  ( ! [X17,X16] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X16))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X17)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl10),
  inference(forward_demodulation,[],[f737,f652])).
fof(f737,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X16))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X17)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl10),
  inference(superposition,[],[f112,f652])).
fof(f671,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl18),
  inference(cnf_transformation,[],[f671_D])).
fof(f671_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f723,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) | $spl10),
  inference(forward_demodulation,[],[f722,f652])).
fof(f722,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl10),
  inference(forward_demodulation,[],[f714,f652])).
fof(f714,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl10),
  inference(superposition,[],[f175,f652])).
fof(f711,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f704,f80])).
fof(f704,plain,(
  p(s(bool,'F_0')) | $spl14),
  inference(superposition,[],[f667,f91])).
fof(f687,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f686,f654])).
fof(f686,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl12),
  inference(forward_demodulation,[],[f679,f654])).
fof(f679,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl12),
  inference(superposition,[],[f175,f654])).
fof(f675,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl11),
  inference(trivial_inequality_removal,[],[f674])).
fof(f674,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) != s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK21(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.wordSem.word_loc'(sK1),sK22(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK23(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl11),
  inference(superposition,[],[f651,f67])).
fof(f651,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) != s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl11),
  inference(cnf_transformation,[],[f651_D])).
fof(f651_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) != s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f666,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3))))) ) | $spl10),
  inference(forward_demodulation,[],[f665,f652])).
fof(f665,plain,(
  ( ! [X2,X3] : (s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl10),
  inference(forward_demodulation,[],[f657,f652])).
fof(f657,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),X2))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X3)))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20('const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))) ) | $spl10),
  inference(superposition,[],[f175,f652])).
fof(f652,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | $spl10),
  inference(cnf_transformation,[],[f652_D])).
fof(f652_D,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f650,plain,(
  s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))),
  inference(subsumption_resolution,[],[f641,f80])).
fof(f641,plain,(
  p(s(bool,'F_0')) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK1))),sK24(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.num.num',sK25(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),sK26(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1))))) | s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4) = s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),'const.copying_gc.Unused_1'(s('type.num.num',sK20(sK4,'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))),'type.wordSem.word_loc'(sK1)))))),
  inference(superposition,[],[f175,f91])).
fof(f578,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5)))) ) | $spl8),
  inference(cnf_transformation,[],[f578_D])).
fof(f578_D,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f558,plain,(
  ( ! [X6,X4,X7] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7),s('type.bvp_to_word.config',X6))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5)),X7,'type.bvp_to_word.config'))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',X6))))) ) | $spl6),
  inference(cnf_transformation,[],[f558_D])).
fof(f558_D,plain,(
  ( ! [X6,X4,X7] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7),s('type.bvp_to_word.config',X6))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5)),X7,'type.bvp_to_word.config'))))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',X6))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f562,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',X6)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7),s('type.bvp_to_word.config',X6))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5)),X7,'type.bvp_to_word.config'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7))))) ) | $spl0),
  inference(resolution,[],[f528,f70])).
fof(f70,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK29(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK29(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK29(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK29])],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X31] : (p(s(bool,'const.relation.WF_1'(s(fun(X6,fun(X6,bool)),X31)))) => ! [X8] : (! [X25] : (! [X30] : (p(s(bool,happ(s(fun(X6,bool),happ(s(fun(X6,fun(X6,bool)),X31),s(X6,X30))),s(X6,X25)))) => p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X30))))) => p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X25))))) => ! [X25] : p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X25))))))),
  file('thm.bvp_to_wordProps.word_el_ind','thm.relation.WF_INDUCTION_THM')).
fof(f528,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5)),X5,'type.bvp_to_word.config'))))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5)))) ) | $spl0),
  inference(resolution,[],[f495,f75])).
fof(f495,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X6),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X6),s('type.bvp_to_word.config',sK5)),X7,'type.bvp_to_word.config'))))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X6)))) ) | $spl0),
  inference(resolution,[],[f409,f71])).
fof(f71,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK29(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f409,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X0),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4)),X0,'type.bvp_to_word.config'))))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X0)))) ) | $spl0),
  inference(resolution,[],[f99,f78])).
fof(f557,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5)))) ) | $spl4),
  inference(cnf_transformation,[],[f557_D])).
fof(f557_D,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f541,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X5))) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',X6)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7),s('type.bvp_to_word.config',X6))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X4),s('type.bvp_to_word.config',sK5)),X7,'type.bvp_to_word.config'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X7))))) ) | $spl0),
  inference(resolution,[],[f526,f70])).
fof(f526,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X0),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X0),s('type.bvp_to_word.config',sK5)),X1,'type.bvp_to_word.config'))))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X0))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1)))) ) | $spl0),
  inference(resolution,[],[f495,f78])).
fof(f99,plain,(
  ( ! [X1] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4)),X1,'type.bvp_to_word.config')))))) ) | $spl0),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4)),X1,'type.bvp_to_word.config')))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f100,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X0))))) ) | $spl2),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X0))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f220,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X0)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4)),X1,'type.bvp_to_word.config'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1))))) )),
  inference(subsumption_resolution,[],[f190,f80])).
fof(f190,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X0)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4)),X1,'type.bvp_to_word.config'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1))))) )),
  inference(superposition,[],[f70,f91])).
fof(f123,plain,(
  $false | $spl2),
  inference(resolution,[],[f100,f63])).
fof(f86,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4))),s('type.bvp_to_word.config',X0)))) | ~p(s(bool,happ(s(fun('type.bvp_to_word.config',bool),happ(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1),s('type.bvp_to_word.config',sK5))),s('type.bvp_to_word.config',sK29(happ(s(fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool)),happ(s(fun('type.fcp.cart'(bool,sK0),fun('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),fun('type.bvp_to_word.config',bool))),sK2),s('type.fcp.cart'(bool,sK0),sK3))),s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1)))),sK4)),X1,'type.bvp_to_word.config'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.bvp_to_word.config',fun('type.bvp_to_word.config',bool)),X1))))) )),
  inference(resolution,[],[f63,f70])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 57
% Passive clauses: 169
% Generated clauses: 877
% Final active clauses: 40
% Final passive clauses: 95
% Input formulas: 18
% Initial clauses: 26
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Trivial inequalities: 27
% Fw subsumption resolutions: 74
% Fw demodulations: 114
% Bw demodulations: 9
% 
% Simple tautologies: 2
% Forward subsumptions: 491
% 
% Binary resolution: 89
% Forward superposition: 313
% Backward superposition: 228
% 
% Split clauses: 15
% Split components: 38
% SAT solver clauses: 22
% SAT solver unit clauses: 6
% SAT solver binary clauses: 4
% 
% Sat splits: 15
% Sat splitting refutations: 6
% 
% Memory used [KB]: 3326
% Time elapsed: 0.111 s
% ------------------------------
% ------------------------------
% Success in time 11.875 s
