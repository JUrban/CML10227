Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_relationProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_relationProps
% SZS output start Proof for thm.clos_relationProps
fof(f794,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f791,f93,f146])).
fof(f146,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f93,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f8])).
fof(f8,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.bool.TRUTH')).
fof(f791,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f782,f97])).
fof(f97,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.list.REVERSE_DEF|split|0')).
fof(f782,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl0),
  inference(backward_demodulation,[],[f766,f92])).
fof(f92,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2)))))))),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) & s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f57])).
fof(f57,plain,(
  ? [X0,X1,X2] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ~! [X0,X1,X2] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) => s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) => s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) => s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) => s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))))))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.clos_relationProps.clos_relationProps_23_prove_ltb')).
fof(f766,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(superposition,[],[f763,f91])).
fof(f91,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f69])).
fof(f763,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) ) | $spl0),
  inference(forward_demodulation,[],[f762,f97])).
fof(f762,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) ) | $spl0),
  inference(forward_demodulation,[],[f761,f122])).
fof(f122,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X8] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.list.list'(X6),X8)))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.rich_list.BUTLASTN_LENGTH_NIL')).
fof(f761,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f750,f146])).
fof(f750,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(superposition,[],[f126,f159])).
fof(f159,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(resolution,[],[f100,f96])).
fof(f96,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X9))))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.arithmetic.LESS_EQ_REFL')).
fof(f100,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f126,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))))) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))))),
  file('thm.clos_relationProps.clos_relationProps_23_prove_ltb','thm.rich_list.DROP_REVERSE')).
% SZS output end Proof for thm.clos_relationProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 126
% Generated clauses: 680
% Final active clauses: 37
% Final passive clauses: 49
% Input formulas: 24
% Initial clauses: 53
% 
% Duplicate literals: 54
% Trivial inequalities: 26
% Fw subsumption resolutions: 76
% Fw demodulations: 18
% Bw demodulations: 2
% 
% Simple tautologies: 61
% Equational tautologies: 15
% Forward subsumptions: 264
% 
% Binary resolution: 44
% Forward superposition: 201
% Backward superposition: 124
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 12
% 
% Split clauses: 33
% Split components: 68
% SAT solver clauses: 75
% SAT solver unit clauses: 8
% SAT solver binary clauses: 31
% SAT solver learnt clauses: 1
% 
% Sat splits: 33
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 74
% TWLsolver calls for satisfiability: 36
% 
% Memory used [KB]: 1151
% Time elapsed: 0.026 s
% ------------------------------
% ------------------------------
% Success in time 0.02 s
