Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.misc
% (60555)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1014
% Passive clauses: 7705
% Generated clauses: 35102
% Final active clauses: 870
% Final passive clauses: 6224
% Input formulas: 261
% Initial clauses: 513
% 
% Duplicate literals: 223
% Trivial inequalities: 58
% Fw subsumption resolutions: 1973
% Fw demodulations: 4068
% Bw demodulations: 142
% 
% Simple tautologies: 256
% Equational tautologies: 27
% Forward subsumptions: 20653
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 6433
% Factoring: 966
% Forward superposition: 9508
% Backward superposition: 11209
% Self superposition: 61
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 407
% Split components: 816
% SAT solver clauses: 599
% SAT solver unit clauses: 19
% SAT solver binary clauses: 84
% 
% Sat splits: 407
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 599
% TWLsolver calls for satisfiability: 404
% 
% Memory used [KB]: 18933
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% (60575)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 584
% Passive clauses: 3771
% Generated clauses: 25418
% Final active clauses: 477
% Final passive clauses: 2842
% Input formulas: 261
% Initial clauses: 513
% 
% Duplicate literals: 84
% Trivial inequalities: 34
% Fw subsumption resolutions: 859
% Fw demodulations: 3405
% Bw demodulations: 400
% Condensations: 72
% Global subsumptions: 26
% 
% Simple tautologies: 247
% Equational tautologies: 14
% Forward subsumptions: 12463
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 5
% 
% Binary resolution: 2472
% Factoring: 124
% Forward superposition: 6826
% Backward superposition: 6539
% Self superposition: 70
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 32
% Split components: 64
% SAT solver clauses: 4806
% SAT solver unit clauses: 652
% SAT solver binary clauses: 172
% SAT solver learnt clauses: 52
% SAT solver learnt literals: 14
% 
% Sat splits: 32
% Sat splitting refutations: 26
% 
% TWLsolver clauses: 4702
% TWLsolver calls for satisfiability: 2952
% 
% Memory used [KB]: 22899
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f104121,plain,(
  $false),
  inference(subsumption_resolution,[],[f104112,f53998])).
fof(f53998,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK11,sK14),s(fun(sK11,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK11,sK12),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15))))))))),
  inference(forward_demodulation,[],[f53870,f1278])).
fof(f1278,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))) )),
  inference(cnf_transformation,[],[f545])).
fof(f545,plain,(
  ! [X0,X1,X2] : s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))),
  inference(flattening,[],[f544])).
fof(f544,plain,(
  ! [X0,X1] : ! [X2] : s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))),
  inference(rectify,[],[f182])).
fof(f182,axiom,(
  ! [X7,X6] : ! [X60] : s(fun(X7,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X7,X6),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(X7,X6)),X60))))) = s(fun(X7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun('type.pair.prod'(X7,X6),X7),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X7,X6)),X60)))))),
  file('thm.misc.ALOOKUP_find_index_NONE','thm.alist.FDOM_alist_to_fmap')).
fof(f53870,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK11,sK14),s(fun(sK11,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK11),'const.list.MAP_2'(s(fun('type.pair.prod'(sK11,sK12),sK11),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15))))))))),
  inference(unit_resulting_resolution,[],[f922,f1152])).
fof(f1152,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X2),s('type.list.list'(X0),X1),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f823])).
fof(f823,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X2),s('type.list.list'(X0),X1),s('type.num.num',X3)))) & (s('type.option.option'('type.num.num'),'const.option.NONE_0') != s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X2),s('type.list.list'(X0),X1),s('type.num.num',X3))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f457])).
fof(f457,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) <=> s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X2),s('type.list.list'(X0),X1),s('type.num.num',X3))))),
  inference(flattening,[],[f456])).
fof(f456,plain,(
  ! [X0] : ! [X1,X2,X3] : (~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) <=> s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X2),s('type.list.list'(X0),X1),s('type.num.num',X3))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7] : ! [X18,X19,X20] : (~p(s(bool,'const.bool.IN_2'(s(X7,X19),s(fun(X7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X7),X18)))))) <=> s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X7,X19),s('type.list.list'(X7),X18),s('type.num.num',X20))))),
  file('thm.misc.ALOOKUP_find_index_NONE','thm.misc.find_index_NOT_MEM')).
fof(f922,plain,(
  s('type.option.option'('type.num.num'),'const.option.NONE_0') != s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(sK11,sK14),s('type.list.list'(sK11),'const.list.MAP_2'(s(fun('type.pair.prod'(sK11,sK12),sK11),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15))),s('type.num.num',sK13)))),
  inference(cnf_transformation,[],[f723])).
fof(f723,plain,(
  s('type.option.option'(sK12),'const.option.NONE_0') = s('type.option.option'(sK12),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15),s(sK11,sK14))) & s('type.option.option'('type.num.num'),'const.option.NONE_0') != s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(sK11,sK14),s('type.list.list'(sK11),'const.list.MAP_2'(s(fun('type.pair.prod'(sK11,sK12),sK11),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15))),s('type.num.num',sK13)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15])],[f646])).
fof(f646,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))) & s('type.option.option'('type.num.num'),'const.option.NONE_0') != s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4))),s('type.num.num',X2))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))) => s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4))),s('type.num.num',X2))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X4),s(X0,X3))) => s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X0,X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X4))),s('type.num.num',X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X10),s(X6,X9))) => s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X6,X9),s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X10))),s('type.num.num',X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,X7)),X10),s(X6,X9))) => s('type.option.option'('type.num.num'),'const.option.NONE_0') = s('type.option.option'('type.num.num'),'const.misc.find_index_3'(s(X6,X9),s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X10))),s('type.num.num',X8))))),
  file('thm.misc.ALOOKUP_find_index_NONE','thm.misc.ALOOKUP_find_index_NONE')).
fof(f104112,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK11,sK14),s(fun(sK11,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK11,sK12),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15))))))))),
  inference(unit_resulting_resolution,[],[f921,f1495])).
fof(f1495,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s(X0,X3))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.alist.alist_to_fmap_1'(s('type.list.list'('type.pair.prod'(X0,X1)),X2))))))))) )),
  inference(forward_demodulation,[],[f1298,f1278])).
fof(f1298,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f866])).
fof(f866,plain,(
  ! [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s(X0,X3))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2))))))))) & (p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s(X0,X3)))))),
  inference(nnf_transformation,[],[f579])).
fof(f579,plain,(
  ! [X0,X1,X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s(X0,X3))) <=> ~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))))),
  inference(flattening,[],[f578])).
fof(f578,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),X2),s(X0,X3))) <=> ~p(s(bool,'const.bool.IN_2'(s(X0,X3),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X6] : ! [X25,X19] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X7,X6)),X25),s(X7,X19))) <=> ~p(s(bool,'const.bool.IN_2'(s(X7,X19),s(fun(X7,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun('type.pair.prod'(X7,X6),X7),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X7,X6)),X25)))))))))),
  file('thm.misc.ALOOKUP_find_index_NONE','thm.alist.ALOOKUP_NONE')).
fof(f921,plain,(
  s('type.option.option'(sK12),'const.option.NONE_0') = s('type.option.option'(sK12),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK11,sK12)),sK15),s(sK11,sK14)))),
  inference(cnf_transformation,[],[f723])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 863
% Passive clauses: 9348
% Generated clauses: 103037
% Final active clauses: 763
% Final passive clauses: 3748
% Input formulas: 261
% Initial clauses: 513
% Discarded non-redundant clauses: 43048
% 
% Duplicate literals: 8
% Trivial inequalities: 31
% Fw subsumption resolutions: 1722
% Fw demodulations: 15524
% Bw demodulations: 443
% Condensations: 33
% 
% Simple tautologies: 117
% Equational tautologies: 45
% Forward subsumptions: 30049
% Fw demodulations to eq. taut.: 4907
% Bw demodulations to eq. taut.: 11
% 
% Unit resulting resolution: 62300
% Factoring: 2
% Forward superposition: 12586
% Backward superposition: 9684
% Self superposition: 120
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 35
% Split components: 70
% SAT solver clauses: 11298
% SAT solver unit clauses: 3989
% SAT solver binary clauses: 5747
% 
% Sat splits: 35
% Sat splitting refutations: 1878
% 
% Memory used [KB]: 83538
% Time elapsed: 5.991 s
% ------------------------------
% ------------------------------
% Success in time 7.323 s
