Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_removeProof
% (120905)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 207
% Passive clauses: 3464
% Generated clauses: 17404
% Final active clauses: 190
% Final passive clauses: 3041
% Input formulas: 48
% Initial clauses: 116
% 
% Duplicate literals: 437
% Trivial inequalities: 318
% Fw subsumption resolutions: 1263
% Fw demodulations: 2649
% Bw demodulations: 17
% 
% Simple tautologies: 375
% Equational tautologies: 24
% Forward subsumptions: 8182
% 
% Binary resolution: 327
% Forward superposition: 7377
% Backward superposition: 4613
% Self superposition: 121
% Equality factoring: 42
% Equality resolution: 60
% 
% Split clauses: 165
% Split components: 334
% SAT solver clauses: 499
% SAT solver unit clauses: 9
% SAT solver binary clauses: 79
% 
% Sat splits: 165
% 
% TWLsolver clauses: 499
% TWLsolver calls for satisfiability: 139
% 
% Memory used [KB]: 20852
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stack_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_removeProof
% SZS output start Proof for thm.stack_removeProof
fof(f2722,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2721,f180,f313,f791,f793,f181,f319,f270,f379,f448,f452,f178,f317,f186,f323,f2718,f2719,f412,f413,f238,f346,f400,f401,f243,f351,f260,f365,f446,f450,f179,f315])).
fof(f315,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6)))) | $spl2),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f179,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6))))),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6)))) & s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK3))) != s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5,sK6])],[f122])).
fof(f122,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X5),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X2)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X2))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X5),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X2)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X2))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X5),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X2)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : ((p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X5),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X2)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X4),s('type.stackSem.state'(X0,X1),X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : ((p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X11),s('type.stackSem.state'(X6,X7),X9),s('type.stackSem.state'(X6,X7),X8)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))))) => s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X10),s('type.stackSem.state'(X6,X7),X8))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X10),s('type.stackSem.state'(X6,X7),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : ((p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X11),s('type.stackSem.state'(X6,X7),X9),s('type.stackSem.state'(X6,X7),X8)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))))) => s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X10),s('type.stackSem.state'(X6,X7),X8))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X10),s('type.stackSem.state'(X6,X7),X9))))),
  file('thm.stack_removeProof.stack_removeProof_46_prove_ltb','thm.stack_removeProof.stack_removeProof_46_prove_ltb')).
fof(f450,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6))) | $spl156),
  inference(cnf_transformation,[],[f450_D])).
fof(f450_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6))) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f446,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK5),s('type.num.num',sK6))) | ($spl2 | $spl12)),
  inference(resolution,[],[f323,f315])).
fof(f365,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X6))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X6))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) ) | $spl80),
  inference(cnf_transformation,[],[f365_D])).
fof(f365_D,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X6))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X6))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f260,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X6))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X6))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP0(X0,X1,X2,X3,X4) | (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X6] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X6))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X6)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X3),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X3),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X4))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))))) & (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) | ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2)))) | p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) | (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',sK8(X4,X3,X2,X1,X0)))),s('type.num.num',X3)))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',sK8(X4,X3,X2,X1,X0)))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',sK8(X4,X3,X2,X1,X0))))) | ~p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X3),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2)))))) | s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))))) != s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X3),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2)))))) | ~p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4)))))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X4))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))) | sP0(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f170])).
fof(f170,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP0(X0,X1,X2,X3,X4) | (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X6] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X6))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X6)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X3),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X3),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X4))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))))) & (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) | ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2)))) | p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) | ? [X5] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X3)))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X5))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) | ~p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X3),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2)))))) | s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))))) != s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X3),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2)))))) | ~p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4)))))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))),s('type.num.num',X3))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X4))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X4))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X4))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))) | sP0(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X4,X2,X3] : ((~sP0(X0,X1,X4,X2,X3) | (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))))) & (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) | ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) | p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) | ? [X5] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) | ~p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) | s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) != s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) | ~p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))) | sP0(X0,X1,X4,X2,X3)))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1,X4,X2,X3] : ((~sP0(X0,X1,X4,X2,X3) | (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0')))))))))))) & ((~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) | ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) | p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) | p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) | ? [X5] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) | ~p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) | s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) != s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) != s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) | ~p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0'))))))))))) | sP0(X0,X1,X4,X2,X3)))),
  inference(nnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X4,X2,X3] : (sP0(X0,X1,X4,X2,X3) <=> (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0'))))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f351,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))) ) | $spl52),
  inference(cnf_transformation,[],[f351_D])).
fof(f351_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f243,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X2)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X19] : ! [X20,X9] : s('type.option.option'('type.wordSem.word_loc'(X6)),'const.stackSem.get_var_2'(s('type.num.num',X20),s('type.stackSem.state'(X6,X19),X9))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X19),X9))),s('type.num.num',X20)))),
  file('thm.stack_removeProof.stack_removeProof_46_prove_ltb','thm.stackSem.get_var_def')).
fof(f401,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) ) | $spl136),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f400,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) ) | ($spl52 | $spl80)),
  inference(forward_demodulation,[],[f398,f351])).
fof(f398,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X6))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4)) ) | ($spl52 | $spl80)),
  inference(backward_demodulation,[],[f351,f365])).
fof(f346,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0))),s('type.num.num',X1)))) ) | $spl42),
  inference(cnf_transformation,[],[f346_D])).
fof(f346_D,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0))),s('type.num.num',X1)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f238,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X23,X24] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X24))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X23))),s('type.num.num',X24)))),
  file('thm.stack_removeProof.stack_removeProof_46_prove_ltb','ARITY_0_2_const.prim_rec.<')).
fof(f413,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X4)))) ) | $spl148),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X3)))) | ~sP0(X0,X1,X2,X3,X4) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X4)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f412,plain,(
  ( ! [X6,X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X3)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',X6),s('type.stackSem.state'(X0,X1),X4))) | ~sP0(X0,X1,X2,X3,X4)) ) | ($spl42 | $spl136)),
  inference(forward_demodulation,[],[f401,f346])).
fof(f2719,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X0,X1,X2,sK6,X3) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X3)))) ) | $spl1034),
  inference(cnf_transformation,[],[f2719_D])).
fof(f2719_D,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X0,X1,X2,sK6,X3) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X3)))) ) <=> ~$spl1034),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1034])])).
fof(f2718,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X0,X1,X2,sK6,X3) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl6 | $spl148 | $spl156)),
  inference(subsumption_resolution,[],[f2691,f319])).
fof(f2691,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | ~sP0(X0,X1,X2,sK6,X3) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X2))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl148 | $spl156)),
  inference(superposition,[],[f413,f450])).
fof(f323,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f323_D])).
fof(f323_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f186,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) <=> p(s(bool,X8)))),
  file('thm.stack_removeProof.stack_removeProof_46_prove_ltb','thm.bool.EQ_CLAUSES|split|0')).
fof(f317,plain,(
  p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3)))) | $spl4),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f178,plain,(
  p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3))))),
  inference(cnf_transformation,[],[f136])).
fof(f452,plain,(
  s(bool,'T_0') = s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3))) | $spl158),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  s(bool,'T_0') = s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3))) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f448,plain,(
  s(bool,'T_0') = s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',sK6),s('type.stackSem.state'(sK1,sK2),sK4),s('type.stackSem.state'(sK1,sK2),sK3))) | ($spl4 | $spl12)),
  inference(resolution,[],[f323,f317])).
fof(f379,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) | sP0(X0,X1,X4,X2,X3)) ) | $spl108),
  inference(cnf_transformation,[],[f379_D])).
fof(f379_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) | sP0(X0,X1,X4,X2,X3)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f270,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X0,X1,X4,X2,X3) | ~p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4))))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) | sP0(X0,X1,X4,X2,X3)) & (~sP0(X0,X1,X4,X2,X3) | p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4))))))),
  inference(nnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) <=> sP0(X0,X1,X4,X2,X3))),
  inference(definition_folding,[],[f129,f134])).
fof(f129,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) <=> (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) | s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0'))))))))))))),
  inference(ennf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) <=> (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X5] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0'))))))))))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X2),s('type.stackSem.state'(X0,X1),X3),s('type.stackSem.state'(X0,X1),X4)))) <=> (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X4)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X4))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X4))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))) & ! [X5] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X5))),s('type.num.num',X2)))) => s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X5)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X2),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4)))))) & s('type.option.option'('type.stackLang.prog'(X0)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X4))))) = s('type.option.option'('type.stackLang.prog'(X0)),happ(s(fun('type.stackLang.prog'(X0),'type.option.option'('type.stackLang.prog'(X0))),'const.option.SOME_0'),s('type.stackLang.prog'(X0),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X2),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X4)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X0),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X0),fun(fun('type.fcp.cart'(bool,X0),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X0),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X0)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X4))),s('type.num.num',X2))))),s(fun('type.fcp.cart'(bool,X0),'type.option.option'('type.wordSem.word_loc'(X0))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X0),'type.option.option'('type.wordSem.word_loc'(X0))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.fcp.cart'(bool,X0),'type.fcp.cart'(bool,X0))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))))))))))))))),s(fun('type.fcp.cart'(bool,X0),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X0),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X0),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X0)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))))))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))))))),s(fun('type.fcp.cart'(bool,X0),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X0),fun('type.list.list'('type.wordSem.word_loc'(X0)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),fun('type.fcp.cart'(bool,X0),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X4))),s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X4))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0'))))))))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6,X19] : ! [X11,X21,X22] : (p(s(bool,'const.stack_removeProof.state_rel_3'(s('type.num.num',X11),s('type.stackSem.state'(X6,X19),X21),s('type.stackSem.state'(X6,X19),X22)))) <=> (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X19),X21)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X19),X21)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X19),X22)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X19),X22)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X19),X22)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X19),X21)))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X19),X21))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X19),X22))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X19),X21))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X19),X22))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X19),X21))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X19),X22))) & s('type.ffi.ffi_state'(X19),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X19),X21))) = s('type.ffi.ffi_state'(X19),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X19),X22))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X19),X21))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X19),X22))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))) & ! [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X10))),s('type.num.num',X11)))) => s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X19),X21))),s('type.num.num',X10))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X19),X22))),s('type.num.num',X10)))) & p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X11),s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X19),X21))),s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X19),X22)))))) & s('type.option.option'('type.stackLang.prog'(X6)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X19),X22))))) = s('type.option.option'('type.stackLang.prog'(X6)),happ(s(fun('type.stackLang.prog'(X6),'type.option.option'('type.stackLang.prog'(X6))),'const.option.SOME_0'),s('type.stackLang.prog'(X6),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X19),X21))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X19),X22))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',X11),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.INSERT_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X19),X22)))))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X19),X21))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X19),X21))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X19),X21)))))))) & p(s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X19),X22))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(bool,'F_0'),s(fun('type.wordSem.word_loc'(X6),bool),'_dst_x1x0x0_3'(s(fun('type.wordSem.word_loc'(X6),fun(fun('type.fcp.cart'(bool,X6),bool),fun(fun('type.num.num',fun('type.num.num',bool)),bool))),'const.wordSem.word_loc_CASE_0'),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1_2'(s(fun('type.num.num',bool),'const.arithmetic.<=_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))))),s(fun('type.fcp.cart'(bool,X6),'type.num.num'),'const.words.w2n_0'))),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s(fun('type.fcp.cart'(bool,X6),'type.num.num'),'_dst_x0x1x0_3'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s(fun('type.fcp.cart'(bool,X6),'type.num.num'),'const.words.w2n_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',happ(s(fun('type.fcp.cart'(bool,X6),'type.num.num'),'const.words.w2n_0'),s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X19),X21))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1_2'(s(fun('type.option.option'('type.wordSem.word_loc'(X6)),bool),'=_1'(s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X19),X22))),s('type.num.num',X11))))),s(fun('type.fcp.cart'(bool,X6),'type.option.option'('type.wordSem.word_loc'(X6))),'_dst_x0x1_2'(s(fun('type.wordSem.word_loc'(X6),'type.option.option'('type.wordSem.word_loc'(X6))),'const.option.SOME_0'),s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'_dst_x0x1_2'(s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.Word_0'),s(fun('type.fcp.cart'(bool,X6),'type.fcp.cart'(bool,X6)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X6),fun('type.fcp.cart'(bool,X6),'type.fcp.cart'(bool,X6))),'const.words.word_add_0'),s('type.fcp.cart'(bool,X6),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X19),X21))))))))))))))),s(fun('type.fcp.cart'(bool,X6),bool),'_dst_x0x1x1x0_4'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool))),'const.set_sep.STAR_0'),s(fun('type.fcp.cart'(bool,X6),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool)),'_dst_x0x1_2'(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool)),happ(s(fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool))),'const.set_sep.STAR_0'),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X19),X21))),s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X19),X21))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool),happ(s(fun('type.list.list'('type.wordSem.word_loc'(X6)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool)),happ(s(fun('type.fcp.cart'(bool,X6),fun('type.list.list'('type.wordSem.word_loc'(X6)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool))),'const.misc.word_list_0'),s('type.fcp.cart'(bool,X6),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X6),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X6)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X19),X21))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))),s('type.list.list'('type.wordSem.word_loc'(X6)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X19),X21))))))))))),s(fun('type.fcp.cart'(bool,X6),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X6),fun('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool))),'const.stack_removeProof.word_store_0'),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X19),X21))))))),s(fun('type.fcp.cart'(bool,X6),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool)),'_dst_x1x0_2'(s(fun('type.fcp.cart'(bool,X6),fun('type.list.list'('type.wordSem.word_loc'(X6)),fun(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),bool))),'const.misc.word_list_0'),s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X19),X21))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),fun('type.fcp.cart'(bool,X6),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X19),X22))),s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X19),X22))))))))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0_1'(s(fun('type.num.num',bool),'_dst_x0_1'(s(bool,'F_0'))))))))))))),
  file('thm.stack_removeProof.stack_removeProof_46_prove_ltb','thm.stack_removeProof.state_rel_def')).
fof(f319,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f319_D])).
fof(f319_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f181,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.stack_removeProof.stack_removeProof_46_prove_ltb',aHL_TRUTH)).
fof(f793,plain,(
  sP0(sK1,sK2,sK3,sK6,sK4) | $spl286),
  inference(cnf_transformation,[],[f793_D])).
fof(f793_D,plain,(
  sP0(sK1,sK2,sK3,sK6,sK4) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f791,plain,(
  sP0(sK1,sK2,sK3,sK6,sK4) | ($spl6 | $spl108 | $spl158)),
  inference(subsumption_resolution,[],[f783,f319])).
fof(f783,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2,sK3,sK6,sK4) | ($spl108 | $spl158)),
  inference(superposition,[],[f379,f452])).
fof(f313,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK3))) != s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK4))) | $spl1),
  inference(cnf_transformation,[],[f313_D])).
fof(f313_D,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK3))) != s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f180,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK3))) != s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK4)))),
  inference(cnf_transformation,[],[f136])).
fof(f2721,plain,(
  $false | ($spl1 | $spl286 | $spl1034)),
  inference(subsumption_resolution,[],[f2720,f313])).
fof(f2720,plain,(
  s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK3))) = s('type.option.option'('type.wordSem.word_loc'(sK1)),'const.stackSem.get_var_2'(s('type.num.num',sK5),s('type.stackSem.state'(sK1,sK2),sK4))) | ($spl286 | $spl1034)),
  inference(resolution,[],[f2719,f793])).
% SZS output end Proof for thm.stack_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 108
% Passive clauses: 504
% Generated clauses: 2512
% Final active clauses: 104
% Final passive clauses: 389
% Input formulas: 48
% Initial clauses: 116
% 
% Duplicate literals: 8
% Trivial inequalities: 22
% Fw subsumption resolutions: 77
% Fw demodulations: 366
% Bw demodulations: 11
% Condensations: 34
% Global subsumptions: 8
% 
% Simple tautologies: 43
% Equational tautologies: 4
% Forward subsumptions: 844
% 
% Binary resolution: 188
% Factoring: 1
% Forward superposition: 469
% Backward superposition: 661
% Self superposition: 25
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 730
% SAT solver unit clauses: 142
% SAT solver binary clauses: 52
% SAT solver learnt clauses: 17
% 
% Sat splits: 4
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 697
% TWLsolver calls for satisfiability: 2127
% 
% Memory used [KB]: 6524
% Time elapsed: 0.156 s
% ------------------------------
% ------------------------------
% Success in time 0.78 s
