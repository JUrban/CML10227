Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f665,plain,(
  $false),
  inference(subsumption_resolution,[],[f664,f26])).
fof(f26,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.datatype_tag',aHL_TRUTH)).
fof(f664,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f25,f33])).
fof(f33,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X7,X8)))),
  file('thm.bvp_to_wordProps.datatype_tag','thm.bool.DATATYPE_TAG_THM')).
fof(f25,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.bvp_to_wordProps.tag',bool),happ(s(fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))),happ(s(fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)))),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))))),sK0),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BlockTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.RefTag_0'))),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BytesTag_0'))),s(fun(bool,'type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.NumTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.Word64Tag_0'))))))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.bvp_to_wordProps.tag',bool),happ(s(fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))),happ(s(fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)))),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))))),sK0),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BlockTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.RefTag_0'))),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BytesTag_0'))),s(fun(bool,'type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.NumTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.Word64Tag_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f21])).
fof(f21,plain,(
  ? [X0] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.bvp_to_wordProps.tag',bool),happ(s(fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))),happ(s(fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)))),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))))),X0),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BlockTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.RefTag_0'))),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BytesTag_0'))),s(fun(bool,'type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.NumTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.Word64Tag_0'))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.bvp_to_wordProps.tag',bool),happ(s(fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))),happ(s(fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)))),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))))),X0),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BlockTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.RefTag_0'))),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BytesTag_0'))),s(fun(bool,'type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.NumTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.Word64Tag_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.bvp_to_wordProps.tag',bool),happ(s(fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))),happ(s(fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)))),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))))),X6),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BlockTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.RefTag_0'))),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BytesTag_0'))),s(fun(bool,'type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.NumTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.Word64Tag_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.bvp_to_wordProps.tag',bool),happ(s(fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))),happ(s(fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool)))),happ(s(fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',fun(fun('type.num.num','type.bvp_to_wordProps.tag'),fun(fun(bool,'type.bvp_to_wordProps.tag'),fun('type.bvp_to_wordProps.tag',bool))))),X6),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BlockTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.RefTag_0'))),s(fun('type.num.num','type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.BytesTag_0'))),s(fun(bool,'type.bvp_to_wordProps.tag'),'const.bvp_to_wordProps.NumTag_0'))),s('type.bvp_to_wordProps.tag','const.bvp_to_wordProps.Word64Tag_0'))))))),
  file('thm.bvp_to_wordProps.datatype_tag','thm.bvp_to_wordProps.datatype_tag')).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 20
% Passive clauses: 66
% Generated clauses: 601
% Final active clauses: 18
% Final passive clauses: 37
% Input formulas: 10
% Initial clauses: 10
% 
% Duplicate literals: 91
% Trivial inequalities: 14
% Fw subsumption resolutions: 18
% Fw demodulations: 28
% 
% Simple tautologies: 29
% Equational tautologies: 17
% Forward subsumptions: 322
% 
% Binary resolution: 6
% Forward superposition: 208
% Backward superposition: 127
% Self superposition: 49
% Equality factoring: 40
% Equality resolution: 3
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 21
% SAT solver unit clauses: 4
% SAT solver binary clauses: 15
% 
% Sat splits: 12
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 21
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 767
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.022 s
