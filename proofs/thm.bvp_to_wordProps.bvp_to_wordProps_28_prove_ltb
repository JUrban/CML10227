Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f1058,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1057,f132,f229,f227,f133,f226])).
fof(f226,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),sK6) | $spl1),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),sK6) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f133,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),sK6)),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK6) | s('type.list.list'(bool),sK6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK7),s('type.list.list'(bool),sK8)))) & s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),sK6) & ! [X1,X2] : s('type.list.list'(bool),sK6) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8])],[f89])).
fof(f89,plain,(
  ? [X0] : ((s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | ? [X3,X4] : s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4)))) & s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),X0) & ! [X1,X2] : s('type.list.list'(bool),X0) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0] : ((s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | ? [X1,X2] : s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2)))) & s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),X0) & ! [X3,X4] : s('type.list.list'(bool),X0) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ? [X0] : ((s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | ? [X1,X2] : s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2)))) & (s('type.list.list'(bool),'const.list.NIL_0') != s('type.list.list'(bool),X0) & ! [X3,X4] : s('type.list.list'(bool),X0) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4)))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ((s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | ? [X1,X2] : s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2)))) => (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X0) | ? [X3,X4] : s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X6) | ? [X7,X8] : s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),X8)))) => (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X6) | ? [X7,X8] : s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X6) | ? [X7,X8] : s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),X8)))) => (s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),X6) | ? [X7,X8] : s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),X8)))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_28_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_28_prove_ltb')).
fof(f227,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK6) | $spl0),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK6) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f229,plain,(
  s('type.list.list'(bool),sK6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK7),s('type.list.list'(bool),sK8))) | $spl2),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.list.list'(bool),sK6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK7),s('type.list.list'(bool),sK8))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f132,plain,(
  s('type.list.list'(bool),sK6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK7),s('type.list.list'(bool),sK8))) | s('type.list.list'(bool),'const.list.NIL_0') = s('type.list.list'(bool),sK6)),
  inference(cnf_transformation,[],[f90])).
fof(f1057,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f229,f134])).
fof(f134,plain,(
  ( ! [X2,X1] : (s('type.list.list'(bool),sK6) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2)))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 116
% Passive clauses: 220
% Generated clauses: 918
% Final active clauses: 116
% Final passive clauses: 82
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 23
% Trivial inequalities: 5
% Fw subsumption resolutions: 72
% 
% Simple tautologies: 37
% Equational tautologies: 3
% Forward subsumptions: 527
% 
% Binary resolution: 497
% Factoring: 146
% Forward superposition: 10
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 35
% Split components: 71
% SAT solver clauses: 54
% SAT solver unit clauses: 6
% SAT solver binary clauses: 18
% SAT solver learnt clauses: 1
% 
% Sat splits: 35
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 53
% TWLsolver calls for satisfiability: 33
% 
% Memory used [KB]: 895
% Time elapsed: 0.052 s
% ------------------------------
% ------------------------------
% Success in time 0.061 s
