Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (135192)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 182
% Passive clauses: 2623
% Generated clauses: 13096
% Final active clauses: 181
% Final passive clauses: 2160
% Input formulas: 132
% Initial clauses: 191
% 
% Duplicate literals: 277
% Trivial inequalities: 352
% Fw subsumption resolutions: 930
% Fw demodulations: 2282
% 
% Simple tautologies: 259
% Equational tautologies: 26
% Forward subsumptions: 6207
% 
% Binary resolution: 101
% Forward superposition: 4519
% Backward superposition: 4322
% Self superposition: 74
% Equality factoring: 34
% Equality resolution: 42
% 
% Split clauses: 191
% Split components: 387
% SAT solver clauses: 281
% SAT solver unit clauses: 8
% SAT solver binary clauses: 61
% 
% Sat splits: 191
% 
% TWLsolver clauses: 272
% TWLsolver calls for satisfiability: 39
% 
% Memory used [KB]: 8059
% Time elapsed: 0.619 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (135216)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 188
% Passive clauses: 1662
% Generated clauses: 14169
% Final active clauses: 187
% Final passive clauses: 1466
% Input formulas: 132
% Initial clauses: 191
% 
% Duplicate literals: 13
% Trivial inequalities: 187
% Fw subsumption resolutions: 268
% Fw demodulations: 1473
% Bw demodulations: 8
% Condensations: 38
% Global subsumptions: 8
% 
% Simple tautologies: 82
% Equational tautologies: 11
% Forward subsumptions: 7957
% 
% Binary resolution: 150
% Forward superposition: 4797
% Backward superposition: 5125
% Self superposition: 105
% Equality factoring: 2
% Equality resolution: 27
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 2554
% SAT solver unit clauses: 289
% SAT solver binary clauses: 47
% SAT solver learnt clauses: 16
% 
% Sat splits: 5
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2522
% TWLsolver calls for satisfiability: 1150
% 
% Memory used [KB]: 30831
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f171287,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f417,f588])).
fof(f588,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X1),s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X0),s('type.ast.dec',X4))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',sK31(X4,X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK32(X4,X3,X2,X1,X0)),s('type.modLang.dec',sK33(X4,X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f416,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X1),s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X0),s('type.ast.dec',X4))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',sK31(X4,X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK32(X4,X3,X2,X1,X0)),s('type.modLang.dec',sK33(X4,X3,X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK31,sK32,sK33])],[f309])).
fof(f309,plain,(
  ! [X0,X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X1),s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X0),s('type.ast.dec',X4)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X19,X16,X18,X17,X22] : ? [X23,X24,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X23),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X24),s('type.modLang.dec',X12))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X16),s('type.option.option'('type.list.list'('type.string.char')),X17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s('type.ast.dec',X22)))),
  file('thm.source_to_modProof.source_to_modProof_|49|5|49|_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|37_prove_ltb')).
fof(f417,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.modLang.dec',X6))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',sK1),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.ast.dec',sK4)))) )),
  inference(cnf_transformation,[],[f362])).
fof(f362,plain,(
  ! [X4,X5,X6] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.modLang.dec',X6))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',sK1),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.ast.dec',sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f345])).
fof(f345,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.modLang.dec',X6))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3)))),
  inference(ennf_transformation,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.modLang.dec',X6))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ? [X10,X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X11),s('type.modLang.dec',X12))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X6),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s('type.ast.dec',X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ? [X10,X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X11),s('type.modLang.dec',X12))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X6),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8),s('type.ast.dec',X9)))),
  file('thm.source_to_modProof.source_to_modProof_|49|5|49|_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|5|49|_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 275
% Passive clauses: 2301
% Generated clauses: 167209
% Final active clauses: 257
% Final passive clauses: 692
% Input formulas: 132
% Initial clauses: 191
% Discarded non-redundant clauses: 113886
% 
% Duplicate literals: 160
% Trivial inequalities: 128
% Fw subsumption resolutions: 201
% Fw demodulations: 37325
% Bw demodulations: 145
% Condensations: 347
% Global subsumptions: 25
% 
% Simple tautologies: 163
% Equational tautologies: 256
% Forward subsumptions: 21414
% Fw demodulations to eq. taut.: 24775
% Bw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 112318
% Forward superposition: 9500
% Backward superposition: 7786
% Self superposition: 147
% Equality factoring: 48
% Equality resolution: 45
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 2361
% SAT solver unit clauses: 475
% SAT solver binary clauses: 1557
% 
% Sat splits: 4
% Sat splitting refutations: 25
% 
% Memory used [KB]: 117311
% Time elapsed: 10.405 s
% ------------------------------
% ------------------------------
% Success in time 11.78 s
