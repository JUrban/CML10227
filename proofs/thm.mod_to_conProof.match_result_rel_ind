Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (90015)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 168
% Passive clauses: 1710
% Generated clauses: 19466
% Final active clauses: 160
% Final passive clauses: 1368
% Input formulas: 18
% Initial clauses: 41
% 
% Duplicate literals: 1359
% Trivial inequalities: 105
% Fw subsumption resolutions: 2677
% Fw demodulations: 2872
% Bw demodulations: 7
% 
% Simple tautologies: 339
% Equational tautologies: 23
% Forward subsumptions: 9165
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 328
% Forward superposition: 7330
% Backward superposition: 5108
% Self superposition: 118
% Equality factoring: 40
% Equality resolution: 23
% 
% Split clauses: 731
% Split components: 1467
% SAT solver clauses: 1383
% SAT solver unit clauses: 10
% SAT solver binary clauses: 131
% 
% Sat splits: 731
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1383
% TWLsolver calls for satisfiability: 201
% 
% Memory used [KB]: 11769
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (90036)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 141
% Passive clauses: 1074
% Generated clauses: 10824
% Final active clauses: 123
% Final passive clauses: 871
% Input formulas: 18
% Initial clauses: 41
% 
% Duplicate literals: 602
% Trivial inequalities: 76
% Fw subsumption resolutions: 582
% Fw demodulations: 1192
% Bw demodulations: 58
% Condensations: 701
% 
% Simple tautologies: 166
% Equational tautologies: 21
% Forward subsumptions: 4835
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 20
% 
% Binary resolution: 168
% Factoring: 1
% Forward superposition: 3767
% Backward superposition: 2498
% Self superposition: 73
% Equality factoring: 38
% Equality resolution: 18
% 
% Split clauses: 98
% Split components: 201
% SAT solver clauses: 1618
% SAT solver unit clauses: 59
% SAT solver binary clauses: 32
% 
% Sat splits: 98
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 1618
% TWLsolver calls for satisfiability: 438
% 
% Memory used [KB]: 18293
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (90067)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 464
% Passive clauses: 7751
% Generated clauses: 112282
% Final active clauses: 84
% Final passive clauses: 213
% Input formulas: 18
% Initial clauses: 41
% 
% Duplicate literals: 5001
% Trivial inequalities: 757
% Fw subsumption resolutions: 8009
% Fw demodulations: 19621
% Bw demodulations: 5677
% Condensations: 7657
% Global subsumptions: 1344
% 
% Simple tautologies: 1463
% Equational tautologies: 1683
% Forward subsumptions: 56644
% Fw demodulations to eq. taut.: 69
% Bw demodulations to eq. taut.: 273
% 
% Unit resulting resolution: 7193
% Forward superposition: 25663
% Backward superposition: 17994
% Self superposition: 438
% Equality factoring: 209
% Equality resolution: 67
% 
% Split clauses: 267
% Split components: 540
% SAT solver clauses: 11019
% SAT solver unit clauses: 105
% SAT solver binary clauses: 830
% 
% Sat splits: 267
% Sat splitting refutations: 1387
% 
% Memory used [KB]: 82002
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 28 next slice time: 28
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f3053,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f176,f183,f184,f185,f186,f217,f239,f294,f314,f315,f258,f259,f320,f319,f338,f343,f346,f349,f353,f345,f355,f337,f196,f383,f387,f389,f391,f428,f432,f434,f436,f470,f473,f474,f493,f496,f499,f502,f385,f523,f526,f529,f532,f553,f558,f561,f564,f585,f590,f593,f596,f599,f313,f312,f636,f641,f644,f647,f650,f257,f256,f669,f672,f703,f731,f750,f770,f512,f505,f418,f411,f774,f778,f777,f779,f796,f200,f787,f204,f788,f210,f797,f833,f836,f839,f842,f340,f846,f864,f869,f871,f772,f909,f914,f917,f920,f911,f1003,f1008,f1011,f1014,f1005,f1054,f1059,f1062,f1065,f1056,f1105,f1110,f1113,f1116,f1107,f1149,f1220,f1240,f1245,f1247,f898,f892,f1251,f1249,f1253,f506,f525,f513,f1259,f1257,f531,f430,f536,f557,f543,f1263,f1261,f563,f555,f568,f589,f575,f1267,f1265,f595,f587,f619,f640,f626,f1271,f1269,f646,f638,f889,f888,f206,f1306,f1314,f1321,f1320,f202,f1326,f322,f198,f1333,f1334,f1351,f1410,f1412,f1414,f1517,f789,f214,f1521,f1520,f212,f1526,f476,f208,f1564,f1660,f1909,f2051,f2468,f194,f193,f3051])).
fof(f3051,plain,(
  $false | ($spl6 | $spl16)),
  inference(subsumption_resolution,[],[f3044,f92])).
fof(f92,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.match_result_rel_ind',aHL_FALSITY)).
fof(f3044,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl16)),
  inference(superposition,[],[f3016,f181])).
fof(f181,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))),
  inference(resolution,[],[f70,f87])).
fof(f87,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.mod_to_conProof.match_result_rel_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f70,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X17))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X18)))))) & ! [X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X14] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X11,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))))) & ! [X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X6,X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X4,X5] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f48])).
fof(f48,plain,(
  ? [X0] : (! [X16,X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X17))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X18)))))) & ! [X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X14] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X13] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X11,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))))) & ! [X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X6,X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X4,X5] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ? [X1,X2,X3] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X3)))))),
  inference(rectify,[],[f42])).
fof(f42,plain,(
  ? [X0] : (! [X13,X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X14))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))))) & ! [X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))))) & ! [X3,X4] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X1,X2] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ? [X16,X17,X18] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X17))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X18)))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ? [X0] : ((! [X13,X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X14))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))))) & ! [X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))))) & ! [X3,X4] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X1,X2] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) & ? [X16,X17,X18] : ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X17))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X18)))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0] : ((! [X13,X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X14))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))))) & ! [X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))))) & ! [X3,X4] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X1,X2] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) => ! [X16,X17,X18] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X17))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X18)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7,X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X11)))))) & ! [X7,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) => ! [X13,X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X14))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X15)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) & ! [X7,X10] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))))) & ! [X7] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X11)))))) & ! [X7,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) & ! [X7,X12] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) => ! [X13,X14,X15] : p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X14))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X15)))))),
  file('thm.mod_to_conProof.match_result_rel_ind','thm.mod_to_conProof.match_result_rel_ind')).
fof(f3016,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))))) ) | ($spl6 | $spl16)),
  inference(superposition,[],[f1359,f208])).
fof(f1359,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))))))) ) | $spl6),
  inference(superposition,[],[f61,f198])).
fof(f61,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X17))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X18))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f193,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl0),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f194,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0))))) ) | $spl2),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f2468,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) )),
  inference(subsumption_resolution,[],[f2438,f92])).
fof(f2438,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) )),
  inference(superposition,[],[f82,f181])).
fof(f82,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK21(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK21(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK21])],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X18] : ! [X26] : (p(s(bool,'const.relation.WF_1'(s(fun(X18,fun(X18,bool)),X26)))) => ! [X6] : (! [X20] : (! [X25] : (p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X18,fun(X18,bool)),X26),s(X18,X25))),s(X18,X20)))) => p(s(bool,happ(s(fun(X18,bool),X6),s(X18,X25))))) => p(s(bool,happ(s(fun(X18,bool),X6),s(X18,X20))))) => ! [X20] : p(s(bool,happ(s(fun(X18,bool),X6),s(X18,X20))))))),
  file('thm.mod_to_conProof.match_result_rel_ind','thm.relation.WF_INDUCTION_THM')).
fof(f2051,plain,(
  $false | ($spl15 | $spl42 | $spl76)),
  inference(subsumption_resolution,[],[f2032,f205])).
fof(f205,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl15),
  inference(cnf_transformation,[],[f205_D])).
fof(f205_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f2032,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl42 | $spl76)),
  inference(backward_demodulation,[],[f1265,f555])).
fof(f1909,plain,(
  $false | ($spl15 | $spl38 | $spl72)),
  inference(subsumption_resolution,[],[f1890,f205])).
fof(f1890,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl38 | $spl72)),
  inference(backward_demodulation,[],[f1261,f430])).
fof(f1660,plain,(
  $false | ($spl15 | $spl36 | $spl68)),
  inference(subsumption_resolution,[],[f1641,f205])).
fof(f1641,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl36 | $spl68)),
  inference(backward_demodulation,[],[f1257,f385])).
fof(f1564,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) )),
  inference(resolution,[],[f70,f82])).
fof(f208,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(cnf_transformation,[],[f208_D])).
fof(f208_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f476,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | $spl41),
  inference(cnf_transformation,[],[f476_D])).
fof(f476_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f1526,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl21),
  inference(subsumption_resolution,[],[f1523,f211])).
fof(f211,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl21),
  inference(cnf_transformation,[],[f211_D])).
fof(f211_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f1523,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl21),
  inference(superposition,[],[f211,f71])).
fof(f71,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK5(X1,X0)))) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1)) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK5(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f22])).
fof(f22,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X18] : ! [X27] : (s('type.semanticPrimitives.match_result'(X18),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X18),X27) | s('type.semanticPrimitives.match_result'(X18),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X18),X27) | ? [X17] : s('type.semanticPrimitives.match_result'(X18),X27) = s('type.semanticPrimitives.match_result'(X18),'const.semanticPrimitives.Match_1'(s(X18,X17))))),
  file('thm.mod_to_conProof.match_result_rel_ind','thm.semanticPrimitives.match_result_nchotomy')).
fof(f212,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl20),
  inference(cnf_transformation,[],[f212_D])).
fof(f212_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f1520,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl15),
  inference(trivial_inequality_removal,[],[f1519])).
fof(f1519,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl15),
  inference(superposition,[],[f205,f71])).
fof(f1521,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl15),
  inference(subsumption_resolution,[],[f1518,f205])).
fof(f1518,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl15),
  inference(superposition,[],[f205,f71])).
fof(f214,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | $spl23),
  inference(cnf_transformation,[],[f214_D])).
fof(f214_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f789,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)),
  inference(superposition,[],[f70,f71])).
fof(f1517,plain,(
  $false | ($spl18 | $spl20)),
  inference(subsumption_resolution,[],[f209,f1312])).
fof(f1312,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | $spl20),
  inference(forward_demodulation,[],[f70,f212])).
fof(f209,plain,(
  p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | $spl18),
  inference(cnf_transformation,[],[f209_D])).
fof(f209_D,plain,(
  p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1414,plain,(
  $false | ($spl5 | $spl11 | $spl64)),
  inference(subsumption_resolution,[],[f1413,f195])).
fof(f195,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f1413,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl11 | $spl64)),
  inference(subsumption_resolution,[],[f1408,f201])).
fof(f201,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl11),
  inference(cnf_transformation,[],[f201_D])).
fof(f201_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f1408,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl64),
  inference(duplicate_literal_removal,[],[f1400])).
fof(f1400,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl64),
  inference(superposition,[],[f71,f1249])).
fof(f1412,plain,(
  $false | ($spl5 | $spl11 | $spl64)),
  inference(subsumption_resolution,[],[f1411,f195])).
fof(f1411,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl11 | $spl64)),
  inference(subsumption_resolution,[],[f1409,f201])).
fof(f1409,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl64),
  inference(duplicate_literal_removal,[],[f1392])).
fof(f1392,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl64),
  inference(superposition,[],[f1249,f71])).
fof(f1410,plain,(
  $false | ($spl6 | $spl11 | $spl64)),
  inference(subsumption_resolution,[],[f1391,f201])).
fof(f1391,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl6 | $spl64)),
  inference(backward_demodulation,[],[f1249,f198])).
fof(f1351,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl84),
  inference(cnf_transformation,[],[f1351_D])).
fof(f1351_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f1334,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl20),
  inference(resolution,[],[f1312,f82])).
fof(f1333,plain,(
  $false | ($spl15 | $spl20 | $spl40)),
  inference(subsumption_resolution,[],[f475,f1316])).
fof(f1316,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl15 | $spl20)),
  inference(forward_demodulation,[],[f205,f212])).
fof(f475,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | $spl40),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f198,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f322,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | $spl33),
  inference(cnf_transformation,[],[f322_D])).
fof(f322_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f1326,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl11),
  inference(subsumption_resolution,[],[f1323,f201])).
fof(f1323,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl11),
  inference(superposition,[],[f201,f71])).
fof(f202,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl10),
  inference(cnf_transformation,[],[f202_D])).
fof(f202_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1320,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(trivial_inequality_removal,[],[f1319])).
fof(f1319,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(superposition,[],[f195,f71])).
fof(f1321,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f1318,f195])).
fof(f1318,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(superposition,[],[f195,f71])).
fof(f1314,plain,(
  $false | ($spl10 | $spl20)),
  inference(subsumption_resolution,[],[f1313,f62])).
fof(f62,plain,(
  ( ! [X15] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1313,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl10 | $spl20)),
  inference(forward_demodulation,[],[f1312,f202])).
fof(f1306,plain,(
  $false | ($spl14 | $spl20 | $spl41)),
  inference(subsumption_resolution,[],[f1297,f476])).
fof(f1297,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | ($spl14 | $spl20)),
  inference(backward_demodulation,[],[f212,f206])).
fof(f206,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl14),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f888,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl48),
  inference(duplicate_literal_removal,[],[f880])).
fof(f880,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl48),
  inference(superposition,[],[f71,f772])).
fof(f889,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl48),
  inference(duplicate_literal_removal,[],[f873])).
fof(f873,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl48),
  inference(superposition,[],[f772,f71])).
fof(f638,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl46),
  inference(cnf_transformation,[],[f638_D])).
fof(f638_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f646,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl44),
  inference(forward_demodulation,[],[f645,f587])).
fof(f645,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(forward_demodulation,[],[f627,f587])).
fof(f627,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(superposition,[],[f71,f587])).
fof(f1269,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl80),
  inference(cnf_transformation,[],[f1269_D])).
fof(f1269_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f1271,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl82),
  inference(cnf_transformation,[],[f1271_D])).
fof(f1271_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f626,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(superposition,[],[f71,f587])).
fof(f640,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl44),
  inference(forward_demodulation,[],[f639,f587])).
fof(f639,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(forward_demodulation,[],[f620,f587])).
fof(f620,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(superposition,[],[f587,f71])).
fof(f619,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(superposition,[],[f587,f71])).
fof(f587,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl44),
  inference(cnf_transformation,[],[f587_D])).
fof(f587_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f595,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl42),
  inference(forward_demodulation,[],[f594,f555])).
fof(f594,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(forward_demodulation,[],[f576,f555])).
fof(f576,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(superposition,[],[f71,f555])).
fof(f1265,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl76),
  inference(cnf_transformation,[],[f1265_D])).
fof(f1265_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f1267,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl78),
  inference(cnf_transformation,[],[f1267_D])).
fof(f1267_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f575,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(superposition,[],[f71,f555])).
fof(f589,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl42),
  inference(forward_demodulation,[],[f588,f555])).
fof(f588,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(forward_demodulation,[],[f569,f555])).
fof(f569,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(superposition,[],[f555,f71])).
fof(f568,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(superposition,[],[f555,f71])).
fof(f555,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl42),
  inference(cnf_transformation,[],[f555_D])).
fof(f555_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f563,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl38),
  inference(forward_demodulation,[],[f562,f430])).
fof(f562,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(forward_demodulation,[],[f544,f430])).
fof(f544,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(superposition,[],[f71,f430])).
fof(f1261,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl72),
  inference(cnf_transformation,[],[f1261_D])).
fof(f1261_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f1263,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl74),
  inference(cnf_transformation,[],[f1263_D])).
fof(f1263_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f543,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(superposition,[],[f71,f430])).
fof(f557,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl38),
  inference(forward_demodulation,[],[f556,f430])).
fof(f556,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(forward_demodulation,[],[f537,f430])).
fof(f537,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(superposition,[],[f430,f71])).
fof(f536,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(superposition,[],[f430,f71])).
fof(f430,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl38),
  inference(cnf_transformation,[],[f430_D])).
fof(f430_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f531,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl36),
  inference(forward_demodulation,[],[f530,f385])).
fof(f530,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f514,f385])).
fof(f514,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f385])).
fof(f1257,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl68),
  inference(cnf_transformation,[],[f1257_D])).
fof(f1257_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f1259,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl70),
  inference(cnf_transformation,[],[f1259_D])).
fof(f1259_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f513,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f385])).
fof(f525,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl36),
  inference(forward_demodulation,[],[f524,f385])).
fof(f524,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f507,f385])).
fof(f507,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f385,f71])).
fof(f506,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f385,f71])).
fof(f1253,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl9 | $spl48)),
  inference(forward_demodulation,[],[f258,f772])).
fof(f1249,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl64),
  inference(cnf_transformation,[],[f1249_D])).
fof(f1249_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f1251,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl66),
  inference(cnf_transformation,[],[f1251_D])).
fof(f1251_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f892,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(superposition,[],[f340,f71])).
fof(f898,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(superposition,[],[f71,f340])).
fof(f1247,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | $spl48),
  inference(duplicate_literal_removal,[],[f1246])).
fof(f1246,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl48),
  inference(forward_demodulation,[],[f789,f772])).
fof(f1245,plain,(
  $false | ($spl6 | $spl19)),
  inference(subsumption_resolution,[],[f210,f971])).
fof(f971,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))))) ) | $spl6),
  inference(superposition,[],[f68,f198])).
fof(f68,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1240,plain,(
  $false | ($spl6 | $spl23)),
  inference(subsumption_resolution,[],[f214,f1129])).
fof(f1129,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) ) | $spl6),
  inference(superposition,[],[f69,f198])).
fof(f69,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1220,plain,(
  $false | ($spl6 | $spl14)),
  inference(resolution,[],[f1129,f799])).
fof(f799,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | $spl14),
  inference(backward_demodulation,[],[f206,f70])).
fof(f1149,plain,(
  $false | ($spl13 | $spl14)),
  inference(subsumption_resolution,[],[f1148,f63])).
fof(f63,plain,(
  ( ! [X14] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f1148,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | ($spl13 | $spl14)),
  inference(forward_demodulation,[],[f204,f206])).
fof(f1107,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl62),
  inference(cnf_transformation,[],[f1107_D])).
fof(f1107_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f1116,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1115,f1056])).
fof(f1115,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1114,f1056])).
fof(f1114,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1096,f195])).
fof(f1096,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(superposition,[],[f71,f1056])).
fof(f1113,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1112,f195])).
fof(f1112,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl60),
  inference(forward_demodulation,[],[f1111,f1056])).
fof(f1111,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(forward_demodulation,[],[f1095,f1056])).
fof(f1095,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(superposition,[],[f71,f1056])).
fof(f1110,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1109,f1056])).
fof(f1109,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl60)),
  inference(forward_demodulation,[],[f1108,f1056])).
fof(f1108,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1089,f195])).
fof(f1089,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(superposition,[],[f1056,f71])).
fof(f1105,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl60)),
  inference(subsumption_resolution,[],[f1104,f195])).
fof(f1104,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl60),
  inference(forward_demodulation,[],[f1103,f1056])).
fof(f1103,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(forward_demodulation,[],[f1088,f1056])).
fof(f1088,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(superposition,[],[f1056,f71])).
fof(f1056,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl60),
  inference(cnf_transformation,[],[f1056_D])).
fof(f1056_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f1065,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl58)),
  inference(forward_demodulation,[],[f1064,f1005])).
fof(f1064,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl58)),
  inference(forward_demodulation,[],[f1063,f1005])).
fof(f1063,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl58)),
  inference(subsumption_resolution,[],[f1045,f195])).
fof(f1045,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(superposition,[],[f71,f1005])).
fof(f1062,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl58)),
  inference(subsumption_resolution,[],[f1061,f195])).
fof(f1061,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl58),
  inference(forward_demodulation,[],[f1060,f1005])).
fof(f1060,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(forward_demodulation,[],[f1044,f1005])).
fof(f1044,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(superposition,[],[f71,f1005])).
fof(f1059,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl58)),
  inference(forward_demodulation,[],[f1058,f1005])).
fof(f1058,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl58)),
  inference(forward_demodulation,[],[f1057,f1005])).
fof(f1057,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl58)),
  inference(subsumption_resolution,[],[f1038,f195])).
fof(f1038,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(superposition,[],[f1005,f71])).
fof(f1054,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl58)),
  inference(subsumption_resolution,[],[f1053,f195])).
fof(f1053,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl58),
  inference(forward_demodulation,[],[f1052,f1005])).
fof(f1052,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(forward_demodulation,[],[f1037,f1005])).
fof(f1037,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(superposition,[],[f1005,f71])).
fof(f1005,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl58),
  inference(cnf_transformation,[],[f1005_D])).
fof(f1005_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f1014,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl56)),
  inference(forward_demodulation,[],[f1013,f911])).
fof(f1013,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl56)),
  inference(forward_demodulation,[],[f1012,f911])).
fof(f1012,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl56)),
  inference(subsumption_resolution,[],[f994,f195])).
fof(f994,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f71,f911])).
fof(f1011,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl56)),
  inference(subsumption_resolution,[],[f1010,f195])).
fof(f1010,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl56),
  inference(forward_demodulation,[],[f1009,f911])).
fof(f1009,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(forward_demodulation,[],[f993,f911])).
fof(f993,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f71,f911])).
fof(f1008,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl56)),
  inference(forward_demodulation,[],[f1007,f911])).
fof(f1007,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl56)),
  inference(forward_demodulation,[],[f1006,f911])).
fof(f1006,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl56)),
  inference(subsumption_resolution,[],[f987,f195])).
fof(f987,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f911,f71])).
fof(f1003,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl56)),
  inference(subsumption_resolution,[],[f1002,f195])).
fof(f1002,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl56),
  inference(forward_demodulation,[],[f1001,f911])).
fof(f1001,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(forward_demodulation,[],[f986,f911])).
fof(f986,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(superposition,[],[f911,f71])).
fof(f911,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl56),
  inference(cnf_transformation,[],[f911_D])).
fof(f911_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f920,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f919,f340])).
fof(f919,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f918,f340])).
fof(f918,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f900,f195])).
fof(f900,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(superposition,[],[f71,f340])).
fof(f917,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f916,f195])).
fof(f916,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl34),
  inference(forward_demodulation,[],[f915,f340])).
fof(f915,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(forward_demodulation,[],[f899,f340])).
fof(f899,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(superposition,[],[f71,f340])).
fof(f914,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f913,f340])).
fof(f913,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl34)),
  inference(forward_demodulation,[],[f912,f340])).
fof(f912,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f894,f195])).
fof(f894,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(superposition,[],[f340,f71])).
fof(f909,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl34)),
  inference(subsumption_resolution,[],[f908,f195])).
fof(f908,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl34),
  inference(forward_demodulation,[],[f907,f340])).
fof(f907,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(forward_demodulation,[],[f893,f340])).
fof(f893,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(superposition,[],[f340,f71])).
fof(f772,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl48),
  inference(cnf_transformation,[],[f772_D])).
fof(f772_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f871,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl54),
  inference(cnf_transformation,[],[f871_D])).
fof(f871_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f869,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl14 | $spl17)),
  inference(trivial_inequality_removal,[],[f868])).
fof(f868,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl14 | $spl17)),
  inference(superposition,[],[f845,f71])).
fof(f845,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl14 | $spl17)),
  inference(forward_demodulation,[],[f207,f206])).
fof(f207,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl17),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f864,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl52),
  inference(cnf_transformation,[],[f864_D])).
fof(f864_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f846,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl14),
  inference(resolution,[],[f799,f82])).
fof(f340,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl34),
  inference(cnf_transformation,[],[f340_D])).
fof(f340_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f842,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f841,f198])).
fof(f841,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f840,f198])).
fof(f840,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f824,f195])).
fof(f824,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f71,f198])).
fof(f839,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f838,f195])).
fof(f838,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl6),
  inference(forward_demodulation,[],[f837,f198])).
fof(f837,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(forward_demodulation,[],[f823,f198])).
fof(f823,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f71,f198])).
fof(f836,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f835,f198])).
fof(f835,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f834,f198])).
fof(f834,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f819,f195])).
fof(f819,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f198,f71])).
fof(f833,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f832,f195])).
fof(f832,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl6),
  inference(forward_demodulation,[],[f831,f198])).
fof(f831,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(forward_demodulation,[],[f818,f198])).
fof(f818,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f198,f71])).
fof(f797,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl21),
  inference(subsumption_resolution,[],[f789,f211])).
fof(f210,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | $spl19),
  inference(cnf_transformation,[],[f210_D])).
fof(f210_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f788,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)),
  inference(superposition,[],[f70,f71])).
fof(f204,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | $spl13),
  inference(cnf_transformation,[],[f204_D])).
fof(f204_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f787,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),
  inference(superposition,[],[f70,f71])).
fof(f200,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | $spl9),
  inference(cnf_transformation,[],[f200_D])).
fof(f200_D,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f796,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f786,f195])).
fof(f786,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),
  inference(superposition,[],[f70,f71])).
fof(f779,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) )),
  inference(resolution,[],[f70,f82])).
fof(f777,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(trivial_inequality_removal,[],[f776])).
fof(f776,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(superposition,[],[f195,f71])).
fof(f778,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f775,f195])).
fof(f775,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(superposition,[],[f195,f71])).
fof(f774,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl50),
  inference(cnf_transformation,[],[f774_D])).
fof(f774_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f411,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f385,f71])).
fof(f418,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f385])).
fof(f505,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f385,f71])).
fof(f512,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f385])).
fof(f770,plain,(
  $false | ($spl13 | $spl16)),
  inference(subsumption_resolution,[],[f204,f687])).
fof(f687,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))))) ) | $spl16),
  inference(superposition,[],[f67,f208])).
fof(f67,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f750,plain,(
  $false | ($spl4 | $spl16)),
  inference(resolution,[],[f687,f367])).
fof(f367,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | $spl4),
  inference(forward_demodulation,[],[f70,f196])).
fof(f731,plain,(
  $false | ($spl9 | $spl16)),
  inference(resolution,[],[f370,f200])).
fof(f370,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))))) ) | $spl16),
  inference(superposition,[],[f65,f208])).
fof(f65,plain,(
  ( ! [X12,X11] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f703,plain,(
  $false | ($spl4 | $spl30)),
  inference(resolution,[],[f313,f367])).
fof(f672,plain,(
  $false | ($spl4 | $spl23)),
  inference(subsumption_resolution,[],[f671,f63])).
fof(f671,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | ($spl4 | $spl23)),
  inference(forward_demodulation,[],[f214,f196])).
fof(f669,plain,(
  $false | ($spl4 | $spl19)),
  inference(subsumption_resolution,[],[f668,f66])).
fof(f66,plain,(
  ( ! [X10] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f668,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl4 | $spl19)),
  inference(forward_demodulation,[],[f210,f196])).
fof(f256,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl24),
  inference(cnf_transformation,[],[f256_D])).
fof(f256_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f257,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0))))) ) | $spl26),
  inference(cnf_transformation,[],[f257_D])).
fof(f257_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f650,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl9),
  inference(resolution,[],[f200,f82])).
fof(f647,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f646,f211])).
fof(f644,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f643,f587])).
fof(f643,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f642,f587])).
fof(f642,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f626,f211])).
fof(f641,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f640,f211])).
fof(f636,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f635,f587])).
fof(f635,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl44)),
  inference(forward_demodulation,[],[f634,f587])).
fof(f634,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl44)),
  inference(subsumption_resolution,[],[f619,f211])).
fof(f312,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl28),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f313,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0))))) ) | $spl30),
  inference(cnf_transformation,[],[f313_D])).
fof(f313_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f599,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl4),
  inference(resolution,[],[f367,f82])).
fof(f596,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f595,f211])).
fof(f593,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f592,f555])).
fof(f592,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f591,f555])).
fof(f591,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f575,f211])).
fof(f590,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f589,f211])).
fof(f585,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f584,f555])).
fof(f584,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl42)),
  inference(forward_demodulation,[],[f583,f555])).
fof(f583,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl42)),
  inference(subsumption_resolution,[],[f568,f211])).
fof(f564,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f563,f211])).
fof(f561,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f560,f430])).
fof(f560,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f559,f430])).
fof(f559,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f543,f211])).
fof(f558,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f557,f211])).
fof(f553,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f552,f430])).
fof(f552,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl38)),
  inference(forward_demodulation,[],[f551,f430])).
fof(f551,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl38)),
  inference(subsumption_resolution,[],[f536,f211])).
fof(f532,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f531,f211])).
fof(f529,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f528,f385])).
fof(f528,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f527,f385])).
fof(f527,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f513,f211])).
fof(f526,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f525,f211])).
fof(f523,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f522,f385])).
fof(f522,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl36)),
  inference(forward_demodulation,[],[f521,f385])).
fof(f521,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl21 | $spl36)),
  inference(subsumption_resolution,[],[f506,f211])).
fof(f385,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(cnf_transformation,[],[f385_D])).
fof(f385_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f502,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f501,f211])).
fof(f501,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl16),
  inference(forward_demodulation,[],[f500,f208])).
fof(f500,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f484,f208])).
fof(f484,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f208])).
fof(f499,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f498,f208])).
fof(f498,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f497,f208])).
fof(f497,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f483,f211])).
fof(f483,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f208])).
fof(f496,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f495,f211])).
fof(f495,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl16),
  inference(forward_demodulation,[],[f494,f208])).
fof(f494,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f478,f208])).
fof(f478,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f208,f71])).
fof(f493,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f492,f208])).
fof(f492,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl16 | $spl21)),
  inference(forward_demodulation,[],[f491,f208])).
fof(f491,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f477,f211])).
fof(f477,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f208,f71])).
fof(f474,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl21),
  inference(subsumption_resolution,[],[f472,f211])).
fof(f472,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl21),
  inference(superposition,[],[f211,f71])).
fof(f473,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl21),
  inference(trivial_inequality_removal,[],[f471])).
fof(f471,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl21),
  inference(superposition,[],[f211,f71])).
fof(f470,plain,(
  $false | ($spl4 | $spl20)),
  inference(subsumption_resolution,[],[f469,f66])).
fof(f469,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl4 | $spl20)),
  inference(forward_demodulation,[],[f367,f212])).
fof(f436,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl36),
  inference(forward_demodulation,[],[f435,f385])).
fof(f435,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f420,f385])).
fof(f420,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f385])).
fof(f434,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl36),
  inference(forward_demodulation,[],[f433,f385])).
fof(f433,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f419,f385])).
fof(f419,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f71,f385])).
fof(f432,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl36),
  inference(forward_demodulation,[],[f431,f385])).
fof(f431,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f413,f385])).
fof(f413,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f385,f71])).
fof(f428,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl36),
  inference(forward_demodulation,[],[f427,f385])).
fof(f427,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(forward_demodulation,[],[f412,f385])).
fof(f412,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl36),
  inference(superposition,[],[f385,f71])).
fof(f391,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl16),
  inference(forward_demodulation,[],[f390,f208])).
fof(f390,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f375,f208])).
fof(f375,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f208])).
fof(f389,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl16),
  inference(forward_demodulation,[],[f388,f208])).
fof(f388,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f374,f208])).
fof(f374,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f71,f208])).
fof(f387,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl16),
  inference(forward_demodulation,[],[f386,f208])).
fof(f386,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f369,f208])).
fof(f369,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f208,f71])).
fof(f383,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl16),
  inference(forward_demodulation,[],[f382,f208])).
fof(f382,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(forward_demodulation,[],[f368,f208])).
fof(f368,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | $spl16),
  inference(superposition,[],[f208,f71])).
fof(f196,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl4),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f337,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl6),
  inference(forward_demodulation,[],[f336,f198])).
fof(f336,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(forward_demodulation,[],[f323,f198])).
fof(f323,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f198,f71])).
fof(f355,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl6),
  inference(forward_demodulation,[],[f354,f198])).
fof(f354,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(forward_demodulation,[],[f324,f198])).
fof(f324,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f198,f71])).
fof(f345,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl6),
  inference(forward_demodulation,[],[f344,f198])).
fof(f344,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(forward_demodulation,[],[f328,f198])).
fof(f328,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f71,f198])).
fof(f353,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl6),
  inference(forward_demodulation,[],[f352,f198])).
fof(f352,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(forward_demodulation,[],[f329,f198])).
fof(f329,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl6),
  inference(superposition,[],[f71,f198])).
fof(f349,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f348,f198])).
fof(f348,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f347,f198])).
fof(f347,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f329,f195])).
fof(f346,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f345,f195])).
fof(f343,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f342,f198])).
fof(f342,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(forward_demodulation,[],[f341,f198])).
fof(f341,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f324,f195])).
fof(f338,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | ($spl5 | $spl6)),
  inference(subsumption_resolution,[],[f337,f195])).
fof(f319,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(trivial_inequality_removal,[],[f318])).
fof(f318,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(superposition,[],[f195,f71])).
fof(f320,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | $spl5),
  inference(subsumption_resolution,[],[f317,f195])).
fof(f317,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) | $spl5),
  inference(superposition,[],[f195,f71])).
fof(f259,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl9),
  inference(subsumption_resolution,[],[f249,f64])).
fof(f64,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0'))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f249,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl9),
  inference(superposition,[],[f200,f71])).
fof(f258,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl9),
  inference(subsumption_resolution,[],[f248,f62])).
fof(f248,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl9),
  inference(superposition,[],[f200,f71])).
fof(f315,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl4),
  inference(subsumption_resolution,[],[f305,f63])).
fof(f305,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl4),
  inference(superposition,[],[f283,f71])).
fof(f283,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | $spl4),
  inference(backward_demodulation,[],[f196,f70])).
fof(f314,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl4),
  inference(subsumption_resolution,[],[f304,f66])).
fof(f304,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) | $spl4),
  inference(superposition,[],[f283,f71])).
fof(f294,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl4),
  inference(resolution,[],[f283,f82])).
fof(f239,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0')),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) ) | $spl9),
  inference(resolution,[],[f200,f82])).
fof(f217,plain,(
  $false | $spl2),
  inference(resolution,[],[f194,f70])).
fof(f186,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)),
  inference(superposition,[],[f70,f71])).
fof(f185,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0')))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK5(sK4,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)),
  inference(superposition,[],[f70,f71])).
fof(f184,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),
  inference(superposition,[],[f70,f71])).
fof(f183,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.No_match_0'))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK5(sK3,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),
  inference(superposition,[],[f70,f71])).
fof(f176,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),X0)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool),happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK4))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),sK21(happ(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool))),sK1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3)),X1,'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')))))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),fun('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),bool)),X1))))) )),
  inference(resolution,[],[f70,f82])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 145
% Passive clauses: 598
% Generated clauses: 3063
% Final active clauses: 72
% Final passive clauses: 187
% Input formulas: 18
% Initial clauses: 39
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Duplicate literals: 27
% Trivial inequalities: 48
% Fw subsumption resolutions: 313
% Fw demodulations: 502
% Bw demodulations: 35
% 
% Simple tautologies: 18
% Forward subsumptions: 1523
% 
% Binary resolution: 174
% Forward superposition: 803
% Backward superposition: 942
% 
% Split clauses: 120
% Split components: 281
% SAT solver clauses: 144
% SAT solver unit clauses: 1
% SAT solver binary clauses: 18
% 
% Sat splits: 120
% Sat splitting refutations: 23
% 
% Memory used [KB]: 3326
% Time elapsed: 0.221 s
% ------------------------------
% ------------------------------
% Success in time 12.34 s
