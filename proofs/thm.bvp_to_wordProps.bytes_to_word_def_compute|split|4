Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (47936)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1139
% Passive clauses: 7890
% Generated clauses: 40808
% Final active clauses: 1042
% Final passive clauses: 6384
% Input formulas: 517
% Initial clauses: 827
% 
% Duplicate literals: 166
% Trivial inequalities: 118
% Fw subsumption resolutions: 1901
% Fw demodulations: 3357
% Bw demodulations: 96
% 
% Simple tautologies: 277
% Equational tautologies: 27
% Forward subsumptions: 26732
% 
% Binary resolution: 7458
% Factoring: 514
% Forward superposition: 12216
% Backward superposition: 13980
% Self superposition: 76
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 273
% Split components: 548
% SAT solver clauses: 454
% SAT solver unit clauses: 21
% SAT solver binary clauses: 109
% 
% Sat splits: 273
% 
% TWLsolver clauses: 454
% TWLsolver calls for satisfiability: 347
% 
% Memory used [KB]: 24306
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% (47957)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 671
% Passive clauses: 3048
% Generated clauses: 31397
% Final active clauses: 609
% Final passive clauses: 2103
% Input formulas: 517
% Initial clauses: 827
% 
% Duplicate literals: 114
% Trivial inequalities: 44
% Fw subsumption resolutions: 817
% Fw demodulations: 2478
% Bw demodulations: 332
% Condensations: 128
% Global subsumptions: 37
% 
% Simple tautologies: 253
% Equational tautologies: 13
% Forward subsumptions: 20692
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 2673
% Factoring: 316
% Forward superposition: 11947
% Backward superposition: 8433
% Self superposition: 103
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 4550
% SAT solver unit clauses: 1238
% SAT solver binary clauses: 188
% SAT solver learnt clauses: 74
% SAT solver learnt literals: 14
% 
% Sat splits: 5
% 
% TWLsolver clauses: 4402
% TWLsolver calls for satisfiability: 4237
% 
% Memory used [KB]: 28656
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvp_to_wordProps
% (47984)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1466
% Passive clauses: 13812
% Generated clauses: 194306
% Final active clauses: 1362
% Final passive clauses: 5601
% Input formulas: 517
% Initial clauses: 827
% Discarded non-redundant clauses: 25067
% 
% Duplicate literals: 9
% Trivial inequalities: 115
% Fw subsumption resolutions: 2590
% Fw demodulations: 32006
% Bw demodulations: 648
% Condensations: 44
% Global subsumptions: 5
% 
% Simple tautologies: 147
% Equational tautologies: 47
% Forward subsumptions: 126935
% Fw demodulations to eq. taut.: 1649
% Bw demodulations to eq. taut.: 20
% 
% Unit resulting resolution: 50126
% Factoring: 2
% Forward superposition: 53071
% Backward superposition: 54348
% Self superposition: 301
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 13
% Split components: 26
% SAT solver clauses: 15843
% SAT solver unit clauses: 6279
% SAT solver binary clauses: 7594
% 
% Sat splits: 13
% Sat splitting refutations: 1998
% 
% Memory used [KB]: 281829
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f60986,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f60985])).
fof(f60985,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16)))),
  inference(forward_demodulation,[],[f60984,f957])).
fof(f957,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f612])).
fof(f612,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f166])).
fof(f166,axiom,(
  ! [X40] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X40))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X40)))))),
  file('thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4','thm.numeral.numeral_suc|split|1')).
fof(f60984,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK14))))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16)))),
  inference(forward_demodulation,[],[f60937,f973])).
fof(f973,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f631])).
fof(f631,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X40] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X40))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))))),
  file('thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4','thm.numeral.numeral_distrib|split|14')).
fof(f60937,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK14))))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16)))),
  inference(superposition,[],[f60107,f26880])).
fof(f26880,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) = s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))) )),
  inference(backward_demodulation,[],[f939,f884])).
fof(f884,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) = s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))) )),
  inference(cnf_transformation,[],[f541])).
fof(f541,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) = s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))),
  inference(flattening,[],[f540])).
fof(f540,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) = s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : s('type.fcp.cart'(bool,X6),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.fcp.cart'(bool,X6),X12),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))),s('type.fcp.cart'(bool,X6),X7),s(bool,X10))) = s('type.fcp.cart'(bool,X6),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X6),X12),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11),s('type.fcp.cart'(bool,X6),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X12),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9),s('type.fcp.cart'(bool,X6),X7),s(bool,X10))),s(bool,X10)))),
  file('thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4','thm.bvp_to_wordProps.bytes_to_word_def|split|2')).
fof(f939,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f42])).
fof(f42,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4','thm.numeral.numeral_distrib|split|13')).
fof(f60107,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,sK12),'const.words.n2w_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))),s(bool,sK16)))),
  inference(forward_demodulation,[],[f1110,f26887])).
fof(f26887,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'('type.one.one'),'const.bool.the_value_0')))),
  inference(backward_demodulation,[],[f939,f938])).
fof(f938,plain,(
  s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'('type.one.one'),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f382])).
fof(f382,axiom,(
  s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'('type.one.one'),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4','thm.fcp.index_one')).
fof(f1110,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,sK12),'const.words.n2w_1'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'('type.one.one'),'const.bool.the_value_0'))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))),s(bool,sK16)))),
  inference(forward_demodulation,[],[f827,f938])).
fof(f827,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,sK12),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))),s(bool,sK16)))),
  inference(cnf_transformation,[],[f722])).
fof(f722,plain,(
  s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),sK18),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15))),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))) != s('type.fcp.cart'(bool,sK12),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK17),s('type.fcp.cart'(bool,sK12),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK14))))),s('type.fcp.cart'(bool,sK12),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK12),sK18),s('type.fcp.cart'(bool,sK12),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK15),s('type.fcp.cart'(bool,sK12),sK13),s(bool,sK16))),s(bool,sK16)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f674])).
fof(f674,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) != s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))),
  inference(ennf_transformation,[],[f520])).
fof(f520,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) = s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))),
  inference(flattening,[],[f519])).
fof(f519,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.fcp.cart'(bool,X0),X6),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3))),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))) = s('type.fcp.cart'(bool,X0),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X5),s('type.fcp.cart'(bool,X0),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X6),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X3),s('type.fcp.cart'(bool,X0),X1),s(bool,X4))),s(bool,X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : s('type.fcp.cart'(bool,X6),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))),s('type.fcp.cart'(bool,X6),X12),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))),s('type.fcp.cart'(bool,X6),X7),s(bool,X10))) = s('type.fcp.cart'(bool,X6),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X6),X12),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11),s('type.fcp.cart'(bool,X6),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X12),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9),s('type.fcp.cart'(bool,X6),X7),s(bool,X10))),s(bool,X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : s('type.fcp.cart'(bool,X6),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))),s('type.fcp.cart'(bool,X6),X12),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.CONS_2'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))),s('type.fcp.cart'(bool,X6),X7),s(bool,X10))) = s('type.fcp.cart'(bool,X6),'const.wordSem.set_byte_4'(s('type.fcp.cart'(bool,X6),X12),s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11),s('type.fcp.cart'(bool,X6),'const.bvp_to_wordProps.bytes_to_word_5'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X12),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9),s('type.fcp.cart'(bool,X6),X7),s(bool,X10))),s(bool,X10)))),
  file('thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4','thm.bvp_to_wordProps.bytes_to_word_def_compute|split|4')).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1097
% Passive clauses: 19084
% Generated clauses: 61955
% Final active clauses: 550
% Final passive clauses: 10964
% Input formulas: 517
% Initial clauses: 276
% 
% Selected by SInE selection: 111
% SInE iterations: 1
% 
% Duplicate literals: 804
% Trivial inequalities: 124
% Fw subsumption resolutions: 3907
% Fw demodulations: 6330
% Bw demodulations: 121
% 
% Simple tautologies: 1017
% Equational tautologies: 5
% Forward subsumptions: 27238
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 18512
% Factoring: 154
% Forward superposition: 16398
% Backward superposition: 11828
% Self superposition: 90
% Equality resolution: 37
% 
% Split clauses: 2547
% Split components: 5327
% SAT solver clauses: 2718
% SAT solver unit clauses: 16
% SAT solver binary clauses: 701
% 
% Sat splits: 2547
% Sat splitting refutations: 158
% 
% Memory used [KB]: 37995
% Time elapsed: 1.518 s
% ------------------------------
% ------------------------------
% Success in time 13.31 s
