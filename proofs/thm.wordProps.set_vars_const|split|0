Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% (134059)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 162
% Passive clauses: 2832
% Generated clauses: 25448
% Final active clauses: 150
% Final passive clauses: 2477
% Input formulas: 260
% Initial clauses: 318
% 
% Duplicate literals: 755
% Trivial inequalities: 595
% Fw subsumption resolutions: 2935
% Fw demodulations: 5458
% Bw demodulations: 5
% 
% Simple tautologies: 557
% Equational tautologies: 46
% Forward subsumptions: 10908
% 
% Binary resolution: 122
% Factoring: 1
% Forward superposition: 6937
% Backward superposition: 7964
% Self superposition: 169
% Equality factoring: 86
% Equality resolution: 49
% 
% Split clauses: 157
% Split components: 317
% SAT solver clauses: 336
% SAT solver unit clauses: 32
% SAT solver binary clauses: 97
% 
% Sat splits: 157
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 336
% TWLsolver calls for satisfiability: 86
% 
% Memory used [KB]: 10746
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordProps
% (134173)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 126
% Passive clauses: 837
% Generated clauses: 11284
% Final active clauses: 104
% Final passive clauses: 605
% Input formulas: 260
% Initial clauses: 318
% 
% Duplicate literals: 386
% Trivial inequalities: 270
% Fw subsumption resolutions: 851
% Fw demodulations: 1649
% Bw demodulations: 120
% Condensations: 539
% Global subsumptions: 4
% 
% Simple tautologies: 258
% Equational tautologies: 38
% Forward subsumptions: 5028
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 140
% Factoring: 1
% Forward superposition: 3095
% Backward superposition: 2879
% Self superposition: 95
% Equality factoring: 58
% Equality resolution: 29
% 
% Split clauses: 17
% Split components: 34
% SAT solver clauses: 1562
% SAT solver unit clauses: 546
% SAT solver binary clauses: 58
% SAT solver learnt clauses: 8
% 
% Sat splits: 17
% Sat splitting refutations: 21
% 
% TWLsolver clauses: 1546
% TWLsolver calls for satisfiability: 1371
% 
% Memory used [KB]: 9083
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.wordProps
% (134196)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 684
% Passive clauses: 5678
% Generated clauses: 173799
% Final active clauses: 416
% Final passive clauses: 1527
% Input formulas: 260
% Initial clauses: 318
% Discarded non-redundant clauses: 99354
% 
% Duplicate literals: 5186
% Trivial inequalities: 2425
% Fw subsumption resolutions: 13980
% Fw demodulations: 36026
% Bw demodulations: 1954
% Condensations: 9158
% Global subsumptions: 171
% 
% Simple tautologies: 2047
% Equational tautologies: 732
% Forward subsumptions: 93639
% Fw demodulations to eq. taut.: 446
% Bw demodulations to eq. taut.: 107
% 
% Unit resulting resolution: 10279
% Factoring: 1
% Forward superposition: 46173
% Backward superposition: 44228
% Self superposition: 612
% Equality factoring: 404
% Equality resolution: 186
% 
% Split clauses: 54
% Split components: 108
% SAT solver clauses: 6292
% SAT solver unit clauses: 503
% SAT solver binary clauses: 732
% 
% Sat splits: 54
% Sat splitting refutations: 333
% 
% Memory used [KB]: 74838
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f2133,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f2132])).
fof(f2132,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2)))))),
  inference(equality_resolution,[],[f862])).
fof(f862,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f861,f317])).
fof(f317,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X2),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.wordSem.state'(X0,X1),X4))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X0)),'type.sptree.spt'('type.wordSem.word_loc'(X0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X2),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X4))))))),s('type.wordSem.state'(X0,X1),X4)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X2),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.wordSem.state'(X0,X1),X4))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X0)),'type.sptree.spt'('type.wordSem.word_loc'(X0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X2),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X4))))))),s('type.wordSem.state'(X0,X1),X4)))),
  inference(flattening,[],[f268])).
fof(f268,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X2),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.wordSem.state'(X0,X1),X4))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X0)),'type.sptree.spt'('type.wordSem.word_loc'(X0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X2),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X4))))))),s('type.wordSem.state'(X0,X1),X4)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X11] : ! [X12,X13,X14] : s('type.wordSem.state'(X6,X11),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X12),s('type.list.list'('type.wordSem.word_loc'(X6)),X13),s('type.wordSem.state'(X6,X11),X14))) = s('type.wordSem.state'(X6,X11),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X6)),'type.sptree.spt'('type.wordSem.word_loc'(X6))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X12),s('type.list.list'('type.wordSem.word_loc'(X6)),X13),s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X11),X14))))))),s('type.wordSem.state'(X6,X11),X14)))),
  file('thm.wordProps.set_vars_const|split|0','thm.wordSem.set_vars_def')).
fof(f861,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f860,f317])).
fof(f860,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f859,f317])).
fof(f859,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f858,f317])).
fof(f858,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f857,f317])).
fof(f857,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f856,f357])).
fof(f357,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X0)),'type.sptree.spt'('type.wordSem.word_loc'(X0))),X3),s('type.wordSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f297])).
fof(f297,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X0)),'type.sptree.spt'('type.wordSem.word_loc'(X0))),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f296])).
fof(f296,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X0)),'type.sptree.spt'('type.wordSem.word_loc'(X0))),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f97])).
fof(f97,axiom,(
  ! [X6,X11] : ! [X14,X20] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X11),X14))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X11),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(X6)),'type.sptree.spt'('type.wordSem.word_loc'(X6))),X20),s('type.wordSem.state'(X6,X11),X14)))))),
  file('thm.wordProps.set_vars_const|split|0','thm.wordSem.wordSem_|49|65_prove_ltb')).
fof(f856,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f855,f317])).
fof(f855,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f854,f317])).
fof(f854,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f853,f317])).
fof(f853,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f852,f317])).
fof(f852,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f851,f317])).
fof(f851,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f827,f317])).
fof(f827,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(superposition,[],[f800,f317])).
fof(f800,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2)))))) )),
  inference(duplicate_literal_removal,[],[f799])).
fof(f799,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0)))) )),
  inference(equality_resolution,[],[f464])).
fof(f464,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3)))) )),
  inference(forward_demodulation,[],[f463,f317])).
fof(f463,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f462,f317])).
fof(f462,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f461,f317])).
fof(f461,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f460,f317])).
fof(f460,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f459,f317])).
fof(f459,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f458,f317])).
fof(f458,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f457,f317])).
fof(f457,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f456,f317])).
fof(f456,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f455,f357])).
fof(f455,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f454,f317])).
fof(f454,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f453,f317])).
fof(f453,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f452,f317])).
fof(f452,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(forward_demodulation,[],[f437,f317])).
fof(f437,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.wordSem.state'(sK0,sK1),X2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2))))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'type.sptree.spt'('type.wordSem.word_loc'(sK0))),'const.combin.K_1'(s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.misc.alist_insert_3'(s('type.list.list'('type.num.num'),X0),s('type.list.list'('type.wordSem.word_loc'(sK0)),X1),s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X2))))))),s('type.wordSem.state'(sK0,sK1),X2)))))) )),
  inference(superposition,[],[f376,f317])).
fof(f376,plain,(
  ( ! [X6,X7] : (s('type.wordSem.state'(sK0,sK1),X7) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X6))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X7))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X6))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X7)))) )),
  inference(superposition,[],[f370,f349])).
fof(f349,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f311])).
fof(f311,plain,(
  ! [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & ((s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f281])).
fof(f281,plain,(
  ! [X0,X1,X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f280])).
fof(f280,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X11] : ! [X19,X18] : (s('type.wordSem.state'(X6,X11),X18) = s('type.wordSem.state'(X6,X11),X19) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X11),X19))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X11),X18))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X11),X19))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X11),X18))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X11),X19))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X11),X18))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X11),X19))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X11),X18))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X11),X19))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X11),X18))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X11),X19))) & s('type.ffi.ffi_state'(X11),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X11),X18))) = s('type.ffi.ffi_state'(X11),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X11),X19)))))),
  file('thm.wordProps.set_vars_const|split|0','thm.wordSem.state_component_equality')).
fof(f370,plain,(
  ( ! [X0] : (s('type.wordSem.state'(sK0,sK1),X0) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0)))) )),
  inference(superposition,[],[f313,f344])).
fof(f344,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f312])).
fof(f313,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2)))))),
  inference(cnf_transformation,[],[f307])).
fof(f307,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),sK4),s('type.list.list'('type.wordSem.word_loc'(sK0)),sK3),s('type.wordSem.state'(sK0,sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f306])).
fof(f306,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X4),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X4),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X4),s('type.list.list'('type.wordSem.word_loc'(X0)),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X10),s('type.list.list'('type.wordSem.word_loc'(X6)),X9),s('type.wordSem.state'(X6,X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.set_vars_3'(s('type.list.list'('type.num.num'),X10),s('type.list.list'('type.wordSem.word_loc'(X6)),X9),s('type.wordSem.state'(X6,X7),X8)))))),
  file('thm.wordProps.set_vars_const|split|0','thm.wordProps.set_vars_const|split|0')).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 106
% Passive clauses: 741
% Generated clauses: 1747
% Final active clauses: 106
% Final passive clauses: 550
% Input formulas: 260
% Initial clauses: 49
% 
% Selected by SInE selection: 22
% SInE iterations: 1
% 
% Duplicate literals: 25
% Trivial inequalities: 107
% Fw subsumption resolutions: 22
% Fw demodulations: 834
% 
% Simple tautologies: 2
% Equational tautologies: 1
% Forward subsumptions: 267
% 
% Forward superposition: 860
% Equality resolution: 44
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 5756
% Time elapsed: 0.624 s
% ------------------------------
% ------------------------------
% Success in time 12.38 s
