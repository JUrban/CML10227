Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.patProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.patProps
% SZS output start Proof for thm.patProps
fof(f1061,plain,(
  $false),
  inference(subsumption_resolution,[],[f1060,f43])).
fof(f43,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.patProps.no_closures_Boolv',aHL_TRUTH)).
fof(f1060,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f42,f986])).
fof(f986,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X2)))))) )),
  inference(superposition,[],[f953,f50])).
fof(f50,plain,(
  ( ! [X0] : (s(bool,'const.patProps.no_closures_1'(s('type.patSem.v',X0))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v',X0)))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s(bool,'const.patProps.no_closures_1'(s('type.patSem.v',X0))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v',X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X20] : s(bool,'const.patProps.no_closures_1'(s('type.patSem.v',X20))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v',X20)))),
  file('thm.patProps.no_closures_Boolv','ARITY_0_1_const.patProps.no_closures')).
fof(f953,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0)))))) )),
  inference(forward_demodulation,[],[f930,f859])).
fof(f859,plain,(
  s(bool,'T_0') = s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))),
  inference(superposition,[],[f858,f54])).
fof(f54,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7] : ! [X8] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X7,bool),X8),s('type.list.list'(X7),'const.list.NIL_0')))),
  file('thm.patProps.no_closures_Boolv','thm.list.EVERY_DEF|split|0')).
fof(f858,plain,(
  ( ! [X0] : (s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X0))))) = s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X0)))) )),
  inference(forward_demodulation,[],[f52,f50])).
fof(f52,plain,(
  ( ! [X0] : (s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X0))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X0)))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X0))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X0)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X12] : s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X12))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X12)))))),
  file('thm.patProps.no_closures_Boolv','thm.patProps.no_closures_def|split|5')).
fof(f930,plain,(
  ( ! [X0] : (s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),'const.list.NIL_0'))))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0)))))) )),
  inference(superposition,[],[f903,f51])).
fof(f51,plain,(
  ( ! [X0] : (s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X6))) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num','const.bool.COND_3'(s(bool,X6),s('type.num.num','const.conLang.true_tag_0'),s('type.num.num','const.conLang.false_tag_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))),
  file('thm.patProps.no_closures_Boolv','thm.patSem.Boolv_def')).
fof(f903,plain,(
  ( ! [X0,X1] : (s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X0))))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X1),s('type.list.list'('type.patSem.v'),X0)))))) )),
  inference(forward_demodulation,[],[f59,f858])).
fof(f59,plain,(
  ( ! [X0,X1] : (s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X0))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X1),s('type.list.list'('type.patSem.v'),X0)))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X0))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X1),s('type.list.list'('type.patSem.v'),X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X12,X13] : s(bool,'const.list.EVERY_2'(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),X12))) = s(bool,happ(s(fun('type.patSem.v',bool),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X13),s('type.list.list'('type.patSem.v'),X12)))))),
  file('thm.patProps.no_closures_Boolv','thm.patProps.no_closures_def|split|1')).
fof(f42,plain,(
  ~p(s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,sK0))))))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ~p(s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,sK0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f36])).
fof(f36,plain,(
  ? [X0] : ~p(s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0] : p(s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s(bool,X6))))))),
  file('thm.patProps.no_closures_Boolv','thm.patProps.no_closures_Boolv')).
% SZS output end Proof for thm.patProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 43
% Passive clauses: 179
% Generated clauses: 994
% Final active clauses: 23
% Final passive clauses: 79
% Input formulas: 18
% Initial clauses: 20
% 
% Duplicate literals: 131
% Trivial inequalities: 6
% Fw subsumption resolutions: 42
% Fw demodulations: 48
% Bw demodulations: 11
% 
% Simple tautologies: 20
% Equational tautologies: 16
% Forward subsumptions: 551
% 
% Binary resolution: 8
% Forward superposition: 360
% Backward superposition: 281
% Self superposition: 36
% Equality factoring: 30
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 21
% SAT solver unit clauses: 3
% SAT solver binary clauses: 9
% 
% Sat splits: 9
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 21
% TWLsolver calls for satisfiability: 8
% 
% Memory used [KB]: 1151
% Time elapsed: 0.058 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
