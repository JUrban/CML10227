Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvl_handleProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_handleProof
% SZS output start Proof for thm.bvl_handleProof
fof(f9269,plain,(
  $false),
  inference(subsumption_resolution,[],[f9267,f46])).
fof(f46,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),sK5))),s('type.list.list'('type.bvl.exp'),sK1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),sK5))),s('type.list.list'('type.bvl.exp'),sK1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f29])).
fof(f29,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X5))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X5))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X5))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X5))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X11))),s('type.list.list'('type.bvl.exp'),X7))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X11))),s('type.list.list'('type.bvl.exp'),X7))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))))),
  file('thm.bvl_handleProof.compile_correct','thm.bvl_handleProof.compile_correct')).
fof(f9267,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),sK5))),s('type.list.list'('type.bvl.exp'),sK1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3)))))))),
  inference(superposition,[],[f938,f51])).
fof(f51,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X20] : s('type.list.list'(X6),X20) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X20),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.bvl_handleProof.compile_correct','thm.list.APPEND_NIL')).
fof(f938,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),sK5))),s('type.list.list'('type.bvl.exp'),sK1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.list.list'('type.bvlSem.v'),X0))),s('type.bvlSem.state'(sK0),sK3)))))))) )),
  inference(subsumption_resolution,[],[f937,f45])).
fof(f45,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))),
  inference(cnf_transformation,[],[f37])).
fof(f937,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),sK5))),s('type.list.list'('type.bvl.exp'),sK1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.list.list'('type.bvlSem.v'),X0))),s('type.bvlSem.state'(sK0),sK3)))))))) )),
  inference(equality_resolution,[],[f504])).
fof(f504,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bvlSem.state'(sK0),X1))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bvlSem.state'(sK0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),sK5))),s('type.list.list'('type.bvl.exp'),sK1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.list.list'('type.bvlSem.v'),X2))),s('type.bvlSem.state'(sK0),sK3)))))))) )),
  inference(superposition,[],[f54,f44])).
fof(f44,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f37])).
fof(f54,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X2))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.list.list'('type.bvlSem.v'),X6))),s('type.bvlSem.state'(X0),X3)))))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X2))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.list.list'('type.bvlSem.v'),X6))),s('type.bvlSem.state'(X0),X3))))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X2))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.list.list'('type.bvlSem.v'),X6))),s('type.bvlSem.state'(X0),X3))))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X2))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.list.list'('type.bvlSem.v'),X6))),s('type.bvlSem.state'(X0),X3))))))))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X2))),s('type.list.list'('type.bvl.exp'),X1))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.list.list'('type.bvlSem.v'),X6))),s('type.bvlSem.state'(X0),X3))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7,X11,X9,X10,X8,X19] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvlSem.v'),X11))),s('type.list.list'('type.bvl.exp'),X7))),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.list.list'('type.bvlSem.v'),X19))),s('type.bvlSem.state'(X6),X9))))))))),
  file('thm.bvl_handleProof.compile_correct','thm.bvl_handleProof.bvl_handleProof_|48|_prove_ltb')).
% SZS output end Proof for thm.bvl_handleProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 104
% Passive clauses: 691
% Generated clauses: 8924
% Final active clauses: 79
% Final passive clauses: 476
% Input formulas: 11
% Initial clauses: 26
% 
% Duplicate literals: 537
% Trivial inequalities: 244
% Fw subsumption resolutions: 1444
% Fw demodulations: 842
% Bw demodulations: 18
% 
% Simple tautologies: 283
% Equational tautologies: 44
% Forward subsumptions: 3802
% 
% Binary resolution: 125
% Forward superposition: 3098
% Backward superposition: 2101
% Self superposition: 160
% Equality factoring: 135
% Equality resolution: 29
% 
% Split clauses: 730
% Split components: 1523
% SAT solver clauses: 1141
% SAT solver unit clauses: 26
% SAT solver binary clauses: 146
% 
% Sat splits: 730
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1141
% TWLsolver calls for satisfiability: 135
% 
% Memory used [KB]: 4349
% Time elapsed: 0.464 s
% ------------------------------
% ------------------------------
% Success in time 0.47 s
