Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.benchmark
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.benchmark
% SZS output start Proof for thm.benchmark
fof(f4363,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4362,f224,f413,f411,f409,f407,f405,f403,f4360,f4359,f3842,f228,f402,f4361])).
fof(f4361,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f409,f230])).
fof(f230,plain,(
  ( ! [X2,X3] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'),s('type.benchmark.queue'(sK12),X2),s('type.benchmark.digit'(sK12),X3)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'),s('type.benchmark.queue'(sK12),sK17),s('type.benchmark.digit'(sK12),sK18))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK19))),s('type.benchmark.queue'(sK12),sK20),s('type.benchmark.digit'(sK12),sK21))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK22),s('type.benchmark.times'(sK12),sK23))),s('type.benchmark.queue'(sK12),sK24),s('type.benchmark.digit'(sK12),sK25)))) & ! [X13] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),X13))))) & ! [X9,X10,X11,X12] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),X9),s('type.benchmark.times'(sK12),X10))),s('type.benchmark.queue'(sK12),X11),s('type.benchmark.digit'(sK12),X12))) & ! [X6,X7,X8] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),X6))),s('type.benchmark.queue'(sK12),X7),s('type.benchmark.digit'(sK12),X8))) & s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) & ! [X4,X5] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),X4),s('type.benchmark.times'(sK12),X5))))) & ! [X2,X3] : s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'),s('type.benchmark.queue'(sK12),X2),s('type.benchmark.digit'(sK12),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X25] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X25))))) | ? [X23,X24] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X23),s('type.benchmark.times'(X0),X24))))) | ? [X21,X22] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X21),s('type.benchmark.digit'(X0),X22))) | ? [X18,X19,X20] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X18))),s('type.benchmark.queue'(X0),X19),s('type.benchmark.digit'(X0),X20))) | ? [X14,X15,X16,X17] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X14),s('type.benchmark.times'(X0),X15))),s('type.benchmark.queue'(X0),X16),s('type.benchmark.digit'(X0),X17)))) & ! [X13] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) & ! [X9,X10,X11,X12] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X9),s('type.benchmark.times'(X0),X10))),s('type.benchmark.queue'(X0),X11),s('type.benchmark.digit'(X0),X12))) & ! [X6,X7,X8] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X6))),s('type.benchmark.queue'(X0),X7),s('type.benchmark.digit'(X0),X8))) & s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) & ! [X4,X5] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X4),s('type.benchmark.times'(X0),X5))))) & ! [X2,X3] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X2),s('type.benchmark.digit'(X0),X3))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10))) | ? [X6,X7,X8] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X6))),s('type.benchmark.queue'(X0),X7),s('type.benchmark.digit'(X0),X8))) | ? [X2,X3,X4,X5] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))),s('type.benchmark.queue'(X0),X4),s('type.benchmark.digit'(X0),X5)))) & ! [X25] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X25))))) & ! [X21,X22,X23,X24] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X21),s('type.benchmark.times'(X0),X22))),s('type.benchmark.queue'(X0),X23),s('type.benchmark.digit'(X0),X24))) & ! [X18,X19,X20] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X18))),s('type.benchmark.queue'(X0),X19),s('type.benchmark.digit'(X0),X20))) & s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) & ! [X16,X17] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X16),s('type.benchmark.times'(X0),X17))))) & ! [X14,X15] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X14),s('type.benchmark.digit'(X0),X15))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10))) | ? [X6,X7,X8] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X6))),s('type.benchmark.queue'(X0),X7),s('type.benchmark.digit'(X0),X8))) | ? [X2,X3,X4,X5] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))),s('type.benchmark.queue'(X0),X4),s('type.benchmark.digit'(X0),X5)))) & (! [X25] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X25))))) & ! [X21,X22,X23,X24] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X21),s('type.benchmark.times'(X0),X22))),s('type.benchmark.queue'(X0),X23),s('type.benchmark.digit'(X0),X24))) & ! [X18,X19,X20] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X18))),s('type.benchmark.queue'(X0),X19),s('type.benchmark.digit'(X0),X20))) & s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) & ! [X16,X17] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X16),s('type.benchmark.times'(X0),X17))))) & ! [X14,X15] : s('type.benchmark.queue'(X0),X1) != s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X14),s('type.benchmark.digit'(X0),X15)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10))) | ? [X6,X7,X8] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X6))),s('type.benchmark.queue'(X0),X7),s('type.benchmark.digit'(X0),X8))) | ? [X2,X3,X4,X5] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))),s('type.benchmark.queue'(X0),X4),s('type.benchmark.digit'(X0),X5)))) => (? [X25] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X25))))) | ? [X21,X22,X23,X24] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X21),s('type.benchmark.times'(X0),X22))),s('type.benchmark.queue'(X0),X23),s('type.benchmark.digit'(X0),X24))) | ? [X18,X19,X20] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X18))),s('type.benchmark.queue'(X0),X19),s('type.benchmark.digit'(X0),X20))) | s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X16,X17] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X16),s('type.benchmark.times'(X0),X17))))) | ? [X14,X15] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X14),s('type.benchmark.digit'(X0),X15)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X13] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X13))))) | ? [X11,X12] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X11),s('type.benchmark.times'(X0),X12))))) | ? [X9,X10] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X9),s('type.benchmark.digit'(X0),X10))) | ? [X6,X7,X8] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X6))),s('type.benchmark.queue'(X0),X7),s('type.benchmark.digit'(X0),X8))) | ? [X2,X3,X4,X5] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))),s('type.benchmark.queue'(X0),X4),s('type.benchmark.digit'(X0),X5)))) => (? [X25] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X25))))) | ? [X21,X22,X23,X24] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X21),s('type.benchmark.times'(X0),X22))),s('type.benchmark.queue'(X0),X23),s('type.benchmark.digit'(X0),X24))) | ? [X18,X19,X20] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.One_1'(s('type.benchmark.times'(X0),X18))),s('type.benchmark.queue'(X0),X19),s('type.benchmark.digit'(X0),X20))) | s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'))) | ? [X16,X17] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X0),'const.benchmark.Two_2'(s('type.benchmark.times'(X0),X16),s('type.benchmark.times'(X0),X17))))) | ? [X14,X15] : s('type.benchmark.queue'(X0),X1) = s('type.benchmark.queue'(X0),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X0),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X0),X14),s('type.benchmark.digit'(X0),X15)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X6),X11),s('type.benchmark.digit'(X6),X12))) | ? [X8,X13,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))),s('type.benchmark.queue'(X6),X13),s('type.benchmark.digit'(X6),X14))) | ? [X8,X15,X16,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X15))),s('type.benchmark.queue'(X6),X16),s('type.benchmark.digit'(X6),X14)))) => (? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X8,X15,X16,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X15))),s('type.benchmark.queue'(X6),X16),s('type.benchmark.digit'(X6),X14))) | ? [X8,X13,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))),s('type.benchmark.queue'(X6),X13),s('type.benchmark.digit'(X6),X14))) | s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X6),X11),s('type.benchmark.digit'(X6),X12)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X6),X11),s('type.benchmark.digit'(X6),X12))) | ? [X8,X13,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))),s('type.benchmark.queue'(X6),X13),s('type.benchmark.digit'(X6),X14))) | ? [X8,X15,X16,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X15))),s('type.benchmark.queue'(X6),X16),s('type.benchmark.digit'(X6),X14)))) => (? [X8] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))))) | ? [X8,X15,X16,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X15))),s('type.benchmark.queue'(X6),X16),s('type.benchmark.digit'(X6),X14))) | ? [X8,X13,X14] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.One_1'(s('type.benchmark.times'(X6),X8))),s('type.benchmark.queue'(X6),X13),s('type.benchmark.digit'(X6),X14))) | s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'))) | ? [X9,X10] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(X6),'const.benchmark.Two_2'(s('type.benchmark.times'(X6),X9),s('type.benchmark.times'(X6),X10))))) | ? [X11,X12] : s('type.benchmark.queue'(X6),X7) = s('type.benchmark.queue'(X6),'const.benchmark.Deep_3'(s('type.benchmark.digit'(X6),'const.benchmark.Zero_0'),s('type.benchmark.queue'(X6),X11),s('type.benchmark.digit'(X6),X12)))))),
  file('thm.benchmark.benchmark_86_prove_ltb','thm.benchmark.benchmark_86_prove_ltb')).
fof(f402,plain,(
  s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) | $spl1),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f228,plain,(
  s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0')))),
  inference(cnf_transformation,[],[f139])).
fof(f3842,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f405,f225])).
fof(f225,plain,(
  ( ! [X13] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),X13)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4359,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f413,f226])).
fof(f226,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),X9),s('type.benchmark.times'(sK12),X10))),s('type.benchmark.queue'(sK12),X11),s('type.benchmark.digit'(sK12),X12)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4360,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f411,f227])).
fof(f227,plain,(
  ( ! [X6,X8,X7] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),X6))),s('type.benchmark.queue'(sK12),X7),s('type.benchmark.digit'(sK12),X8)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f403,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) | $spl0),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f405,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) | $spl2),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f407,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) | $spl4),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f409,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'),s('type.benchmark.queue'(sK12),sK17),s('type.benchmark.digit'(sK12),sK18))) | $spl6),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'),s('type.benchmark.queue'(sK12),sK17),s('type.benchmark.digit'(sK12),sK18))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f411,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK19))),s('type.benchmark.queue'(sK12),sK20),s('type.benchmark.digit'(sK12),sK21))) | $spl8),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK19))),s('type.benchmark.queue'(sK12),sK20),s('type.benchmark.digit'(sK12),sK21))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f413,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK22),s('type.benchmark.times'(sK12),sK23))),s('type.benchmark.queue'(sK12),sK24),s('type.benchmark.digit'(sK12),sK25))) | $spl10),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK22),s('type.benchmark.times'(sK12),sK23))),s('type.benchmark.queue'(sK12),sK24),s('type.benchmark.digit'(sK12),sK25))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f224,plain,(
  s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK22),s('type.benchmark.times'(sK12),sK23))),s('type.benchmark.queue'(sK12),sK24),s('type.benchmark.digit'(sK12),sK25))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK19))),s('type.benchmark.queue'(sK12),sK20),s('type.benchmark.digit'(sK12),sK21))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Deep_3'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0'),s('type.benchmark.queue'(sK12),sK17),s('type.benchmark.digit'(sK12),sK18))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),sK15),s('type.benchmark.times'(sK12),sK16))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.One_1'(s('type.benchmark.times'(sK12),sK14))))) | s('type.benchmark.queue'(sK12),sK13) = s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Zero_0')))),
  inference(cnf_transformation,[],[f139])).
fof(f4362,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f407,f229])).
fof(f229,plain,(
  ( ! [X4,X5] : (s('type.benchmark.queue'(sK12),sK13) != s('type.benchmark.queue'(sK12),'const.benchmark.Shallow_1'(s('type.benchmark.digit'(sK12),'const.benchmark.Two_2'(s('type.benchmark.times'(sK12),X4),s('type.benchmark.times'(sK12),X5)))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.benchmark
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 348
% Passive clauses: 1304
% Generated clauses: 4131
% Final active clauses: 348
% Final passive clauses: 806
% Input formulas: 37
% Initial clauses: 174
% 
% Duplicate literals: 152
% Trivial inequalities: 13
% Fw subsumption resolutions: 287
% 
% Simple tautologies: 145
% Equational tautologies: 28
% Forward subsumptions: 2187
% 
% Binary resolution: 2524
% Factoring: 754
% Forward superposition: 112
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 95
% Split components: 195
% SAT solver clauses: 175
% SAT solver unit clauses: 12
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 95
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 174
% TWLsolver calls for satisfiability: 146
% 
% Memory used [KB]: 2174
% Time elapsed: 0.124 s
% ------------------------------
% ------------------------------
% Success in time 0.13 s
