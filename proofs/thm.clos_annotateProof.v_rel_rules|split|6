Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_annotateProof
% (99924)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 245
% Passive clauses: 4156
% Generated clauses: 27180
% Final active clauses: 205
% Final passive clauses: 3626
% Input formulas: 133
% Initial clauses: 328
% 
% Duplicate literals: 795
% Trivial inequalities: 275
% Fw subsumption resolutions: 2427
% Fw demodulations: 4903
% Bw demodulations: 37
% 
% Simple tautologies: 417
% Equational tautologies: 53
% Forward subsumptions: 13293
% Fw demodulations to eq. taut.: 40
% 
% Binary resolution: 620
% Factoring: 1
% Forward superposition: 9372
% Backward superposition: 7960
% Self superposition: 167
% Equality factoring: 100
% Equality resolution: 34
% 
% Split clauses: 325
% Split components: 657
% SAT solver clauses: 938
% SAT solver unit clauses: 18
% SAT solver binary clauses: 246
% 
% Sat splits: 325
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 933
% TWLsolver calls for satisfiability: 157
% 
% Memory used [KB]: 15991
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_annotateProof
% (99948)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 112
% Passive clauses: 914
% Generated clauses: 8740
% Final active clauses: 58
% Final passive clauses: 200
% Input formulas: 133
% Initial clauses: 328
% 
% Duplicate literals: 124
% Trivial inequalities: 75
% Fw subsumption resolutions: 793
% Fw demodulations: 1630
% Bw demodulations: 642
% Condensations: 193
% Global subsumptions: 17
% 
% Simple tautologies: 166
% Equational tautologies: 11
% Forward subsumptions: 3326
% Bw demodulations to eq. taut.: 11
% 
% Binary resolution: 154
% Factoring: 1
% Forward superposition: 2338
% Backward superposition: 994
% Self superposition: 65
% Equality factoring: 18
% Equality resolution: 29
% 
% Split clauses: 33
% Split components: 66
% SAT solver clauses: 1338
% SAT solver unit clauses: 397
% SAT solver binary clauses: 107
% SAT solver learnt clauses: 34
% 
% Sat splits: 33
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 1270
% TWLsolver calls for satisfiability: 4049
% 
% Memory used [KB]: 9083
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_annotateProof
% (99972)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 754
% Passive clauses: 8214
% Generated clauses: 242265
% Final active clauses: 119
% Final passive clauses: 287
% Input formulas: 133
% Initial clauses: 328
% Discarded non-redundant clauses: 13389
% 
% Duplicate literals: 1440
% Trivial inequalities: 616
% Fw subsumption resolutions: 5243
% Fw demodulations: 90257
% Bw demodulations: 5126
% Condensations: 2175
% Global subsumptions: 963
% 
% Simple tautologies: 654
% Equational tautologies: 878
% Forward subsumptions: 76450
% Fw demodulations to eq. taut.: 43395
% Bw demodulations to eq. taut.: 315
% 
% Unit resulting resolution: 81824
% Factoring: 5
% Forward superposition: 23197
% Backward superposition: 21356
% Self superposition: 216
% Equality factoring: 108
% Equality resolution: 34
% 
% Split clauses: 48
% Split components: 96
% SAT solver clauses: 10776
% SAT solver unit clauses: 1221
% SAT solver binary clauses: 4166
% 
% Sat splits: 48
% Sat splitting refutations: 1501
% 
% Memory used [KB]: 133558
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_annotateProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_annotateProof
% SZS output start Proof for thm.clos_annotateProof
fof(f4198,plain,(
  $false),
  inference(resolution,[],[f4180,f655])).
fof(f655,plain,(
  ~sP5(sK54(sK17,sK13,sK12,sK14,sK15,sK16),sK53(sK17,sK13,sK12,sK14,sK15,sK16))),
  inference(resolution,[],[f354,f411])).
fof(f411,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) | ~sP5(sK54(X5,X4,X3,X2,X1,X0),sK53(X5,X4,X3,X2,X1,X0))) )),
  inference(cnf_transformation,[],[f279])).
fof(f279,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) | ! [X10,X11] : ((sP3(X10,X11,sK52(X11,X10,X5,X4,X3,X2,X1,X0),sK51(X11,X10,X5,X4,X3,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X10),s('type.closSem.v',sK51(X11,X10,X5,X4,X3,X2,X1,X0)))),s('type.closSem.v',sK52(X11,X10,X5,X4,X3,X2,X1,X0)))))) | sP5(X11,X10) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X11),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5)))))) & ((! [X8,X9] : (~sP3(sK53(X5,X4,X3,X2,X1,X0),sK54(X5,X4,X3,X2,X1,X0),X9,X8) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK53(X5,X4,X3,X2,X1,X0)),s('type.closSem.v',X8))),s('type.closSem.v',X9))))) & ~sP5(sK54(X5,X4,X3,X2,X1,X0),sK53(X5,X4,X3,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),sK54(X5,X4,X3,X2,X1,X0)),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))) | p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK51,sK52,sK53,sK54])],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) | ! [X10,X11] : (? [X12,X13] : (sP3(X10,X11,X13,X12) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X10),s('type.closSem.v',X12))),s('type.closSem.v',X13))))) | sP5(X11,X10) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X11),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5)))))) & (? [X6,X7] : (! [X8,X9] : (~sP3(X6,X7,X9,X8) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X8))),s('type.closSem.v',X9))))) & ~sP5(X7,X6) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))) | p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5))))))),
  inference(rectify,[],[f277])).
fof(f277,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) | ! [X6,X7] : (? [X15,X16] : (sP3(X6,X7,X16,X15) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X15))),s('type.closSem.v',X16))))) | sP5(X7,X6) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5)))))) & (? [X6,X7] : (! [X15,X16] : (~sP3(X6,X7,X16,X15) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X15))),s('type.closSem.v',X16))))) & ~sP5(X7,X6) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))) | p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5))))))),
  inference(nnf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) <=> ! [X6,X7] : (? [X15,X16] : (sP3(X6,X7,X16,X15) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X15))),s('type.closSem.v',X16))))) | sP5(X7,X6) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))))),
  inference(definition_folding,[],[f216,f247,f246,f245,f244,f243,f242])).
fof(f242,plain,(
  ! [X6,X7,X16,X15] : (sP0(X6,X7,X16,X15) <=> ? [X25,X26,X27,X28,X29,X30,X31,X32,X33,X34] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X27),s('type.num.num',X31),s('type.closLang.exp',X25))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X28),s('type.num.num',X31),s('type.closLang.exp',X26))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X26))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X30))),s('type.num.num',X31))),s('type.sptree.spt'('type.num.num'),X29))) & ! [X35] : (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X35))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X31))),s('type.num.num',X35)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X30))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X29))),s('type.list.list'('type.closSem.v'),X27))),s('type.list.list'('type.closSem.v'),X28))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X35))),s('type.num.num',X31))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X30) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X27))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X34))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f243,plain,(
  ! [X6,X7,X16,X15] : (sP1(X6,X7,X16,X15) <=> ? [X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.num.num',X21))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18),s('type.num.num',X21))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X19))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X24)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f244,plain,(
  ! [X6,X16,X15] : (sP2(X6,X16,X15) <=> ? [X37,X38,X39] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X38))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X39))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f245,plain,(
  ! [X6,X7,X16,X15] : (sP3(X6,X7,X16,X15) <=> (? [X41] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41)))) | ? [X40] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40)))) | sP2(X6,X16,X15) | ? [X36] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36)))) | sP0(X6,X7,X16,X15) | sP1(X6,X7,X16,X15)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f246,plain,(
  ! [X6,X13,X11,X9,X12,X10,X8] : (sP4(X6,X13,X11,X9,X12,X10,X8) <=> ? [X14] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X9))),s('type.num.num',X13)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X14))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X13))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.list.list'('type.closSem.v'),X12))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f247,plain,(
  ! [X7,X6] : (sP5(X7,X6) <=> ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) | sP4(X6,X13,X11,X9,X12,X10,X8)) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f216,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) <=> ! [X6,X7] : (? [X15,X16] : ((? [X41] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41)))) | ? [X40] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40)))) | ? [X37,X38,X39] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X38))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X39))))) | ? [X36] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36)))) | ? [X25,X26,X27,X28,X29,X30,X31,X32,X33,X34] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X27),s('type.num.num',X31),s('type.closLang.exp',X25))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X28),s('type.num.num',X31),s('type.closLang.exp',X26))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X26))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X30))),s('type.num.num',X31))),s('type.sptree.spt'('type.num.num'),X29))) & ! [X35] : (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X35))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X31))),s('type.num.num',X35)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X30))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X29))),s('type.list.list'('type.closSem.v'),X27))),s('type.list.list'('type.closSem.v'),X28))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X35))),s('type.num.num',X31))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X30) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X27))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X34))))) | ? [X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.num.num',X21))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18),s('type.num.num',X21))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X19))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X24)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X15))),s('type.closSem.v',X16))))) | ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) | ? [X14] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X9))),s('type.num.num',X13)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X14))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X13))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.list.list'('type.closSem.v'),X12)))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))))),
  inference(flattening,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) <=> ! [X6,X7] : ((? [X15,X16] : ((? [X41] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41)))) | ? [X40] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40)))) | ? [X37,X38,X39] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X38))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X39))))) | ? [X36] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36)))) | ? [X25,X26,X27,X28,X29,X30,X31,X32,X33,X34] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X27),s('type.num.num',X31),s('type.closLang.exp',X25))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X28),s('type.num.num',X31),s('type.closLang.exp',X26))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X26))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X30))),s('type.num.num',X31))),s('type.sptree.spt'('type.num.num'),X29))) & ! [X35] : ((~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X35))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X31))),s('type.num.num',X35))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X30))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X29))),s('type.list.list'('type.closSem.v'),X27))),s('type.list.list'('type.closSem.v'),X28))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X35))),s('type.num.num',X31))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X30) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X27))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X34))))) | ? [X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.num.num',X21))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18),s('type.num.num',X21))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X19))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X24)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X15))),s('type.closSem.v',X16))))) | ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) | ? [X14] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X9))),s('type.num.num',X13)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X14))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X13))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.list.list'('type.closSem.v'),X12)))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13)))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))))),
  inference(ennf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) <=> ! [X6,X7] : ((! [X15,X16] : ((? [X41] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X41)))) | ? [X40] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40)))) | ? [X37,X38,X39] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X38))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X37),s('type.list.list'('type.closSem.v'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X39))))) | ? [X36] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X36)))) | ? [X25,X26,X27,X28,X29,X30,X31,X32,X33,X34] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X27),s('type.num.num',X31),s('type.closLang.exp',X25))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X28),s('type.num.num',X31),s('type.closLang.exp',X26))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X26))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X30))),s('type.num.num',X31))),s('type.sptree.spt'('type.num.num'),X29))) & ! [X35] : ((p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X35))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X31))),s('type.num.num',X35))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X30))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X29))),s('type.list.list'('type.closSem.v'),X27))),s('type.list.list'('type.closSem.v'),X28))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X35))),s('type.num.num',X31))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X25))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X30) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X27))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X34))))) | ? [X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X15) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.num.num',X21))) & s('type.closSem.v',X16) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18),s('type.num.num',X21))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X19))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X18)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.list.list'('type.closSem.v'),X23),s('type.list.list'('type.closSem.v'),X24)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X17)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X15))),s('type.closSem.v',X16))))) & ! [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) | ? [X14] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X9))),s('type.num.num',X13)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X14))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X13))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X14))),s('type.list.list'('type.closSem.v'),X12)))))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13)))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X12,X13,X14,X15,X16] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X5),s('type.num.num',X12),s('type.sptree.spt'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X14),s('type.list.list'('type.closSem.v'),X15),s('type.num.num',X16)))) <=> ! [X17,X18] : ((! [X19,X20] : ((? [X21] : (s('type.closSem.v',X19) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X21))) & s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X21)))) | ? [X22] : (s('type.closSem.v',X19) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X22))) & s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X22)))) | ? [X23,X24,X25] : (s('type.closSem.v',X19) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X23),s('type.list.list'('type.closSem.v'),X24))) & s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X23),s('type.list.list'('type.closSem.v'),X25))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25))))) | ? [X26] : (s('type.closSem.v',X19) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X26))) & s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X26)))) | ? [X27,X28,X29,X30,X8,X10,X31,X32,X33,X34] : (s('type.closSem.v',X19) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X29),s('type.num.num',X31),s('type.closLang.exp',X27))) & s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X30),s('type.num.num',X31),s('type.closLang.exp',X28))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X28))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X10))),s('type.num.num',X31))),s('type.sptree.spt'('type.num.num'),X8))) & ! [X11] : ((p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X11))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X31))),s('type.num.num',X11))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X18),s('type.num.num',X10))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X8))),s('type.list.list'('type.closSem.v'),X29))),s('type.list.list'('type.closSem.v'),X30))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X11))),s('type.num.num',X31))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X27))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X29))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X34))))) | ? [X35,X36,X29,X30,X37,X32,X33,X34] : (s('type.closSem.v',X19) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35),s('type.num.num',X37))) & s('type.closSem.v',X20) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X32),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X36),s('type.num.num',X37))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X18),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X29))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X36)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X17),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.closSem.v'),X34)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X35)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X17),s('type.closSem.v',X19))),s('type.closSem.v',X20))))) & ! [X38,X39,X40,X41,X42,X43] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X39))),s('type.num.num',X38))))),s('type.num.num',X43)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',X39)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X17),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X43),s('type.list.list'('type.closSem.v'),X41))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X43),s('type.list.list'('type.closSem.v'),X42)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X41)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X42))))))) | ? [X44] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X39))),s('type.num.num',X43)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X39))),s('type.num.num',X38)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X39))),s('type.num.num',X38)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X44))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X43))),s('type.num.num',X39))),s('type.sptree.spt'('type.num.num'),X40))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X41)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X39))),s('type.num.num',X44))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X42)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X17),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X43),s('type.list.list'('type.closSem.v'),X41))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X39))),s('type.num.num',X44))),s('type.list.list'('type.closSem.v'),X42)))))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X18),s('type.num.num',X38))),s('type.num.num',X39))),s('type.sptree.spt'('type.num.num'),X40))),s('type.list.list'('type.closSem.v'),X41))),s('type.list.list'('type.closSem.v'),X42))),s('type.num.num',X43)))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X18),s('type.num.num',X5))),s('type.num.num',X12))),s('type.sptree.spt'('type.num.num'),X13))),s('type.list.list'('type.closSem.v'),X14))),s('type.list.list'('type.closSem.v'),X15))),s('type.num.num',X16))))))),
  file('thm.clos_annotateProof.v_rel_rules|split|6','thm.clos_annotateProof.v_rel|48|_def')).
fof(f354,plain,(
  ~p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',sK16),s('type.num.num',sK15),s('type.sptree.spt'('type.num.num'),sK14),s('type.list.list'('type.closSem.v'),sK12),s('type.list.list'('type.closSem.v'),sK13),s('type.num.num',sK17))))),
  inference(cnf_transformation,[],[f256])).
fof(f256,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK15),s('type.num.num',sK16))),s('type.num.num',sK17)))) & ~p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',sK16),s('type.num.num',sK15),s('type.sptree.spt'('type.num.num'),sK14),s('type.list.list'('type.closSem.v'),sK12),s('type.list.list'('type.closSem.v'),sK13),s('type.num.num',sK17))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f212])).
fof(f212,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))) & ~p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X4),s('type.num.num',X3),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X0),s('type.list.list'('type.closSem.v'),X1),s('type.num.num',X5)))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))) => p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X4),s('type.num.num',X3),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X0),s('type.list.list'('type.closSem.v'),X1),s('type.num.num',X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11)))) => p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X10),s('type.num.num',X9),s('type.sptree.spt'('type.num.num'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.num.num',X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11)))) => p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X10),s('type.num.num',X9),s('type.sptree.spt'('type.num.num'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.num.num',X11)))))),
  file('thm.clos_annotateProof.v_rel_rules|split|6','thm.clos_annotateProof.v_rel_rules|split|6')).
fof(f4180,plain,(
  ( ! [X0] : (sP5(sK54(sK17,sK13,sK12,sK14,sK15,sK16),X0)) )),
  inference(subsumption_resolution,[],[f4179,f606])).
fof(f606,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f511])).
fof(f511,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f155])).
fof(f155,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f110])).
fof(f110,axiom,(
  ! [X63] : ! [X86] : (s(X63,X86) = s(X63,X86) <=> p(s(bool,'T_0')))),
  file('thm.clos_annotateProof.v_rel_rules|split|6','thm.bool.REFL_CLAUSE')).
fof(f4179,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP5(sK54(sK17,sK13,sK12,sK14,sK15,sK16),X0)) )),
  inference(forward_demodulation,[],[f4178,f625])).
fof(f625,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK15),s('type.num.num',sK16))),s('type.num.num',sK17)))),
  inference(resolution,[],[f353,f565])).
fof(f565,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f345])).
fof(f345,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f121])).
fof(f121,axiom,(
  ! [X23] : (s(bool,'T_0') = s(bool,X23) <=> p(s(bool,X23)))),
  file('thm.clos_annotateProof.v_rel_rules|split|6','thm.bool.EQ_CLAUSES|split|1')).
fof(f353,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK15),s('type.num.num',sK16))),s('type.num.num',sK17))))),
  inference(cnf_transformation,[],[f256])).
fof(f4178,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK15),s('type.num.num',sK16))),s('type.num.num',sK17)))) | sP5(sK54(sK17,sK13,sK12,sK14,sK15,sK16),X0)) )),
  inference(forward_demodulation,[],[f4177,f588])).
fof(f588,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X45,X46] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X46))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X45))),s('type.num.num',X46)))),
  file('thm.clos_annotateProof.v_rel_rules|split|6','ARITY_0_2_const.arithmetic.+')).
fof(f4177,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',sK15))),s('type.num.num',sK16))),s('type.num.num',sK17)))) | sP5(sK54(sK17,sK13,sK12,sK14,sK15,sK16),X0)) )),
  inference(forward_demodulation,[],[f4134,f583])).
fof(f583,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X45,X46] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X46))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X45))),s('type.num.num',X46)))),
  file('thm.clos_annotateProof.v_rel_rules|split|6','ARITY_0_2_const.arithmetic.<=')).
fof(f4134,plain,(
  ( ! [X0] : (sP5(sK54(sK17,sK13,sK12,sK14,sK15,sK16),X0) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',sK15))),s('type.num.num',sK16))))),s('type.num.num',sK17))))) )),
  inference(resolution,[],[f656,f363])).
fof(f363,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5(X0,X1) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X0),s('type.num.num',X2))),s('type.num.num',X3))),s('type.sptree.spt'('type.num.num'),X4))),s('type.list.list'('type.closSem.v'),X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.num.num',X7)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num',X2))))),s('type.num.num',X7))))) )),
  inference(cnf_transformation,[],[f260])).
fof(f260,plain,(
  ! [X0,X1] : ((~sP5(X0,X1) | ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',sK20(X1,X0)))),s('type.num.num',sK19(X1,X0)))))),s('type.num.num',sK24(X1,X0))))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(X1,X0)),s('type.num.num',sK20(X1,X0))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X1),s('type.closSem.v','const.list.EL_2'(s('type.num.num',sK24(X1,X0)),s('type.list.list'('type.closSem.v'),sK22(X1,X0)))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',sK24(X1,X0)),s('type.list.list'('type.closSem.v'),sK23(X1,X0))))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK22(X1,X0))))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),sK23(X1,X0)))))))) | sP4(X1,sK24(X1,X0),sK22(X1,X0),sK20(X1,X0),sK23(X1,X0),sK21(X1,X0),sK19(X1,X0))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X0),s('type.num.num',sK19(X1,X0)))),s('type.num.num',sK20(X1,X0)))),s('type.sptree.spt'('type.num.num'),sK21(X1,X0)))),s('type.list.list'('type.closSem.v'),sK22(X1,X0)))),s('type.list.list'('type.closSem.v'),sK23(X1,X0)))),s('type.num.num',sK24(X1,X0))))))) & (! [X2,X3,X4,X5,X6,X7] : ((~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num',X2))))),s('type.num.num',X7)))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X3)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X1),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X7),s('type.list.list'('type.closSem.v'),X5))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X7),s('type.list.list'('type.closSem.v'),X6)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X5)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X6))))))) & ~sP4(X1,X7,X5,X3,X6,X4,X2)) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X0),s('type.num.num',X2))),s('type.num.num',X3))),s('type.sptree.spt'('type.num.num'),X4))),s('type.list.list'('type.closSem.v'),X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.num.num',X7))))) | sP5(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21,sK22,sK23,sK24])],[f259])).
fof(f259,plain,(
  ! [X0,X1] : ((~sP5(X0,X1) | ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X1),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) | sP4(X1,X13,X11,X9,X12,X10,X8)) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X0),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13)))))) & (! [X2,X3,X4,X5,X6,X7] : ((~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X3))),s('type.num.num',X2))))),s('type.num.num',X7)))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X3)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X1),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X7),s('type.list.list'('type.closSem.v'),X5))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X7),s('type.list.list'('type.closSem.v'),X6)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X5)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X6))))))) & ~sP4(X1,X7,X5,X3,X6,X4,X2)) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X0),s('type.num.num',X2))),s('type.num.num',X3))),s('type.sptree.spt'('type.num.num'),X4))),s('type.list.list'('type.closSem.v'),X5))),s('type.list.list'('type.closSem.v'),X6))),s('type.num.num',X7))))) | sP5(X0,X1)))),
  inference(rectify,[],[f258])).
fof(f258,plain,(
  ! [X7,X6] : ((~sP5(X7,X6) | ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) | sP4(X6,X13,X11,X9,X12,X10,X8)) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13)))))) & (! [X8,X9,X10,X11,X12,X13] : ((~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X9))),s('type.num.num',X8))))),s('type.num.num',X13)))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X9)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X11))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X12)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X11)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X12))))))) & ~sP4(X6,X13,X11,X9,X12,X10,X8)) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X7),s('type.num.num',X8))),s('type.num.num',X9))),s('type.sptree.spt'('type.num.num'),X10))),s('type.list.list'('type.closSem.v'),X11))),s('type.list.list'('type.closSem.v'),X12))),s('type.num.num',X13))))) | sP5(X7,X6)))),
  inference(nnf_transformation,[],[f247])).
fof(f656,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),sK54(sK17,sK13,sK12,sK14,sK15,sK16)),s('type.num.num',sK16))),s('type.num.num',sK15))),s('type.sptree.spt'('type.num.num'),sK14))),s('type.list.list'('type.closSem.v'),sK12))),s('type.list.list'('type.closSem.v'),sK13))),s('type.num.num',sK17))))),
  inference(resolution,[],[f354,f412])).
fof(f412,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.clos_annotateProof.env_ok_6'(s('type.num.num',X0),s('type.num.num',X1),s('type.sptree.spt'('type.num.num'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.closSem.v'),X4),s('type.num.num',X5)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),sK54(X5,X4,X3,X2,X1,X0)),s('type.num.num',X0))),s('type.num.num',X1))),s('type.sptree.spt'('type.num.num'),X2))),s('type.list.list'('type.closSem.v'),X3))),s('type.list.list'('type.closSem.v'),X4))),s('type.num.num',X5))))) )),
  inference(cnf_transformation,[],[f279])).
% SZS output end Proof for thm.clos_annotateProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 247
% Passive clauses: 842
% Generated clauses: 3581
% Final active clauses: 231
% Final passive clauses: 665
% Input formulas: 133
% Initial clauses: 251
% 
% Selected by SInE selection: 67
% SInE iterations: 1
% 
% Duplicate literals: 89
% Trivial inequalities: 58
% Fw subsumption resolutions: 403
% Fw demodulations: 632
% Bw demodulations: 16
% 
% Simple tautologies: 199
% Equational tautologies: 2
% Forward subsumptions: 1523
% 
% Binary resolution: 590
% Forward superposition: 1239
% Backward superposition: 547
% Equality resolution: 6
% 
% Split clauses: 10
% Split components: 24
% SAT solver clauses: 11
% SAT solver binary clauses: 8
% 
% Sat splits: 10
% 
% Memory used [KB]: 4605
% Time elapsed: 0.161 s
% ------------------------------
% ------------------------------
% Success in time 11.971 s
