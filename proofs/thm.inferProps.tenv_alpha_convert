Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.inferProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.inferProps
% SZS output start Proof for thm.inferProps
fof(f4831,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4824,f104,f172,f106,f174])).
fof(f174,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f106,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.inferProps.tenv_alpha_convert',aHL_FALSITY)).
fof(f172,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f104,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.inferProps.tenv_alpha_convert',aHL_TRUTH)).
fof(f4824,plain,(
  $false | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f4823,f172])).
fof(f4823,plain,(
  ~p(s(bool,'T_0')) | $spl5),
  inference(forward_demodulation,[],[f4822,f217])).
fof(f217,plain,(
  s(bool,'T_0') = s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0)))),
  inference(resolution,[],[f102,f111])).
fof(f111,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7] : (s(bool,'T_0') = s(bool,X7) <=> p(s(bool,X7)))),
  file('thm.inferProps.tenv_alpha_convert','thm.bool.EQ_CLAUSES|split|0')).
fof(f102,plain,(
  p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0))))),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0)))) & ~p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f56])).
fof(f56,plain,(
  ? [X0] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) & ~p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) => p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6)))) => p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6)))) => p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  file('thm.inferProps.tenv_alpha_convert','thm.inferProps.tenv_alpha_convert')).
fof(f4822,plain,(
  ~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0)))) | $spl5),
  inference(subsumption_resolution,[],[f4815,f174])).
fof(f4815,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0))))),
  inference(superposition,[],[f4386,f470])).
fof(f470,plain,(
  s(bool,'F_0') = s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))),
  inference(resolution,[],[f103,f115])).
fof(f115,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X7] : (s(bool,'F_0') = s(bool,X7) <=> ~p(s(bool,X7)))),
  file('thm.inferProps.tenv_alpha_convert','thm.bool.EQ_CLAUSES|split|3')).
fof(f103,plain,(
  ~p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),sK0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0'))))))),
  inference(cnf_transformation,[],[f69])).
fof(f4386,plain,(
  ( ! [X0] : (p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) | ~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))))) )),
  inference(subsumption_resolution,[],[f688,f109])).
fof(f109,plain,(
  ( ! [X0] : (p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) | ~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : (~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) | p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) => p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X16] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X16)))) => p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X16),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X16))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  file('thm.inferProps.tenv_alpha_convert','thm.inferProps.tenv_inv_convert_env2')).
fof(f688,plain,(
  ( ! [X0] : (~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) | p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) | ~p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0'))))))) )),
  inference(resolution,[],[f108,f152])).
fof(f152,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | ~p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1))))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | (p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) & p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))))) & (~p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | ~p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1))))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | (p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) & p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))))) & ((~p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) | ~p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1))))) | p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1))))))),
  inference(nnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : (p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) <=> (p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1)))) & p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val',X1))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X17] : (p(s(bool,'const.inferProps.tenv_alpha_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6),s('type.typeSystem.tenv_val',X17)))) <=> (p(s(bool,'const.inferProps.tenv_inv_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6),s('type.typeSystem.tenv_val',X17)))) & p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X6),s('type.typeSystem.tenv_val',X17))))))),
  file('thm.inferProps.tenv_alpha_convert','thm.inferProps.tenv_alpha_def')).
fof(f108,plain,(
  ( ! [X0] : (p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))) | ~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : (~p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) | p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(ennf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0)))) => p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X0))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X16] : (p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X16)))) => p(s(bool,'const.inferProps.tenv_invC_3'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X16),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),'const.inferProps.convert_env2_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),X16))),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0')))))))),
  file('thm.inferProps.tenv_alpha_convert','thm.inferProps.tenv_invC_convert_env2')).
% SZS output end Proof for thm.inferProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 99
% Passive clauses: 705
% Generated clauses: 4623
% Final active clauses: 91
% Final passive clauses: 510
% Input formulas: 26
% Initial clauses: 66
% 
% Duplicate literals: 284
% Trivial inequalities: 93
% Fw subsumption resolutions: 736
% Fw demodulations: 507
% Bw demodulations: 4
% 
% Simple tautologies: 167
% Equational tautologies: 16
% Forward subsumptions: 1814
% 
% Binary resolution: 317
% Forward superposition: 1645
% Backward superposition: 824
% Self superposition: 37
% Equality factoring: 28
% Equality resolution: 18
% 
% Split clauses: 171
% Split components: 350
% SAT solver clauses: 398
% SAT solver unit clauses: 14
% SAT solver binary clauses: 72
% SAT solver learnt clauses: 1
% 
% Sat splits: 171
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 393
% TWLsolver calls for satisfiability: 129
% 
% Memory used [KB]: 2814
% Time elapsed: 0.225 s
% ------------------------------
% ------------------------------
% Success in time 0.24 s
