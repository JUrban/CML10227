Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% (96816)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 764
% Passive clauses: 8470
% Generated clauses: 20407
% Final active clauses: 706
% Final passive clauses: 7165
% Input formulas: 40
% Initial clauses: 161
% 
% Duplicate literals: 568
% Trivial inequalities: 140
% Fw subsumption resolutions: 2115
% Fw demodulations: 355
% Bw demodulations: 57
% 
% Simple tautologies: 230
% Equational tautologies: 60
% Forward subsumptions: 7698
% 
% Binary resolution: 9825
% Factoring: 1358
% Forward superposition: 3133
% Backward superposition: 2312
% Self superposition: 30
% Equality factoring: 28
% Equality resolution: 39
% 
% Split clauses: 786
% Split components: 1578
% SAT solver clauses: 1266
% SAT solver unit clauses: 17
% SAT solver binary clauses: 149
% 
% Sat splits: 786
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1264
% TWLsolver calls for satisfiability: 478
% 
% Memory used [KB]: 10234
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closProps
% (96844)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 414
% Passive clauses: 2079
% Generated clauses: 10081
% Final active clauses: 404
% Final passive clauses: 1653
% Input formulas: 40
% Initial clauses: 161
% 
% Duplicate literals: 216
% Trivial inequalities: 17
% Fw subsumption resolutions: 924
% Fw demodulations: 199
% Bw demodulations: 17
% Condensations: 445
% Global subsumptions: 13
% 
% Simple tautologies: 233
% Equational tautologies: 17
% Forward subsumptions: 3498
% 
% Binary resolution: 3392
% Factoring: 375
% Forward superposition: 1232
% Backward superposition: 949
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 86
% Split components: 177
% SAT solver clauses: 2601
% SAT solver unit clauses: 174
% SAT solver binary clauses: 78
% SAT solver learnt clauses: 26
% SAT solver learnt literals: 10
% 
% Sat splits: 86
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2549
% TWLsolver calls for satisfiability: 1674
% 
% Memory used [KB]: 12153
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.closProps
% (96863)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 2184
% Passive clauses: 11138
% Generated clauses: 193858
% Final active clauses: 1240
% Final passive clauses: 2812
% Input formulas: 40
% Initial clauses: 161
% 
% Duplicate literals: 10148
% Trivial inequalities: 135
% Fw subsumption resolutions: 7519
% Fw demodulations: 19454
% Bw demodulations: 4208
% Condensations: 29020
% Global subsumptions: 1391
% 
% Simple tautologies: 158
% Equational tautologies: 1386
% Forward subsumptions: 109608
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 166
% 
% Unit resulting resolution: 28880
% Forward superposition: 44517
% Backward superposition: 43596
% Self superposition: 227
% Equality factoring: 167
% Equality resolution: 5
% 
% Split clauses: 778
% Split components: 1583
% SAT solver clauses: 16680
% SAT solver unit clauses: 2535
% SAT solver binary clauses: 3746
% 
% Sat splits: 778
% Sat splitting refutations: 2592
% 
% Memory used [KB]: 154922
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f482,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f210,f367,f209,f369,f365,f476,f481,f368,f366])).
fof(f366,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))) | $spl2),
  inference(cnf_transformation,[],[f366_D])).
fof(f366_D,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f368,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) | $spl5),
  inference(cnf_transformation,[],[f368_D])).
fof(f368_D,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f481,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) | s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))),
  inference(forward_demodulation,[],[f480,f359])).
fof(f359,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X21] : ! [X15,X22] : s(X21,X22) = s(X21,'const.pair.SND_1'(s('type.pair.prod'(X6,X21),'const.pair.,_2'(s(X6,X15),s(X21,X22)))))),
  file('thm.closProps.closProps_|49|4|48|_prove_ltb','thm.pair.SND')).
fof(f480,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14)))))))))))) | s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))),
  inference(forward_demodulation,[],[f479,f359])).
fof(f479,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))))))))),
  inference(forward_demodulation,[],[f478,f359])).
fof(f478,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))))))))),
  inference(forward_demodulation,[],[f477,f359])).
fof(f477,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK12),sK13))))))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))))))))),
  inference(forward_demodulation,[],[f470,f359])).
fof(f470,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK12),sK13))))))) = s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))))))))),
  inference(superposition,[],[f212,f208])).
fof(f208,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK12),sK13))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14)))))))),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK12),sK13))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) & s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f100])).
fof(f100,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X3),s('type.closSem.state'(X0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X5),s('type.closSem.state'(X0),X2))))))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2)))))))) & s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))))))),
  inference(ennf_transformation,[],[f43])).
fof(f43,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X3),s('type.closSem.state'(X0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X5),s('type.closSem.state'(X0),X2))))))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2)))))))) => s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X3),s('type.closSem.state'(X0),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X4),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X5),s('type.closSem.state'(X0),X2))))))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2)))))))) => s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X9),s('type.closSem.state'(X6),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X10),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X6),X8))))))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X8))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X7)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X8)))))))) => s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X9),s('type.closSem.state'(X6),X7))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X10),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X11),s('type.closSem.state'(X6),X8))))))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X8))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X7)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X8)))))))) => s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.closSem.state_ffi_1'(s('type.closSem.state'(X6),X8))))))),
  file('thm.closProps.closProps_|49|4|48|_prove_ltb','thm.closProps.closProps_|49|4|48|_prove_ltb')).
fof(f212,plain,(
  ( ! [X0,X1] : (s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))))))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1)))))))))))) | s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1)))))))))))) => s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1)))))))))))) => s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))) = s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X16] : ! [X17] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16))),X17)))))))))))) => s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16))),X17))))))) = s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X16)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16))),X17))))))))),
  file('thm.closProps.closProps_|49|4|48|_prove_ltb','thm.closProps.evaluate_io_events_mono|split|1')).
fof(f476,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f475,f365])).
fof(f475,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))))))))),
  inference(forward_demodulation,[],[f474,f359])).
fof(f474,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))))))))),
  inference(forward_demodulation,[],[f473,f359])).
fof(f473,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))))))))),
  inference(forward_demodulation,[],[f469,f359])).
fof(f469,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK16),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK17),s('type.closSem.state'(sK12),sK14))))))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK12)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK15),s('type.closSem.state'(sK12),sK13))))))))))))),
  inference(superposition,[],[f357,f208])).
fof(f357,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))))))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ! [X0] : ! [X1] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.closSem.state_ffi_1'(s('type.closSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))))))))))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X16] : ! [X17] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16)),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16))),X17))))))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X16),'const.closSem.state_ffi_1'(s('type.closSem.state'(X16),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X16)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X16))),X17))))))))))))),
  file('thm.closProps.closProps_|49|4|48|_prove_ltb','thm.closProps.evaluate_io_events_mono|split|0')).
fof(f365,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13)))))))) | $spl1),
  inference(cnf_transformation,[],[f365_D])).
fof(f365_D,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f369,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) | $spl4),
  inference(cnf_transformation,[],[f369_D])).
fof(f369_D,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f209,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14)))))))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))))))))),
  inference(cnf_transformation,[],[f144])).
fof(f367,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))) | $spl3),
  inference(cnf_transformation,[],[f367_D])).
fof(f367_D,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f210,plain,(
  s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK14))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.closSem.state_ffi_1'(s('type.closSem.state'(sK12),sK13))))))))),
  inference(cnf_transformation,[],[f144])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 121
% Passive clauses: 84
% Generated clauses: 121
% Final active clauses: 120
% Final passive clauses: 4
% Input formulas: 40
% Initial clauses: 152
% 
% Selected by SInE selection: 37
% SInE iterations: 1
% 
% Duplicate literals: 4
% Fw subsumption resolutions: 10
% Fw demodulations: 8
% 
% Simple tautologies: 30
% Forward subsumptions: 14
% 
% Binary resolution: 80
% Forward superposition: 10
% Backward superposition: 4
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 5
% SAT solver unit clauses: 1
% SAT solver binary clauses: 3
% 
% Sat splits: 3
% Sat splitting refutations: 1
% 
% Memory used [KB]: 1151
% Time elapsed: 0.005 s
% ------------------------------
% ------------------------------
% Success in time 11.736 s
