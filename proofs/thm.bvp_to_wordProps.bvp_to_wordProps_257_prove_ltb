Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (88554)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 111
% Passive clauses: 1507
% Generated clauses: 15188
% Final active clauses: 89
% Final passive clauses: 1295
% Input formulas: 13
% Initial clauses: 19
% 
% Duplicate literals: 943
% Trivial inequalities: 206
% Fw subsumption resolutions: 2286
% Fw demodulations: 1474
% Bw demodulations: 17
% 
% Simple tautologies: 358
% Equational tautologies: 59
% Forward subsumptions: 7071
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 161
% Forward superposition: 4561
% Backward superposition: 4996
% Self superposition: 195
% Equality factoring: 161
% Equality resolution: 17
% 
% Split clauses: 873
% Split components: 1807
% SAT solver clauses: 1344
% SAT solver unit clauses: 39
% SAT solver binary clauses: 223
% 
% Sat splits: 873
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1341
% TWLsolver calls for satisfiability: 123
% 
% Memory used [KB]: 7291
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f963,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f962,f42,f63,f603,f604,f43,f65,f58,f75,f127,f129,f48,f69,f55,f73])).
fof(f73,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))) ) | $spl16),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f55,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X8] : p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_257_prove_ltb','thm.bvp_to_wordProps.aligned_pow')).
fof(f69,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f48,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_257_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f129,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))) ) | $spl40),
  inference(cnf_transformation,[],[f129_D])).
fof(f129_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f127,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))) ) | ($spl8 | $spl16)),
  inference(resolution,[],[f73,f69])).
fof(f75,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X3)))) | s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3)))))) ) | $spl20),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X3)))) | s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3)))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f58,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3))))) | ~p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X3))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X3)))) | (s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3))))) & s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_sub_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X3)))) => (s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3))))) & s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_sub_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X3)))) => (s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3))))) & s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X1),s('type.fcp.cart'(bool,X0),'const.words.word_sub_2'(s('type.fcp.cart'(bool,X0),X2),s('type.fcp.cart'(bool,X0),X3)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9,X10,X11] : (p(s(bool,'const.alignment.aligned_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X11)))) => (s(bool,'const.alignment.aligned_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X10),s('type.fcp.cart'(bool,X6),X11))))) & s(bool,'const.alignment.aligned_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),X10))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X9),s('type.fcp.cart'(bool,X6),'const.words.word_sub_2'(s('type.fcp.cart'(bool,X6),X10),s('type.fcp.cart'(bool,X6),X11)))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_257_prove_ltb','thm.alignment.aligned_add_sub')).
fof(f65,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f43,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_257_prove_ltb',aHL_TRUTH)).
fof(f604,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X2),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))))) ) | $spl106),
  inference(cnf_transformation,[],[f604_D])).
fof(f604_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X2),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f603,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X2),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))))) ) | ($spl2 | $spl20 | $spl40)),
  inference(subsumption_resolution,[],[f582,f65])).
fof(f582,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),X2))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X0),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X2),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))))) ) | ($spl20 | $spl40)),
  inference(superposition,[],[f75,f129])).
fof(f63,plain,(
  s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),sK1))) != s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK0),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2))))))))) | $spl1),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),sK1))) != s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK0),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f42,plain,(
  s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),sK1))) != s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK0),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))))))))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),sK1))) != s(bool,'const.alignment.aligned_2'(s('type.num.num',sK2),s('type.fcp.cart'(bool,sK0),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK0),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f32])).
fof(f32,plain,(
  ? [X0,X1,X2] : s(bool,'const.alignment.aligned_2'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),X1))) != s(bool,'const.alignment.aligned_2'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1,X2] : s(bool,'const.alignment.aligned_2'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),X1))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'const.alignment.aligned_2'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),X1))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X2),s('type.fcp.cart'(bool,X0),'const.words.word_add_2'(s('type.fcp.cart'(bool,X0),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'const.alignment.aligned_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),X7))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X7),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'const.alignment.aligned_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),X7))) = s(bool,'const.alignment.aligned_2'(s('type.num.num',X8),s('type.fcp.cart'(bool,X6),'const.words.word_add_2'(s('type.fcp.cart'(bool,X6),X7),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_257_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_257_prove_ltb')).
fof(f962,plain,(
  $false | ($spl1 | $spl106)),
  inference(subsumption_resolution,[],[f63,f604])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 35
% Passive clauses: 91
% Generated clauses: 921
% Final active clauses: 27
% Final passive clauses: 47
% Input formulas: 13
% Initial clauses: 19
% 
% Duplicate literals: 83
% Trivial inequalities: 21
% Fw subsumption resolutions: 50
% Fw demodulations: 35
% Bw demodulations: 12
% Condensations: 82
% 
% Simple tautologies: 31
% Equational tautologies: 17
% Forward subsumptions: 289
% 
% Binary resolution: 17
% Forward superposition: 178
% Backward superposition: 242
% Self superposition: 24
% Equality factoring: 28
% Equality resolution: 3
% 
% Split clauses: 22
% Split components: 49
% SAT solver clauses: 186
% SAT solver unit clauses: 24
% SAT solver binary clauses: 20
% SAT solver learnt clauses: 1
% 
% Sat splits: 22
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 185
% TWLsolver calls for satisfiability: 91
% 
% Memory used [KB]: 1535
% Time elapsed: 0.031 s
% ------------------------------
% ------------------------------
% Success in time 0.66 s
