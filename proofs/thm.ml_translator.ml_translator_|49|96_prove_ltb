Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (119968)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 154
% Passive clauses: 1859
% Generated clauses: 17442
% Final active clauses: 133
% Final passive clauses: 1445
% Input formulas: 33
% Initial clauses: 86
% 
% Duplicate literals: 865
% Trivial inequalities: 371
% Fw subsumption resolutions: 2496
% Fw demodulations: 1867
% Bw demodulations: 18
% 
% Simple tautologies: 450
% Equational tautologies: 61
% Forward subsumptions: 7034
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 299
% Forward superposition: 4394
% Backward superposition: 6416
% Self superposition: 243
% Equality factoring: 157
% Equality resolution: 46
% 
% Split clauses: 1170
% Split components: 2435
% SAT solver clauses: 1793
% SAT solver unit clauses: 30
% SAT solver binary clauses: 231
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 2
% 
% Sat splits: 1170
% Sat splitting refutations: 14
% 
% TWLsolver clauses: 1788
% TWLsolver calls for satisfiability: 218
% 
% Memory used [KB]: 8699
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f1253,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1251,f133,f243,f241,f239,f276,f237,f1238,f1248,f197,f269,f1080,f1081,f134,f249,f278,f283,f131,f247,f139,f253,f1029,f1030,f199,f271,f277,f281,f132,f245])).
fof(f245,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | $spl8),
  inference(cnf_transformation,[],[f245_D])).
fof(f245_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f132,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) & (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f72])).
fof(f72,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) & (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) => (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) => (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) => (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6)))))))),
  file('thm.ml_translator.ml_translator_|49|96_prove_ltb','thm.ml_translator.ml_translator_|49|96_prove_ltb')).
fof(f281,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | $spl40),
  inference(cnf_transformation,[],[f281_D])).
fof(f281_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f277,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl8 | $spl18)),
  inference(resolution,[],[f253,f245])).
fof(f271,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) ) | $spl30),
  inference(cnf_transformation,[],[f271_D])).
fof(f271_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f199,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) => s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))) => s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))))),
  file('thm.ml_translator.ml_translator_|49|96_prove_ltb','thm.arithmetic.MOD_COMMON_FACTOR')).
fof(f1030,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK2)))))) ) | $spl156),
  inference(cnf_transformation,[],[f1030_D])).
fof(f1030_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK2)))))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f1029,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK2)))))) ) | ($spl12 | $spl30 | $spl40)),
  inference(subsumption_resolution,[],[f993,f249])).
fof(f993,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK2)))))) ) | ($spl30 | $spl40)),
  inference(superposition,[],[f271,f281])).
fof(f253,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f139,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.ml_translator.ml_translator_|49|96_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f247,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | $spl10),
  inference(cnf_transformation,[],[f247_D])).
fof(f247_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f131,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f85])).
fof(f283,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | $spl42),
  inference(cnf_transformation,[],[f283_D])).
fof(f283_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f278,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | ($spl10 | $spl18)),
  inference(resolution,[],[f253,f247])).
fof(f249,plain,(
  p(s(bool,'T_0')) | $spl12),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f134,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.ml_translator.ml_translator_|49|96_prove_ltb',aHL_TRUTH)).
fof(f1081,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) ) | $spl186),
  inference(cnf_transformation,[],[f1081_D])).
fof(f1081_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f1080,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) ) | ($spl12 | $spl42 | $spl156)),
  inference(subsumption_resolution,[],[f1057,f249])).
fof(f1057,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) ) | ($spl42 | $spl156)),
  inference(superposition,[],[f1030,f283])).
fof(f269,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl26),
  inference(cnf_transformation,[],[f269_D])).
fof(f269_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f197,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X6] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X6)))),
  file('thm.ml_translator.ml_translator_|49|96_prove_ltb','thm.arithmetic.MULT_SYM')).
fof(f1248,plain,(
  $false | ($spl3 | $spl26 | $spl186)),
  inference(subsumption_resolution,[],[f1247,f1081])).
fof(f1247,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | ($spl3 | $spl26)),
  inference(forward_demodulation,[],[f239,f269])).
fof(f1238,plain,(
  $false | ($spl1 | $spl186)),
  inference(trivial_inequality_removal,[],[f1214])).
fof(f1214,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | ($spl1 | $spl186)),
  inference(superposition,[],[f237,f1081])).
fof(f237,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | $spl1),
  inference(cnf_transformation,[],[f237_D])).
fof(f237_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f276,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | ($spl5 | $spl26)),
  inference(forward_demodulation,[],[f241,f269])).
fof(f239,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | $spl3),
  inference(cnf_transformation,[],[f239_D])).
fof(f239_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f241,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | $spl5),
  inference(cnf_transformation,[],[f241_D])).
fof(f241_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f243,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | $spl7),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f133,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))),
  inference(cnf_transformation,[],[f85])).
fof(f1251,plain,(
  $false | ($spl7 | $spl26 | $spl186)),
  inference(subsumption_resolution,[],[f1250,f1081])).
fof(f1250,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | ($spl7 | $spl26)),
  inference(forward_demodulation,[],[f1249,f269])).
fof(f1249,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | ($spl7 | $spl26)),
  inference(forward_demodulation,[],[f243,f269])).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 36
% Passive clauses: 110
% Generated clauses: 1104
% Final active clauses: 33
% Final passive clauses: 74
% Input formulas: 33
% Initial clauses: 86
% 
% Duplicate literals: 61
% Trivial inequalities: 14
% Fw subsumption resolutions: 47
% Fw demodulations: 30
% Bw demodulations: 2
% Condensations: 75
% Global subsumptions: 12
% 
% Simple tautologies: 81
% Equational tautologies: 19
% Forward subsumptions: 380
% 
% Binary resolution: 28
% Factoring: 1
% Forward superposition: 293
% Backward superposition: 228
% Self superposition: 52
% Equality factoring: 26
% Equality resolution: 9
% 
% Split clauses: 23
% Split components: 48
% SAT solver clauses: 344
% SAT solver unit clauses: 90
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 25
% 
% Sat splits: 23
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 295
% TWLsolver calls for satisfiability: 296
% 
% Memory used [KB]: 1791
% Time elapsed: 0.085 s
% ------------------------------
% ------------------------------
% Success in time 0.69 s
