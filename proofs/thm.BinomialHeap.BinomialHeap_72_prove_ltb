Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f1835,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1834])).
fof(f1834,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),sK8)),
  inference(superposition,[],[f133,f132])).
fof(f132,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',sK11),s(sK7,sK12),s('type.list.list'('type.BinomialHeap.tree'(sK7)),sK13))),s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',sK14),s(sK7,sK15),s('type.list.list'('type.BinomialHeap.tree'(sK7)),sK16)))))))))),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',sK11),s(sK7,sK12),s('type.list.list'('type.BinomialHeap.tree'(sK7)),sK13))),s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',sK14),s(sK7,sK15),s('type.list.list'('type.BinomialHeap.tree'(sK7)),sK16))))))))) & ! [X3,X4,X5,X6,X7,X8,X9,X10] : s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X3),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X4),s('type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK7,X6),s('type.list.list'('type.BinomialHeap.tree'(sK7)),X7))),s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(sK7,X9),s('type.list.list'('type.BinomialHeap.tree'(sK7)),X10)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16])],[f89])).
fof(f89,plain,(
  ? [X0,X1,X2] : (? [X11,X12,X13,X14,X15,X16,X17,X18] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X1,X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),X15))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18))))))))) & ! [X3,X4,X5,X6,X7,X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X1,X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),X10))))))))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : (? [X3,X4,X5,X6,X7,X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X1,X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),X10))))))))) & ! [X11,X12,X13,X14,X15,X16,X17,X18] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X1,X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),X15))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18))))))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : (? [X3,X4,X5,X6,X7,X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X1,X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),X10))))))))) => ? [X11,X12,X13,X14,X15,X16,X17,X18] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X1,X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),X15))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18))))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : ! [X2] : (? [X3,X4,X5,X6,X7,X8,X9,X10] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(X1,X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),X10))))))))) => ? [X11,X12,X13,X14,X15,X16,X17,X18] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X11),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.BinomialHeap.tree'(X1),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X1,X14),s('type.list.list'('type.BinomialHeap.tree'(X1)),X15))),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : (? [X9,X10,X11,X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X7,X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),X13))),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(X7,X15),s('type.list.list'('type.BinomialHeap.tree'(X7)),X16))))))))) => ? [X9,X10,X11,X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X7,X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),X13))),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(X7,X15),s('type.list.list'('type.BinomialHeap.tree'(X7)),X16))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : (? [X9,X10,X11,X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X7,X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),X13))),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(X7,X15),s('type.list.list'('type.BinomialHeap.tree'(X7)),X16))))))))) => ? [X9,X10,X11,X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.pair.prod'('type.BinomialHeap.tree'(X7),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X11),s(X7,X12),s('type.list.list'('type.BinomialHeap.tree'(X7)),X13))),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X14),s(X7,X15),s('type.list.list'('type.BinomialHeap.tree'(X7)),X16))))))))))),
  file('thm.BinomialHeap.BinomialHeap_72_prove_ltb','thm.BinomialHeap.BinomialHeap_72_prove_ltb')).
fof(f133,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X3,X9] : (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)))),'const.pair.,_2'(s(fun(sK7,sK6),X3),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7))),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X4),s('type.pair.prod'('type.BinomialHeap.tree'(sK7),'type.BinomialHeap.tree'(sK7)),'const.pair.,_2'(s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK7,X6),s('type.list.list'('type.BinomialHeap.tree'(sK7)),X7))),s('type.BinomialHeap.tree'(sK7),'const.BinomialHeap.Node_3'(s('type.num.num',X8),s(sK7,X9),s('type.list.list'('type.BinomialHeap.tree'(sK7)),X10)))))))))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 170
% Passive clauses: 595
% Generated clauses: 1698
% Final active clauses: 170
% Final passive clauses: 369
% Input formulas: 26
% Initial clauses: 92
% 
% Duplicate literals: 37
% Trivial inequalities: 14
% Fw subsumption resolutions: 126
% 
% Simple tautologies: 58
% Equational tautologies: 11
% Forward subsumptions: 836
% 
% Binary resolution: 1071
% Factoring: 200
% Forward superposition: 79
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 42
% Split components: 85
% SAT solver clauses: 76
% SAT solver unit clauses: 6
% SAT solver binary clauses: 29
% 
% Sat splits: 42
% 
% TWLsolver clauses: 76
% TWLsolver calls for satisfiability: 58
% 
% Memory used [KB]: 1279
% Time elapsed: 0.041 s
% ------------------------------
% ------------------------------
% Success in time 0.05 s
