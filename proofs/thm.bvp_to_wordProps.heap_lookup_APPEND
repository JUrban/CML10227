Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (146975)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 348
% Passive clauses: 4122
% Generated clauses: 33060
% Final active clauses: 217
% Final passive clauses: 3402
% Input formulas: 87
% Initial clauses: 122
% 
% Duplicate literals: 909
% Trivial inequalities: 236
% Fw subsumption resolutions: 1757
% Fw demodulations: 5210
% Bw demodulations: 99
% 
% Simple tautologies: 314
% Equational tautologies: 50
% Forward subsumptions: 20202
% Fw demodulations to eq. taut.: 22
% 
% Binary resolution: 325
% Factoring: 1
% Forward superposition: 13365
% Backward superposition: 10617
% Self superposition: 158
% Equality factoring: 86
% Equality resolution: 28
% 
% Split clauses: 187
% Split components: 374
% SAT solver clauses: 507
% SAT solver unit clauses: 7
% SAT solver binary clauses: 161
% 
% Sat splits: 187
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 505
% TWLsolver calls for satisfiability: 119
% 
% Memory used [KB]: 17014
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% (147007)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 237
% Passive clauses: 2098
% Generated clauses: 27162
% Final active clauses: 109
% Final passive clauses: 662
% Input formulas: 87
% Initial clauses: 122
% 
% Duplicate literals: 673
% Trivial inequalities: 373
% Fw subsumption resolutions: 1544
% Fw demodulations: 4724
% Bw demodulations: 1242
% Condensations: 742
% Global subsumptions: 7
% 
% Simple tautologies: 301
% Equational tautologies: 48
% Forward subsumptions: 14405
% Fw demodulations to eq. taut.: 25
% Bw demodulations to eq. taut.: 60
% 
% Binary resolution: 312
% Factoring: 3
% Forward superposition: 8771
% Backward superposition: 6096
% Self superposition: 140
% Equality factoring: 82
% Equality resolution: 25
% 
% Split clauses: 59
% Split components: 118
% SAT solver clauses: 2101
% SAT solver unit clauses: 177
% SAT solver binary clauses: 50
% SAT solver learnt clauses: 14
% SAT solver learnt literals: 2
% 
% Sat splits: 59
% Sat splitting refutations: 85
% 
% TWLsolver clauses: 2073
% TWLsolver calls for satisfiability: 431
% 
% Memory used [KB]: 17782
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvp_to_wordProps
% (147043)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 946
% Passive clauses: 13051
% Generated clauses: 217066
% Final active clauses: 107
% Final passive clauses: 661
% Input formulas: 87
% Initial clauses: 122
% Discarded non-redundant clauses: 10578
% 
% Duplicate literals: 2089
% Trivial inequalities: 620
% Fw subsumption resolutions: 7014
% Fw demodulations: 63083
% Bw demodulations: 4901
% Condensations: 2261
% Global subsumptions: 981
% 
% Simple tautologies: 566
% Equational tautologies: 1180
% Forward subsumptions: 123536
% Fw demodulations to eq. taut.: 730
% Bw demodulations to eq. taut.: 71
% 
% Unit resulting resolution: 22090
% Factoring: 7
% Forward superposition: 68940
% Backward superposition: 39844
% Self superposition: 313
% Equality factoring: 130
% Equality resolution: 28
% 
% Split clauses: 77
% Split components: 163
% SAT solver clauses: 15677
% SAT solver unit clauses: 3110
% SAT solver binary clauses: 7771
% 
% Sat splits: 77
% Sat splitting refutations: 1488
% 
% Memory used [KB]: 208269
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f654,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f262,f263,f289,f264,f265,f290,f287,f291,f294,f295,f293,f288,f300,f304,f302,f273,f308,f306,f274,f275,f312,f310,f278,f279,f316,f282,f283,f320,f286,f324,f322,f333,f334,f340,f365,f366,f342,f372,f406,f407,f426,f314,f481,f532,f533,f546,f544,f603,f604,f614,f318,f615,f653])).
fof(f653,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f297,f288])).
fof(f297,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(subsumption_resolution,[],[f296,f198])).
fof(f198,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) | s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(ennf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X6,X7] : ! [X9,X19,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9)))))) => s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X19),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X19),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))))))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb')).
fof(f296,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(forward_demodulation,[],[f270,f193])).
fof(f193,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6] : ! [X14,X15] : s(X6,X14) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X14),s(X6,X15)))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.COND_CLAUSES|split|0')).
fof(f270,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(superposition,[],[f184,f240])).
fof(f240,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f178])).
fof(f178,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X16] : (s(bool,'T_0') = s(bool,X16) <=> p(s(bool,X16)))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.EQ_CLAUSES|split|1')).
fof(f184,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2)))))),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f145])).
fof(f145,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X4),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))) != s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))))),s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X4),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))),s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))),
  inference(ennf_transformation,[],[f90])).
fof(f90,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X4),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))))),s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X4),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))),s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X4),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))))),s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X4),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))),s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X3))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X10),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))))),s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X10),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))),s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))))),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X10),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))))),s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X10),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))),s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))))),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8)))))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bvp_to_wordProps.heap_lookup_APPEND')).
fof(f615,plain,(
  $false | ($spl7 | $spl28)),
  inference(subsumption_resolution,[],[f612,f321])).
fof(f321,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4)))) | $spl28),
  inference(cnf_transformation,[],[f321_D])).
fof(f321_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4)))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f612,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4)))) | $spl7),
  inference(trivial_inequality_removal,[],[f607])).
fof(f607,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4)))) | $spl7),
  inference(superposition,[],[f293,f194])).
fof(f194,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))),s('type.num.num',X3))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))),s('type.num.num',X3)))) | s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(ennf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))),s('type.num.num',X3)))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))),s('type.num.num',X3)))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6,X7] : ! [X9,X19,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))),s('type.num.num',X19)))) => s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9))))),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X19),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))))))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bvp_to_wordProps.bvp_to_wordProps_86_prove_ltb')).
fof(f318,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))) | $spl25),
  inference(cnf_transformation,[],[f318_D])).
fof(f318_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f614,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl45),
  inference(cnf_transformation,[],[f614_D])).
fof(f614_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f604,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))) | $spl7),
  inference(superposition,[],[f293,f257])).
fof(f257,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X12))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.numeral.numeral_distrib|split|18')).
fof(f603,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))) | $spl7),
  inference(superposition,[],[f293,f259])).
fof(f259,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X12))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.numeral.numeral_distrib|split|17')).
fof(f544,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X12)) ) | $spl40),
  inference(cnf_transformation,[],[f544_D])).
fof(f544_D,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X12)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f546,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) | $spl43),
  inference(cnf_transformation,[],[f546_D])).
fof(f546_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f533,plain,(
  ( ! [X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X13)) ) | $spl17),
  inference(superposition,[],[f331,f258])).
fof(f258,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f182])).
fof(f331,plain,(
  ( ! [X0] : (s('type.num.num',sK4) != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl17),
  inference(superposition,[],[f310,f186])).
fof(f186,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X12,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num',X11) = s('type.num.num',X12))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.numeral.numeral_distrib|split|19')).
fof(f532,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X12)) ) | $spl17),
  inference(superposition,[],[f331,f260])).
fof(f260,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f183])).
fof(f481,plain,(
  $false | ($spl1 | $spl29)),
  inference(subsumption_resolution,[],[f449,f287])).
fof(f449,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) | $spl29),
  inference(resolution,[],[f322,f199])).
fof(f199,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X11,X12] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X11)))))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.arithmetic.NOT_LESS')).
fof(f314,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) | $spl21),
  inference(cnf_transformation,[],[f314_D])).
fof(f314_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f426,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl39),
  inference(cnf_transformation,[],[f426_D])).
fof(f426_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f407,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) | $spl1),
  inference(superposition,[],[f287,f257])).
fof(f406,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) | $spl1),
  inference(superposition,[],[f287,f259])).
fof(f372,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))))) | $spl37),
  inference(cnf_transformation,[],[f372_D])).
fof(f372_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f342,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl35),
  inference(cnf_transformation,[],[f342_D])).
fof(f342_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f366,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))))) | $spl33),
  inference(superposition,[],[f340,f257])).
fof(f365,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))))) | $spl33),
  inference(superposition,[],[f340,f259])).
fof(f340,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))) | $spl33),
  inference(cnf_transformation,[],[f340_D])).
fof(f340_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f334,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))) | $spl17),
  inference(superposition,[],[f310,f257])).
fof(f333,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))))) | $spl17),
  inference(superposition,[],[f310,f259])).
fof(f322,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4)))) | $spl29),
  inference(cnf_transformation,[],[f322_D])).
fof(f322_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4)))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f324,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))))) | $spl31),
  inference(cnf_transformation,[],[f324_D])).
fof(f324_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f286,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.num.num',sK4))))),
  inference(superposition,[],[f184,f194])).
fof(f320,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl27),
  inference(cnf_transformation,[],[f320_D])).
fof(f320_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f283,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))))),
  inference(superposition,[],[f184,f257])).
fof(f282,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))))),
  inference(superposition,[],[f184,f259])).
fof(f316,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl23),
  inference(cnf_transformation,[],[f316_D])).
fof(f316_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f279,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))),
  inference(superposition,[],[f184,f257])).
fof(f278,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))),
  inference(superposition,[],[f184,f259])).
fof(f310,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))) | $spl17),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f312,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl19),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f275,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4)))),
  inference(superposition,[],[f184,f257])).
fof(f274,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK4)))),
  inference(superposition,[],[f184,f259])).
fof(f306,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) | $spl12),
  inference(cnf_transformation,[],[f306_D])).
fof(f306_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f308,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl15),
  inference(cnf_transformation,[],[f308_D])).
fof(f308_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f273,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))),
  inference(superposition,[],[f184,f244])).
fof(f244,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND',aHL_BOOL_CASES)).
fof(f302,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) | $spl8),
  inference(cnf_transformation,[],[f302_D])).
fof(f302_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f304,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl11),
  inference(cnf_transformation,[],[f304_D])).
fof(f304_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f300,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))),
  inference(forward_demodulation,[],[f272,f193])).
fof(f272,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))),
  inference(superposition,[],[f184,f244])).
fof(f288,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) | $spl0),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f293,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl7),
  inference(cnf_transformation,[],[f293_D])).
fof(f293_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f295,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(forward_demodulation,[],[f269,f192])).
fof(f192,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6] : ! [X14,X15] : s(X6,X15) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X14),s(X6,X15)))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.COND_CLAUSES|split|1')).
fof(f269,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(superposition,[],[f184,f238])).
fof(f238,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f129])).
fof(f129,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.EQ_CLAUSES|split|2')).
fof(f294,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(forward_demodulation,[],[f268,f192])).
fof(f268,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(superposition,[],[f184,f236])).
fof(f236,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.EQ_CLAUSES|split|3')).
fof(f291,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(forward_demodulation,[],[f266,f192])).
fof(f266,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))),
  inference(superposition,[],[f184,f232])).
fof(f232,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f175])).
fof(f175,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f174])).
fof(f174,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X16] : ((p(s(bool,X16)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X16))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.IMP_F_EQ_F')).
fof(f287,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) | $spl1),
  inference(cnf_transformation,[],[f287_D])).
fof(f287_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f290,plain,(
  ( ! [X2] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X2),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,X2))) ) | $spl4),
  inference(cnf_transformation,[],[f290_D])).
fof(f290_D,plain,(
  ( ! [X2] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X2),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,X2))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f265,plain,(
  ( ! [X3] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X3),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,X3)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))) )),
  inference(superposition,[],[f184,f190])).
fof(f190,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X14,X15] : ((p(s(bool,X14)) => p(s(bool,X15))) => ((p(s(bool,X15)) => p(s(bool,X14))) => s(bool,X14) = s(bool,X15)))),
  file('thm.bvp_to_wordProps.heap_lookup_APPEND','thm.bool.IMP_ANTISYM_AX')).
fof(f264,plain,(
  ( ! [X2] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X2),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) | ~p(s(bool,X2))) )),
  inference(superposition,[],[f184,f190])).
fof(f289,plain,(
  ( ! [X0] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X0),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,X0))) ) | $spl2),
  inference(cnf_transformation,[],[f289_D])).
fof(f289_D,plain,(
  ( ! [X0] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X0),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,X0))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f263,plain,(
  ( ! [X1] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X1),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3)))))) | p(s(bool,X1))) )),
  inference(superposition,[],[f184,f187])).
fof(f187,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f147])).
fof(f262,plain,(
  ( ! [X0] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.bool.COND_3'(s(bool,X0),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK4),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))),s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | p(s(bool,X0)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK3))))))) )),
  inference(superposition,[],[f184,f187])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 68
% Passive clauses: 147
% Generated clauses: 376
% Final active clauses: 65
% Final passive clauses: 91
% Input formulas: 87
% Initial clauses: 77
% 
% Selected by SInE selection: 45
% SInE iterations: 1
% 
% Duplicate literals: 15
% Trivial inequalities: 20
% Fw subsumption resolutions: 17
% Fw demodulations: 16
% 
% Simple tautologies: 35
% Equational tautologies: 1
% Forward subsumptions: 119
% 
% Binary resolution: 39
% Forward superposition: 241
% Equality resolution: 2
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 30
% SAT solver unit clauses: 1
% SAT solver binary clauses: 18
% 
% Sat splits: 26
% Sat splitting refutations: 3
% 
% Memory used [KB]: 1279
% Time elapsed: 0.012 s
% ------------------------------
% ------------------------------
% Success in time 11.769 s
