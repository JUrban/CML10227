Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordSem
% (9859)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 109
% Passive clauses: 1551
% Generated clauses: 11395
% Final active clauses: 58
% Final passive clauses: 727
% Input formulas: 6
% Initial clauses: 32
% 
% Duplicate literals: 869
% Trivial inequalities: 183
% Fw subsumption resolutions: 1116
% Fw demodulations: 597
% Bw demodulations: 20
% 
% Simple tautologies: 276
% Equational tautologies: 111
% Forward subsumptions: 4322
% Fw demodulations to eq. taut.: 12
% Bw demodulations to eq. taut.: 11
% 
% Binary resolution: 27
% Forward superposition: 4104
% Backward superposition: 3072
% Self superposition: 301
% Equality factoring: 256
% Equality resolution: 29
% 
% Split clauses: 1016
% Split components: 2101
% SAT solver clauses: 2203
% SAT solver unit clauses: 250
% SAT solver binary clauses: 696
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 4
% 
% Sat splits: 1016
% Sat splitting refutations: 19
% 
% TWLsolver clauses: 2179
% TWLsolver calls for satisfiability: 96
% 
% Memory used [KB]: 4221
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordSem
% (9880)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 55
% Passive clauses: 112
% Generated clauses: 4559
% Final active clauses: 51
% Final passive clauses: 53
% Input formulas: 6
% Initial clauses: 32
% 
% Duplicate literals: 784
% Trivial inequalities: 63
% Fw subsumption resolutions: 188
% Fw demodulations: 74
% Bw demodulations: 4
% Condensations: 1230
% 
% Simple tautologies: 103
% Equational tautologies: 73
% Forward subsumptions: 1454
% 
% Binary resolution: 9
% Forward superposition: 912
% Backward superposition: 828
% Self superposition: 180
% Equality factoring: 174
% Equality resolution: 19
% 
% Split clauses: 32
% Split components: 76
% SAT solver clauses: 321
% SAT solver unit clauses: 20
% SAT solver binary clauses: 107
% 
% Sat splits: 32
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 321
% TWLsolver calls for satisfiability: 894
% 
% Memory used [KB]: 3198
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f5216,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f36,f82,f80,f78,f76,f74,f72,f70,f68,f66,f64,f62,f60,f58,f56,f35,f81,f34,f79,f33,f77,f32,f75,f31,f73,f30,f71,f29,f69,f28,f67,f27,f65,f26,f63,f25,f61,f24,f59,f23,f57,f55,f85,f88,f94,f92,f90,f99,f102,f104,f106,f108,f110,f112,f114,f116,f118,f120,f122,f124,f2095,f2094,f2040,f2128,f2022,f2005,f2126,f2176,f2408,f2409,f2269,f97,f2421,f2453,f3729,f3763,f3711,f3766,f4781,f4701,f4682,f4824,f4541,f4956,f2127,f4958,f95,f4959,f5154,f5156,f5199,f5200,f5201,f5202,f5203,f5204,f5205,f5206,f5207,f5208,f5209,f5210,f5211,f5212,f5213,f5214,f5215])).
fof(f5215,plain,(
  $false | ($spl29 | $spl30 | $spl35 | $spl44)),
  inference(global_subsumption,[],[f91,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f1557,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f97,f355,f351,f353,f578,f614,f632,f652,f52,f54,f3763,f3839,f3827,f3878,f3873,f3870,f3865,f3862,f3859,f3856,f3848,f3774,f94])).
fof(f3774,plain,(
  s(bool,'F_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl44)),
  inference(unit_resulting_resolution,[],[f97,f3763])).
fof(f3848,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f3776])).
fof(f3776,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f3763,f39])).
fof(f3856,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(condensation,[],[f3855])).
fof(f3855,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(subsumption_resolution,[],[f3806,f39])).
fof(f3806,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(superposition,[],[f3763,f39])).
fof(f3859,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(condensation,[],[f3858])).
fof(f3858,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(condensation,[],[f3857])).
fof(f3857,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(subsumption_resolution,[],[f3808,f83])).
fof(f3808,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(superposition,[],[f3763,f83])).
fof(f3862,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(condensation,[],[f3861])).
fof(f3861,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(condensation,[],[f3860])).
fof(f3860,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X8)) ) | $spl44),
  inference(subsumption_resolution,[],[f3809,f83])).
fof(f3809,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X8)) ) | $spl44),
  inference(superposition,[],[f3763,f83])).
fof(f3865,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl44),
  inference(condensation,[],[f3864])).
fof(f3864,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl44),
  inference(condensation,[],[f3863])).
fof(f3863,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,X25) | s(bool,X26) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl44),
  inference(subsumption_resolution,[],[f3814,f83])).
fof(f3814,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X24) != s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X26) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl44),
  inference(superposition,[],[f3763,f164])).
fof(f3870,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(condensation,[],[f3869])).
fof(f3869,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(condensation,[],[f3868])).
fof(f3868,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f3867])).
fof(f3867,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl44),
  inference(condensation,[],[f3866])).
fof(f3866,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl44),
  inference(subsumption_resolution,[],[f3815,f164])).
fof(f3815,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X28) != s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl44),
  inference(superposition,[],[f3763,f164])).
fof(f3873,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl44),
  inference(condensation,[],[f3872])).
fof(f3872,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl44),
  inference(condensation,[],[f3871])).
fof(f3871,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X36)) ) | $spl44),
  inference(subsumption_resolution,[],[f3817,f83])).
fof(f3817,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X36) != s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X36)) ) | $spl44),
  inference(superposition,[],[f3763,f164])).
fof(f3878,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(condensation,[],[f3877])).
fof(f3877,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(condensation,[],[f3876])).
fof(f3876,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(duplicate_literal_removal,[],[f3875])).
fof(f3875,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(condensation,[],[f3874])).
fof(f3874,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X41) | s(bool,X40) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(subsumption_resolution,[],[f3818,f164])).
fof(f3818,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X40) != s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X40) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(superposition,[],[f3763,f164])).
fof(f3827,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(equality_resolution,[],[f3763])).
fof(f3839,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl44),
  inference(condensation,[],[f3838])).
fof(f3838,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X25) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f3785])).
fof(f3785,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X25) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X25) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl44),
  inference(superposition,[],[f3763,f164])).
fof(f54,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & ((s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))) | s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X9,X8] : (s('type.wordSem.state'(X6,X7),X8) = s('type.wordSem.state'(X6,X7),X9) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X9))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X8))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X9)))))),
  file('thm.wordSem.state_component_equality','thm.wordSem.wordSem_334_prove_ltb')).
fof(f52,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f652,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(bool,'T_0') != s(bool,f(s(X60,sK4(X61,X62,bool,X60)))) | s(fun(X60,bool),X61) = s(fun(X60,bool),X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,g(s(X60,sK4(X61,X62,bool,X60)))) | s(bool,X63) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f40,f164])).
fof(f632,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,X79) != s(bool,f(s(X76,sK4(X77,X78,bool,X76)))) | s(fun(X76,bool),X77) = s(fun(X76,bool),X78) | s(bool,X79) = s(bool,X80) | s(bool,'T_0') = s(bool,g(s(X76,sK4(X77,X78,bool,X76)))) | s(bool,X80) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f40,f164])).
fof(f614,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (s(bool,X82) != s(bool,f(s(X79,sK4(X80,X81,bool,X79)))) | s(fun(X79,bool),X80) = s(fun(X79,bool),X81) | s(bool,X83) = s(bool,g(s(X79,sK4(X80,X81,bool,X79)))) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f40,f164])).
fof(f578,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (s(bool,X82) != s(bool,f(s(X79,sK4(X80,X81,bool,X79)))) | s(fun(X79,bool),X80) = s(fun(X79,bool),X81) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,g(s(X79,sK4(X80,X81,bool,X79)))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f40,f164])).
fof(f353,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK4(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f40,f83])).
fof(f351,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f40,f83])).
fof(f355,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK4(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f40,f39])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f10])).
fof(f10,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.wordSem.state_component_equality',aHL_FALSITY)).
fof(f350,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,sK4(X16,X17,X18,bool)) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f40,f39])).
fof(f369,plain,(
  ( ! [X26,X24,X25] : (s(X26,f(s(bool,'T_0'))) != s(X26,g(s(bool,'T_0'))) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(X26,f(s(bool,'F_0'))) != s(X26,g(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f368])).
fof(f368,plain,(
  ( ! [X26,X24,X25] : (s(X26,f(s(bool,'T_0'))) != s(X26,g(s(bool,'T_0'))) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(X26,f(s(bool,'F_0'))) != s(X26,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f40,f350])).
fof(f1354,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK4(X2,X3,X4,bool)) | s(bool,X0) = s(bool,X1) | s(fun(bool,X4),X2) = s(fun(bool,X4),X3) | s(X4,f(s(bool,'F_0'))) != s(X4,g(s(bool,'F_0')))) )),
  inference(condensation,[],[f1353])).
fof(f1353,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,sK4(X114,X115,X116,bool)) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119) | s(fun(bool,X116),X114) = s(fun(bool,X116),X115) | s(X116,f(s(bool,'F_0'))) != s(X116,g(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f445])).
fof(f445,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,sK4(X114,X115,X116,bool)) | s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119) | s(fun(bool,X116),X114) = s(fun(bool,X116),X115) | s(X116,f(s(bool,'F_0'))) != s(X116,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f164,f350])).
fof(f789,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f788])).
fof(f788,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f164])).
fof(f747,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f164])).
fof(f1560,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f740,f83])).
fof(f740,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(equality_factoring,[],[f164])).
fof(f830,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f713])).
fof(f713,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(equality_factoring,[],[f164])).
fof(f651,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(X56,f(s(bool,'T_0'))) != s(X56,g(s(bool,'T_0'))) | s(fun(bool,X56),X54) = s(fun(bool,X56),X55) | s(bool,X57) = s(bool,X58) | s(bool,X58) = s(bool,sK4(X54,X55,X56,bool)) | s(bool,X57) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f40,f164])).
fof(f635,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,X13)) | s(bool,X14) = s(bool,X15) | s(bool,X13) = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f37,f164])).
fof(f631,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(X72,f(s(bool,X73))) != s(X72,g(s(bool,X73))) | s(fun(bool,X72),X70) = s(fun(bool,X72),X71) | s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,sK4(X70,X71,X72,bool)) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f40,f164])).
fof(f1557,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') != s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl35),
  inference(subsumption_resolution,[],[f625,f97])).
fof(f625,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') != s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl35),
  inference(superposition,[],[f97,f164])).
fof(f954,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f953])).
fof(f953,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(duplicate_literal_removal,[],[f620])).
fof(f620,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f86,f164])).
fof(f613,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s(X75,f(s(bool,X76))) != s(X75,g(s(bool,X76))) | s(fun(bool,X75),X73) = s(fun(bool,X75),X74) | s(bool,X77) = s(bool,sK4(X73,X74,X75,bool)) | s(bool,'T_0') = s(bool,X76) | s(bool,X77) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f40,f164])).
fof(f577,plain,(
  ( ! [X78,X76,X74,X77,X75,X73] : (s(X75,f(s(bool,X76))) != s(X75,g(s(bool,X76))) | s(fun(bool,X75),X73) = s(fun(bool,X75),X74) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,X78) = s(bool,sK4(X73,X74,X75,bool)) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f40,f164])).
fof(f467,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f164,f164])).
fof(f1352,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f1351])).
fof(f1351,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f446])).
fof(f446,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f164,f39])).
fof(f1498,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f1497])).
fof(f1497,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,X81) | s(bool,X81) = s(bool,X82) | s(bool,'T_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X80) = s(bool,X84)) )),
  inference(duplicate_literal_removal,[],[f396])).
fof(f396,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,X81) | s(bool,X81) = s(bool,X82) | s(bool,'T_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X80) = s(bool,X84)) )),
  inference(superposition,[],[f164,f164])).
fof(f348,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK4(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f40,f83])).
fof(f346,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK4(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f40,f83])).
fof(f200,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f37,f83])).
fof(f164,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f83,f83])).
fof(f86,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f38,f39])).
fof(f83,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f39,f39])).
fof(f41,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f42,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f43,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f44,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f45,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f46,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f47,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f48,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f49,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f50,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f51,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f53,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f40,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.wordSem.state_component_equality',aHL_EXT)).
fof(f39,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.wordSem.state_component_equality',aHL_BOOL_CASES)).
fof(f37,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.wordSem.state_component_equality',aHL_TRUTH)).
fof(f91,plain,(
  s(bool,'T_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl29),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s(bool,'T_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f5214,plain,(
  $false | ($spl30 | $spl35 | $spl44)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f1557,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f97,f355,f351,f353,f578,f614,f632,f652,f52,f54,f3763,f3839,f3827,f3878,f3873,f3870,f3865,f3862,f3859,f3856,f3848,f3774,f94])).
fof(f5213,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26)),
  inference(global_subsumption,[],[f79,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5149,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(unit_resulting_resolution,[],[f56,f73,f71,f75,f81,f57,f61,f59,f65,f67,f77,f63,f69,f54])).
fof(f5148,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(unit_resulting_resolution,[],[f56,f73,f71,f75,f81,f57,f61,f59,f65,f67,f77,f63,f69,f54])).
fof(f5188,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5187,f57])).
fof(f5187,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5186,f59])).
fof(f5186,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5185,f61])).
fof(f5185,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5184,f63])).
fof(f5184,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5183,f65])).
fof(f5183,plain,(
  ( ! [X0] : (s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5182,f67])).
fof(f5182,plain,(
  ( ! [X0] : (s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5181,f71])).
fof(f5181,plain,(
  ( ! [X0] : (s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5180,f73])).
fof(f5180,plain,(
  ( ! [X0] : (s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f5179,f75])).
fof(f5179,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl26)),
  inference(forward_demodulation,[],[f5151,f77])).
fof(f5151,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.wordSem.state'(sK0,sK1),sK3) = s('type.wordSem.state'(sK0,sK1),X0) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),X0)))) ) | $spl26),
  inference(superposition,[],[f54,f81])).
fof(f5212,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl40)),
  inference(global_subsumption,[],[f2128,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5211,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl35 | $spl44)),
  inference(global_subsumption,[],[f3774,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5210,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3848,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5209,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3856,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5208,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3859,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5207,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3862,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5206,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3865,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5205,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3870,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5204,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3873,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5203,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3878,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5202,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl44)),
  inference(global_subsumption,[],[f3827,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5201,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl52)),
  inference(global_subsumption,[],[f4959,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5200,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148,f5149])).
fof(f5199,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f37,f39,f40,f53,f51,f50,f49,f48,f47,f46,f45,f44,f43,f42,f41,f83,f86,f90,f81,f77,f75,f73,f71,f69,f67,f65,f63,f61,f59,f57,f56,f164,f200,f346,f348,f1498,f1352,f467,f577,f613,f954,f631,f635,f651,f830,f1560,f747,f789,f1354,f369,f350,f38,f355,f351,f353,f578,f614,f632,f652,f52,f54,f5188,f5148])).
fof(f5156,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28)),
  inference(subsumption_resolution,[],[f5155,f125])).
fof(f125,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl24 | $spl28)),
  inference(backward_demodulation,[],[f92,f79])).
fof(f5155,plain,(
  s(bool,'T_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl28)),
  inference(forward_demodulation,[],[f5148,f92])).
fof(f5154,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28)),
  inference(subsumption_resolution,[],[f5153,f125])).
fof(f5153,plain,(
  s(bool,'T_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl26 | $spl28)),
  inference(forward_demodulation,[],[f5149,f92])).
fof(f4959,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | $spl52),
  inference(cnf_transformation,[],[f4959_D])).
fof(f4959_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f95,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl32),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f4958,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28 | $spl35)),
  inference(condensation,[],[f4957])).
fof(f4957,plain,(
  ( ! [X99,X97,X98] : (s(bool,'T_0') != s(bool,X98) | s(bool,X97) = s(bool,X99) | s(bool,'F_0') = s(bool,X99) | s(bool,X98) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28 | $spl35)),
  inference(subsumption_resolution,[],[f4386,f3035])).
fof(f3035,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | ($spl28 | $spl35)),
  inference(superposition,[],[f97,f2681])).
fof(f2681,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f2412,f2412])).
fof(f2412,plain,(
  ( ! [X29] : (s(bool,X29) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X29)) ) | $spl28),
  inference(subsumption_resolution,[],[f2194,f37])).
fof(f2194,plain,(
  ( ! [X29] : (~p(s(bool,'T_0')) | s(bool,X29) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X29)) ) | $spl28),
  inference(superposition,[],[f38,f1356])).
fof(f1356,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl28),
  inference(condensation,[],[f1355])).
fof(f1355,plain,(
  ( ! [X111,X112,X113] : (s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X112) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f444])).
fof(f444,plain,(
  ( ! [X111,X112,X113] : (s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) ) | $spl28),
  inference(superposition,[],[f164,f92])).
fof(f4386,plain,(
  ( ! [X99,X97,X98] : (s(bool,'T_0') != s(bool,X98) | s(bool,X97) = s(bool,X99) | s(bool,'F_0') = s(bool,X99) | s(bool,'T_0') = s(bool,X97) | s(bool,X98) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28 | $spl35)),
  inference(superposition,[],[f3035,f1358])).
fof(f1358,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl24 | $spl28)),
  inference(condensation,[],[f1357])).
fof(f1357,plain,(
  ( ! [X109,X110,X108] : (s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X109) = s(bool,X110) | s(bool,'T_0') = s(bool,X110)) ) | ($spl24 | $spl28)),
  inference(duplicate_literal_removal,[],[f443])).
fof(f443,plain,(
  ( ! [X109,X110,X108] : (s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,X110) | s(bool,'T_0') = s(bool,X110)) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f164,f125])).
fof(f2127,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,X50)) ) | $spl38),
  inference(cnf_transformation,[],[f2127_D])).
fof(f2127_D,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,X50)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f4956,plain,(
  ( ! [X95,X96] : (s(bool,X95) != s(bool,X96) | s(bool,X95) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X96)) ) | $spl50),
  inference(cnf_transformation,[],[f4956_D])).
fof(f4956_D,plain,(
  ( ! [X95,X96] : (s(bool,X95) != s(bool,X96) | s(bool,X95) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X96)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f4541,plain,(
  ( ! [X94,X95,X96] : (s(bool,X95) != s(bool,X96) | s(bool,'T_0') = s(bool,X94) | s(bool,'F_0') = s(bool,X96) | s(bool,X95) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28)),
  inference(duplicate_literal_removal,[],[f4385])).
fof(f4385,plain,(
  ( ! [X94,X95,X96] : (s(bool,X95) != s(bool,X96) | s(bool,'T_0') = s(bool,X94) | s(bool,'F_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X94) | s(bool,X95) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f2728,f1358])).
fof(f2728,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f1849,f2412])).
fof(f1849,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f1818])).
fof(f1818,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(equality_factoring,[],[f1356])).
fof(f4824,plain,(
  ( ! [X61,X59] : (s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X59) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X59) = s(bool,X61)) ) | $spl48),
  inference(cnf_transformation,[],[f4824_D])).
fof(f4824_D,plain,(
  ( ! [X61,X59] : (s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X59) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X59) = s(bool,X61)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4682,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X71) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,X71)) ) | ($spl24 | $spl28)),
  inference(duplicate_literal_removal,[],[f4184])).
fof(f4184,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X71) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,X71)) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f1358,f1358])).
fof(f4701,plain,(
  ( ! [X74,X72,X73] : (s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X73) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28)),
  inference(duplicate_literal_removal,[],[f4143])).
fof(f4143,plain,(
  ( ! [X74,X72,X73] : (s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X72) | s(bool,X73) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f1358,f1358])).
fof(f4781,plain,(
  ( ! [X61,X59,X60] : (s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X59) = s(bool,X61) | s(bool,X59) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28)),
  inference(duplicate_literal_removal,[],[f4054])).
fof(f4054,plain,(
  ( ! [X61,X59,X60] : (s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,X59) = s(bool,X61) | s(bool,'T_0') = s(bool,X60) | s(bool,X59) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2)))) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f1358,f1358])).
fof(f3766,plain,(
  ( ! [X61,X62] : (s(bool,X61) != s(bool,X62) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X62)) ) | $spl46),
  inference(cnf_transformation,[],[f3766_D])).
fof(f3766_D,plain,(
  ( ! [X61,X62] : (s(bool,X61) != s(bool,X62) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X62)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f3711,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) != s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X62) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f3689])).
fof(f3689,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) != s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(superposition,[],[f2728,f1356])).
fof(f3763,plain,(
  ( ! [X81] : (s(bool,X81) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81)) ) | $spl44),
  inference(cnf_transformation,[],[f3763_D])).
fof(f3763_D,plain,(
  ( ! [X81] : (s(bool,X81) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f3729,plain,(
  ( ! [X80,X81] : (s(bool,X81) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81) | s(bool,'F_0') = s(bool,X80)) ) | ($spl24 | $spl28)),
  inference(duplicate_literal_removal,[],[f3660])).
fof(f3660,plain,(
  ( ! [X80,X81] : (s(bool,X81) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81) | s(bool,'F_0') = s(bool,X80) | s(bool,'F_0') = s(bool,X80)) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f2728,f3468])).
fof(f3468,plain,(
  ( ! [X107] : (s(bool,X107) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X107)) ) | ($spl24 | $spl28)),
  inference(subsumption_resolution,[],[f3418,f37])).
fof(f3418,plain,(
  ( ! [X107] : (~p(s(bool,'T_0')) | s(bool,X107) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X107)) ) | ($spl24 | $spl28)),
  inference(superposition,[],[f3036,f125])).
fof(f3036,plain,(
  ( ! [X2,X3] : (~p(s(bool,X2)) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl28),
  inference(superposition,[],[f38,f2681])).
fof(f2453,plain,(
  $false | ($spl32 | $spl35)),
  inference(subsumption_resolution,[],[f97,f95])).
fof(f2421,plain,(
  $false | $spl34),
  inference(subsumption_resolution,[],[f2414,f37])).
fof(f2414,plain,(
  ~p(s(bool,'T_0')) | $spl34),
  inference(backward_demodulation,[],[f96,f38])).
fof(f96,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl34),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f97,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl35),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f2269,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(forward_demodulation,[],[f2267,f92])).
fof(f2267,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f2205])).
fof(f2205,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f1849,f39])).
fof(f2409,plain,(
  ( ! [X48] : (p(s(bool,X48)) | s(bool,'F_0') = s(bool,X48)) ) | $spl42),
  inference(cnf_transformation,[],[f2409_D])).
fof(f2409_D,plain,(
  ( ! [X48] : (p(s(bool,X48)) | s(bool,'F_0') = s(bool,X48)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2408,plain,(
  ( ! [X48,X49] : (s(bool,'T_0') = s(bool,X49) | p(s(bool,X48)) | s(bool,'F_0') = s(bool,X48)) ) | ($spl28 | $spl35)),
  inference(forward_demodulation,[],[f2407,f92])).
fof(f2407,plain,(
  ( ! [X48,X49] : (p(s(bool,X48)) | s(bool,X49) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X48)) ) | ($spl28 | $spl35)),
  inference(subsumption_resolution,[],[f2375,f2145])).
fof(f2145,plain,(
  ( ! [X77] : (s(bool,'T_0') != s(bool,X77) | s(bool,X77) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | ($spl28 | $spl35)),
  inference(subsumption_resolution,[],[f1782,f97])).
fof(f1782,plain,(
  ( ! [X77] : (s(bool,'T_0') != s(bool,X77) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X77) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | ($spl28 | $spl35)),
  inference(superposition,[],[f97,f1356])).
fof(f2375,plain,(
  ( ! [X48,X49] : (p(s(bool,X48)) | s(bool,X49) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,X48)) ) | ($spl28 | $spl35)),
  inference(superposition,[],[f200,f1962])).
fof(f1962,plain,(
  ( ! [X64] : (s(bool,X64) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X64)) ) | ($spl28 | $spl35)),
  inference(trivial_inequality_removal,[],[f1722])).
fof(f1722,plain,(
  ( ! [X64] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X64) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X64)) ) | ($spl28 | $spl35)),
  inference(superposition,[],[f97,f1356])).
fof(f2176,plain,(
  $false | $spl38),
  inference(subsumption_resolution,[],[f2159,f37])).
fof(f2159,plain,(
  ~p(s(bool,'T_0')) | $spl38),
  inference(backward_demodulation,[],[f2127,f38])).
fof(f2126,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) | $spl36),
  inference(cnf_transformation,[],[f2126_D])).
fof(f2126_D,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2005,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f1678])).
fof(f1678,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl28),
  inference(superposition,[],[f1356,f1356])).
fof(f2022,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f1652])).
fof(f1652,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(superposition,[],[f1356,f1356])).
fof(f2128,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) | $spl40),
  inference(cnf_transformation,[],[f2128_D])).
fof(f2128_D,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2040,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f1637])).
fof(f1637,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(superposition,[],[f1356,f39])).
fof(f2094,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f1599])).
fof(f1599,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X57)) ) | $spl28),
  inference(superposition,[],[f1356,f39])).
fof(f2095,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,X49) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f1598])).
fof(f1598,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3)))) ) | $spl28),
  inference(superposition,[],[f1356,f1356])).
fof(f124,plain,(
  $false | ($spl0 | $spl27)),
  inference(trivial_inequality_removal,[],[f123])).
fof(f123,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl27)),
  inference(forward_demodulation,[],[f82,f55])).
fof(f122,plain,(
  $false | ($spl0 | $spl21)),
  inference(trivial_inequality_removal,[],[f121])).
fof(f121,plain,(
  s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl21)),
  inference(forward_demodulation,[],[f76,f55])).
fof(f120,plain,(
  $false | ($spl0 | $spl17)),
  inference(trivial_inequality_removal,[],[f119])).
fof(f119,plain,(
  s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl17)),
  inference(forward_demodulation,[],[f72,f55])).
fof(f118,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f117])).
fof(f117,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f60,f55])).
fof(f116,plain,(
  $false | ($spl0 | $spl9)),
  inference(trivial_inequality_removal,[],[f115])).
fof(f115,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f64,f55])).
fof(f114,plain,(
  $false | ($spl0 | $spl13)),
  inference(trivial_inequality_removal,[],[f113])).
fof(f113,plain,(
  s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl13)),
  inference(forward_demodulation,[],[f68,f55])).
fof(f112,plain,(
  $false | ($spl0 | $spl23)),
  inference(trivial_inequality_removal,[],[f111])).
fof(f111,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl23)),
  inference(forward_demodulation,[],[f78,f55])).
fof(f110,plain,(
  $false | ($spl0 | $spl19)),
  inference(trivial_inequality_removal,[],[f109])).
fof(f109,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl19)),
  inference(forward_demodulation,[],[f74,f55])).
fof(f108,plain,(
  $false | ($spl0 | $spl15)),
  inference(trivial_inequality_removal,[],[f107])).
fof(f107,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f70,f55])).
fof(f106,plain,(
  $false | ($spl0 | $spl11)),
  inference(trivial_inequality_removal,[],[f105])).
fof(f105,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f66,f55])).
fof(f104,plain,(
  $false | ($spl0 | $spl7)),
  inference(trivial_inequality_removal,[],[f103])).
fof(f103,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl7)),
  inference(forward_demodulation,[],[f62,f55])).
fof(f102,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f101])).
fof(f101,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f58,f55])).
fof(f99,plain,(
  $false | ($spl0 | $spl25)),
  inference(trivial_inequality_removal,[],[f98])).
fof(f98,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl25)),
  inference(backward_demodulation,[],[f55,f80])).
fof(f90,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f39])).
fof(f92,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl28),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f94,plain,(
  s(bool,'F_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | $spl30),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  s(bool,'F_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f88,plain,(
  s(bool,'F_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl24),
  inference(superposition,[],[f79,f39])).
fof(f85,plain,(
  s(bool,'F_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl24),
  inference(superposition,[],[f39,f79])).
fof(f55,plain,(
  s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3) | $spl0),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f57,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl2),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f23,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  (s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3) | (s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) & s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))))) & (s('type.wordSem.state'(sK0,sK1),sK2) != s('type.wordSem.state'(sK0,sK1),sK3) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3] : ((s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))) & (s('type.wordSem.state'(X0,X1),X2) != s('type.wordSem.state'(X0,X1),X3) | (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <~> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.wordSem.state'(X0,X1),X2) = s('type.wordSem.state'(X0,X1),X3) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.wordSem.word_loc'(X0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X0,X1),X3))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.wordSem.state'(X6,X7),X8) = s('type.wordSem.state'(X6,X7),X9) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X9))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X8))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.wordSem.state'(X6,X7),X8) = s('type.wordSem.state'(X6,X7),X9) <=> (s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.wordSem.word_loc'(X6)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.wordSem.state_store_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X6,X7),X9))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(X6))),'const.wordSem.state_code_1'(s('type.wordSem.state'(X6,X7),X9))) & s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X8))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(X6,X7),X9)))))),
  file('thm.wordSem.state_component_equality','thm.wordSem.state_component_equality')).
fof(f59,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl4),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f24,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f61,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl6),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f25,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f63,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl8),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f65,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl10),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f27,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f67,plain,(
  s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl12),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f28,plain,(
  s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f69,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl14),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f29,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f71,plain,(
  s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl16),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f30,plain,(
  s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f73,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl18),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f31,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f75,plain,(
  s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl20),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f32,plain,(
  s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f77,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl22),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f33,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f79,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl24),
  inference(cnf_transformation,[],[f79_D])).
fof(f79_D,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f34,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f81,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl26),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f35,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) = s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f56,plain,(
  s('type.wordSem.state'(sK0,sK1),sK2) != s('type.wordSem.state'(sK0,sK1),sK3) | $spl1),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  s('type.wordSem.state'(sK0,sK1),sK2) != s('type.wordSem.state'(sK0,sK1),sK3) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f58,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl3),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f60,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl5),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f62,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl7),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f64,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl9),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f66,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl11),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f68,plain,(
  s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl13),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f70,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl15),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f72,plain,(
  s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl17),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f74,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl19),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f76,plain,(
  s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl21),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f78,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl23),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f80,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl25),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f82,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | $spl27),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f36,plain,(
  s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.wordSem.state_ffi_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(bool,'const.wordSem.state_be_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.wordLang.prog'(sK0))),'const.wordSem.state_code_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.wordSem.state_handler_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.wordSem.state_gc_fun_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.wordSem.state_mdomain_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.wordSem.state_memory_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.stack_frame'(sK0)),'const.wordSem.state_stack_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.wordSem.state_store_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.wordSem.word_loc'(sK0)),'const.wordSem.state_locals_1'(s('type.wordSem.state'(sK0,sK1),sK3))) | s('type.wordSem.state'(sK0,sK1),sK2) != s('type.wordSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 71
% Passive clauses: 186
% Generated clauses: 5133
% Final active clauses: 38
% Final passive clauses: 31
% Input formulas: 6
% Initial clauses: 32
% 
% Duplicate literals: 815
% Trivial inequalities: 99
% Fw subsumption resolutions: 247
% Fw demodulations: 163
% Bw demodulations: 31
% Condensations: 1309
% Global subsumptions: 17
% 
% Simple tautologies: 121
% Equational tautologies: 129
% Forward subsumptions: 2044
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 12
% 
% Unit resulting resolution: 82
% Forward superposition: 1022
% Backward superposition: 866
% Self superposition: 180
% Equality factoring: 176
% Equality resolution: 22
% 
% Split clauses: 31
% Split components: 74
% SAT solver clauses: 302
% SAT solver unit clauses: 6
% SAT solver binary clauses: 105
% 
% Sat splits: 31
% Sat splitting refutations: 35
% 
% Memory used [KB]: 3070
% Time elapsed: 0.433 s
% ------------------------------
% ------------------------------
% Success in time 1.831 s
