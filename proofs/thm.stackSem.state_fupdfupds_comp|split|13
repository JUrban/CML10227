Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackSem
% (55895)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 112
% Passive clauses: 3214
% Generated clauses: 12348
% Final active clauses: 108
% Final passive clauses: 2952
% Input formulas: 69
% Initial clauses: 75
% 
% Duplicate literals: 562
% Trivial inequalities: 90
% Fw subsumption resolutions: 1716
% Fw demodulations: 112
% Bw demodulations: 1
% 
% Simple tautologies: 215
% Equational tautologies: 75
% Forward subsumptions: 5557
% 
% Binary resolution: 495
% Factoring: 4
% Forward superposition: 4775
% Backward superposition: 3928
% Self superposition: 329
% Equality factoring: 188
% Equality resolution: 12
% 
% Split clauses: 359
% Split components: 720
% SAT solver clauses: 952
% SAT solver unit clauses: 24
% SAT solver binary clauses: 210
% 
% Sat splits: 359
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 952
% TWLsolver calls for satisfiability: 173
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stackSem
% (55913)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 123
% Passive clauses: 627
% Generated clauses: 17241
% Final active clauses: 120
% Final passive clauses: 492
% Input formulas: 69
% Initial clauses: 75
% 
% Duplicate literals: 750
% Trivial inequalities: 354
% Fw subsumption resolutions: 1874
% Fw demodulations: 1553
% Bw demodulations: 11
% Condensations: 1474
% 
% Simple tautologies: 291
% Equational tautologies: 43
% Forward subsumptions: 9127
% Fw demodulations to eq. taut.: 8
% 
% Binary resolution: 39
% Factoring: 1
% Forward superposition: 5390
% Backward superposition: 5169
% Self superposition: 299
% Equality factoring: 102
% Equality resolution: 23
% 
% Split clauses: 38
% Split components: 77
% SAT solver clauses: 1212
% SAT solver unit clauses: 132
% SAT solver binary clauses: 84
% 
% Sat splits: 38
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1212
% TWLsolver calls for satisfiability: 216
% 
% Memory used [KB]: 16758
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stackSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackSem
% SZS output start Proof for thm.stackSem
fof(f132490,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f132466])).
fof(f132466,plain,(
  s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK4))))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),sK3))) != s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK4))))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),sK3)))),
  inference(superposition,[],[f211,f6394])).
fof(f6394,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X4,'type.stackSem.state'(X0,X1)),'const.combin.o_2'(s(fun('type.stackSem.state'(X0,X1),'type.stackSem.state'(X0,X1)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X0)),'type.list.list'('type.fcp.cart'(bool,X0))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X0)),'type.list.list'('type.fcp.cart'(bool,X0))),X2),s(fun('type.list.list'('type.fcp.cart'(bool,X0)),'type.list.list'('type.fcp.cart'(bool,X0))),X3))))),s(fun(X4,'type.stackSem.state'(X0,X1)),X5))) = s(fun(X4,'type.stackSem.state'(X0,X1)),'const.combin.o_2'(s(fun('type.stackSem.state'(X0,X1),'type.stackSem.state'(X0,X1)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X0)),'type.list.list'('type.fcp.cart'(bool,X0))),X2))),s(fun(X4,'type.stackSem.state'(X0,X1)),'const.combin.o_2'(s(fun('type.stackSem.state'(X0,X1),'type.stackSem.state'(X0,X1)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X0)),'type.list.list'('type.fcp.cart'(bool,X0))),X3))),s(fun(X4,'type.stackSem.state'(X0,X1)),X5)))))) )),
  inference(superposition,[],[f283,f239])).
fof(f239,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X3),s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X2))))) = s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X3))),s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X2)))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2,X3] : s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X3),s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X2))))) = s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X3))),s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X2)))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X3),s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X2))))) = s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X3))),s(fun('type.stackSem.state'(X1,X0),'type.stackSem.state'(X1,X0)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X7] : ! [X10,X11] : s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X11),s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X10))))) = s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X11))),s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X10)))))),
  file('thm.stackSem.state_fupdfupds_comp|split|13','thm.stackSem.state_fupdfupds_comp|split|12')).
fof(f283,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(flattening,[],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7,X19,X15] : ! [X11,X10,X9] : s(fun(X19,X6),'const.combin.o_2'(s(fun(X7,X6),X11),s(fun(X19,X7),'const.combin.o_2'(s(fun(X15,X7),X10),s(fun(X19,X15),X9))))) = s(fun(X19,X6),'const.combin.o_2'(s(fun(X15,X6),'const.combin.o_2'(s(fun(X7,X6),X11),s(fun(X15,X7),X10))),s(fun(X19,X15),X9)))),
  file('thm.stackSem.state_fupdfupds_comp|split|13','thm.combin.o_ASSOC')).
fof(f211,plain,(
  s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK4))))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),sK3))) != s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK5))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK4))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),sK3)))))),
  inference(cnf_transformation,[],[f206])).
fof(f206,plain,(
  s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK4))))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),sK3))) != s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK5))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.stackSem.state'(sK1,sK2),'type.stackSem.state'(sK1,sK2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,sK1)),'type.list.list'('type.fcp.cart'(bool,sK1))),sK4))),s(fun(sK0,'type.stackSem.state'(sK1,sK2)),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f201])).
fof(f201,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X5),s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X4))))),s(fun(X0,'type.stackSem.state'(X1,X2)),X3))) != s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X5))),s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X4))),s(fun(X0,'type.stackSem.state'(X1,X2)),X3)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X5),s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X4))))),s(fun(X0,'type.stackSem.state'(X1,X2)),X3))) = s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X5))),s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X4))),s(fun(X0,'type.stackSem.state'(X1,X2)),X3)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2] : ! [X3,X4,X5] : s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X5),s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X4))))),s(fun(X0,'type.stackSem.state'(X1,X2)),X3))) = s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X5))),s(fun(X0,'type.stackSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.stackSem.state'(X1,X2),'type.stackSem.state'(X1,X2)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X1)),'type.list.list'('type.fcp.cart'(bool,X1))),X4))),s(fun(X0,'type.stackSem.state'(X1,X2)),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10,X11] : s(fun(X6,'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X11),s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X10))))),s(fun(X6,'type.stackSem.state'(X7,X8)),X9))) = s(fun(X6,'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X11))),s(fun(X6,'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X10))),s(fun(X6,'type.stackSem.state'(X7,X8)),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10,X11] : s(fun(X6,'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),'const.combin.o_2'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X11),s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X10))))),s(fun(X6,'type.stackSem.state'(X7,X8)),X9))) = s(fun(X6,'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X11))),s(fun(X6,'type.stackSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.stackSem.state'(X7,X8),'type.stackSem.state'(X7,X8)),'const.stackSem.state_bitmaps_fupd_1'(s(fun('type.list.list'('type.fcp.cart'(bool,X7)),'type.list.list'('type.fcp.cart'(bool,X7))),X10))),s(fun(X6,'type.stackSem.state'(X7,X8)),X9)))))),
  file('thm.stackSem.state_fupdfupds_comp|split|13','thm.stackSem.state_fupdfupds_comp|split|13')).
% SZS output end Proof for thm.stackSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 560
% Passive clauses: 6396
% Generated clauses: 135847
% Final active clauses: 205
% Final passive clauses: 1166
% Input formulas: 69
% Initial clauses: 75
% Discarded non-redundant clauses: 13095
% 
% Duplicate literals: 3526
% Trivial inequalities: 423
% Fw subsumption resolutions: 4683
% Fw demodulations: 14049
% Bw demodulations: 2048
% Condensations: 4743
% Global subsumptions: 414
% 
% Simple tautologies: 652
% Equational tautologies: 509
% Forward subsumptions: 98154
% Fw demodulations to eq. taut.: 244
% Bw demodulations to eq. taut.: 408
% 
% Unit resulting resolution: 2614
% Factoring: 4
% Forward superposition: 44376
% Backward superposition: 53153
% Self superposition: 1014
% Equality factoring: 240
% Equality resolution: 12
% 
% Split clauses: 272
% Split components: 549
% SAT solver clauses: 7799
% SAT solver unit clauses: 2654
% SAT solver binary clauses: 800
% 
% Sat splits: 272
% Sat splitting refutations: 443
% 
% Memory used [KB]: 277479
% Time elapsed: 10.208 s
% ------------------------------
% ------------------------------
% Success in time 11.55 s
