Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (115008)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 211
% Passive clauses: 2679
% Generated clauses: 29133
% Final active clauses: 208
% Final passive clauses: 2271
% Input formulas: 21
% Initial clauses: 42
% 
% Duplicate literals: 980
% Trivial inequalities: 1185
% Fw subsumption resolutions: 3185
% Fw demodulations: 5710
% Bw demodulations: 3
% 
% Simple tautologies: 547
% Equational tautologies: 26
% Forward subsumptions: 13686
% 
% Binary resolution: 218
% Forward superposition: 9811
% Backward superposition: 7652
% Self superposition: 110
% Equality factoring: 62
% Equality resolution: 45
% 
% Split clauses: 491
% Split components: 1005
% SAT solver clauses: 1324
% SAT solver unit clauses: 15
% SAT solver binary clauses: 263
% 
% Sat splits: 491
% 
% TWLsolver clauses: 1318
% TWLsolver calls for satisfiability: 138
% 
% Memory used [KB]: 13560
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f3626,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3625,f3395,f3405,f83,f125,f108,f141])).
fof(f141,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK8(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK9(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK10(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK11(X3,X2,X1,X0))))))))) ) | $spl28),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK8(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK9(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK10(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK11(X3,X2,X1,X0))))))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f108,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK8(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK9(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK10(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK11(X3,X2,X1,X0))))))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK8(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK9(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK10(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK11(X3,X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10,sK11])],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7,X20,X8] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X8),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X20))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  file('thm.mod_to_conProof.mod_to_conProof_263_prove_ltb','thm.modProps.modProps_|49||48|_prove_ltb')).
fof(f125,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) ) | $spl0),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f83,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f56])).
fof(f56,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X3))) != s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X3))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X3))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X8),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X9))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X8),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X9))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  file('thm.mod_to_conProof.mod_to_conProof_263_prove_ltb','thm.mod_to_conProof.mod_to_conProof_263_prove_ltb')).
fof(f3405,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X0),s('type.modSem.state'(sK1),X2),s('type.list.list'('type.modLang.dec'),X1)))) ) | $spl648),
  inference(cnf_transformation,[],[f3405_D])).
fof(f3405_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X0),s('type.modSem.state'(sK1),X2),s('type.list.list'('type.modLang.dec'),X1)))) ) <=> ~$spl648),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl648])])).
fof(f3395,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK1),sK2),s('type.list.list'('type.modLang.dec'),sK4))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X0),s('type.modSem.state'(sK1),X2),s('type.list.list'('type.modLang.dec'),X1)))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f125,f141])).
fof(f3625,plain,(
  $false | $spl648),
  inference(equality_resolution,[],[f3405])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 61
% Passive clauses: 321
% Generated clauses: 3458
% Final active clauses: 61
% Final passive clauses: 260
% Input formulas: 21
% Initial clauses: 42
% 
% Duplicate literals: 224
% Trivial inequalities: 84
% Fw subsumption resolutions: 160
% Fw demodulations: 173
% Condensations: 381
% 
% Simple tautologies: 114
% Equational tautologies: 17
% Forward subsumptions: 1486
% 
% Binary resolution: 25
% Forward superposition: 1016
% Backward superposition: 908
% Self superposition: 57
% Equality factoring: 40
% Equality resolution: 16
% 
% Split clauses: 15
% Split components: 30
% SAT solver clauses: 535
% SAT solver unit clauses: 48
% SAT solver binary clauses: 34
% SAT solver learnt clauses: 1
% 
% Sat splits: 15
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 534
% TWLsolver calls for satisfiability: 728
% 
% Memory used [KB]: 4733
% Time elapsed: 0.139 s
% ------------------------------
% ------------------------------
% Success in time 0.752 s
