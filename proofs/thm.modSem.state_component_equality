Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f2577,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2576,f2524,f23,f43,f24,f45,f25,f47,f26,f49,f27,f51,f28,f53,f41,f29,f54,f52,f50,f48,f46,f44,f42,f2572,f2570,f2568,f2566,f2574])).
fof(f2574,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f2573])).
fof(f2573,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f44,f41])).
fof(f2566,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f2565])).
fof(f2565,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f46,f41])).
fof(f2568,plain,(
  $false | ($spl0 | $spl7)),
  inference(trivial_inequality_removal,[],[f2567])).
fof(f2567,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) | ($spl0 | $spl7)),
  inference(forward_demodulation,[],[f48,f41])).
fof(f2570,plain,(
  $false | ($spl0 | $spl13)),
  inference(trivial_inequality_removal,[],[f2569])).
fof(f2569,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) | ($spl0 | $spl13)),
  inference(forward_demodulation,[],[f54,f41])).
fof(f2572,plain,(
  $false | ($spl0 | $spl11)),
  inference(trivial_inequality_removal,[],[f2571])).
fof(f2571,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f52,f41])).
fof(f42,plain,(
  s('type.modSem.state'(sK0),sK1) != s('type.modSem.state'(sK0),sK2) | $spl1),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  s('type.modSem.state'(sK0),sK1) != s('type.modSem.state'(sK0),sK2) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f44,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) | $spl3),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f46,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) | $spl5),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f48,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) | $spl7),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f50,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) | $spl9),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f52,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | $spl11),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f54,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) | $spl13),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f29,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) | s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) != s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  (s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) & s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))) & (s('type.modSem.state'(sK0),sK1) != s('type.modSem.state'(sK0),sK2) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) | s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <~> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.modSem.state'(X6),X7) = s('type.modSem.state'(X6),X8) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X7))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X7))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.modSem.state'(X6),X7) = s('type.modSem.state'(X6),X8) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X7))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X7))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8)))))),
  file('thm.modSem.state_component_equality','thm.modSem.state_component_equality')).
fof(f41,plain,(
  s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2) | $spl0),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f53,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) | $spl12),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f28,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f51,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | $spl10),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f27,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f49,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) | $spl8),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f47,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) | $spl6),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f25,plain,(
  s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f45,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) | $spl4),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f24,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f43,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) | $spl2),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f23,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f2524,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f2523,f42])).
fof(f2523,plain,(
  s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f2522,f51])).
fof(f2522,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12)),
  inference(trivial_inequality_removal,[],[f2521])).
fof(f2521,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) | s('type.modSem.state'(sK0),sK1) = s('type.modSem.state'(sK0),sK2) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12)),
  inference(equality_resolution,[],[f255])).
fof(f255,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),X0))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),X0))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) | s('type.modSem.state'(sK0),sK2) = s('type.modSem.state'(sK0),X0)) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12)),
  inference(forward_demodulation,[],[f254,f43])).
fof(f254,plain,(
  ( ! [X0] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) | s('type.modSem.state'(sK0),sK2) = s('type.modSem.state'(sK0),X0) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl12)),
  inference(forward_demodulation,[],[f253,f45])).
fof(f253,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) | s('type.modSem.state'(sK0),sK2) = s('type.modSem.state'(sK0),X0) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),X0))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),X0)))) ) | ($spl6 | $spl8 | $spl12)),
  inference(forward_demodulation,[],[f252,f49])).
fof(f252,plain,(
  ( ! [X0] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),X0))) | s('type.modSem.state'(sK0),sK2) = s('type.modSem.state'(sK0),X0) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),X0))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),X0)))) ) | ($spl6 | $spl12)),
  inference(forward_demodulation,[],[f249,f53])).
fof(f249,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),X0))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),X0))) | s('type.modSem.state'(sK0),sK2) = s('type.modSem.state'(sK0),X0) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),X0))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),X0)))) ) | $spl6),
  inference(superposition,[],[f39,f47])).
fof(f39,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & ((s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0] : ! [X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.modSem.state'(X6),X7) = s('type.modSem.state'(X6),X8) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X7))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X7))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8)))))),
  file('thm.modSem.state_component_equality','thm.modSem.modSem_|49|25_prove_ltb')).
fof(f2576,plain,(
  $false | ($spl0 | $spl9)),
  inference(trivial_inequality_removal,[],[f2575])).
fof(f2575,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK1))) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f50,f41])).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 328
% Generated clauses: 2432
% Final active clauses: 27
% Final passive clauses: 264
% Input formulas: 6
% Initial clauses: 18
% 
% Duplicate literals: 350
% Trivial inequalities: 29
% Fw subsumption resolutions: 137
% Fw demodulations: 48
% 
% Simple tautologies: 72
% Equational tautologies: 75
% Forward subsumptions: 1093
% Fw demodulations to eq. taut.: 5
% Bw demodulations to eq. taut.: 5
% 
% Binary resolution: 12
% Forward superposition: 718
% Backward superposition: 698
% Self superposition: 190
% Equality factoring: 180
% Equality resolution: 8
% 
% Split clauses: 189
% Split components: 384
% SAT solver clauses: 307
% SAT solver unit clauses: 60
% SAT solver binary clauses: 118
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 189
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 305
% TWLsolver calls for satisfiability: 21
% 
% Memory used [KB]: 1663
% Time elapsed: 0.086 s
% ------------------------------
% ------------------------------
% Success in time 0.09 s
