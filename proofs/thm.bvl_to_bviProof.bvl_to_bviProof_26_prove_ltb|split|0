Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvl_to_bviProof
% (128955)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 151
% Passive clauses: 1213
% Generated clauses: 23810
% Final active clauses: 141
% Final passive clauses: 973
% Input formulas: 43
% Initial clauses: 56
% 
% Duplicate literals: 1675
% Trivial inequalities: 120
% Fw subsumption resolutions: 2690
% Fw demodulations: 4084
% Bw demodulations: 7
% 
% Simple tautologies: 278
% Equational tautologies: 23
% Forward subsumptions: 12324
% 
% Binary resolution: 15
% Forward superposition: 9536
% Backward superposition: 5181
% Self superposition: 166
% Equality factoring: 52
% Equality resolution: 13
% 
% Split clauses: 675
% Split components: 1361
% SAT solver clauses: 1375
% SAT solver unit clauses: 10
% SAT solver binary clauses: 97
% 
% Sat splits: 675
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1372
% TWLsolver calls for satisfiability: 126
% 
% Memory used [KB]: 14711
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvl_to_bviProof
% (128974)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 142
% Passive clauses: 704
% Generated clauses: 20363
% Final active clauses: 139
% Final passive clauses: 549
% Input formulas: 43
% Initial clauses: 56
% 
% Duplicate literals: 1435
% Trivial inequalities: 46
% Fw subsumption resolutions: 1396
% Fw demodulations: 2944
% Bw demodulations: 14
% Condensations: 1589
% Global subsumptions: 4
% 
% Simple tautologies: 209
% Equational tautologies: 20
% Forward subsumptions: 11008
% Fw demodulations to eq. taut.: 22
% 
% Binary resolution: 12
% Forward superposition: 7498
% Backward superposition: 4477
% Self superposition: 142
% Equality factoring: 36
% Equality resolution: 5
% 
% Split clauses: 25
% Split components: 61
% SAT solver clauses: 1001
% SAT solver unit clauses: 91
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 8
% 
% Sat splits: 25
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 985
% TWLsolver calls for satisfiability: 204
% 
% Memory used [KB]: 17398
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvl_to_bviProof
% (129001)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 372
% Passive clauses: 6686
% Generated clauses: 136246
% Final active clauses: 155
% Final passive clauses: 774
% Input formulas: 43
% Initial clauses: 56
% Discarded non-redundant clauses: 1661
% 
% Duplicate literals: 4418
% Trivial inequalities: 877
% Fw subsumption resolutions: 9007
% Fw demodulations: 15167
% Bw demodulations: 4607
% Condensations: 8795
% Global subsumptions: 306
% 
% Simple tautologies: 1086
% Equational tautologies: 313
% Forward subsumptions: 86986
% Fw demodulations to eq. taut.: 54
% Bw demodulations to eq. taut.: 182
% 
% Unit resulting resolution: 1412
% Forward superposition: 43098
% Backward superposition: 27566
% Self superposition: 705
% Equality factoring: 211
% Equality resolution: 80
% 
% Split clauses: 165
% Split components: 340
% SAT solver clauses: 7742
% SAT solver unit clauses: 437
% SAT solver binary clauses: 1898
% 
% Sat splits: 165
% Sat splitting refutations: 418
% 
% Memory used [KB]: 110915
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvl_to_bviProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_to_bviProof
% SZS output start Proof for thm.bvl_to_bviProof
fof(f31437,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f170,f175,f173,f171,f190,f223,f227,f225,f362,f7142,f7145,f7144,f7143,f7214,f7215,f7283,f7282,f15966,f15983,f15986,f179,f177,f16004,f16008,f16006,f16040,f16046,f19250,f31430,f31433])).
fof(f31433,plain,(
  $false | ($spl4 | $spl6 | $spl20)),
  inference(subsumption_resolution,[],[f31432,f165])).
fof(f165,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0',aHL_FALSITY)).
fof(f31432,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl6 | $spl20)),
  inference(forward_demodulation,[],[f31431,f178])).
fof(f178,plain,(
  s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl6),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f31431,plain,(
  p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1)))) | ($spl4 | $spl20)),
  inference(subsumption_resolution,[],[f31411,f16005])).
fof(f16005,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl20),
  inference(cnf_transformation,[],[f16005_D])).
fof(f16005_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f31411,plain,(
  p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl4),
  inference(resolution,[],[f16042,f148])).
fof(f148,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',sK3(X1,X0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) | (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) & ! [X3] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X3))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))))) & (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',sK3(X1,X0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f108])).
fof(f108,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) | (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) & ! [X3] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X3))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))))) & (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) | ? [X2] : ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))))))),
  inference(rectify,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) | (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) & ! [X2] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))))) & (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) | ? [X2] : ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))))))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) | (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) & ! [X2] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))))) & ((~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) | ? [X2] : ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))))))),
  inference(nnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) <=> (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) & ! [X2] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1)))) <=> (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) & ! [X2] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X11] : ! [X7] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X11),X7)))) <=> (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),X7))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X11),X7)))))) & ! [X14] : p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),X7))),s('type.num.num',X14))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),X7))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bvl_to_bviProof.state_ok_def')).
fof(f16042,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',X0))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) ) | $spl4),
  inference(subsumption_resolution,[],[f16025,f168])).
fof(f168,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f121])).
fof(f121,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X10] : (s(X6,X10) = s(X6,X10) <=> p(s(bool,'T_0')))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bool.REFL_CLAUSE')).
fof(f16025,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',X0))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) ) | $spl4),
  inference(superposition,[],[f7684,f177])).
fof(f7684,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) | p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X3))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) )),
  inference(superposition,[],[f147,f124])).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X11] : ! [X8,X7] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),'const.bvlSem.dec_clock_2'(s('type.num.num',X8),s('type.bvlSem.state'(X11),X7)))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bvlProps.dec_clock_refs')).
fof(f147,plain,(
  ( ! [X0,X3,X1] : (p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X3))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f31430,plain,(
  $false | ($spl3 | $spl4 | $spl20)),
  inference(subsumption_resolution,[],[f31429,f175])).
fof(f31429,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | ($spl4 | $spl20)),
  inference(subsumption_resolution,[],[f31410,f16005])).
fof(f31410,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl4),
  inference(resolution,[],[f16042,f8363])).
fof(f8363,plain,(
  ( ! [X142,X141] : (~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X141),X142))),s('type.num.num',sK3(X142,X141)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X141),X142))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X141),X142))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X141),X142)))))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X141),X142)))) )),
  inference(subsumption_resolution,[],[f7912,f165])).
fof(f7912,plain,(
  ( ! [X142,X141] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X141),X142))),s('type.num.num',sK3(X142,X141)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X141),X142))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X141),X142))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X141),X142)))))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X141),X142)))) )),
  inference(superposition,[],[f148,f164])).
fof(f164,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0',aHL_BOOL_CASES)).
fof(f19250,plain,(
  $false | ($spl4 | $spl21)),
  inference(subsumption_resolution,[],[f16041,f16006])).
fof(f16041,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl4),
  inference(subsumption_resolution,[],[f16024,f168])).
fof(f16024,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl4),
  inference(superposition,[],[f7495,f177])).
fof(f7495,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))) | p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f7494,f140])).
fof(f140,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f83])).
fof(f83,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X11] : ! [X7,X12] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X11),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.state'(X11),X7)))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bvlSem.bvlSem_5|49|_prove_ltb')).
fof(f7494,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.bvlSem.state'(X0),X1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) | ~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f7441,f144])).
fof(f144,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11] : ! [X7,X12] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X11),X7))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X11),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvlSem.state'(X11),X7)))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bvlSem.bvlSem_47_prove_ltb')).
fof(f7441,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))) | p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.bvlSem.state'(X0),X1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.bvlSem.state'(X0),X1))))))))) )),
  inference(superposition,[],[f146,f123])).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2] : s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X6] : ! [X8,X7] : s('type.bvlSem.state'(X6),'const.bvlSem.dec_clock_2'(s('type.num.num',X8),s('type.bvlSem.state'(X6),X7))) = s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X7))),s('type.num.num',X8))))),s('type.bvlSem.state'(X6),X7)))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bvlSem.dec_clock_def')).
fof(f146,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) | ~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f16046,plain,(
  $false | ($spl4 | $spl11)),
  inference(subsumption_resolution,[],[f16045,f165])).
fof(f16045,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl11)),
  inference(forward_demodulation,[],[f16044,f370])).
fof(f370,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))) | $spl11),
  inference(subsumption_resolution,[],[f368,f168])).
fof(f368,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))) | $spl11),
  inference(superposition,[],[f227,f164])).
fof(f16044,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl4),
  inference(forward_demodulation,[],[f16043,f124])).
fof(f16043,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl4),
  inference(subsumption_resolution,[],[f16026,f168])).
fof(f16026,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl4),
  inference(superposition,[],[f146,f177])).
fof(f16040,plain,(
  $false | ($spl4 | $spl11)),
  inference(subsumption_resolution,[],[f16022,f167])).
fof(f167,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0',aHL_TRUTH)).
fof(f16022,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl11)),
  inference(backward_demodulation,[],[f177,f9869])).
fof(f9869,plain,(
  ~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))) | $spl11),
  inference(subsumption_resolution,[],[f9858,f165])).
fof(f9858,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))) | $spl11),
  inference(superposition,[],[f7415,f370])).
fof(f7415,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))))) | ~p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))))) )),
  inference(superposition,[],[f146,f124])).
fof(f16006,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl21),
  inference(cnf_transformation,[],[f16006_D])).
fof(f16006_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f16008,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3(sK1,sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | $spl23),
  inference(cnf_transformation,[],[f16008_D])).
fof(f16008_D,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3(sK1,sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f16004,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3(sK1,sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl6),
  inference(subsumption_resolution,[],[f15992,f165])).
fof(f15992,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3(sK1,sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl6),
  inference(superposition,[],[f148,f178])).
fof(f177,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))) | $spl4),
  inference(cnf_transformation,[],[f177_D])).
fof(f177_D,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f179,plain,(
  s(bool,'F_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl7),
  inference(cnf_transformation,[],[f179_D])).
fof(f179_D,plain,(
  s(bool,'F_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f15986,plain,(
  s(bool,'F_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f120,f164])).
fof(f120,plain,(
  s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f103])).
fof(f103,plain,(
  ? [X0,X1,X2] : s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))) != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1,X2] : s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))) = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),X1))) = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),X7))) = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.dec_clock_2'(s('type.num.num',X8),s('type.bvlSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),X7))) = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.dec_clock_2'(s('type.num.num',X8),s('type.bvlSem.state'(X6),X7)))))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0')).
fof(f15983,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f15982,f15972])).
fof(f15972,plain,(
  s(bool,'F_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl0),
  inference(forward_demodulation,[],[f120,f173])).
fof(f15982,plain,(
  s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl3),
  inference(trivial_inequality_removal,[],[f15980])).
fof(f15980,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl3),
  inference(superposition,[],[f175,f164])).
fof(f15966,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f15950,f165])).
fof(f15950,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(superposition,[],[f15913,f173])).
fof(f15913,plain,(
  ( ! [X0] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',X0),s('type.bvlSem.state'(sK0),sK1))))))) ) | $spl2),
  inference(superposition,[],[f15892,f123])).
fof(f15892,plain,(
  ( ! [X0] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.state'(sK0),sK1))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f15891,f168])).
fof(f15891,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.state'(sK0),sK1))))))) ) | $spl2),
  inference(forward_demodulation,[],[f15890,f236])).
fof(f236,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1))))) | $spl2),
  inference(subsumption_resolution,[],[f234,f165])).
fof(f234,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1))))) | $spl2),
  inference(superposition,[],[f206,f164])).
fof(f206,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl2),
  inference(subsumption_resolution,[],[f198,f168])).
fof(f198,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | $spl2),
  inference(superposition,[],[f146,f174])).
fof(f174,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl2),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f15890,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.state'(sK0),sK1))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f15871,f168])).
fof(f15871,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.state'(sK0),sK1))))))) ) | $spl2),
  inference(superposition,[],[f8371,f283])).
fof(f283,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',X1))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f281,f165])).
fof(f281,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',X1))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) ) | $spl2),
  inference(superposition,[],[f207,f164])).
fof(f207,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',X0))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f199,f168])).
fof(f199,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',X0))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))))) ) | $spl2),
  inference(superposition,[],[f147,f174])).
fof(f8371,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))),s('type.num.num',sK3('const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8)),X6)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X8)))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8))))))) )),
  inference(forward_demodulation,[],[f8370,f140])).
fof(f8370,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X8)))))) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))),s('type.num.num',sK3('const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8)),X6)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8))))))) )),
  inference(forward_demodulation,[],[f7916,f144])).
fof(f7916,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))),s('type.num.num',sK3('const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8)),X6)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8))))))))) )),
  inference(superposition,[],[f148,f140])).
fof(f7282,plain,(
  ( ! [X5] : (p(s(bool,X5))) ) | $spl16),
  inference(cnf_transformation,[],[f7282_D])).
fof(f7282_D,plain,(
  ( ! [X5] : (p(s(bool,X5))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f7283,plain,(
  ( ! [X4] : (~p(s(bool,X4))) ) | $spl18),
  inference(cnf_transformation,[],[f7283_D])).
fof(f7283_D,plain,(
  ( ! [X4] : (~p(s(bool,X4))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7215,plain,(
  ( ! [X6,X7] : (~p(s(bool,X6)) | p(s(bool,X7))) ) | $spl12),
  inference(superposition,[],[f153,f7143])).
fof(f153,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0] : ((~p(s(bool,X0)) | ~p(s(bool,'F_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | (p(s(bool,X0)) & p(s(bool,'F_0')))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : (((~p(s(bool,X0)) | ~p(s(bool,'F_0'))) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | (p(s(bool,X0)) & p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : ((p(s(bool,X0)) & p(s(bool,'F_0'))) <=> p(s(bool,'F_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9] : ((p(s(bool,X9)) & p(s(bool,'F_0'))) <=> p(s(bool,'F_0')))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bool.AND_CLAUSES|split|3')).
fof(f7214,plain,(
  ( ! [X4,X5] : (~p(s(bool,X4)) | p(s(bool,X5))) ) | $spl12),
  inference(superposition,[],[f157,f7143])).
fof(f157,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | ~p(s(bool,X0)) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | (p(s(bool,'F_0')) & p(s(bool,X0)))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) | ~p(s(bool,X0))) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | (p(s(bool,'F_0')) & p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0] : ((p(s(bool,'F_0')) & p(s(bool,X0))) <=> p(s(bool,'F_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X9] : ((p(s(bool,'F_0')) & p(s(bool,X9))) <=> p(s(bool,'F_0')))),
  file('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0','thm.bool.AND_CLAUSES|split|2')).
fof(f7143,plain,(
  ( ! [X40] : (s(bool,'F_0') = s(bool,X40)) ) | $spl12),
  inference(cnf_transformation,[],[f7143_D])).
fof(f7143_D,plain,(
  ( ! [X40] : (s(bool,'F_0') = s(bool,X40)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f7144,plain,(
  ( ! [X43,X41,X42] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),X42)))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),'const.bvlSem.dec_clock_2'(s('type.num.num',X43),s('type.bvlSem.state'(X41),X42))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))),s('type.num.num',sK3(X42,X41)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) ) | $spl14),
  inference(cnf_transformation,[],[f7144_D])).
fof(f7144_D,plain,(
  ( ! [X43,X41,X42] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),X42)))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),'const.bvlSem.dec_clock_2'(s('type.num.num',X43),s('type.bvlSem.state'(X41),X42))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))),s('type.num.num',sK3(X42,X41)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f7145,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X45),X46)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X45),X46))),s('type.num.num',sK3(X46,X45)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X45),X46))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X44) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X45),'const.bvlSem.dec_clock_2'(s('type.num.num',X47),s('type.bvlSem.state'(X45),X46)))))) ) | $spl2),
  inference(subsumption_resolution,[],[f7091,f305])).
fof(f305,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl2),
  inference(duplicate_literal_removal,[],[f296])).
fof(f296,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f231,f238])).
fof(f238,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,X0),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f236,f164])).
fof(f231,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,X0),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),sK1)))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f206,f164])).
fof(f7091,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,X44)) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X45),X46)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X45),X46))),s('type.num.num',sK3(X46,X45)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X45),X46))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X44) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X45),'const.bvlSem.dec_clock_2'(s('type.num.num',X47),s('type.bvlSem.state'(X45),X46)))))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f7084])).
fof(f7084,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,X44)) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X45),X46)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X45),X46))),s('type.num.num',sK3(X46,X45)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X45),X46))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X44) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X45),'const.bvlSem.dec_clock_2'(s('type.num.num',X47),s('type.bvlSem.state'(X45),X46))))) | s(bool,'F_0') = s(bool,X44)) ) | $spl2),
  inference(superposition,[],[f1833,f894])).
fof(f894,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,X0),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X1),X2))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X1),'const.bvlSem.dec_clock_2'(s('type.num.num',X3),s('type.bvlSem.state'(X1),X2))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f827,f164])).
fof(f827,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1)))))) ) | $spl2),
  inference(superposition,[],[f488,f123])).
fof(f488,plain,(
  ( ! [X6,X8,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),X8))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8)))))) ) | $spl2),
  inference(forward_demodulation,[],[f463,f144])).
fof(f463,plain,(
  ( ! [X6,X8,X7] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8))))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X7),s('type.bvlSem.state'(X6),X8)))))) ) | $spl2),
  inference(superposition,[],[f411,f140])).
fof(f411,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X2),X3))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X2),X3))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X2),X3)))) ) | $spl2),
  inference(subsumption_resolution,[],[f403,f165])).
fof(f403,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X2),X3))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X2),X3))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X2),X3)))))) ) | $spl2),
  inference(superposition,[],[f317,f164])).
fof(f317,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X4),X5))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X4),X5)))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X4),X5)))) ) | $spl2),
  inference(resolution,[],[f305,f146])).
fof(f1833,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,X0),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X1),X2)))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X1),X2)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))),s('type.num.num',sK3(X2,X1)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X1),X2))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl2),
  inference(superposition,[],[f319,f164])).
fof(f319,plain,(
  ( ! [X10,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X9),X10))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X9),X10)))))) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X9),X10)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X9),X10))),s('type.num.num',sK3(X10,X9)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X9),X10))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) ) | $spl2),
  inference(resolution,[],[f305,f148])).
fof(f7142,plain,(
  ( ! [X43,X41,X42,X40] : (p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),X42)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))),s('type.num.num',sK3(X42,X41)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),'const.bvlSem.dec_clock_2'(s('type.num.num',X43),s('type.bvlSem.state'(X41),X42)))))) ) | $spl2),
  inference(subsumption_resolution,[],[f7092,f168])).
fof(f7092,plain,(
  ( ! [X43,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),X42)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))),s('type.num.num',sK3(X42,X41)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),'const.bvlSem.dec_clock_2'(s('type.num.num',X43),s('type.bvlSem.state'(X41),X42)))))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f7083])).
fof(f7083,plain,(
  ( ! [X43,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),X42)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))),s('type.num.num',sK3(X42,X41)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X41),X42))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X41),'const.bvlSem.dec_clock_2'(s('type.num.num',X43),s('type.bvlSem.state'(X41),X42))))) | s(bool,'F_0') = s(bool,X40)) ) | $spl2),
  inference(superposition,[],[f1833,f1295])).
fof(f1295,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,X64),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X65),X66))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X65),X66))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X65),'const.bvlSem.dec_clock_2'(s('type.num.num',X67),s('type.bvlSem.state'(X65),X66))))) | s(bool,'F_0') = s(bool,X64)) ) | $spl2),
  inference(duplicate_literal_removal,[],[f1257])).
fof(f1257,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,X64) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,X64),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X65),X66))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X65),X66))))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(X65),'const.bvlSem.dec_clock_2'(s('type.num.num',X67),s('type.bvlSem.state'(X65),X66))))) | s(bool,'F_0') = s(bool,X64)) ) | $spl2),
  inference(superposition,[],[f164,f894])).
fof(f362,plain,(
  $false | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f225,f207])).
fof(f225,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3('const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)),sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | $spl9),
  inference(cnf_transformation,[],[f225_D])).
fof(f225_D,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3('const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)),sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f227,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl11),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f223,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3('const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)),sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | $spl0),
  inference(forward_demodulation,[],[f222,f124])).
fof(f222,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num',sK3('const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)),sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK1))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl0),
  inference(forward_demodulation,[],[f221,f124])).
fof(f221,plain,(
  ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))),s('type.num.num',sK3('const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)),sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl0),
  inference(subsumption_resolution,[],[f215,f165])).
fof(f215,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool),happ(s(fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool)),happ(s(fun('type.option.option'('type.closSem.ref'('type.bvlSem.v')),fun(bool,fun(fun('type.closSem.ref'('type.bvlSem.v'),bool),bool))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))),s('type.num.num',sK3('const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)),sK0)))))),s(bool,'T_0'))),s(fun('type.closSem.ref'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.closSem.ref'('type.bvlSem.v'),fun(fun('type.list.list'('type.bvlSem.v'),bool),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),bool))),'const.closSem.ref_CASE_0'),s(fun('type.list.list'('type.bvlSem.v'),bool),'const.list.EVERY_1'(s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.option.option'('type.bvlSem.v')),bool),'const.list.EVERY_1'(s(fun('type.option.option'('type.bvlSem.v'),bool),'_dst_x1x0x0_3'(s(fun('type.option.option'('type.bvlSem.v'),fun(bool,fun(fun('type.bvlSem.v',bool),bool))),'const.option.option_CASE_0'),s(bool,'T_0'),s(fun('type.bvlSem.v',bool),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))))) | $spl0),
  inference(superposition,[],[f148,f173])).
fof(f190,plain,(
  $false | ($spl3 | $spl7)),
  inference(subsumption_resolution,[],[f189,f175])).
fof(f189,plain,(
  s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl7),
  inference(trivial_inequality_removal,[],[f188])).
fof(f188,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl7),
  inference(superposition,[],[f179,f164])).
fof(f171,plain,(
  s(bool,'F_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f120,f164])).
fof(f173,plain,(
  s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))) | $spl0),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f175,plain,(
  s(bool,'T_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | $spl3),
  inference(cnf_transformation,[],[f175_D])).
fof(f175_D,plain,(
  s(bool,'T_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f170,plain,(
  s(bool,'T_0') != s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),sK1))) | s(bool,'F_0') = s(bool,'const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num',sK2),s('type.bvlSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f120,f164])).
% SZS output end Proof for thm.bvl_to_bviProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 530
% Passive clauses: 5878
% Generated clauses: 31318
% Final active clauses: 244
% Final passive clauses: 3141
% Input formulas: 43
% Initial clauses: 48
% 
% Selected by SInE selection: 35
% SInE iterations: 1
% 
% Duplicate literals: 186
% Trivial inequalities: 13
% Fw subsumption resolutions: 3558
% Fw demodulations: 9348
% Bw demodulations: 88
% 
% Simple tautologies: 572
% Equational tautologies: 4
% Forward subsumptions: 12052
% Bw demodulations to eq. taut.: 28
% 
% Binary resolution: 2637
% Forward superposition: 7764
% Backward superposition: 7594
% Self superposition: 18
% Equality factoring: 6
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 19
% SAT solver binary clauses: 10
% 
% Sat splits: 9
% Sat splitting refutations: 9
% 
% Memory used [KB]: 38123
% Time elapsed: 1.471 s
% ------------------------------
% ------------------------------
% Success in time 13.22 s
