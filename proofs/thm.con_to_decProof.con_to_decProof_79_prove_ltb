Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.con_to_decProof
% (2762)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 138
% Passive clauses: 3243
% Generated clauses: 17518
% Final active clauses: 138
% Final passive clauses: 3012
% Input formulas: 68
% Initial clauses: 115
% 
% Duplicate literals: 497
% Trivial inequalities: 352
% Fw subsumption resolutions: 1309
% Fw demodulations: 1825
% 
% Simple tautologies: 340
% Equational tautologies: 44
% Forward subsumptions: 9705
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 193
% Factoring: 1
% Forward superposition: 7058
% Backward superposition: 5896
% Self superposition: 185
% Equality factoring: 64
% Equality resolution: 47
% 
% Split clauses: 188
% Split components: 398
% SAT solver clauses: 292
% SAT solver unit clauses: 13
% SAT solver binary clauses: 67
% 
% Sat splits: 188
% 
% TWLsolver clauses: 292
% TWLsolver calls for satisfiability: 65
% 
% Memory used [KB]: 17910
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.con_to_decProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.con_to_decProof
% SZS output start Proof for thm.con_to_decProof
fof(f4975,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4974,f4941,f4942,f313,f414,f3741,f3742,f243,f377])).
fof(f377,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) | $spl0),
  inference(cnf_transformation,[],[f377_D])).
fof(f377_D,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f243,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X6,X7,X8] : s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f183])).
fof(f183,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ! [X6,X7,X8] : s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) != s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',X5),s('type.conSem.state'(X0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),X4))))),s('type.conSem.state'(X0),X1))),s('type.list.list'('type.conLang.prompt'),X3)))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ? [X6,X7,X8] : s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) = s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',X5),s('type.conSem.state'(X0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),X4))))),s('type.conSem.state'(X0),X1))),s('type.list.list'('type.conLang.prompt'),X3)))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ? [X6,X7,X8] : s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X0),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X8))))) = s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',X5),s('type.conSem.state'(X0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.conSem.v')),X4))))),s('type.conSem.state'(X0),X1))),s('type.list.list'('type.conLang.prompt'),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ? [X12,X13,X14] : s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X6),X12),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X13),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X14))))) = s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',X11),s('type.conSem.state'(X6),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.conSem.v')),X10))))),s('type.conSem.state'(X6),X7))),s('type.list.list'('type.conLang.prompt'),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ? [X12,X13,X14] : s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X6),X12),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.conSem.v')),X13),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X14))))) = s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',X11),s('type.conSem.state'(X6),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.conSem.v')),X10))))),s('type.conSem.state'(X6),X7))),s('type.list.list'('type.conLang.prompt'),X9)))),
  file('thm.con_to_decProof.con_to_decProof_79_prove_ltb','thm.con_to_decProof.con_to_decProof_79_prove_ltb')).
fof(f3742,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X1),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),X0))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) | $spl626),
  inference(cnf_transformation,[],[f3742_D])).
fof(f3742_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X1),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),X0))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) <=> ~$spl626),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl626])])).
fof(f3741,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X1),s('type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),X0))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) | ($spl0 | $spl52)),
  inference(superposition,[],[f377,f414])).
fof(f414,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK9(X2,X1,X0)),s(X1,sK10(X2,X1,X0))))) ) | $spl52),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK9(X2,X1,X0)),s(X1,sK10(X2,X1,X0))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f313,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK9(X2,X1,X0)),s(X1,sK10(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK9(X2,X1,X0)),s(X1,sK10(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X6,X15] : ! [X29] : ? [X52,X14] : s('type.pair.prod'(X6,X15),X29) = s('type.pair.prod'(X6,X15),'const.pair.,_2'(s(X6,X52),s(X15,X14)))),
  file('thm.con_to_decProof.con_to_decProof_79_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f4942,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),X0) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) | $spl808),
  inference(cnf_transformation,[],[f4942_D])).
fof(f4942_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),X0) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) <=> ~$spl808),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl808])])).
fof(f4941,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),X0) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.option.option'('type.conSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_prog_3'(s('type.conSem.environment',sK5),s('type.conSem.state'(sK0),'const.conSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(sK0),sK2))),s('type.list.list'('type.option.option'('type.conSem.v')),sK4))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.prompt'),sK3)))) ) | ($spl52 | $spl626)),
  inference(superposition,[],[f3742,f414])).
fof(f4974,plain,(
  $false | $spl808),
  inference(equality_resolution,[],[f4942])).
% SZS output end Proof for thm.con_to_decProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 72
% Passive clauses: 404
% Generated clauses: 4673
% Final active clauses: 65
% Final passive clauses: 321
% Input formulas: 68
% Initial clauses: 115
% 
% Duplicate literals: 215
% Trivial inequalities: 59
% Fw subsumption resolutions: 238
% Fw demodulations: 250
% Bw demodulations: 10
% Condensations: 507
% Global subsumptions: 9
% 
% Simple tautologies: 106
% Equational tautologies: 36
% Forward subsumptions: 2154
% 
% Binary resolution: 134
% Factoring: 1
% Forward superposition: 1514
% Backward superposition: 1058
% Self superposition: 79
% Equality factoring: 51
% Equality resolution: 17
% 
% Split clauses: 19
% Split components: 38
% SAT solver clauses: 821
% SAT solver unit clauses: 152
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 19
% 
% Sat splits: 19
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 784
% TWLsolver calls for satisfiability: 381
% 
% Memory used [KB]: 5373
% Time elapsed: 0.277 s
% ------------------------------
% ------------------------------
% Success in time 0.931 s
