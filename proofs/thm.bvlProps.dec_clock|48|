Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% (103522)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 171
% Passive clauses: 1340
% Generated clauses: 20078
% Final active clauses: 152
% Final passive clauses: 876
% Input formulas: 48
% Initial clauses: 69
% 
% Duplicate literals: 579
% Trivial inequalities: 290
% Fw subsumption resolutions: 2384
% Fw demodulations: 1901
% Bw demodulations: 11
% 
% Simple tautologies: 349
% Equational tautologies: 29
% Forward subsumptions: 12655
% Fw demodulations to eq. taut.: 12
% 
% Binary resolution: 64
% Forward superposition: 7862
% Backward superposition: 6483
% Self superposition: 223
% Equality factoring: 54
% Equality resolution: 41
% 
% Split clauses: 332
% Split components: 677
% SAT solver clauses: 766
% SAT solver unit clauses: 25
% SAT solver binary clauses: 143
% 
% Sat splits: 332
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 763
% TWLsolver calls for satisfiability: 113
% 
% Memory used [KB]: 14200
% Time elapsed: 0.619 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvlProps
% (103558)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 97
% Passive clauses: 304
% Generated clauses: 13317
% Final active clauses: 92
% Final passive clauses: 198
% Input formulas: 48
% Initial clauses: 69
% 
% Duplicate literals: 677
% Trivial inequalities: 175
% Fw subsumption resolutions: 1031
% Fw demodulations: 826
% Bw demodulations: 6
% Condensations: 2023
% Global subsumptions: 4
% 
% Simple tautologies: 219
% Equational tautologies: 30
% Forward subsumptions: 7381
% 
% Binary resolution: 15
% Forward superposition: 4357
% Backward superposition: 3555
% Self superposition: 174
% Equality factoring: 64
% Equality resolution: 32
% 
% Split clauses: 44
% Split components: 88
% SAT solver clauses: 592
% SAT solver unit clauses: 102
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 8
% 
% Sat splits: 44
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 576
% TWLsolver calls for satisfiability: 255
% 
% Memory used [KB]: 10234
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f11890,plain,(
  $false),
  inference(subsumption_resolution,[],[f11889,f158])).
fof(f158,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.bvlProps.dec_clock|48|','thm.arithmetic.SUB_|48||split|1')).
fof(f11889,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK1))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK1))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f11808,f10038])).
fof(f10038,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f9959,f224])).
fof(f224,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f215,f214])).
fof(f214,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X17,X6] : ! [X12,X18] : s(X6,X12) = s(X6,'const.combin.K_2'(s(X6,X12),s(X17,X18)))),
  file('thm.bvlProps.dec_clock|48|','thm.combin.K_THM')).
fof(f215,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6,X17] : ! [X19,X20] : s(X6,'const.combin.K_2'(s(X6,X19),s(X17,X20))) = s(X6,happ(s(fun(X17,X6),'const.combin.K_1'(s(X6,X19))),s(X17,X20)))),
  file('thm.bvlProps.dec_clock|48|','ARITY_1_2_const.combin.K')).
fof(f9959,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) )),
  inference(superposition,[],[f197,f204])).
fof(f204,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0] : ! [X1,X2] : s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6] : ! [X8,X9] : s('type.bvlSem.state'(X6),'const.bvlSem.dec_clock_2'(s('type.num.num',X8),s('type.bvlSem.state'(X6),X9))) = s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X9))),s('type.num.num',X8))))),s('type.bvlSem.state'(X6),X9)))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.dec_clock_def')).
fof(f197,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X7] : ! [X9,X13] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X13),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),X9))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.bvlSem_68_prove_ltb')).
fof(f11808,plain,(
  s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),sK1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(sK0),sK1)))))),
  inference(unit_resulting_resolution,[],[f153,f10030,f10031,f10032,f10033,f213])).
fof(f213,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : ((s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))))) & (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1,X2] : ((s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))))) & ((s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X7] : ! [X15,X16] : (s('type.bvlSem.state'(X7),X15) = s('type.bvlSem.state'(X7),X16) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),X15))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),X16))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),X15))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),X16))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),X15))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),X16))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),X15))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),X16))) & s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),X15))) = s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),X16)))))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.state_component_equality')).
fof(f10033,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f9936,f190])).
fof(f190,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X7] : ! [X9,X13] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),X9))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.bvlSem_6|48|_prove_ltb')).
fof(f9936,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f211])).
fof(f211,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f10032,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f9937,f192])).
fof(f192,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X7] : ! [X9,X13] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),X9))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.bvlSem_5|49|_prove_ltb')).
fof(f9937,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f209])).
fof(f209,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f10031,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f9938,f189])).
fof(f189,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X7] : ! [X9,X13] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),X9))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.bvlSem_47_prove_ltb')).
fof(f9938,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f208])).
fof(f208,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f10030,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f9939,f187])).
fof(f187,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X7] : ! [X9,X13] : s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),X9))) = s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlSem.bvlSem_64_prove_ltb')).
fof(f9939,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f212])).
fof(f212,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f153,plain,(
  s('type.bvlSem.state'(sK0),sK1) != s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(sK0),sK1)))),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  s('type.bvlSem.state'(sK0),sK1) != s('type.bvlSem.state'(sK0),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f131])).
fof(f131,plain,(
  ? [X0,X1] : s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X0),X1)))),
  inference(rectify,[],[f129])).
fof(f129,plain,(
  ? [X1,X3] : s('type.bvlSem.state'(X1),X3) != s('type.bvlSem.state'(X1),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X1),X3)))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ~! [X1,X3] : s('type.bvlSem.state'(X1),X3) = s('type.bvlSem.state'(X1),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X1),X3)))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ~! [X1] : ! [X3] : s('type.bvlSem.state'(X1),X3) = s('type.bvlSem.state'(X1),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X1),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.bvlSem.state'(X7),X9) = s('type.bvlSem.state'(X7),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X7),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.bvlSem.state'(X7),X9) = s('type.bvlSem.state'(X7),'const.bvlSem.dec_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X7),X9)))),
  file('thm.bvlProps.dec_clock|48|','thm.bvlProps.dec_clock|48|')).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 111
% Passive clauses: 311
% Generated clauses: 11669
% Final active clauses: 97
% Final passive clauses: 157
% Input formulas: 48
% Initial clauses: 69
% 
% Duplicate literals: 498
% Trivial inequalities: 134
% Fw subsumption resolutions: 721
% Fw demodulations: 850
% Bw demodulations: 47
% Condensations: 1495
% Global subsumptions: 4
% 
% Simple tautologies: 185
% Equational tautologies: 92
% Forward subsumptions: 7330
% Fw demodulations to eq. taut.: 22
% 
% Unit resulting resolution: 391
% Forward superposition: 4049
% Backward superposition: 3095
% Self superposition: 182
% Equality factoring: 53
% Equality resolution: 27
% 
% Split clauses: 20
% Split components: 40
% SAT solver clauses: 365
% SAT solver unit clauses: 88
% SAT solver binary clauses: 81
% 
% Sat splits: 20
% Sat splitting refutations: 8
% 
% Memory used [KB]: 7291
% Time elapsed: 0.477 s
% ------------------------------
% ------------------------------
% Success in time 1.812 s
