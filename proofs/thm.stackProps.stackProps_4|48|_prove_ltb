Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackProps
% SZS output start Proof for thm.stackProps
fof(f4974,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4973,f224,f470,f468,f466,f464,f462,f460,f458,f456,f454,f452,f450,f448,f446,f444,f442,f440,f438,f436,f434,f432,f430,f428,f426,f424,f422,f229,f421,f4971,f4970,f4969,f4968,f4967,f4966,f4965,f4964,f4963,f4962,f4961,f4960,f4393,f4392,f240,f447,f4391,f4390,f4389,f1729,f1728,f1727,f818,f4972])).
fof(f4972,plain,(
  $false | $spl28),
  inference(subsumption_resolution,[],[f450,f226])).
fof(f226,plain,(
  ( ! [X47,X45,X46] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.LocValue_3'(s('type.num.num',X45),s('type.num.num',X46),s('type.num.num',X47)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') = s('type.stackLang.prog'(sK12),sK13) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Inst_1'(s('type.asm.inst'(sK12),sK14))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Get_2'(s('type.num.num',sK15),s('type.wordLang.store_name',sK16))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Set_2'(s('type.wordLang.store_name',sK17),s('type.num.num',sK18))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),sK19),s('type.sum.sum'('type.num.num','type.num.num'),sK20),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))),sK21))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Seq_2'(s('type.stackLang.prog'(sK12),sK22),s('type.stackLang.prog'(sK12),sK23))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.If_5'(s('type.asm.cmp',sK24),s('type.num.num',sK25),s('type.asm.reg_imm'(sK12),sK26),s('type.stackLang.prog'(sK12),sK27),s('type.stackLang.prog'(sK12),sK28))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.While_4'(s('type.asm.cmp',sK29),s('type.num.num',sK30),s('type.asm.reg_imm'(sK12),sK31),s('type.stackLang.prog'(sK12),sK32))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.JumpLower_3'(s('type.num.num',sK33),s('type.num.num',sK34),s('type.num.num',sK35))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Alloc_1'(s('type.num.num',sK36))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Raise_1'(s('type.num.num',sK37))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Return_2'(s('type.num.num',sK38),s('type.num.num',sK39))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.FFI_4'(s('type.num.num',sK40),s('type.num.num',sK41),s('type.num.num',sK42),s('type.num.num',sK43))) | s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') = s('type.stackLang.prog'(sK12),sK13) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.LocValue_3'(s('type.num.num',sK44),s('type.num.num',sK45),s('type.num.num',sK46))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackAlloc_1'(s('type.num.num',sK47))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackFree_1'(s('type.num.num',sK48))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStore_2'(s('type.num.num',sK49),s('type.num.num',sK50))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStoreAny_2'(s('type.num.num',sK51),s('type.num.num',sK52))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoad_2'(s('type.num.num',sK53),s('type.num.num',sK54))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoadAny_2'(s('type.num.num',sK55),s('type.num.num',sK56))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackGetSize_1'(s('type.num.num',sK57))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackSetSize_1'(s('type.num.num',sK58))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.BitmapLoad_2'(s('type.num.num',sK59),s('type.num.num',sK60))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Halt_1'(s('type.num.num',sK61)))) & ! [X48,X49] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Seq_2'(s('type.stackLang.prog'(sK12),X48),s('type.stackLang.prog'(sK12),X49))) & ! [X45,X46,X47] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.LocValue_3'(s('type.num.num',X45),s('type.num.num',X46),s('type.num.num',X47))) & ! [X44] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Halt_1'(s('type.num.num',X44))) & ! [X43] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Inst_1'(s('type.asm.inst'(sK12),X43))) & s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') != s('type.stackLang.prog'(sK12),sK13) & ! [X38,X39,X40,X41,X42] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.If_5'(s('type.asm.cmp',X38),s('type.num.num',X39),s('type.asm.reg_imm'(sK12),X40),s('type.stackLang.prog'(sK12),X41),s('type.stackLang.prog'(sK12),X42))) & ! [X36,X37] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Get_2'(s('type.num.num',X36),s('type.wordLang.store_name',X37))) & ! [X34,X35] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Set_2'(s('type.wordLang.store_name',X34),s('type.num.num',X35))) & ! [X31,X32,X33] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X31),s('type.sum.sum'('type.num.num','type.num.num'),X32),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))),X33))) & ! [X27,X28,X29,X30] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.While_4'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(sK12),X29),s('type.stackLang.prog'(sK12),X30))) & ! [X24,X25,X26] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.JumpLower_3'(s('type.num.num',X24),s('type.num.num',X25),s('type.num.num',X26))) & ! [X23] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Alloc_1'(s('type.num.num',X23))) & ! [X22] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Raise_1'(s('type.num.num',X22))) & ! [X20,X21] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Return_2'(s('type.num.num',X20),s('type.num.num',X21))) & ! [X16,X17,X18,X19] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.FFI_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))) & s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') != s('type.stackLang.prog'(sK12),sK13) & ! [X15] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackAlloc_1'(s('type.num.num',X15))) & ! [X14] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackFree_1'(s('type.num.num',X14))) & ! [X12,X13] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackStore_2'(s('type.num.num',X12),s('type.num.num',X13))) & ! [X10,X11] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackStoreAny_2'(s('type.num.num',X10),s('type.num.num',X11))) & ! [X8,X9] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackLoad_2'(s('type.num.num',X8),s('type.num.num',X9))) & ! [X6,X7] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackLoadAny_2'(s('type.num.num',X6),s('type.num.num',X7))) & ! [X5] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackGetSize_1'(s('type.num.num',X5))) & ! [X4] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackSetSize_1'(s('type.num.num',X4))) & ! [X2,X3] : s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.BitmapLoad_2'(s('type.num.num',X2),s('type.num.num',X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38,sK39,sK40,sK41,sK42,sK43,sK44,sK45,sK46,sK47,sK48,sK49,sK50,sK51,sK52,sK53,sK54,sK55,sK56,sK57,sK58,sK59,sK60,sK61])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X97] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X97))) | ? [X95,X96] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X95),s('type.wordLang.store_name',X96))) | ? [X93,X94] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X93),s('type.num.num',X94))) | ? [X90,X91,X92] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X90),s('type.sum.sum'('type.num.num','type.num.num'),X91),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X92))) | ? [X88,X89] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X88),s('type.stackLang.prog'(X0),X89))) | ? [X83,X84,X85,X86,X87] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X83),s('type.num.num',X84),s('type.asm.reg_imm'(X0),X85),s('type.stackLang.prog'(X0),X86),s('type.stackLang.prog'(X0),X87))) | ? [X79,X80,X81,X82] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X79),s('type.num.num',X80),s('type.asm.reg_imm'(X0),X81),s('type.stackLang.prog'(X0),X82))) | ? [X76,X77,X78] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X76),s('type.num.num',X77),s('type.num.num',X78))) | ? [X75] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X75))) | ? [X74] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X74))) | ? [X72,X73] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X72),s('type.num.num',X73))) | ? [X68,X69,X70,X71] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X68),s('type.num.num',X69),s('type.num.num',X70),s('type.num.num',X71))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X65,X66,X67] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X65),s('type.num.num',X66),s('type.num.num',X67))) | ? [X64] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X64))) | ? [X63] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X63))) | ? [X61,X62] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X61),s('type.num.num',X62))) | ? [X59,X60] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X59),s('type.num.num',X60))) | ? [X57,X58] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X57),s('type.num.num',X58))) | ? [X55,X56] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X55),s('type.num.num',X56))) | ? [X54] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X54))) | ? [X53] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X53))) | ? [X51,X52] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X51),s('type.num.num',X52))) | ? [X50] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X50)))) & ! [X48,X49] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X48),s('type.stackLang.prog'(X0),X49))) & ! [X45,X46,X47] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X45),s('type.num.num',X46),s('type.num.num',X47))) & ! [X44] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X44))) & ! [X43] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X43))) & s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') != s('type.stackLang.prog'(X0),X1) & ! [X38,X39,X40,X41,X42] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X38),s('type.num.num',X39),s('type.asm.reg_imm'(X0),X40),s('type.stackLang.prog'(X0),X41),s('type.stackLang.prog'(X0),X42))) & ! [X36,X37] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X36),s('type.wordLang.store_name',X37))) & ! [X34,X35] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X34),s('type.num.num',X35))) & ! [X31,X32,X33] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X31),s('type.sum.sum'('type.num.num','type.num.num'),X32),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X33))) & ! [X27,X28,X29,X30] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(X0),X29),s('type.stackLang.prog'(X0),X30))) & ! [X24,X25,X26] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X24),s('type.num.num',X25),s('type.num.num',X26))) & ! [X23] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X23))) & ! [X22] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X22))) & ! [X20,X21] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X20),s('type.num.num',X21))) & ! [X16,X17,X18,X19] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))) & s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') != s('type.stackLang.prog'(X0),X1) & ! [X15] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X15))) & ! [X14] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X14))) & ! [X12,X13] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X12),s('type.num.num',X13))) & ! [X10,X11] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X10),s('type.num.num',X11))) & ! [X8,X9] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X8),s('type.num.num',X9))) & ! [X6,X7] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X6),s('type.num.num',X7))) & ! [X5] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X5))) & ! [X4] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X4))) & ! [X2,X3] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X2),s('type.num.num',X3))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X49] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X49))) | ? [X47,X48] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X47),s('type.wordLang.store_name',X48))) | ? [X45,X46] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X45),s('type.num.num',X46))) | ? [X42,X43,X44] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X42),s('type.sum.sum'('type.num.num','type.num.num'),X43),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X44))) | ? [X40,X41] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X40),s('type.stackLang.prog'(X0),X41))) | ? [X35,X36,X37,X38,X39] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X35),s('type.num.num',X36),s('type.asm.reg_imm'(X0),X37),s('type.stackLang.prog'(X0),X38),s('type.stackLang.prog'(X0),X39))) | ? [X31,X32,X33,X34] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X31),s('type.num.num',X32),s('type.asm.reg_imm'(X0),X33),s('type.stackLang.prog'(X0),X34))) | ? [X28,X29,X30] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30))) | ? [X27] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X27))) | ? [X26] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X26))) | ? [X24,X25] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X24),s('type.num.num',X25))) | ? [X20,X21,X22,X23] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X20),s('type.num.num',X21),s('type.num.num',X22),s('type.num.num',X23))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X17,X18,X19] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))) | ? [X16] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X16))) | ? [X15] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X15))) | ? [X13,X14] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X13),s('type.num.num',X14))) | ? [X11,X12] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X9,X10] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X9),s('type.num.num',X10))) | ? [X7,X8] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X7),s('type.num.num',X8))) | ? [X6] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X6))) | ? [X5] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X5))) | ? [X3,X4] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X3),s('type.num.num',X4))) | ? [X2] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X2)))) & ! [X96,X97] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X96),s('type.stackLang.prog'(X0),X97))) & ! [X93,X94,X95] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X93),s('type.num.num',X94),s('type.num.num',X95))) & ! [X92] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X92))) & ! [X91] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X91))) & s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') != s('type.stackLang.prog'(X0),X1) & ! [X86,X87,X88,X89,X90] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X86),s('type.num.num',X87),s('type.asm.reg_imm'(X0),X88),s('type.stackLang.prog'(X0),X89),s('type.stackLang.prog'(X0),X90))) & ! [X84,X85] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X84),s('type.wordLang.store_name',X85))) & ! [X82,X83] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X82),s('type.num.num',X83))) & ! [X79,X80,X81] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X79),s('type.sum.sum'('type.num.num','type.num.num'),X80),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X81))) & ! [X75,X76,X77,X78] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X75),s('type.num.num',X76),s('type.asm.reg_imm'(X0),X77),s('type.stackLang.prog'(X0),X78))) & ! [X72,X73,X74] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X72),s('type.num.num',X73),s('type.num.num',X74))) & ! [X71] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X71))) & ! [X70] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X70))) & ! [X68,X69] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X68),s('type.num.num',X69))) & ! [X64,X65,X66,X67] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.num.num',X67))) & s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') != s('type.stackLang.prog'(X0),X1) & ! [X63] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X63))) & ! [X62] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X62))) & ! [X60,X61] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X60),s('type.num.num',X61))) & ! [X58,X59] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X58),s('type.num.num',X59))) & ! [X56,X57] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X56),s('type.num.num',X57))) & ! [X54,X55] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X54),s('type.num.num',X55))) & ! [X53] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X53))) & ! [X52] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X52))) & ! [X50,X51] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X50),s('type.num.num',X51))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X49] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X49))) | ? [X47,X48] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X47),s('type.wordLang.store_name',X48))) | ? [X45,X46] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X45),s('type.num.num',X46))) | ? [X42,X43,X44] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X42),s('type.sum.sum'('type.num.num','type.num.num'),X43),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X44))) | ? [X40,X41] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X40),s('type.stackLang.prog'(X0),X41))) | ? [X35,X36,X37,X38,X39] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X35),s('type.num.num',X36),s('type.asm.reg_imm'(X0),X37),s('type.stackLang.prog'(X0),X38),s('type.stackLang.prog'(X0),X39))) | ? [X31,X32,X33,X34] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X31),s('type.num.num',X32),s('type.asm.reg_imm'(X0),X33),s('type.stackLang.prog'(X0),X34))) | ? [X28,X29,X30] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30))) | ? [X27] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X27))) | ? [X26] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X26))) | ? [X24,X25] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X24),s('type.num.num',X25))) | ? [X20,X21,X22,X23] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X20),s('type.num.num',X21),s('type.num.num',X22),s('type.num.num',X23))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X17,X18,X19] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))) | ? [X16] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X16))) | ? [X15] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X15))) | ? [X13,X14] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X13),s('type.num.num',X14))) | ? [X11,X12] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X9,X10] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X9),s('type.num.num',X10))) | ? [X7,X8] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X7),s('type.num.num',X8))) | ? [X6] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X6))) | ? [X5] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X5))) | ? [X3,X4] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X3),s('type.num.num',X4))) | ? [X2] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X2)))) & (! [X96,X97] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X96),s('type.stackLang.prog'(X0),X97))) & ! [X93,X94,X95] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X93),s('type.num.num',X94),s('type.num.num',X95))) & ! [X92] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X92))) & ! [X91] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X91))) & s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') != s('type.stackLang.prog'(X0),X1) & ! [X86,X87,X88,X89,X90] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X86),s('type.num.num',X87),s('type.asm.reg_imm'(X0),X88),s('type.stackLang.prog'(X0),X89),s('type.stackLang.prog'(X0),X90))) & ! [X84,X85] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X84),s('type.wordLang.store_name',X85))) & ! [X82,X83] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X82),s('type.num.num',X83))) & ! [X79,X80,X81] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X79),s('type.sum.sum'('type.num.num','type.num.num'),X80),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X81))) & ! [X75,X76,X77,X78] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X75),s('type.num.num',X76),s('type.asm.reg_imm'(X0),X77),s('type.stackLang.prog'(X0),X78))) & ! [X72,X73,X74] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X72),s('type.num.num',X73),s('type.num.num',X74))) & ! [X71] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X71))) & ! [X70] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X70))) & ! [X68,X69] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X68),s('type.num.num',X69))) & ! [X64,X65,X66,X67] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.num.num',X67))) & s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') != s('type.stackLang.prog'(X0),X1) & ! [X63] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X63))) & ! [X62] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X62))) & ! [X60,X61] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X60),s('type.num.num',X61))) & ! [X58,X59] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X58),s('type.num.num',X59))) & ! [X56,X57] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X56),s('type.num.num',X57))) & ! [X54,X55] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X54),s('type.num.num',X55))) & ! [X53] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X53))) & ! [X52] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X52))) & ! [X50,X51] : s('type.stackLang.prog'(X0),X1) != s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X50),s('type.num.num',X51)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X49] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X49))) | ? [X47,X48] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X47),s('type.wordLang.store_name',X48))) | ? [X45,X46] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X45),s('type.num.num',X46))) | ? [X42,X43,X44] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X42),s('type.sum.sum'('type.num.num','type.num.num'),X43),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X44))) | ? [X40,X41] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X40),s('type.stackLang.prog'(X0),X41))) | ? [X35,X36,X37,X38,X39] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X35),s('type.num.num',X36),s('type.asm.reg_imm'(X0),X37),s('type.stackLang.prog'(X0),X38),s('type.stackLang.prog'(X0),X39))) | ? [X31,X32,X33,X34] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X31),s('type.num.num',X32),s('type.asm.reg_imm'(X0),X33),s('type.stackLang.prog'(X0),X34))) | ? [X28,X29,X30] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30))) | ? [X27] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X27))) | ? [X26] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X26))) | ? [X24,X25] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X24),s('type.num.num',X25))) | ? [X20,X21,X22,X23] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X20),s('type.num.num',X21),s('type.num.num',X22),s('type.num.num',X23))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X17,X18,X19] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))) | ? [X16] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X16))) | ? [X15] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X15))) | ? [X13,X14] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X13),s('type.num.num',X14))) | ? [X11,X12] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X9,X10] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X9),s('type.num.num',X10))) | ? [X7,X8] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X7),s('type.num.num',X8))) | ? [X6] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X6))) | ? [X5] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X5))) | ? [X3,X4] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X3),s('type.num.num',X4))) | ? [X2] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X2)))) => (? [X96,X97] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X96),s('type.stackLang.prog'(X0),X97))) | ? [X93,X94,X95] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X93),s('type.num.num',X94),s('type.num.num',X95))) | ? [X92] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X92))) | ? [X91] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X91))) | s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X86,X87,X88,X89,X90] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X86),s('type.num.num',X87),s('type.asm.reg_imm'(X0),X88),s('type.stackLang.prog'(X0),X89),s('type.stackLang.prog'(X0),X90))) | ? [X84,X85] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X84),s('type.wordLang.store_name',X85))) | ? [X82,X83] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X82),s('type.num.num',X83))) | ? [X79,X80,X81] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X79),s('type.sum.sum'('type.num.num','type.num.num'),X80),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X81))) | ? [X75,X76,X77,X78] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X75),s('type.num.num',X76),s('type.asm.reg_imm'(X0),X77),s('type.stackLang.prog'(X0),X78))) | ? [X72,X73,X74] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X72),s('type.num.num',X73),s('type.num.num',X74))) | ? [X71] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X71))) | ? [X70] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X70))) | ? [X68,X69] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X68),s('type.num.num',X69))) | ? [X64,X65,X66,X67] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.num.num',X67))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X63] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X63))) | ? [X62] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X62))) | ? [X60,X61] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X60),s('type.num.num',X61))) | ? [X58,X59] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X58),s('type.num.num',X59))) | ? [X56,X57] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X56),s('type.num.num',X57))) | ? [X54,X55] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X54),s('type.num.num',X55))) | ? [X53] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X53))) | ? [X52] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X52))) | ? [X50,X51] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X50),s('type.num.num',X51)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X49] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X49))) | ? [X47,X48] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X47),s('type.wordLang.store_name',X48))) | ? [X45,X46] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X45),s('type.num.num',X46))) | ? [X42,X43,X44] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X42),s('type.sum.sum'('type.num.num','type.num.num'),X43),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X44))) | ? [X40,X41] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X40),s('type.stackLang.prog'(X0),X41))) | ? [X35,X36,X37,X38,X39] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X35),s('type.num.num',X36),s('type.asm.reg_imm'(X0),X37),s('type.stackLang.prog'(X0),X38),s('type.stackLang.prog'(X0),X39))) | ? [X31,X32,X33,X34] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X31),s('type.num.num',X32),s('type.asm.reg_imm'(X0),X33),s('type.stackLang.prog'(X0),X34))) | ? [X28,X29,X30] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30))) | ? [X27] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X27))) | ? [X26] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X26))) | ? [X24,X25] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X24),s('type.num.num',X25))) | ? [X20,X21,X22,X23] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X20),s('type.num.num',X21),s('type.num.num',X22),s('type.num.num',X23))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X17,X18,X19] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19))) | ? [X16] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X16))) | ? [X15] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X15))) | ? [X13,X14] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X13),s('type.num.num',X14))) | ? [X11,X12] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X9,X10] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X9),s('type.num.num',X10))) | ? [X7,X8] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X7),s('type.num.num',X8))) | ? [X6] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X6))) | ? [X5] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X5))) | ? [X3,X4] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X3),s('type.num.num',X4))) | ? [X2] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X2)))) => (? [X96,X97] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X0),X96),s('type.stackLang.prog'(X0),X97))) | ? [X93,X94,X95] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.LocValue_3'(s('type.num.num',X93),s('type.num.num',X94),s('type.num.num',X95))) | ? [X92] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Halt_1'(s('type.num.num',X92))) | ? [X91] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Inst_1'(s('type.asm.inst'(X0),X91))) | s('type.stackLang.prog'(X0),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X0),X1) | ? [X86,X87,X88,X89,X90] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.If_5'(s('type.asm.cmp',X86),s('type.num.num',X87),s('type.asm.reg_imm'(X0),X88),s('type.stackLang.prog'(X0),X89),s('type.stackLang.prog'(X0),X90))) | ? [X84,X85] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Get_2'(s('type.num.num',X84),s('type.wordLang.store_name',X85))) | ? [X82,X83] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Set_2'(s('type.wordLang.store_name',X82),s('type.num.num',X83))) | ? [X79,X80,X81] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X79),s('type.sum.sum'('type.num.num','type.num.num'),X80),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),X81))) | ? [X75,X76,X77,X78] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.While_4'(s('type.asm.cmp',X75),s('type.num.num',X76),s('type.asm.reg_imm'(X0),X77),s('type.stackLang.prog'(X0),X78))) | ? [X72,X73,X74] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.JumpLower_3'(s('type.num.num',X72),s('type.num.num',X73),s('type.num.num',X74))) | ? [X71] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Alloc_1'(s('type.num.num',X71))) | ? [X70] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Raise_1'(s('type.num.num',X70))) | ? [X68,X69] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.Return_2'(s('type.num.num',X68),s('type.num.num',X69))) | ? [X64,X65,X66,X67] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.num.num',X67))) | s('type.stackLang.prog'(X0),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X0),X1) | ? [X63] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackAlloc_1'(s('type.num.num',X63))) | ? [X62] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackFree_1'(s('type.num.num',X62))) | ? [X60,X61] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStore_2'(s('type.num.num',X60),s('type.num.num',X61))) | ? [X58,X59] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackStoreAny_2'(s('type.num.num',X58),s('type.num.num',X59))) | ? [X56,X57] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoad_2'(s('type.num.num',X56),s('type.num.num',X57))) | ? [X54,X55] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackLoadAny_2'(s('type.num.num',X54),s('type.num.num',X55))) | ? [X53] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackGetSize_1'(s('type.num.num',X53))) | ? [X52] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.StackSetSize_1'(s('type.num.num',X52))) | ? [X50,X51] : s('type.stackLang.prog'(X0),X1) = s('type.stackLang.prog'(X0),'const.stackLang.BitmapLoad_2'(s('type.num.num',X50),s('type.num.num',X51)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.stackLang.prog'(X6),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X6),X7) | ? [X8] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Inst_1'(s('type.asm.inst'(X6),X8))) | ? [X9,X10] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Get_2'(s('type.num.num',X9),s('type.wordLang.store_name',X10))) | ? [X11,X12] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Set_2'(s('type.wordLang.store_name',X11),s('type.num.num',X12))) | ? [X13,X14,X15] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X13),s('type.sum.sum'('type.num.num','type.num.num'),X14),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),X15))) | ? [X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X18,X19,X20,X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.If_5'(s('type.asm.cmp',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X6),X20),s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X21,X22,X23,X24] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.While_4'(s('type.asm.cmp',X21),s('type.num.num',X22),s('type.asm.reg_imm'(X6),X23),s('type.stackLang.prog'(X6),X24))) | ? [X25,X26,X27] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.JumpLower_3'(s('type.num.num',X25),s('type.num.num',X26),s('type.num.num',X27))) | ? [X28] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Alloc_1'(s('type.num.num',X28))) | ? [X29] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Raise_1'(s('type.num.num',X29))) | ? [X30,X31] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Return_2'(s('type.num.num',X30),s('type.num.num',X31))) | ? [X32,X33,X34,X35] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.FFI_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35))) | s('type.stackLang.prog'(X6),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X6),X7) | ? [X36,X37,X38] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38))) | ? [X39] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackAlloc_1'(s('type.num.num',X39))) | ? [X40] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackFree_1'(s('type.num.num',X40))) | ? [X41,X42] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStore_2'(s('type.num.num',X41),s('type.num.num',X42))) | ? [X43,X44] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStoreAny_2'(s('type.num.num',X43),s('type.num.num',X44))) | ? [X45,X46] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoad_2'(s('type.num.num',X45),s('type.num.num',X46))) | ? [X47,X48] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoadAny_2'(s('type.num.num',X47),s('type.num.num',X48))) | ? [X49] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackGetSize_1'(s('type.num.num',X49))) | ? [X50] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackSetSize_1'(s('type.num.num',X50))) | ? [X51,X52] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.BitmapLoad_2'(s('type.num.num',X51),s('type.num.num',X52))) | ? [X53] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Halt_1'(s('type.num.num',X53)))) => (? [X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X36,X37,X38] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38))) | ? [X53] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Halt_1'(s('type.num.num',X53))) | ? [X8] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Inst_1'(s('type.asm.inst'(X6),X8))) | s('type.stackLang.prog'(X6),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X6),X7) | ? [X18,X19,X20,X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.If_5'(s('type.asm.cmp',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X6),X20),s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X9,X10] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Get_2'(s('type.num.num',X9),s('type.wordLang.store_name',X10))) | ? [X11,X12] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Set_2'(s('type.wordLang.store_name',X11),s('type.num.num',X12))) | ? [X13,X14,X15] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X13),s('type.sum.sum'('type.num.num','type.num.num'),X14),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),X15))) | ? [X21,X22,X23,X24] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.While_4'(s('type.asm.cmp',X21),s('type.num.num',X22),s('type.asm.reg_imm'(X6),X23),s('type.stackLang.prog'(X6),X24))) | ? [X25,X26,X27] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.JumpLower_3'(s('type.num.num',X25),s('type.num.num',X26),s('type.num.num',X27))) | ? [X28] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Alloc_1'(s('type.num.num',X28))) | ? [X29] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Raise_1'(s('type.num.num',X29))) | ? [X30,X31] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Return_2'(s('type.num.num',X30),s('type.num.num',X31))) | ? [X32,X33,X34,X35] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.FFI_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35))) | s('type.stackLang.prog'(X6),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X6),X7) | ? [X39] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackAlloc_1'(s('type.num.num',X39))) | ? [X40] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackFree_1'(s('type.num.num',X40))) | ? [X41,X42] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStore_2'(s('type.num.num',X41),s('type.num.num',X42))) | ? [X43,X44] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStoreAny_2'(s('type.num.num',X43),s('type.num.num',X44))) | ? [X45,X46] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoad_2'(s('type.num.num',X45),s('type.num.num',X46))) | ? [X47,X48] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoadAny_2'(s('type.num.num',X47),s('type.num.num',X48))) | ? [X49] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackGetSize_1'(s('type.num.num',X49))) | ? [X50] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackSetSize_1'(s('type.num.num',X50))) | ? [X51,X52] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.BitmapLoad_2'(s('type.num.num',X51),s('type.num.num',X52)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.stackLang.prog'(X6),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X6),X7) | ? [X8] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Inst_1'(s('type.asm.inst'(X6),X8))) | ? [X9,X10] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Get_2'(s('type.num.num',X9),s('type.wordLang.store_name',X10))) | ? [X11,X12] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Set_2'(s('type.wordLang.store_name',X11),s('type.num.num',X12))) | ? [X13,X14,X15] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X13),s('type.sum.sum'('type.num.num','type.num.num'),X14),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),X15))) | ? [X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X18,X19,X20,X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.If_5'(s('type.asm.cmp',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X6),X20),s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X21,X22,X23,X24] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.While_4'(s('type.asm.cmp',X21),s('type.num.num',X22),s('type.asm.reg_imm'(X6),X23),s('type.stackLang.prog'(X6),X24))) | ? [X25,X26,X27] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.JumpLower_3'(s('type.num.num',X25),s('type.num.num',X26),s('type.num.num',X27))) | ? [X28] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Alloc_1'(s('type.num.num',X28))) | ? [X29] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Raise_1'(s('type.num.num',X29))) | ? [X30,X31] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Return_2'(s('type.num.num',X30),s('type.num.num',X31))) | ? [X32,X33,X34,X35] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.FFI_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35))) | s('type.stackLang.prog'(X6),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X6),X7) | ? [X36,X37,X38] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38))) | ? [X39] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackAlloc_1'(s('type.num.num',X39))) | ? [X40] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackFree_1'(s('type.num.num',X40))) | ? [X41,X42] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStore_2'(s('type.num.num',X41),s('type.num.num',X42))) | ? [X43,X44] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStoreAny_2'(s('type.num.num',X43),s('type.num.num',X44))) | ? [X45,X46] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoad_2'(s('type.num.num',X45),s('type.num.num',X46))) | ? [X47,X48] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoadAny_2'(s('type.num.num',X47),s('type.num.num',X48))) | ? [X49] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackGetSize_1'(s('type.num.num',X49))) | ? [X50] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackSetSize_1'(s('type.num.num',X50))) | ? [X51,X52] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.BitmapLoad_2'(s('type.num.num',X51),s('type.num.num',X52))) | ? [X53] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Halt_1'(s('type.num.num',X53)))) => (? [X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Seq_2'(s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X36,X37,X38] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38))) | ? [X53] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Halt_1'(s('type.num.num',X53))) | ? [X8] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Inst_1'(s('type.asm.inst'(X6),X8))) | s('type.stackLang.prog'(X6),'const.stackLang.Skip_0') = s('type.stackLang.prog'(X6),X7) | ? [X18,X19,X20,X16,X17] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.If_5'(s('type.asm.cmp',X18),s('type.num.num',X19),s('type.asm.reg_imm'(X6),X20),s('type.stackLang.prog'(X6),X16),s('type.stackLang.prog'(X6),X17))) | ? [X9,X10] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Get_2'(s('type.num.num',X9),s('type.wordLang.store_name',X10))) | ? [X11,X12] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Set_2'(s('type.wordLang.store_name',X11),s('type.num.num',X12))) | ? [X13,X14,X15] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X13),s('type.sum.sum'('type.num.num','type.num.num'),X14),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),X15))) | ? [X21,X22,X23,X24] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.While_4'(s('type.asm.cmp',X21),s('type.num.num',X22),s('type.asm.reg_imm'(X6),X23),s('type.stackLang.prog'(X6),X24))) | ? [X25,X26,X27] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.JumpLower_3'(s('type.num.num',X25),s('type.num.num',X26),s('type.num.num',X27))) | ? [X28] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Alloc_1'(s('type.num.num',X28))) | ? [X29] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Raise_1'(s('type.num.num',X29))) | ? [X30,X31] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.Return_2'(s('type.num.num',X30),s('type.num.num',X31))) | ? [X32,X33,X34,X35] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.FFI_4'(s('type.num.num',X32),s('type.num.num',X33),s('type.num.num',X34),s('type.num.num',X35))) | s('type.stackLang.prog'(X6),'const.stackLang.Tick_0') = s('type.stackLang.prog'(X6),X7) | ? [X39] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackAlloc_1'(s('type.num.num',X39))) | ? [X40] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackFree_1'(s('type.num.num',X40))) | ? [X41,X42] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStore_2'(s('type.num.num',X41),s('type.num.num',X42))) | ? [X43,X44] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackStoreAny_2'(s('type.num.num',X43),s('type.num.num',X44))) | ? [X45,X46] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoad_2'(s('type.num.num',X45),s('type.num.num',X46))) | ? [X47,X48] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackLoadAny_2'(s('type.num.num',X47),s('type.num.num',X48))) | ? [X49] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackGetSize_1'(s('type.num.num',X49))) | ? [X50] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.StackSetSize_1'(s('type.num.num',X50))) | ? [X51,X52] : s('type.stackLang.prog'(X6),X7) = s('type.stackLang.prog'(X6),'const.stackLang.BitmapLoad_2'(s('type.num.num',X51),s('type.num.num',X52)))))),
  file('thm.stackProps.stackProps_4|48|_prove_ltb','thm.stackProps.stackProps_4|48|_prove_ltb')).
fof(f818,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f466,f248])).
fof(f248,plain,(
  ( ! [X4] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackSetSize_1'(s('type.num.num',X4)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f1727,plain,(
  $false | $spl22),
  inference(subsumption_resolution,[],[f444,f238])).
fof(f238,plain,(
  ( ! [X21,X20] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Return_2'(s('type.num.num',X20),s('type.num.num',X21)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f1728,plain,(
  $false | $spl38),
  inference(subsumption_resolution,[],[f460,f245])).
fof(f245,plain,(
  ( ! [X8,X9] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackLoad_2'(s('type.num.num',X8),s('type.num.num',X9)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f1729,plain,(
  $false | $spl42),
  inference(subsumption_resolution,[],[f464,f247])).
fof(f247,plain,(
  ( ! [X5] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackGetSize_1'(s('type.num.num',X5)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4389,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f446,f239])).
fof(f239,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.FFI_4'(s('type.num.num',X16),s('type.num.num',X17),s('type.num.num',X18),s('type.num.num',X19)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4390,plain,(
  $false | $spl46),
  inference(subsumption_resolution,[],[f468,f249])).
fof(f249,plain,(
  ( ! [X2,X3] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.BitmapLoad_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4391,plain,(
  $false | $spl36),
  inference(subsumption_resolution,[],[f458,f244])).
fof(f244,plain,(
  ( ! [X10,X11] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackStoreAny_2'(s('type.num.num',X10),s('type.num.num',X11)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f447,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') != s('type.stackLang.prog'(sK12),sK13) | $spl27),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') != s('type.stackLang.prog'(sK12),sK13) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f240,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') != s('type.stackLang.prog'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f4392,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f442,f237])).
fof(f237,plain,(
  ( ! [X22] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Raise_1'(s('type.num.num',X22)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4393,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f440,f236])).
fof(f236,plain,(
  ( ! [X23] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Alloc_1'(s('type.num.num',X23)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4960,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f430,f233])).
fof(f233,plain,(
  ( ! [X33,X31,X32] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),X31),s('type.sum.sum'('type.num.num','type.num.num'),X32),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))),X33)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4961,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f424,f228])).
fof(f228,plain,(
  ( ! [X43] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Inst_1'(s('type.asm.inst'(sK12),X43)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4962,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f438,f235])).
fof(f235,plain,(
  ( ! [X26,X24,X25] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.JumpLower_3'(s('type.num.num',X24),s('type.num.num',X25),s('type.num.num',X26)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4963,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f462,f246])).
fof(f246,plain,(
  ( ! [X6,X7] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackLoadAny_2'(s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4964,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f470,f227])).
fof(f227,plain,(
  ( ! [X44] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Halt_1'(s('type.num.num',X44)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4965,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f436,f234])).
fof(f234,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.While_4'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(sK12),X29),s('type.stackLang.prog'(sK12),X30)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4966,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f434,f230])).
fof(f230,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.If_5'(s('type.asm.cmp',X38),s('type.num.num',X39),s('type.asm.reg_imm'(sK12),X40),s('type.stackLang.prog'(sK12),X41),s('type.stackLang.prog'(sK12),X42)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4967,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f454,f242])).
fof(f242,plain,(
  ( ! [X14] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackFree_1'(s('type.num.num',X14)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4968,plain,(
  $false | $spl34),
  inference(subsumption_resolution,[],[f456,f243])).
fof(f243,plain,(
  ( ! [X12,X13] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackStore_2'(s('type.num.num',X12),s('type.num.num',X13)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4969,plain,(
  $false | $spl30),
  inference(subsumption_resolution,[],[f452,f241])).
fof(f241,plain,(
  ( ! [X15] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.StackAlloc_1'(s('type.num.num',X15)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4970,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f432,f225])).
fof(f225,plain,(
  ( ! [X48,X49] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Seq_2'(s('type.stackLang.prog'(sK12),X48),s('type.stackLang.prog'(sK12),X49)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4971,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f428,f232])).
fof(f232,plain,(
  ( ! [X35,X34] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Set_2'(s('type.wordLang.store_name',X34),s('type.num.num',X35)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f421,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') != s('type.stackLang.prog'(sK12),sK13) | $spl1),
  inference(cnf_transformation,[],[f421_D])).
fof(f421_D,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') != s('type.stackLang.prog'(sK12),sK13) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f229,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') != s('type.stackLang.prog'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f422,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') = s('type.stackLang.prog'(sK12),sK13) | $spl0),
  inference(cnf_transformation,[],[f422_D])).
fof(f422_D,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') = s('type.stackLang.prog'(sK12),sK13) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f424,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Inst_1'(s('type.asm.inst'(sK12),sK14))) | $spl2),
  inference(cnf_transformation,[],[f424_D])).
fof(f424_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Inst_1'(s('type.asm.inst'(sK12),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f426,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Get_2'(s('type.num.num',sK15),s('type.wordLang.store_name',sK16))) | $spl4),
  inference(cnf_transformation,[],[f426_D])).
fof(f426_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Get_2'(s('type.num.num',sK15),s('type.wordLang.store_name',sK16))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f428,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Set_2'(s('type.wordLang.store_name',sK17),s('type.num.num',sK18))) | $spl6),
  inference(cnf_transformation,[],[f428_D])).
fof(f428_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Set_2'(s('type.wordLang.store_name',sK17),s('type.num.num',sK18))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f430,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),sK19),s('type.sum.sum'('type.num.num','type.num.num'),sK20),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))),sK21))) | $spl8),
  inference(cnf_transformation,[],[f430_D])).
fof(f430_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),sK19),s('type.sum.sum'('type.num.num','type.num.num'),sK20),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))),sK21))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f432,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Seq_2'(s('type.stackLang.prog'(sK12),sK22),s('type.stackLang.prog'(sK12),sK23))) | $spl10),
  inference(cnf_transformation,[],[f432_D])).
fof(f432_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Seq_2'(s('type.stackLang.prog'(sK12),sK22),s('type.stackLang.prog'(sK12),sK23))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f434,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.If_5'(s('type.asm.cmp',sK24),s('type.num.num',sK25),s('type.asm.reg_imm'(sK12),sK26),s('type.stackLang.prog'(sK12),sK27),s('type.stackLang.prog'(sK12),sK28))) | $spl12),
  inference(cnf_transformation,[],[f434_D])).
fof(f434_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.If_5'(s('type.asm.cmp',sK24),s('type.num.num',sK25),s('type.asm.reg_imm'(sK12),sK26),s('type.stackLang.prog'(sK12),sK27),s('type.stackLang.prog'(sK12),sK28))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f436,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.While_4'(s('type.asm.cmp',sK29),s('type.num.num',sK30),s('type.asm.reg_imm'(sK12),sK31),s('type.stackLang.prog'(sK12),sK32))) | $spl14),
  inference(cnf_transformation,[],[f436_D])).
fof(f436_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.While_4'(s('type.asm.cmp',sK29),s('type.num.num',sK30),s('type.asm.reg_imm'(sK12),sK31),s('type.stackLang.prog'(sK12),sK32))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f438,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.JumpLower_3'(s('type.num.num',sK33),s('type.num.num',sK34),s('type.num.num',sK35))) | $spl16),
  inference(cnf_transformation,[],[f438_D])).
fof(f438_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.JumpLower_3'(s('type.num.num',sK33),s('type.num.num',sK34),s('type.num.num',sK35))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f440,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Alloc_1'(s('type.num.num',sK36))) | $spl18),
  inference(cnf_transformation,[],[f440_D])).
fof(f440_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Alloc_1'(s('type.num.num',sK36))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f442,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Raise_1'(s('type.num.num',sK37))) | $spl20),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Raise_1'(s('type.num.num',sK37))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f444,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Return_2'(s('type.num.num',sK38),s('type.num.num',sK39))) | $spl22),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Return_2'(s('type.num.num',sK38),s('type.num.num',sK39))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f446,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.FFI_4'(s('type.num.num',sK40),s('type.num.num',sK41),s('type.num.num',sK42),s('type.num.num',sK43))) | $spl24),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.FFI_4'(s('type.num.num',sK40),s('type.num.num',sK41),s('type.num.num',sK42),s('type.num.num',sK43))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f448,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') = s('type.stackLang.prog'(sK12),sK13) | $spl26),
  inference(cnf_transformation,[],[f448_D])).
fof(f448_D,plain,(
  s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') = s('type.stackLang.prog'(sK12),sK13) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f450,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.LocValue_3'(s('type.num.num',sK44),s('type.num.num',sK45),s('type.num.num',sK46))) | $spl28),
  inference(cnf_transformation,[],[f450_D])).
fof(f450_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.LocValue_3'(s('type.num.num',sK44),s('type.num.num',sK45),s('type.num.num',sK46))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f452,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackAlloc_1'(s('type.num.num',sK47))) | $spl30),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackAlloc_1'(s('type.num.num',sK47))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f454,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackFree_1'(s('type.num.num',sK48))) | $spl32),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackFree_1'(s('type.num.num',sK48))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f456,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStore_2'(s('type.num.num',sK49),s('type.num.num',sK50))) | $spl34),
  inference(cnf_transformation,[],[f456_D])).
fof(f456_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStore_2'(s('type.num.num',sK49),s('type.num.num',sK50))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f458,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStoreAny_2'(s('type.num.num',sK51),s('type.num.num',sK52))) | $spl36),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStoreAny_2'(s('type.num.num',sK51),s('type.num.num',sK52))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f460,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoad_2'(s('type.num.num',sK53),s('type.num.num',sK54))) | $spl38),
  inference(cnf_transformation,[],[f460_D])).
fof(f460_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoad_2'(s('type.num.num',sK53),s('type.num.num',sK54))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f462,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoadAny_2'(s('type.num.num',sK55),s('type.num.num',sK56))) | $spl40),
  inference(cnf_transformation,[],[f462_D])).
fof(f462_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoadAny_2'(s('type.num.num',sK55),s('type.num.num',sK56))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f464,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackGetSize_1'(s('type.num.num',sK57))) | $spl42),
  inference(cnf_transformation,[],[f464_D])).
fof(f464_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackGetSize_1'(s('type.num.num',sK57))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f466,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackSetSize_1'(s('type.num.num',sK58))) | $spl44),
  inference(cnf_transformation,[],[f466_D])).
fof(f466_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackSetSize_1'(s('type.num.num',sK58))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f468,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.BitmapLoad_2'(s('type.num.num',sK59),s('type.num.num',sK60))) | $spl46),
  inference(cnf_transformation,[],[f468_D])).
fof(f468_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.BitmapLoad_2'(s('type.num.num',sK59),s('type.num.num',sK60))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f470,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Halt_1'(s('type.num.num',sK61))) | $spl48),
  inference(cnf_transformation,[],[f470_D])).
fof(f470_D,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Halt_1'(s('type.num.num',sK61))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f224,plain,(
  s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Halt_1'(s('type.num.num',sK61))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.BitmapLoad_2'(s('type.num.num',sK59),s('type.num.num',sK60))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackSetSize_1'(s('type.num.num',sK58))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackGetSize_1'(s('type.num.num',sK57))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoadAny_2'(s('type.num.num',sK55),s('type.num.num',sK56))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackLoad_2'(s('type.num.num',sK53),s('type.num.num',sK54))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStoreAny_2'(s('type.num.num',sK51),s('type.num.num',sK52))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackStore_2'(s('type.num.num',sK49),s('type.num.num',sK50))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackFree_1'(s('type.num.num',sK48))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.StackAlloc_1'(s('type.num.num',sK47))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.LocValue_3'(s('type.num.num',sK44),s('type.num.num',sK45),s('type.num.num',sK46))) | s('type.stackLang.prog'(sK12),'const.stackLang.Tick_0') = s('type.stackLang.prog'(sK12),sK13) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.FFI_4'(s('type.num.num',sK40),s('type.num.num',sK41),s('type.num.num',sK42),s('type.num.num',sK43))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Return_2'(s('type.num.num',sK38),s('type.num.num',sK39))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Raise_1'(s('type.num.num',sK37))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Alloc_1'(s('type.num.num',sK36))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.JumpLower_3'(s('type.num.num',sK33),s('type.num.num',sK34),s('type.num.num',sK35))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.While_4'(s('type.asm.cmp',sK29),s('type.num.num',sK30),s('type.asm.reg_imm'(sK12),sK31),s('type.stackLang.prog'(sK12),sK32))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.If_5'(s('type.asm.cmp',sK24),s('type.num.num',sK25),s('type.asm.reg_imm'(sK12),sK26),s('type.stackLang.prog'(sK12),sK27),s('type.stackLang.prog'(sK12),sK28))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Seq_2'(s('type.stackLang.prog'(sK12),sK22),s('type.stackLang.prog'(sK12),sK23))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Call_3'(s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')))),sK19),s('type.sum.sum'('type.num.num','type.num.num'),sK20),s('type.option.option'('type.pair.prod'('type.stackLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))),sK21))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Set_2'(s('type.wordLang.store_name',sK17),s('type.num.num',sK18))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Get_2'(s('type.num.num',sK15),s('type.wordLang.store_name',sK16))) | s('type.stackLang.prog'(sK12),sK13) = s('type.stackLang.prog'(sK12),'const.stackLang.Inst_1'(s('type.asm.inst'(sK12),sK14))) | s('type.stackLang.prog'(sK12),'const.stackLang.Skip_0') = s('type.stackLang.prog'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f4973,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f426,f231])).
fof(f231,plain,(
  ( ! [X37,X36] : (s('type.stackLang.prog'(sK12),sK13) != s('type.stackLang.prog'(sK12),'const.stackLang.Get_2'(s('type.num.num',X36),s('type.wordLang.store_name',X37)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.stackProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 419
% Passive clauses: 1489
% Generated clauses: 4741
% Final active clauses: 419
% Final passive clauses: 871
% Input formulas: 37
% Initial clauses: 193
% 
% Duplicate literals: 156
% Trivial inequalities: 29
% Fw subsumption resolutions: 342
% 
% Simple tautologies: 145
% Equational tautologies: 38
% Forward subsumptions: 2491
% 
% Binary resolution: 2865
% Factoring: 823
% Forward superposition: 162
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 116
% Split components: 256
% SAT solver clauses: 260
% SAT solver unit clauses: 31
% SAT solver binary clauses: 45
% SAT solver learnt clauses: 1
% 
% Sat splits: 116
% Sat splitting refutations: 23
% 
% TWLsolver clauses: 259
% TWLsolver calls for satisfiability: 214
% 
% Memory used [KB]: 2686
% Time elapsed: 0.155 s
% ------------------------------
% ------------------------------
% Success in time 0.16 s
