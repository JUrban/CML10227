Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (99854)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 108
% Passive clauses: 3431
% Generated clauses: 19772
% Final active clauses: 95
% Final passive clauses: 3152
% Input formulas: 8
% Initial clauses: 23
% 
% Duplicate literals: 988
% Trivial inequalities: 273
% Fw subsumption resolutions: 3221
% Fw demodulations: 1844
% Bw demodulations: 8
% 
% Simple tautologies: 347
% Equational tautologies: 87
% Forward subsumptions: 7970
% 
% Binary resolution: 224
% Factoring: 3
% Forward superposition: 7075
% Backward superposition: 5401
% Self superposition: 308
% Equality factoring: 227
% Equality resolution: 19
% 
% Split clauses: 557
% Split components: 1117
% SAT solver clauses: 1689
% SAT solver unit clauses: 24
% SAT solver binary clauses: 236
% 
% Sat splits: 557
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1688
% TWLsolver calls for satisfiability: 169
% 
% Memory used [KB]: 8571
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (99872)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 88
% Passive clauses: 382
% Generated clauses: 11178
% Final active clauses: 78
% Final passive clauses: 261
% Input formulas: 8
% Initial clauses: 23
% 
% Duplicate literals: 1052
% Trivial inequalities: 128
% Fw subsumption resolutions: 1199
% Fw demodulations: 698
% Bw demodulations: 41
% Condensations: 1818
% 
% Simple tautologies: 208
% Equational tautologies: 50
% Forward subsumptions: 4939
% 
% Binary resolution: 125
% Factoring: 2
% Forward superposition: 3539
% Backward superposition: 2112
% Self superposition: 150
% Equality factoring: 126
% Equality resolution: 12
% 
% Split clauses: 157
% Split components: 317
% SAT solver clauses: 764
% SAT solver unit clauses: 30
% SAT solver binary clauses: 20
% 
% Sat splits: 157
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 764
% TWLsolver calls for satisfiability: 286
% 
% Memory used [KB]: 6780
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f54000,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f60,f63,f85,f89,f87,f102,f176,f191,f216,f218,f442,f445,f443,f386,f444,f446,f5992,f6027,f6220,f6261,f6279,f6280,f6281,f6282,f6283,f6314,f6285,f6315,f6286,f6287,f6288,f6289,f6290,f6291,f6292,f6293,f6377,f6380,f6384,f6387,f6389,f6393,f6397,f6381,f6399,f6402,f6400,f6405,f6411,f6414,f6406,f6419,f6311,f6359,f6358,f6357,f6319,f6356,f6318,f6355,f6354,f6317,f6353,f6352,f6316,f6351,f6420,f6421,f6348,f6310,f6422,f6309,f6307,f6483,f6484,f6502,f6616,f6617,f6660,f7082,f6731,f9965,f9884,f9858,f9839,f9982,f9807,f9968,f10101,f10102,f9673,f10103,f9612,f10155,f10492,f10519,f18580,f18559,f18558,f18605,f18556,f18608,f18668,f18671,f18395,f18357,f18338,f18601,f18707,f18709,f18311,f18307,f18293,f18940,f18048,f19018,f18998,f19020,f19022,f18026,f19026,f18021,f19027,f18020,f19028,f19076,f17984,f19079,f19085,f19087,f17980,f19090,f19088,f19094,f17976,f19097,f17928,f19218,f19220,f19222,f17927,f18712,f19250,f19256,f19259,f19262,f19265,f19268,f19269,f17913,f18729,f17858,f19274,f19281,f19282,f19283,f19284,f19285,f19287,f19288,f19290,f19291,f19292,f19293,f19294,f19295,f19296,f19297,f19302,f19305,f19322,f19325,f19330,f19341,f19345,f19348,f19349,f19350,f19351,f19352,f19353,f19354,f19355,f19358,f19360,f19361,f19362,f19363,f19364,f19370,f19371,f19375,f19378,f19380,f19381,f19384,f19390,f19393,f19395,f19396,f19398,f19405,f19410,f19411,f19413,f19414,f19415,f19416,f19417,f19420,f19421,f19422,f19423,f19424,f19425,f19426,f19427,f19429,f19430,f19432,f19436,f19437,f19438,f19439,f19440,f19441,f19442,f19443,f19444,f19446,f19447,f19448,f19449,f19450,f19451,f19452,f19453,f19454,f19455,f19456,f19457,f19458,f19460,f19462,f19463,f19465,f19468,f19472,f19474,f19476,f19477,f19481,f19484,f19489,f19492,f19497,f19500,f19504,f19507,f19510,f19512,f19513,f19514,f19520,f19521,f19524,f19528,f19533,f19534,f19535,f19536,f19537,f19538,f19542,f19544,f19549,f19552,f19554,f19557,f19560,f19561,f19564,f19565,f19566,f19567,f19568,f19569,f19570,f19571,f19572,f19573,f19576,f19577,f19578,f19579,f19580,f19581,f19588,f19591,f19594,f19597,f19599,f19600,f19603,f19605,f19606,f19607,f19608,f19609,f19610,f19613,f19616,f19617,f19618,f19619,f19622,f19624,f19626,f19646,f19653,f19655,f19657,f19658,f19659,f19660,f19661,f19662,f19664,f19665,f19666,f19667,f19668,f19669,f19670,f19671,f19672,f19673,f19674,f19675,f19676,f19677,f19678,f19683,f19688,f19692,f19693,f19694,f19695,f19696,f19697,f19698,f19699,f19700,f19701,f19702,f19704,f19707,f19708,f19709,f19710,f19711,f19712,f19713,f19714,f19715,f19717,f19722,f19727,f19729,f19730,f19731,f19733,f19734,f19735,f19736,f19737,f19738,f19739,f19740,f19741,f19742,f19743,f19746,f19749,f19752,f19754,f19755,f19756,f19757,f19758,f19759,f19763,f19767,f19768,f19769,f19770,f19771,f19772,f19773,f19774,f19775,f19776,f19777,f19778,f19779,f19780,f19781,f19782,f19783,f19784,f19785,f19786,f19787,f19788,f19789,f19790,f19791,f19792,f19793,f19794,f19795,f19796,f19797,f19798,f19799,f19800,f19801,f19802,f19803,f19806,f19807,f19808,f19809,f19811,f19812,f19813,f19815,f19816,f19818,f19819,f19820,f19821,f19822,f19823,f19824,f19825,f19826,f19827,f19828,f19829,f19830,f19831,f19835,f19836,f19837,f19838,f19839,f19840,f19841,f19843,f19844,f19845,f19846,f19850,f19851,f19852,f19853,f19854,f19855,f19856,f19857,f19858,f19865,f19868,f19869,f19870,f19871,f19872,f19873,f19874,f19876,f19877,f19878,f19879,f19880,f19883,f19884,f19889,f19890,f19891,f19892,f19893,f19894,f19895,f19896,f19897,f19899,f19901,f19903,f19904,f19905,f19907,f19908,f19909,f19911,f19912,f19913,f19914,f19916,f19917,f19920,f19921,f19922,f19923,f19924,f19925,f19926,f19927,f19929,f19931,f19932,f19933,f19934,f19935,f19936,f19937,f19938,f19939,f19940,f19942,f19943,f19944,f19945,f19946,f19947,f19948,f19949,f19951,f19952,f19953,f19955,f19956,f19957,f19958,f19959,f19960,f19961,f19962,f19963,f19964,f19965,f19966,f19967,f19968,f19969,f19970,f19971,f19972,f19973,f19974,f19975,f19976,f19977,f19978,f19979,f19980,f19981,f19982,f19983,f19984,f19985,f19986,f19987,f19988,f19989,f19990,f19991,f19992,f19993,f19994,f19995,f19996,f19997,f19998,f19999,f20000,f20001,f20002,f20003,f20004,f20005,f20006,f20007,f20008,f20009,f20010,f20011,f20012,f20013,f20014,f20015,f20016,f20017,f20018,f20019,f20020,f20021,f20022,f20023,f20024,f20025,f20026,f20027,f20028,f20029,f20030,f20031,f20032,f20033,f20034,f20035,f20036,f20037,f20038,f20039,f20040,f20041,f20042,f20043,f20044,f20045,f20046,f20047,f20048,f20049,f20050,f20051,f20052,f20053,f20054,f20055,f20056,f20057,f20058,f20059,f20060,f20061,f20062,f20063,f20064,f20065,f20066,f20067,f20068,f20069,f20070,f20071,f20072,f20073,f20074,f20075,f20076,f20077,f20078,f20079,f20080,f20081,f20082,f20083,f20084,f20085,f20086,f20087,f20088,f20089,f20090,f20091,f20092,f20093,f20094,f20095,f20096,f20097,f20098,f20099,f20100,f20101,f20102,f20103,f20104,f20105,f20106,f20107,f20108,f20109,f20110,f20111,f20112,f20113,f20114,f20115,f20116,f20117,f20118,f20119,f20120,f20121,f20122,f20123,f20124,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20136,f20137,f20138,f20139,f20140,f20141,f20142,f20143,f20144,f20145,f20146,f20147,f20148,f20149,f20150,f20151,f20152,f20153,f20154,f20155,f20156,f20157,f20158,f20159,f20160,f20161,f20162,f20163,f20164,f20165,f20166,f20167,f20168,f20169,f20170,f20171,f20172,f20173,f20174,f20175,f20176,f20177,f20178,f20179,f20180,f20181,f20182,f20183,f20184,f20185,f20186,f20187,f20188,f20189,f20190,f20191,f20192,f20193,f20194,f20195,f20196,f20197,f20198,f20199,f20200,f20201,f20202,f20203,f20204,f20205,f20206,f20207,f20208,f20209,f20210,f20211,f20212,f20213,f20214,f20215,f20216,f20217,f20218,f20219,f20220,f20221,f20222,f20223,f20224,f20225,f20226,f20227,f20228,f20229,f20230,f20231,f20232,f20233,f20234,f20235,f20236,f20237,f20238,f20239,f20240,f20241,f20242,f20243,f20244,f20245,f20246,f20247,f20248,f20249,f20250,f20251,f20252,f20253,f20254,f20255,f20256,f20257,f20258,f20259,f20260,f20261,f20262,f20263,f20264,f20265,f20266,f20267,f20268,f20269,f20270,f20271,f20272,f20273,f20274,f20275,f20276,f20277,f20278,f20279,f20280,f20281,f20282,f20283,f20284,f20285,f20286,f20287,f20288,f20289,f20290,f20291,f20292,f20293,f20294,f20295,f20296,f20297,f20298,f20299,f20300,f20301,f20302,f20303,f20304,f20305,f20306,f20307,f20308,f20309,f20310,f20311,f20312,f20313,f20314,f20315,f20316,f20317,f20318,f20319,f20320,f20321,f20322,f20323,f20324,f20325,f20326,f20327,f20328,f20329,f20330,f20331,f20332,f20333,f20334,f20335,f20336,f20337,f20338,f20339,f20340,f20341,f20342,f20343,f20344,f20345,f20346,f20347,f20348,f20349,f20350,f20351,f20352,f20353,f20354,f20355,f20356,f20357,f20358,f20359,f20360,f20361,f20362,f20363,f20364,f20366,f20504,f20544,f20548,f20555,f20574,f20577,f20631,f20633,f9966,f20650,f20678,f20696,f20697,f19383,f20711,f20712,f19621,f19623,f20718,f19248,f19071,f19068,f19065,f19064,f20744,f20745,f18898,f18726,f20735,f20753,f18964,f18967,f19144,f20759,f19145,f20760,f20761,f20742,f18385,f18258,f19359,f19078,f20771,f17855,f19077,f20780,f21318,f21336,f21694,f21695,f23633,f23663,f23927,f23959,f24184,f24252,f25628,f25610,f25687,f27650,f27683,f29211,f29212,f29284,f29283,f29472,f29455,f18669,f28894,f29551,f28893,f29553,f29554,f28913,f29555,f29852,f29918,f30014,f30118,f30387,f30864,f30882,f30894,f30899,f30919,f30924,f33201,f32870,f6312,f33241,f33255,f33276,f33297,f33310,f18604,f33437,f33438,f33440,f33441,f33455,f33494,f33496,f33497,f33498,f33504,f33505,f33508,f33510,f33511,f33513,f33516,f33519,f33520,f33522,f33524,f33526,f33528,f33530,f33532,f33533,f33534,f33535,f33536,f33540,f33541,f33544,f33545,f33548,f33550,f33553,f33556,f33557,f33558,f33560,f33561,f33563,f33574,f33576,f33578,f33580,f33582,f33592,f33599,f33602,f33605,f33606,f33607,f33608,f33621,f33624,f33626,f33627,f33632,f33636,f33638,f33646,f33648,f33649,f33650,f33668,f33684,f33692,f33695,f33702,f33707,f33708,f33710,f33712,f33714,f33716,f33717,f33720,f33725,f33726,f33727,f33728,f33729,f33731,f33733,f33736,f33737,f33738,f33739,f33742,f33745,f33750,f33752,f33757,f33759,f33761,f33768,f33773,f33775,f33777,f33779,f33781,f33782,f33786,f33787,f33788,f33789,f33791,f33792,f33793,f33795,f33797,f33798,f33799,f33800,f33805,f33807,f33808,f33810,f33813,f33816,f33817,f33818,f33820,f33822,f33825,f33827,f33828,f33830,f33833,f33836,f33837,f33839,f33841,f33843,f33845,f33847,f33848,f33849,f33850,f33858,f33866,f33874,f33882,f33886,f33894,f33896,f33897,f33898,f33899,f33900,f33901,f33902,f33903,f33904,f33905,f33906,f33907,f33908,f33909,f33910,f33911,f33912,f33916,f33918,f33922,f33923,f33924,f33926,f33929,f33930,f33933,f33934,f33935,f33938,f33940,f33944,f33948,f33951,f33956,f33960,f33961,f33969,f33987,f33990,f34005,f34008,f34014,f34019,f34022,f34025,f34026,f34029,f34056,f34059,f34060,f34061,f34088,f34096,f34098,f34100,f34103,f34105,f34107,f34109,f34112,f34114,f34119,f34122,f34125,f34126,f34127,f34130,f34131,f34132,f34133,f34134,f34135,f34144,f34146,f34148,f34150,f34151,f34152,f34153,f34154,f34155,f34156,f34157,f34158,f34159,f34160,f34162,f34163,f34164,f34166,f34167,f34168,f34169,f34170,f34171,f34172,f34173,f34174,f34175,f34176,f34177,f34178,f34179,f34180,f34181,f34182,f34183,f34184,f34185,f34186,f34187,f34188,f34190,f34191,f34192,f34193,f34195,f34197,f34198,f34199,f34200,f34201,f34202,f34203,f34204,f34205,f34206,f34207,f34208,f34209,f34210,f34211,f34213,f34215,f34217,f34219,f34220,f34221,f34222,f34224,f34225,f34226,f34227,f34228,f34229,f34230,f34231,f34232,f34233,f34234,f34235,f34236,f34238,f34239,f34240,f34241,f34242,f34245,f33932,f33928,f34248,f34249,f19409,f19596,f19598,f221,f28733,f28737,f33776,f33774,f33751,f33744,f28806,f28810,f33709,f28855,f34251,f34254,f33888,f12151,f33878,f33870,f33862,f33854,f34277,f34278,f33688,f33680,f33672,f34293,f6661,f34294,f6313,f34528,f34529,f34557,f34632,f41334,f41321,f41367,f41318,f41374,f41378,f41317,f41387,f41604,f41607,f41608,f41605,f41624,f41581,f41656,f42023,f42036,f46396,f46428,f46392,f46434,f47093,f47095,f47098,f47094,f47067,f47066,f47102,f47061,f47043,f47127,f47128,f47130,f47006,f47099,f47138,f47140,f47145,f47146,f47147,f47150,f47151,f47153,f47155,f47164,f18672,f47156,f47167,f47170,f47172,f47173,f47178,f47181,f47182,f47184,f47190,f47194,f6259,f48599,f48518,f48805,f50237,f50219,f50365,f50856,f50871,f50905,f50917,f50928,f50948,f50748,f50951,f50959,f50970,f50919,f51262,f51325,f51407,f51433,f51434,f51435,f51436,f51437,f51438,f51476,f51478,f51483,f51484,f51485,f51486,f51487,f51496,f51498,f51499,f51501,f51503,f51505,f51507,f51509,f51511,f51513,f51518,f51520,f51525,f51529,f51584,f51596,f51606,f51608,f51612,f51614,f51636,f51658,f51714,f51717,f51720,f51723,f51790,f51802,f51804,f51807,f51837,f51839,f51942,f51943,f51944,f51945,f51946,f51947,f51948,f51949,f51950,f51951,f51952,f51953,f51971,f51998,f51999,f52000,f52010,f52011,f52012,f52013,f6378,f52014,f52015,f52042,f41412,f41411,f52044,f34279,f52045,f52043,f41193,f41137,f52064,f52088,f52091,f52093,f52090,f52107,f52360,f52407,f52408,f52409,f52410,f52411,f52412,f52437,f52439,f52444,f52445,f52446,f52447,f52448,f52450,f52457,f52474,f52497,f52526,f52528,f52532,f52544,f52889,f20700,f52890,f52902,f52907,f52921,f53155,f53176,f53177,f53179,f53181,f53183,f53185,f53187,f53189,f53191,f53193,f53195,f53197,f53199,f53201,f15499,f23038,f27011,f37642,f53220,f53221,f53223,f38487,f38497,f38499,f53225,f38501,f41492,f53228,f53219,f42170,f42172,f42143,f189,f53231,f53232,f53238,f53239,f61,f46468,f53213,f46479,f46481,f53240,f46488,f53242,f46550,f46551,f53243,f46565,f53244,f49771,f49773,f53246,f20652,f5993,f53256,f53381,f53382,f53422,f53423,f53425,f53427,f53429,f53431,f53433,f53435,f53437,f53439,f53441,f53443,f53445,f53452,f53453,f53454,f53460,f53462,f53465,f53463,f219,f15550,f53215,f53473,f53478,f17151,f53224,f53484,f53488,f53490,f53494,f13571,f53497,f14200,f53499,f20713,f53515,f53227,f53518,f53520,f53521,f53479,f53522,f53489,f53527,f53485,f53528,f53529,f20651,f53532,f53534,f10154,f27092,f53535,f27084,f53537,f53536,f53543,f53548,f53551,f53553,f53555,f53572,f53580,f53627,f53629,f53631,f53633,f53656,f20758,f53673,f19266,f53683,f19263,f53708,f19260,f53710,f19257,f53714,f20757,f53718,f19251,f53776,f53779,f53789,f50857,f86,f53969,f53973,f53996,f53998])).
fof(f53998,plain,(
  $false | ($spl11 | $spl138 | $spl253)),
  inference(subsumption_resolution,[],[f53997,f37])).
fof(f37,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.source_to_modProof.s_rel_rules',aHL_TRUTH)).
fof(f53997,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl138 | $spl253)),
  inference(forward_demodulation,[],[f53223,f53806])).
fof(f53806,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl138)),
  inference(subsumption_resolution,[],[f53805,f53546])).
fof(f53546,plain,(
  ~p(s(bool,'F_0')) | ($spl11 | $spl138)),
  inference(global_subsumption,[],[f53545,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f15426,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f4082,f4400,f4620,f16505,f15428,f53495,f19625,f13571,f13380,f14200,f14030,f29254,f27092,f27084])).
fof(f29254,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) )),
  inference(condensation,[],[f29253])).
fof(f29253,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(duplicate_literal_removal,[],[f29252])).
fof(f29252,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f29251])).
fof(f29251,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4)) )),
  inference(condensation,[],[f29158])).
fof(f29158,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s(bool,f(s(X85,sK6(X86,X87,bool,X85)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X85,bool),X86) = s(fun(X85,bool),X87) | s(bool,'T_0') = s(bool,X84) | s(bool,'T_0') = s(bool,g(s(X85,sK6(X86,X87,bool,X85)))) | s(bool,'T_0') = s(bool,X88) | s(bool,X84) = s(bool,X89) | s(bool,X88) = s(bool,X89)) )),
  inference(superposition,[],[f1272,f5666])).
fof(f14030,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,X0) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) )),
  inference(equality_factoring,[],[f1198])).
fof(f13380,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,X0) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) )),
  inference(equality_factoring,[],[f1156])).
fof(f19625,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK6(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f12193,f1394])).
fof(f12193,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK6(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(X3,sK6(X4,X5,bool,X3))))) )),
  inference(superposition,[],[f1394,f39])).
fof(f53495,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,sK6(X70,X71,X69,bool)) | s(bool,X72) = s(bool,X73) | s(fun(bool,X69),X70) = s(fun(bool,X69),X71) | s(bool,X68) = s(bool,X72) | s(X69,f(s(bool,X68))) != s(X69,g(s(bool,X68))) | s(bool,'T_0') = s(bool,X73)) )),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f4082,f4400,f4620,f16505,f15428])).
fof(f15428,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(X69,f(s(bool,X68))) != s(X69,g(s(bool,X68))) | s(fun(bool,X69),X70) = s(fun(bool,X69),X71) | s(bool,'T_0') = s(bool,sK6(X70,X71,X69,bool)) | s(bool,X68) = s(bool,X72) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f212,f1178])).
fof(f16505,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X25) = s(bool,X26) | s(bool,X27) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X27) = s(bool,X28) | s(bool,X26) = s(bool,X28) | s(bool,X25) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f5666,f54])).
fof(f4620,plain,(
  ( ! [X408,X405,X407,X409,X406] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X405) = s(fun(bool,bool),X406) | s(bool,'T_0') = s(bool,sK6(X405,X406,bool,bool)) | s(bool,X407) = s(bool,X408) | s(bool,X408) = s(bool,X409) | s(bool,'T_0') = s(bool,X409) | s(bool,X407) = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f212,f1178])).
fof(f4400,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,X436) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X439) = s(bool,g(s(bool,'F_0'))) | s(bool,X439) = s(bool,X440) | s(bool,'T_0') = s(bool,X440) | s(bool,'T_0') = s(bool,X436)) )),
  inference(superposition,[],[f212,f1178])).
fof(f4082,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,X436) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X439) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X436) | s(bool,X439) = s(bool,X440) | s(bool,'T_0') = s(bool,X440)) )),
  inference(superposition,[],[f212,f1178])).
fof(f18750,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,'F_0') = s(bool,X13) | ~p(s(bool,X12)) | s(bool,X11) = s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X11) = s(bool,X14)) )),
  inference(forward_demodulation,[],[f18749,f75])).
fof(f18749,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,X12)) | s(bool,X11) = s(bool,X12) | s(bool,X13) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X13) = s(bool,X14) | s(bool,X11) = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f16983,f37])).
fof(f16983,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X12)) | s(bool,X11) = s(bool,X12) | s(bool,X13) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X13) = s(bool,X14) | s(bool,X11) = s(bool,X14)) )),
  inference(superposition,[],[f51,f5666])).
fof(f18840,plain,(
  ( ! [X389,X391,X387,X388,X390] : (s(X389,f(s(bool,'F_0'))) != s(X389,g(s(bool,'F_0'))) | s(fun(bool,X389),X387) = s(fun(bool,X389),X388) | s(bool,'T_0') = s(bool,X390) | s(bool,X391) = s(bool,sK6(X387,X388,X389,bool)) | s(bool,X390) = s(bool,X391)) )),
  inference(forward_demodulation,[],[f17201,f75])).
fof(f17201,plain,(
  ( ! [X389,X391,X387,X388,X390] : (s(X389,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) != s(X389,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,X389),X387) = s(fun(bool,X389),X388) | s(bool,'T_0') = s(bool,X390) | s(bool,X391) = s(bool,sK6(X387,X388,X389,bool)) | s(bool,X390) = s(bool,X391)) )),
  inference(superposition,[],[f52,f5666])).
fof(f18843,plain,(
  ( ! [X405,X403,X404,X406,X402] : (s(bool,'F_0') != s(bool,f(s(X402,sK6(X403,X404,bool,X402)))) | s(fun(X402,bool),X403) = s(fun(X402,bool),X404) | s(bool,'T_0') = s(bool,X405) | s(bool,X406) = s(bool,g(s(X402,sK6(X403,X404,bool,X402)))) | s(bool,X405) = s(bool,X406)) )),
  inference(forward_demodulation,[],[f17204,f75])).
fof(f17204,plain,(
  ( ! [X405,X403,X404,X406,X402] : (s(bool,f(s(X402,sK6(X403,X404,bool,X402)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X402,bool),X403) = s(fun(X402,bool),X404) | s(bool,'T_0') = s(bool,X405) | s(bool,X406) = s(bool,g(s(X402,sK6(X403,X404,bool,X402)))) | s(bool,X405) = s(bool,X406)) )),
  inference(superposition,[],[f52,f5666])).
fof(f18975,plain,(
  ( ! [X540,X538,X541,X537,X539] : (s(bool,'F_0') = s(bool,sK6(X537,X538,X539,bool)) | s(X539,f(s(bool,X540))) != s(X539,g(s(bool,X540))) | s(fun(bool,X539),X537) = s(fun(bool,X539),X538) | s(bool,'T_0') = s(bool,X541) | s(bool,X540) = s(bool,X541)) )),
  inference(forward_demodulation,[],[f17406,f75])).
fof(f17406,plain,(
  ( ! [X540,X538,X541,X537,X539] : (s(X539,f(s(bool,X540))) != s(X539,g(s(bool,X540))) | s(fun(bool,X539),X537) = s(fun(bool,X539),X538) | s(bool,'T_0') = s(bool,X541) | s(bool,sK6(X537,X538,X539,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X540) = s(bool,X541)) )),
  inference(superposition,[],[f52,f5666])).
fof(f3885,plain,(
  ( ! [X430,X432,X434,X431,X433,X435] : (s(bool,X433) != s(bool,f(s(X430,sK6(X431,X432,bool,X430)))) | s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X433) = s(bool,X434) | s(bool,'T_0') = s(bool,X434) | s(bool,X435) = s(bool,g(s(X430,sK6(X431,X432,bool,X430)))) | s(bool,'T_0') = s(bool,X435)) )),
  inference(superposition,[],[f52,f1178])).
fof(f4081,plain,(
  ( ! [X430,X432,X434,X431,X433,X435] : (s(bool,X433) != s(bool,f(s(X430,sK6(X431,X432,bool,X430)))) | s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X434) = s(bool,g(s(X430,sK6(X431,X432,bool,X430)))) | s(bool,'T_0') = s(bool,X433) | s(bool,X434) = s(bool,X435) | s(bool,'T_0') = s(bool,X435)) )),
  inference(superposition,[],[f52,f1178])).
fof(f4179,plain,(
  ( ! [X428,X430,X432,X429,X431,X427] : (s(bool,X430) != s(bool,f(s(X427,sK6(X428,X429,bool,X427)))) | s(fun(X427,bool),X428) = s(fun(X427,bool),X429) | s(bool,X430) = s(bool,X431) | s(bool,'T_0') = s(bool,g(s(X427,sK6(X428,X429,bool,X427)))) | s(bool,X431) = s(bool,X432) | s(bool,'T_0') = s(bool,X432)) )),
  inference(superposition,[],[f52,f1178])).
fof(f4301,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (s(bool,'T_0') != s(bool,f(s(X399,sK6(X400,X401,bool,X399)))) | s(fun(X399,bool),X400) = s(fun(X399,bool),X401) | s(bool,X402) = s(bool,X403) | s(bool,X403) = s(bool,g(s(X399,sK6(X400,X401,bool,X399)))) | s(bool,X402) = s(bool,X404) | s(bool,'T_0') = s(bool,X404)) )),
  inference(superposition,[],[f52,f1178])).
fof(f6609,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(bool,f(s(X127,sK6(X128,X129,bool,X127)))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X124),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X125),s('type.semanticPrimitives.store_v'('type.modSem.v'),X126))) | s(fun(X127,bool),X128) = s(fun(X127,bool),X129) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X124))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X125))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X126))) | s(bool,'T_0') = s(bool,g(s(X127,sK6(X128,X129,bool,X127))))) )),
  inference(superposition,[],[f1272,f53])).
fof(f6674,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f6673])).
fof(f6673,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(condensation,[],[f6672])).
fof(f6672,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56] : (s(fun(X56,bool),X57) = s(fun(X56,bool),X58) | s(bool,'T_0') = s(bool,X60) | s(bool,'T_0') = s(bool,g(s(X56,sK6(X57,X58,bool,X56)))) | s(bool,X61) = s(bool,f(s(X56,sK6(X57,X58,bool,X56)))) | s(bool,'T_0') = s(bool,X59) | s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f6634,f54])).
fof(f6634,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56] : (s(bool,X59) != s(bool,X60) | s(fun(X56,bool),X57) = s(fun(X56,bool),X58) | s(bool,'T_0') = s(bool,X60) | s(bool,'T_0') = s(bool,g(s(X56,sK6(X57,X58,bool,X56)))) | s(bool,X61) = s(bool,f(s(X56,sK6(X57,X58,bool,X56)))) | s(bool,'T_0') = s(bool,X59) | s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f1272,f1178])).
fof(f12218,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(fun(X45,bool),X46) = s(fun(X45,bool),X47) | s(bool,X48) = s(bool,g(s(X45,sK6(X46,X47,bool,X45)))) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,X50) | s(bool,X50) = s(bool,f(s(X45,sK6(X46,X47,bool,X45)))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) )),
  inference(trivial_inequality_removal,[],[f12201])).
fof(f12201,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X45,bool),X46) = s(fun(X45,bool),X47) | s(bool,X48) = s(bool,g(s(X45,sK6(X46,X47,bool,X45)))) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,X50) | s(bool,X50) = s(bool,f(s(X45,sK6(X46,X47,bool,X45)))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f1394,f1178])).
fof(f14071,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) )),
  inference(condensation,[],[f14070])).
fof(f14070,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (s(bool,f(s(X132,sK6(X133,X134,bool,X132)))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X129))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X130))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X131))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134) | s(bool,'T_0') = s(bool,X128) | s(bool,'T_0') = s(bool,g(s(X132,sK6(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X129),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X130),s('type.semanticPrimitives.store_v'('type.modSem.v'),X131)))) )),
  inference(duplicate_literal_removal,[],[f13926])).
fof(f13926,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (s(bool,f(s(X132,sK6(X133,X134,bool,X132)))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X129))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X130))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X131))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134) | s(bool,'T_0') = s(bool,X128) | s(bool,'T_0') = s(bool,g(s(X132,sK6(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X129),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X130),s('type.semanticPrimitives.store_v'('type.modSem.v'),X131))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f1272,f1198])).
fof(f17105,plain,(
  ( ! [X505,X502,X504,X501,X503] : (s(bool,'T_0') != s(bool,f(s(X501,sK6(X502,X503,bool,X501)))) | s(fun(X501,bool),X502) = s(fun(X501,bool),X503) | s(bool,X504) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X504) = s(bool,X505) | s(bool,X505) = s(bool,g(s(X501,sK6(X502,X503,bool,X501))))) )),
  inference(superposition,[],[f52,f5666])).
fof(f17554,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,X555) != s(bool,f(s(X552,sK6(X553,X554,bool,X552)))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X556) | s(bool,X555) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552))))) )),
  inference(superposition,[],[f52,f5666])).
fof(f17844,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,X555) != s(bool,f(s(X552,sK6(X553,X554,bool,X552)))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X555) | s(bool,X556) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552))))) )),
  inference(superposition,[],[f52,f5666])).
fof(f17992,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,X3) != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(condensation,[],[f17991])).
fof(f17991,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (s(bool,X112) != s(bool,f(s(X113,sK6(X114,X115,bool,X113)))) | s(fun(X113,bool),X114) = s(fun(X113,bool),X115) | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,g(s(X113,sK6(X114,X115,bool,X113)))) | s(bool,X116) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X112) = s(bool,X116)) )),
  inference(duplicate_literal_removal,[],[f17581])).
fof(f17581,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (s(bool,X112) != s(bool,f(s(X113,sK6(X114,X115,bool,X113)))) | s(fun(X113,bool),X114) = s(fun(X113,bool),X115) | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,g(s(X113,sK6(X114,X115,bool,X113)))) | s(bool,'T_0') = s(bool,X111) | s(bool,X116) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X112) = s(bool,X116)) )),
  inference(superposition,[],[f1272,f5666])).
fof(f18256,plain,(
  ( ! [X356,X352,X354,X357,X353,X355] : (s(fun(X352,bool),X353) = s(fun(X352,bool),X354) | s(bool,X355) = s(bool,g(s(X352,sK6(X353,X354,bool,X352)))) | s(bool,'T_0') = s(bool,X355) | s(bool,X356) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X356) = s(bool,X357) | s(bool,X357) = s(bool,f(s(X352,sK6(X353,X354,bool,X352))))) )),
  inference(trivial_inequality_removal,[],[f17074])).
fof(f17074,plain,(
  ( ! [X356,X352,X354,X357,X353,X355] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X352,bool),X353) = s(fun(X352,bool),X354) | s(bool,X355) = s(bool,g(s(X352,sK6(X353,X354,bool,X352)))) | s(bool,'T_0') = s(bool,X355) | s(bool,X356) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X356) = s(bool,X357) | s(bool,X357) = s(bool,f(s(X352,sK6(X353,X354,bool,X352))))) )),
  inference(superposition,[],[f1394,f5666])).
fof(f19225,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f19224])).
fof(f19224,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X4) = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f19223])).
fof(f19223,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (s(fun(X390,bool),X391) = s(fun(X390,bool),X392) | s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') = s(bool,g(s(X390,sK6(X391,X392,bool,X390)))) | s(bool,'T_0') = s(bool,X393) | s(bool,X395) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X395) = s(bool,f(s(X390,sK6(X391,X392,bool,X390))))) )),
  inference(subsumption_resolution,[],[f17807,f54])).
fof(f17807,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (s(bool,X393) != s(bool,X394) | s(fun(X390,bool),X391) = s(fun(X390,bool),X392) | s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') = s(bool,g(s(X390,sK6(X391,X392,bool,X390)))) | s(bool,'T_0') = s(bool,X393) | s(bool,X395) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X395) = s(bool,f(s(X390,sK6(X391,X392,bool,X390))))) )),
  inference(superposition,[],[f1272,f5666])).
fof(f986,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),X0))) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X1,X2,sK0)),s('type.semanticPrimitives.state'(sK0),X0))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X2),s('type.modSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),X0))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))) )),
  inference(forward_demodulation,[],[f985,f32])).
fof(f985,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),X0))) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X1,X2,sK0)),s('type.semanticPrimitives.state'(sK0),X0))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X2),s('type.modSem.state'(sK0),X1)))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),X0))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),X0))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))) )),
  inference(forward_demodulation,[],[f984,f33])).
fof(f984,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),X0))) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X1,X2,sK0)),s('type.semanticPrimitives.state'(sK0),X0))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X2),s('type.modSem.state'(sK0),X1)))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),X0))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),X0))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))) )),
  inference(forward_demodulation,[],[f983,f34])).
fof(f983,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),X0))) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X1,X2,sK0)),s('type.semanticPrimitives.state'(sK0),X0))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X2),s('type.modSem.state'(sK0),X1)))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),X0))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),X0))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),X0))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))) )),
  inference(superposition,[],[f46,f35])).
fof(f6031,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X3))),s('type.modSem.state'(X1),X4)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X3),s('type.modSem.state'(X1),X4)))) | s(bool,X5) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X1),sK4(X2,X4,X3,X1)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X4,X3,X1)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X1),sK4(X2,X4,X3,X1)))))) | s(bool,X0) = s(bool,X5)) )),
  inference(condensation,[],[f6030])).
fof(f6030,plain,(
  ( ! [X350,X352,X349,X351,X347,X353,X348] : (p(s(bool,happ(s(fun('type.modSem.state'(X347),bool),happ(s(fun('type.semanticPrimitives.state'(X347),fun('type.modSem.state'(X347),bool)),X348),s('type.semanticPrimitives.state'(X347),X350))),s('type.modSem.state'(X347),X349)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X347),X350),s('type.modSem.state'(X347),X349)))) | s(bool,X352) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X347),sK3(X348,X349,X350,X347)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347)))))) | s(bool,'T_0') = s(bool,X351) | s(bool,X352) = s(bool,X353) | s(bool,'T_0') = s(bool,X353)) )),
  inference(subsumption_resolution,[],[f4067,f56])).
fof(f4067,plain,(
  ( ! [X350,X352,X349,X351,X347,X353,X348] : (p(s(bool,X351)) | p(s(bool,happ(s(fun('type.modSem.state'(X347),bool),happ(s(fun('type.semanticPrimitives.state'(X347),fun('type.modSem.state'(X347),bool)),X348),s('type.semanticPrimitives.state'(X347),X350))),s('type.modSem.state'(X347),X349)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X347),X350),s('type.modSem.state'(X347),X349)))) | s(bool,X352) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X347),sK3(X348,X349,X350,X347)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347)))))) | s(bool,'T_0') = s(bool,X351) | s(bool,X352) = s(bool,X353) | s(bool,'T_0') = s(bool,X353)) )),
  inference(superposition,[],[f40,f1178])).
fof(f40,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | ! [X6] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0))))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))),s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))))) & ((! [X4,X5] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),sK5(X2,X1,X0)),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),sK5(X2,X1,X0)),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4,sK5])],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | ! [X6] : (? [X7,X8] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X8))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X7))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X8)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X7))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X8))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X8))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X7))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X8))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X7))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X8))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X7))),s('type.modSem.state'(X0),X8))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))))) & (? [X3] : (! [X4,X5] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))))),
  inference(rectify,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | ! [X3] : (? [X4,X5] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))))) & (? [X3] : (! [X4,X5] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) <=> ! [X3] : (? [X4,X5] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) <=> ! [X3] : (? [X4,X5] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5)))) & ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) <=> ! [X3] : (! [X4,X5] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5)))) => p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) => p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) <=> ! [X3] : (! [X4,X5] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5)))) => p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5))))) => p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X3),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X5,X11] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X5),s('type.modSem.state'(X6),X11)))) <=> ! [X12] : (! [X13,X14] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X14))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X6),X13))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X14)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X6),X13))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X14))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X6),X13))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X14))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X6),X13))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X14))) & s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X13))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X14)))) => p(s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X12),s('type.semanticPrimitives.state'(X6),X13))),s('type.modSem.state'(X6),X14))))) => p(s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X12),s('type.semanticPrimitives.state'(X6),X5))),s('type.modSem.state'(X6),X11))))))),
  file('thm.source_to_modProof.s_rel_rules','thm.source_to_modProof.s_rel_def')).
fof(f46,plain,(
  ( ! [X4,X2,X0,X5,X1] : (s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X5))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),sK5(X2,X1,X0)),s('type.semanticPrimitives.state'(X0),X4))),s('type.modSem.state'(X0),X5)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X5))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X5))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X4))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X5))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X5))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X4))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X5))))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f1942,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0))))) )),
  inference(subsumption_resolution,[],[f1941,f37])).
fof(f1941,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0))))) )),
  inference(forward_demodulation,[],[f1940,f151])).
fof(f1940,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))) )),
  inference(trivial_inequality_removal,[],[f1939])).
fof(f1939,plain,(
  ( ! [X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),sK1))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),sK1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),sK1))) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))) )),
  inference(equality_resolution,[],[f986])).
fof(f6041,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X2)))) | s(bool,X3) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X2,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f6040])).
fof(f6040,plain,(
  ( ! [X412,X408,X410,X409,X411] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X409),s('type.modSem.state'(sK0),X408)))) | s(bool,X411) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X408,X409,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X410) | s(bool,X411) = s(bool,X412) | s(bool,'T_0') = s(bool,X412)) )),
  inference(subsumption_resolution,[],[f4078,f56])).
fof(f4078,plain,(
  ( ! [X412,X408,X410,X409,X411] : (p(s(bool,X410)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X409),s('type.modSem.state'(sK0),X408)))) | s(bool,X411) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X408,X409,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X410) | s(bool,X411) = s(bool,X412) | s(bool,'T_0') = s(bool,X412)) )),
  inference(superposition,[],[f1942,f1178])).
fof(f41,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f42,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f43,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f44,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),sK4(X6,X2,X1,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f45,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),sK3(X6,X2,X1,X0)))),s('type.modSem.state'(X0),sK4(X6,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f47,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),sK5(X2,X1,X0)),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f6033,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) | s(bool,X5) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))) | s(bool,X0) = s(bool,X5)) )),
  inference(condensation,[],[f6032])).
fof(f6032,plain,(
  ( ! [X383,X385,X380,X382,X384,X386,X381] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X380),sK3(X381,X383,X382,X380)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X380),sK4(X381,X383,X382,X380)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X380),X382),s('type.modSem.state'(X380),X383)))) | s(bool,X385) = s(bool,happ(s(fun('type.modSem.state'(X380),bool),happ(s(fun('type.semanticPrimitives.state'(X380),fun('type.modSem.state'(X380),bool)),X381),s('type.semanticPrimitives.state'(X380),X382))),s('type.modSem.state'(X380),X383))) | s(bool,'T_0') = s(bool,X384) | s(bool,X385) = s(bool,X386) | s(bool,'T_0') = s(bool,X386)) )),
  inference(subsumption_resolution,[],[f4074,f56])).
fof(f4074,plain,(
  ( ! [X383,X385,X380,X382,X384,X386,X381] : (p(s(bool,X384)) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X380),sK3(X381,X383,X382,X380)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X380),sK4(X381,X383,X382,X380)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X380),X382),s('type.modSem.state'(X380),X383)))) | s(bool,X385) = s(bool,happ(s(fun('type.modSem.state'(X380),bool),happ(s(fun('type.semanticPrimitives.state'(X380),fun('type.modSem.state'(X380),bool)),X381),s('type.semanticPrimitives.state'(X380),X382))),s('type.modSem.state'(X380),X383))) | s(bool,'T_0') = s(bool,X384) | s(bool,X385) = s(bool,X386) | s(bool,'T_0') = s(bool,X386)) )),
  inference(superposition,[],[f42,f1178])).
fof(f6035,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) | s(bool,X5) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))) | s(bool,X0) = s(bool,X5)) )),
  inference(condensation,[],[f6034])).
fof(f6034,plain,(
  ( ! [X389,X391,X387,X393,X388,X390,X392] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X387),sK3(X388,X390,X389,X387)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X387),sK4(X388,X390,X389,X387)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X387),X389),s('type.modSem.state'(X387),X390)))) | s(bool,X392) = s(bool,happ(s(fun('type.modSem.state'(X387),bool),happ(s(fun('type.semanticPrimitives.state'(X387),fun('type.modSem.state'(X387),bool)),X388),s('type.semanticPrimitives.state'(X387),X389))),s('type.modSem.state'(X387),X390))) | s(bool,'T_0') = s(bool,X391) | s(bool,X392) = s(bool,X393) | s(bool,'T_0') = s(bool,X393)) )),
  inference(subsumption_resolution,[],[f4075,f56])).
fof(f4075,plain,(
  ( ! [X389,X391,X387,X393,X388,X390,X392] : (p(s(bool,X391)) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X387),sK3(X388,X390,X389,X387)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X387),sK4(X388,X390,X389,X387)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X387),X389),s('type.modSem.state'(X387),X390)))) | s(bool,X392) = s(bool,happ(s(fun('type.modSem.state'(X387),bool),happ(s(fun('type.semanticPrimitives.state'(X387),fun('type.modSem.state'(X387),bool)),X388),s('type.semanticPrimitives.state'(X387),X389))),s('type.modSem.state'(X387),X390))) | s(bool,'T_0') = s(bool,X391) | s(bool,X392) = s(bool,X393) | s(bool,'T_0') = s(bool,X393)) )),
  inference(superposition,[],[f41,f1178])).
fof(f6037,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.ffi.ffi_state'(X1),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))) = s('type.ffi.ffi_state'(X1),'const.modSem.state_ffi_1'(s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) | s(bool,X5) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))) | s(bool,X0) = s(bool,X5)) )),
  inference(condensation,[],[f6036])).
fof(f6036,plain,(
  ( ! [X397,X399,X395,X396,X398,X394,X400] : (s('type.ffi.ffi_state'(X394),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X394),sK3(X395,X397,X396,X394)))) = s('type.ffi.ffi_state'(X394),'const.modSem.state_ffi_1'(s('type.modSem.state'(X394),sK4(X395,X397,X396,X394)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X394),X396),s('type.modSem.state'(X394),X397)))) | s(bool,X399) = s(bool,happ(s(fun('type.modSem.state'(X394),bool),happ(s(fun('type.semanticPrimitives.state'(X394),fun('type.modSem.state'(X394),bool)),X395),s('type.semanticPrimitives.state'(X394),X396))),s('type.modSem.state'(X394),X397))) | s(bool,'T_0') = s(bool,X398) | s(bool,X399) = s(bool,X400) | s(bool,'T_0') = s(bool,X400)) )),
  inference(subsumption_resolution,[],[f4076,f56])).
fof(f4076,plain,(
  ( ! [X397,X399,X395,X396,X398,X394,X400] : (p(s(bool,X398)) | s('type.ffi.ffi_state'(X394),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X394),sK3(X395,X397,X396,X394)))) = s('type.ffi.ffi_state'(X394),'const.modSem.state_ffi_1'(s('type.modSem.state'(X394),sK4(X395,X397,X396,X394)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X394),X396),s('type.modSem.state'(X394),X397)))) | s(bool,X399) = s(bool,happ(s(fun('type.modSem.state'(X394),bool),happ(s(fun('type.semanticPrimitives.state'(X394),fun('type.modSem.state'(X394),bool)),X395),s('type.semanticPrimitives.state'(X394),X396))),s('type.modSem.state'(X394),X397))) | s(bool,'T_0') = s(bool,X398) | s(bool,X399) = s(bool,X400) | s(bool,'T_0') = s(bool,X400)) )),
  inference(superposition,[],[f44,f1178])).
fof(f6039,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) | s(bool,X5) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))) | s(bool,X0) = s(bool,X5)) )),
  inference(condensation,[],[f6038])).
fof(f6038,plain,(
  ( ! [X405,X407,X401,X403,X404,X406,X402] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X401),sK3(X402,X404,X403,X401)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X401),sK4(X402,X404,X403,X401)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X401),X403),s('type.modSem.state'(X401),X404)))) | s(bool,X406) = s(bool,happ(s(fun('type.modSem.state'(X401),bool),happ(s(fun('type.semanticPrimitives.state'(X401),fun('type.modSem.state'(X401),bool)),X402),s('type.semanticPrimitives.state'(X401),X403))),s('type.modSem.state'(X401),X404))) | s(bool,'T_0') = s(bool,X405) | s(bool,X406) = s(bool,X407) | s(bool,'T_0') = s(bool,X407)) )),
  inference(subsumption_resolution,[],[f4077,f56])).
fof(f4077,plain,(
  ( ! [X405,X407,X401,X403,X404,X406,X402] : (p(s(bool,X405)) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X401),sK3(X402,X404,X403,X401)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X401),sK4(X402,X404,X403,X401)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X401),X403),s('type.modSem.state'(X401),X404)))) | s(bool,X406) = s(bool,happ(s(fun('type.modSem.state'(X401),bool),happ(s(fun('type.semanticPrimitives.state'(X401),fun('type.modSem.state'(X401),bool)),X402),s('type.semanticPrimitives.state'(X401),X403))),s('type.modSem.state'(X401),X404))) | s(bool,'T_0') = s(bool,X405) | s(bool,X406) = s(bool,X407) | s(bool,'T_0') = s(bool,X407)) )),
  inference(superposition,[],[f43,f1178])).
fof(f6101,plain,(
  ( ! [X344,X341,X343,X339,X340,X342,X338] : (~p(s(bool,happ(s(fun('type.modSem.state'(X338),bool),happ(s(fun('type.semanticPrimitives.state'(X338),fun('type.modSem.state'(X338),bool)),X341),s('type.semanticPrimitives.state'(X338),sK3(X341,X340,X339,X338)))),s('type.modSem.state'(X338),sK4(X341,X340,X339,X338))))) | p(s(bool,happ(s(fun('type.modSem.state'(X338),bool),happ(s(fun('type.semanticPrimitives.state'(X338),fun('type.modSem.state'(X338),bool)),X341),s('type.semanticPrimitives.state'(X338),X339))),s('type.modSem.state'(X338),X340)))) | s(bool,X342) = s(bool,X343) | s(bool,X343) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X338),X339),s('type.modSem.state'(X338),X340))) | s(bool,X342) = s(bool,X344) | s(bool,'T_0') = s(bool,X344)) )),
  inference(subsumption_resolution,[],[f4292,f37])).
fof(f4292,plain,(
  ( ! [X344,X341,X343,X339,X340,X342,X338] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X338),bool),happ(s(fun('type.semanticPrimitives.state'(X338),fun('type.modSem.state'(X338),bool)),X341),s('type.semanticPrimitives.state'(X338),sK3(X341,X340,X339,X338)))),s('type.modSem.state'(X338),sK4(X341,X340,X339,X338))))) | p(s(bool,happ(s(fun('type.modSem.state'(X338),bool),happ(s(fun('type.semanticPrimitives.state'(X338),fun('type.modSem.state'(X338),bool)),X341),s('type.semanticPrimitives.state'(X338),X339))),s('type.modSem.state'(X338),X340)))) | s(bool,X342) = s(bool,X343) | s(bool,X343) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X338),X339),s('type.modSem.state'(X338),X340))) | s(bool,X342) = s(bool,X344) | s(bool,'T_0') = s(bool,X344)) )),
  inference(superposition,[],[f45,f1178])).
fof(f6102,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X345),X347),s('type.modSem.state'(X345),X346)))) | s(bool,X348) = s(bool,X349) | s(bool,X349) = s(bool,happ(s(fun('type.modSem.state'(X345),bool),happ(s(fun('type.semanticPrimitives.state'(X345),fun('type.modSem.state'(X345),bool)),sK5(X346,X347,X345)),s('type.semanticPrimitives.state'(X345),X347))),s('type.modSem.state'(X345),X346))) | s(bool,X348) = s(bool,X350) | s(bool,'T_0') = s(bool,X350)) )),
  inference(subsumption_resolution,[],[f4293,f37])).
fof(f4293,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X345),X347),s('type.modSem.state'(X345),X346)))) | s(bool,X348) = s(bool,X349) | s(bool,X349) = s(bool,happ(s(fun('type.modSem.state'(X345),bool),happ(s(fun('type.semanticPrimitives.state'(X345),fun('type.modSem.state'(X345),bool)),sK5(X346,X347,X345)),s('type.semanticPrimitives.state'(X345),X347))),s('type.modSem.state'(X345),X346))) | s(bool,X348) = s(bool,X350) | s(bool,'T_0') = s(bool,X350)) )),
  inference(superposition,[],[f47,f1178])).
fof(f12462,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X2,X3,X1)),s('type.semanticPrimitives.state'(X1),X3))),s('type.modSem.state'(X1),X2))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X3),s('type.modSem.state'(X1),X2))) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(condensation,[],[f12461])).
fof(f12461,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (s(bool,X63) = s(bool,happ(s(fun('type.modSem.state'(X59),bool),happ(s(fun('type.semanticPrimitives.state'(X59),fun('type.modSem.state'(X59),bool)),sK5(X61,X60,X59)),s('type.semanticPrimitives.state'(X59),X60))),s('type.modSem.state'(X59),X61))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X59),X60),s('type.modSem.state'(X59),X61))) | s(bool,'T_0') = s(bool,X62) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f12446,f56])).
fof(f12446,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (p(s(bool,X62)) | s(bool,X63) = s(bool,happ(s(fun('type.modSem.state'(X59),bool),happ(s(fun('type.semanticPrimitives.state'(X59),fun('type.modSem.state'(X59),bool)),sK5(X61,X60,X59)),s('type.semanticPrimitives.state'(X59),X60))),s('type.modSem.state'(X59),X61))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X59),X60),s('type.modSem.state'(X59),X61))) | s(bool,'T_0') = s(bool,X62) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f1690,f1178])).
fof(f14970,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (p(s(bool,happ(s(fun('type.modSem.state'(X58),bool),happ(s(fun('type.semanticPrimitives.state'(X58),fun('type.modSem.state'(X58),bool)),X59),s('type.semanticPrimitives.state'(X58),X61))),s('type.modSem.state'(X58),X60)))) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X58),X61),s('type.modSem.state'(X58),X60))) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(X58),bool),happ(s(fun('type.semanticPrimitives.state'(X58),fun('type.modSem.state'(X58),bool)),X59),s('type.semanticPrimitives.state'(X58),sK3(X59,X60,X61,X58)))),s('type.modSem.state'(X58),sK4(X59,X60,X61,X58)))) | s(bool,X63) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f14949,f37])).
fof(f14949,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X58),bool),happ(s(fun('type.semanticPrimitives.state'(X58),fun('type.modSem.state'(X58),bool)),X59),s('type.semanticPrimitives.state'(X58),X61))),s('type.modSem.state'(X58),X60)))) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X58),X61),s('type.modSem.state'(X58),X60))) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(X58),bool),happ(s(fun('type.semanticPrimitives.state'(X58),fun('type.modSem.state'(X58),bool)),X59),s('type.semanticPrimitives.state'(X58),sK3(X59,X60,X61,X58)))),s('type.modSem.state'(X58),sK4(X59,X60,X61,X58)))) | s(bool,X63) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f1689,f1178])).
fof(f53,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2] : s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X15,X16,X17] : s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X15),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X16),s('type.semanticPrimitives.store_v'('type.modSem.v'),X17))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X15))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X16))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X17)))),
  file('thm.source_to_modProof.s_rel_rules','ARITY_1_3_const.source_to_modProof.sv_rel')).
fof(f14122,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) )),
  inference(condensation,[],[f14121])).
fof(f14121,plain,(
  ( ! [X94,X92,X97,X95,X93,X91,X96] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X92))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X93))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X94))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X95))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X96))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X97))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X95),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X96),s('type.semanticPrimitives.store_v'('type.modSem.v'),X97))) | s(bool,'T_0') = s(bool,X91) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X92),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X93),s('type.semanticPrimitives.store_v'('type.modSem.v'),X94)))) )),
  inference(duplicate_literal_removal,[],[f13853])).
fof(f13853,plain,(
  ( ! [X94,X92,X97,X95,X93,X91,X96] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X92))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X93))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X94))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X95))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X96))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X97))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X95),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X96),s('type.semanticPrimitives.store_v'('type.modSem.v'),X97))) | s(bool,'T_0') = s(bool,X91) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X92),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X93),s('type.semanticPrimitives.store_v'('type.modSem.v'),X94))) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f1198,f1198])).
fof(f14136,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) )),
  inference(condensation,[],[f14135])).
fof(f14135,plain,(
  ( ! [X30,X28,X33,X31,X29,X34,X32] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X29),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X32))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X32),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X29))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31)))) )),
  inference(duplicate_literal_removal,[],[f13844])).
fof(f13844,plain,(
  ( ! [X30,X28,X33,X31,X29,X34,X32] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X29),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X32))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X32),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X29))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f1198,f1156])).
fof(f3509,plain,(
  ( ! [X191,X189,X187,X190,X188,X186] : (s(bool,X189) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X186),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X187),s('type.semanticPrimitives.store_v'('type.modSem.v'),X188))) | s(bool,X189) = s(bool,X190) | s(bool,'T_0') = s(bool,X190) | s(bool,X191) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X186))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X187))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X188))) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f1178,f53])).
fof(f3587,plain,(
  ( ! [X191,X189,X187,X190,X188,X186] : (s(bool,X189) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X186),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X187),s('type.semanticPrimitives.store_v'('type.modSem.v'),X188))) | s(bool,X190) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X186))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X187))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X188))) | s(bool,'T_0') = s(bool,X189) | s(bool,X190) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f1178,f53])).
fof(f3626,plain,(
  ( ! [X177,X175,X178,X176,X174,X179] : (s(bool,X177) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X174),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X175),s('type.semanticPrimitives.store_v'('type.modSem.v'),X176))) | s(bool,X177) = s(bool,X178) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X174))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X175))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X176))) | s(bool,X178) = s(bool,X179) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f1178,f53])).
fof(f3668,plain,(
  ( ! [X134,X132,X136,X135,X133,X131] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X131),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X132),s('type.semanticPrimitives.store_v'('type.modSem.v'),X133))) | s(bool,X134) = s(bool,X135) | s(bool,X135) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X131))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X132))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X133))) | s(bool,X134) = s(bool,X136) | s(bool,'T_0') = s(bool,X136)) )),
  inference(superposition,[],[f1178,f53])).
fof(f13281,plain,(
  ( ! [X511,X516,X512,X514,X513,X515] : (s(X513,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X514),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X515),s('type.semanticPrimitives.store_v'('type.modSem.v'),X516))))) != s(X513,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X514),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X515),s('type.semanticPrimitives.store_v'('type.modSem.v'),X516))))) | s(fun(bool,X513),X511) = s(fun(bool,X513),X512) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X514))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X515))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X516))) | s(bool,'T_0') = s(bool,sK6(X511,X512,X513,bool))) )),
  inference(superposition,[],[f52,f1156])).
fof(f13519,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) )),
  inference(condensation,[],[f13518])).
fof(f13518,plain,(
  ( ! [X30,X28,X33,X31,X29,X34,X32] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X29),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X32),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X32))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X29))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31)))) )),
  inference(duplicate_literal_removal,[],[f13135])).
fof(f13135,plain,(
  ( ! [X30,X28,X33,X31,X29,X34,X32] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X29),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X32),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X32))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X33))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X34))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X29))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f1156,f1156])).
fof(f49717,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,'F_0') != s(bool,X121) | s(fun(X118,bool),X119) = s(fun(X118,bool),X120) | s(bool,'T_0') = s(bool,g(s(X118,sK6(X119,X120,bool,X118)))) | s(bool,'T_0') = s(bool,X122) | s(bool,f(s(X118,sK6(X119,X120,bool,X118)))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X121) = s(bool,X122)) )),
  inference(superposition,[],[f213,f5666])).
fof(f49662,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X33) = s(fun(bool,bool),X34) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X33,X34,bool,bool)))) | s(bool,X35) = s(bool,X36) | s(bool,X36) = s(bool,sK6(X33,X34,bool,bool)) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f213,f1178])).
fof(f212,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,X2,bool))) )),
  inference(forward_demodulation,[],[f208,f75])).
fof(f208,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) != s(X2,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,X2,bool))) )),
  inference(superposition,[],[f52,f146])).
fof(f213,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(forward_demodulation,[],[f210,f75])).
fof(f210,plain,(
  ( ! [X2,X0,X1] : (s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f52,f146])).
fof(f284,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) )),
  inference(forward_demodulation,[],[f273,f75])).
fof(f273,plain,(
  ( ! [X4,X5,X3] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) )),
  inference(superposition,[],[f53,f146])).
fof(f14144,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f14143])).
fof(f14143,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f13838])).
fof(f13838,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1198,f39])).
fof(f18610,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f18552,f75])).
fof(f18552,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18551])).
fof(f18551,plain,(
  ( ! [X191,X189,X192,X190,X188,X193] : (s(bool,'T_0') = s(bool,X191) | s(bool,X192) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X192) = s(bool,X193) | s(bool,X193) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X188))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X189))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X190))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X188),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X189),s('type.semanticPrimitives.store_v'('type.modSem.v'),X190)))) )),
  inference(duplicate_literal_removal,[],[f16569])).
fof(f16569,plain,(
  ( ! [X191,X189,X192,X190,X188,X193] : (s(bool,'T_0') = s(bool,X191) | s(bool,X192) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X192) = s(bool,X193) | s(bool,X193) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X188))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X189))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X190))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X188),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X189),s('type.semanticPrimitives.store_v'('type.modSem.v'),X190))) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f5666,f1198])).
fof(f18612,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f18550,f75])).
fof(f18550,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18549])).
fof(f18549,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s(bool,'T_0') = s(bool,X205) | s(bool,X206) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X206) = s(bool,X207) | s(bool,X207) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X202),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X203),s('type.semanticPrimitives.store_v'('type.modSem.v'),X204))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X202))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X203))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X204)))) )),
  inference(duplicate_literal_removal,[],[f16571])).
fof(f16571,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s(bool,'T_0') = s(bool,X205) | s(bool,X206) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X206) = s(bool,X207) | s(bool,X207) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X202),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X203),s('type.semanticPrimitives.store_v'('type.modSem.v'),X204))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X202))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X203))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X204))) | s(bool,'T_0') = s(bool,X205)) )),
  inference(superposition,[],[f5666,f1156])).
fof(f18618,plain,(
  ( ! [X208,X206,X209,X207,X205] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X205),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.store_v'('type.modSem.v'),X207))) | s(bool,'T_0') = s(bool,X208) | s(bool,X209) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X205))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X206))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X207))) | s(bool,X208) = s(bool,X209)) )),
  inference(forward_demodulation,[],[f16615,f75])).
fof(f16615,plain,(
  ( ! [X208,X206,X209,X207,X205] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X205),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.store_v'('type.modSem.v'),X207))) | s(bool,'T_0') = s(bool,X208) | s(bool,X209) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X205))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X206))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X207))) | s(bool,X208) = s(bool,X209)) )),
  inference(superposition,[],[f5666,f53])).
fof(f18648,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X265))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X266))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X267))) | s(bool,X268) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X265),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X266),s('type.semanticPrimitives.store_v'('type.modSem.v'),X267))) | s(bool,'T_0') = s(bool,X269) | s(bool,X268) = s(bool,X269)) )),
  inference(forward_demodulation,[],[f16719,f75])).
fof(f16719,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,X268) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X265),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X266),s('type.semanticPrimitives.store_v'('type.modSem.v'),X267))) | s(bool,'T_0') = s(bool,X269) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X265))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X266))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X267))) | s(bool,X268) = s(bool,X269)) )),
  inference(superposition,[],[f5666,f53])).
fof(f18681,plain,(
  ( ! [X269,X271,X267,X268,X270] : (s(bool,'F_0') = s(bool,X270) | s(bool,X270) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X267),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269))) | s(bool,'T_0') = s(bool,X271) | s(bool,X271) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X267))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269)))) )),
  inference(forward_demodulation,[],[f16788,f75])).
fof(f16788,plain,(
  ( ! [X269,X271,X267,X268,X270] : (s(bool,X270) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X267),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269))) | s(bool,'T_0') = s(bool,X271) | s(bool,X270) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X271) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X267))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269)))) )),
  inference(superposition,[],[f5666,f53])).
fof(f18727,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X4))) | s(bool,X0) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X2),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.store_v'('type.modSem.v'),X4)))) )),
  inference(forward_demodulation,[],[f18295,f75])).
fof(f18295,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X4))) | s(bool,X0) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X2),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.store_v'('type.modSem.v'),X4)))) )),
  inference(condensation,[],[f18294])).
fof(f18294,plain,(
  ( ! [X261,X263,X265,X262,X264,X266] : (s(bool,'T_0') = s(bool,X264) | s(bool,X265) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X265) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X261))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X262))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X263))) | s(bool,X266) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X261),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.store_v'('type.modSem.v'),X263))) | s(bool,'T_0') = s(bool,X266)) )),
  inference(duplicate_literal_removal,[],[f16925])).
fof(f16925,plain,(
  ( ! [X261,X263,X265,X262,X264,X266] : (s(bool,'T_0') = s(bool,X264) | s(bool,'T_0') = s(bool,X264) | s(bool,X265) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X265) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X261))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X262))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X263))) | s(bool,X266) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X261),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.store_v'('type.modSem.v'),X263))) | s(bool,'T_0') = s(bool,X266)) )),
  inference(superposition,[],[f5666,f1156])).
fof(f18730,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | p(s(bool,X0)) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(forward_demodulation,[],[f16929,f75])).
fof(f16929,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(superposition,[],[f37,f5666])).
fof(f18775,plain,(
  ( ! [X420,X416,X418,X415,X417,X419] : (s(bool,'F_0') = s(bool,X419) | ~p(s(bool,happ(s(fun('type.modSem.state'(X415),bool),happ(s(fun('type.semanticPrimitives.state'(X415),fun('type.modSem.state'(X415),bool)),X418),s('type.semanticPrimitives.state'(X415),sK3(X418,X417,X416,X415)))),s('type.modSem.state'(X415),sK4(X418,X417,X416,X415))))) | p(s(bool,happ(s(fun('type.modSem.state'(X415),bool),happ(s(fun('type.semanticPrimitives.state'(X415),fun('type.modSem.state'(X415),bool)),X418),s('type.semanticPrimitives.state'(X415),X416))),s('type.modSem.state'(X415),X417)))) | s(bool,X419) = s(bool,X420) | s(bool,X420) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X415),X416),s('type.modSem.state'(X415),X417)))) )),
  inference(forward_demodulation,[],[f18774,f75])).
fof(f18774,plain,(
  ( ! [X420,X416,X418,X415,X417,X419] : (~p(s(bool,happ(s(fun('type.modSem.state'(X415),bool),happ(s(fun('type.semanticPrimitives.state'(X415),fun('type.modSem.state'(X415),bool)),X418),s('type.semanticPrimitives.state'(X415),sK3(X418,X417,X416,X415)))),s('type.modSem.state'(X415),sK4(X418,X417,X416,X415))))) | p(s(bool,happ(s(fun('type.modSem.state'(X415),bool),happ(s(fun('type.semanticPrimitives.state'(X415),fun('type.modSem.state'(X415),bool)),X418),s('type.semanticPrimitives.state'(X415),X416))),s('type.modSem.state'(X415),X417)))) | s(bool,X419) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X419) = s(bool,X420) | s(bool,X420) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X415),X416),s('type.modSem.state'(X415),X417)))) )),
  inference(subsumption_resolution,[],[f17091,f37])).
fof(f17091,plain,(
  ( ! [X420,X416,X418,X415,X417,X419] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X415),bool),happ(s(fun('type.semanticPrimitives.state'(X415),fun('type.modSem.state'(X415),bool)),X418),s('type.semanticPrimitives.state'(X415),sK3(X418,X417,X416,X415)))),s('type.modSem.state'(X415),sK4(X418,X417,X416,X415))))) | p(s(bool,happ(s(fun('type.modSem.state'(X415),bool),happ(s(fun('type.semanticPrimitives.state'(X415),fun('type.modSem.state'(X415),bool)),X418),s('type.semanticPrimitives.state'(X415),X416))),s('type.modSem.state'(X415),X417)))) | s(bool,X419) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X419) = s(bool,X420) | s(bool,X420) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X415),X416),s('type.modSem.state'(X415),X417)))) )),
  inference(superposition,[],[f45,f5666])).
fof(f18777,plain,(
  ( ! [X422,X424,X421,X423,X425] : (s(bool,'F_0') = s(bool,X424) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X421),X423),s('type.modSem.state'(X421),X422)))) | s(bool,X424) = s(bool,X425) | s(bool,X425) = s(bool,happ(s(fun('type.modSem.state'(X421),bool),happ(s(fun('type.semanticPrimitives.state'(X421),fun('type.modSem.state'(X421),bool)),sK5(X422,X423,X421)),s('type.semanticPrimitives.state'(X421),X423))),s('type.modSem.state'(X421),X422)))) )),
  inference(forward_demodulation,[],[f18776,f75])).
fof(f18776,plain,(
  ( ! [X422,X424,X421,X423,X425] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X421),X423),s('type.modSem.state'(X421),X422)))) | s(bool,X424) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X424) = s(bool,X425) | s(bool,X425) = s(bool,happ(s(fun('type.modSem.state'(X421),bool),happ(s(fun('type.semanticPrimitives.state'(X421),fun('type.modSem.state'(X421),bool)),sK5(X422,X423,X421)),s('type.semanticPrimitives.state'(X421),X423))),s('type.modSem.state'(X421),X422)))) )),
  inference(subsumption_resolution,[],[f17092,f37])).
fof(f17092,plain,(
  ( ! [X422,X424,X421,X423,X425] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X421),X423),s('type.modSem.state'(X421),X422)))) | s(bool,X424) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X424) = s(bool,X425) | s(bool,X425) = s(bool,happ(s(fun('type.modSem.state'(X421),bool),happ(s(fun('type.semanticPrimitives.state'(X421),fun('type.modSem.state'(X421),bool)),sK5(X422,X423,X421)),s('type.semanticPrimitives.state'(X421),X423))),s('type.modSem.state'(X421),X422)))) )),
  inference(superposition,[],[f47,f5666])).
fof(f18779,plain,(
  ( ! [X455,X457,X459,X454,X460,X456,X458] : (s(bool,'F_0') = s(bool,X459) | p(s(bool,happ(s(fun('type.modSem.state'(X454),bool),happ(s(fun('type.semanticPrimitives.state'(X454),fun('type.modSem.state'(X454),bool)),X455),s('type.semanticPrimitives.state'(X454),X457))),s('type.modSem.state'(X454),X456)))) | s(bool,X458) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X454),X457),s('type.modSem.state'(X454),X456))) | s(bool,'T_0') = s(bool,X458) | s(bool,X459) = s(bool,X460) | s(bool,X460) = s(bool,happ(s(fun('type.modSem.state'(X454),bool),happ(s(fun('type.semanticPrimitives.state'(X454),fun('type.modSem.state'(X454),bool)),X455),s('type.semanticPrimitives.state'(X454),sK3(X455,X456,X457,X454)))),s('type.modSem.state'(X454),sK4(X455,X456,X457,X454))))) )),
  inference(forward_demodulation,[],[f18778,f75])).
fof(f18778,plain,(
  ( ! [X455,X457,X459,X454,X460,X456,X458] : (p(s(bool,happ(s(fun('type.modSem.state'(X454),bool),happ(s(fun('type.semanticPrimitives.state'(X454),fun('type.modSem.state'(X454),bool)),X455),s('type.semanticPrimitives.state'(X454),X457))),s('type.modSem.state'(X454),X456)))) | s(bool,X458) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X454),X457),s('type.modSem.state'(X454),X456))) | s(bool,'T_0') = s(bool,X458) | s(bool,X459) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X459) = s(bool,X460) | s(bool,X460) = s(bool,happ(s(fun('type.modSem.state'(X454),bool),happ(s(fun('type.semanticPrimitives.state'(X454),fun('type.modSem.state'(X454),bool)),X455),s('type.semanticPrimitives.state'(X454),sK3(X455,X456,X457,X454)))),s('type.modSem.state'(X454),sK4(X455,X456,X457,X454))))) )),
  inference(subsumption_resolution,[],[f17098,f37])).
fof(f17098,plain,(
  ( ! [X455,X457,X459,X454,X460,X456,X458] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X454),bool),happ(s(fun('type.semanticPrimitives.state'(X454),fun('type.modSem.state'(X454),bool)),X455),s('type.semanticPrimitives.state'(X454),X457))),s('type.modSem.state'(X454),X456)))) | s(bool,X458) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X454),X457),s('type.modSem.state'(X454),X456))) | s(bool,'T_0') = s(bool,X458) | s(bool,X459) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X459) = s(bool,X460) | s(bool,X460) = s(bool,happ(s(fun('type.modSem.state'(X454),bool),happ(s(fun('type.semanticPrimitives.state'(X454),fun('type.modSem.state'(X454),bool)),X455),s('type.semanticPrimitives.state'(X454),sK3(X455,X456,X457,X454)))),s('type.modSem.state'(X454),sK4(X455,X456,X457,X454))))) )),
  inference(superposition,[],[f1689,f5666])).
fof(f18954,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'F_0') = s(bool,f(s(X5,sK6(X6,X7,bool,X5)))) | s(bool,X4) = s(bool,g(s(X5,sK6(X6,X7,bool,X5)))) | s(fun(X5,bool),X6) = s(fun(X5,bool),X7) | s(bool,'T_0') = s(bool,X4)) )),
  inference(forward_demodulation,[],[f18953,f75])).
fof(f18953,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,g(s(X5,sK6(X6,X7,bool,X5)))) | s(fun(X5,bool),X6) = s(fun(X5,bool),X7) | s(bool,'T_0') = s(bool,X4) | s(bool,f(s(X5,sK6(X6,X7,bool,X5)))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f18952])).
fof(f18952,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,g(s(X5,sK6(X6,X7,bool,X5)))) | s(fun(X5,bool),X6) = s(fun(X5,bool),X7) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,f(s(X5,sK6(X6,X7,bool,X5)))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18951])).
fof(f18951,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (s(fun(X384,bool),X385) = s(fun(X384,bool),X386) | s(bool,X388) = s(bool,g(s(X384,sK6(X385,X386,bool,X384)))) | s(bool,'T_0') = s(bool,X388) | s(bool,'T_0') = s(bool,X389) | s(bool,f(s(X384,sK6(X385,X386,bool,X384)))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X387) = s(bool,X389)) )),
  inference(subsumption_resolution,[],[f17371,f54])).
fof(f17371,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (s(bool,'T_0') != s(bool,X387) | s(fun(X384,bool),X385) = s(fun(X384,bool),X386) | s(bool,X388) = s(bool,g(s(X384,sK6(X385,X386,bool,X384)))) | s(bool,'T_0') = s(bool,X388) | s(bool,'T_0') = s(bool,X389) | s(bool,f(s(X384,sK6(X385,X386,bool,X384)))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X387) = s(bool,X389)) )),
  inference(superposition,[],[f1394,f5666])).
fof(f18971,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X9),s('type.semanticPrimitives.state'(X6),sK3(X9,X8,X7,X6)))),s('type.modSem.state'(X6),sK4(X9,X8,X7,X6)))) | s(bool,X5) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X7),s('type.modSem.state'(X6),X8))) | p(s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X9),s('type.semanticPrimitives.state'(X6),X7))),s('type.modSem.state'(X6),X8)))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(forward_demodulation,[],[f18970,f75])).
fof(f18970,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X7),s('type.modSem.state'(X6),X8))) | p(s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X9),s('type.semanticPrimitives.state'(X6),X7))),s('type.modSem.state'(X6),X8)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X9),s('type.semanticPrimitives.state'(X6),sK3(X9,X8,X7,X6)))),s('type.modSem.state'(X6),sK4(X9,X8,X7,X6))))) )),
  inference(duplicate_literal_removal,[],[f18969])).
fof(f18969,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X7),s('type.modSem.state'(X6),X8))) | p(s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X9),s('type.semanticPrimitives.state'(X6),X7))),s('type.modSem.state'(X6),X8)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X6),bool),happ(s(fun('type.semanticPrimitives.state'(X6),fun('type.modSem.state'(X6),bool)),X9),s('type.semanticPrimitives.state'(X6),sK3(X9,X8,X7,X6)))),s('type.modSem.state'(X6),sK4(X9,X8,X7,X6))))) )),
  inference(condensation,[],[f18968])).
fof(f18968,plain,(
  ( ! [X499,X500,X502,X498,X501,X503,X497] : (p(s(bool,happ(s(fun('type.modSem.state'(X497),bool),happ(s(fun('type.semanticPrimitives.state'(X497),fun('type.modSem.state'(X497),bool)),X498),s('type.semanticPrimitives.state'(X497),X500))),s('type.modSem.state'(X497),X499)))) | s(bool,X502) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X497),X500),s('type.modSem.state'(X497),X499))) | s(bool,'T_0') = s(bool,X502) | s(bool,'T_0') = s(bool,X503) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X497),bool),happ(s(fun('type.semanticPrimitives.state'(X497),fun('type.modSem.state'(X497),bool)),X498),s('type.semanticPrimitives.state'(X497),sK3(X498,X499,X500,X497)))),s('type.modSem.state'(X497),sK4(X498,X499,X500,X497)))) | s(bool,X501) = s(bool,X503)) )),
  inference(subsumption_resolution,[],[f17400,f88])).
fof(f17400,plain,(
  ( ! [X499,X500,X502,X498,X501,X503,X497] : (~p(s(bool,X501)) | p(s(bool,happ(s(fun('type.modSem.state'(X497),bool),happ(s(fun('type.semanticPrimitives.state'(X497),fun('type.modSem.state'(X497),bool)),X498),s('type.semanticPrimitives.state'(X497),X500))),s('type.modSem.state'(X497),X499)))) | s(bool,X502) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X497),X500),s('type.modSem.state'(X497),X499))) | s(bool,'T_0') = s(bool,X502) | s(bool,'T_0') = s(bool,X503) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X497),bool),happ(s(fun('type.semanticPrimitives.state'(X497),fun('type.modSem.state'(X497),bool)),X498),s('type.semanticPrimitives.state'(X497),sK3(X498,X499,X500,X497)))),s('type.modSem.state'(X497),sK4(X498,X499,X500,X497)))) | s(bool,X501) = s(bool,X503)) )),
  inference(superposition,[],[f1689,f5666])).
fof(f19254,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X2,X3,X1)),s('type.semanticPrimitives.state'(X1),X3))),s('type.modSem.state'(X1),X2))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X3),s('type.modSem.state'(X1),X2)))) )),
  inference(forward_demodulation,[],[f19253,f75])).
fof(f19253,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X2,X3,X1)),s('type.semanticPrimitives.state'(X1),X3))),s('type.modSem.state'(X1),X2))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X3),s('type.modSem.state'(X1),X2)))) )),
  inference(condensation,[],[f19252])).
fof(f19252,plain,(
  ( ! [X453,X455,X457,X452,X454,X456] : (s(bool,X456) = s(bool,happ(s(fun('type.modSem.state'(X452),bool),happ(s(fun('type.semanticPrimitives.state'(X452),fun('type.modSem.state'(X452),bool)),sK5(X454,X453,X452)),s('type.semanticPrimitives.state'(X452),X453))),s('type.modSem.state'(X452),X454))) | s(bool,'T_0') = s(bool,X456) | s(bool,'T_0') = s(bool,X455) | s(bool,X457) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X457) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X452),X453),s('type.modSem.state'(X452),X454)))) )),
  inference(subsumption_resolution,[],[f17827,f56])).
fof(f17827,plain,(
  ( ! [X453,X455,X457,X452,X454,X456] : (p(s(bool,X455)) | s(bool,X456) = s(bool,happ(s(fun('type.modSem.state'(X452),bool),happ(s(fun('type.semanticPrimitives.state'(X452),fun('type.modSem.state'(X452),bool)),sK5(X454,X453,X452)),s('type.semanticPrimitives.state'(X452),X453))),s('type.modSem.state'(X452),X454))) | s(bool,'T_0') = s(bool,X456) | s(bool,'T_0') = s(bool,X455) | s(bool,X457) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X457) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X452),X453),s('type.modSem.state'(X452),X454)))) )),
  inference(superposition,[],[f1690,f5666])).
fof(f20763,plain,(
  ( ! [X282,X281] : (s(bool,X281) = s(bool,X282) | s(bool,'F_0') = s(bool,X282) | s(bool,X281) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18954,f18898,f18726,f14144,f18727,f18964,f18967,f18971,f19144,f19145,f19146,f20761,f18385,f18258,f17052])).
fof(f1394,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'T_0') != s(bool,f(s(X130,sK6(X131,X132,bool,X130)))) | s(fun(X130,bool),X131) = s(fun(X130,bool),X132) | s(bool,X133) = s(bool,g(s(X130,sK6(X131,X132,bool,X130)))) | s(bool,'T_0') = s(bool,X133)) )),
  inference(superposition,[],[f52,f54])).
fof(f6663,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f6662])).
fof(f6662,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(subsumption_resolution,[],[f6624,f39])).
fof(f6624,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X3) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f1272,f39])).
fof(f12220,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,X10) = s(bool,g(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,f(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(trivial_inequality_removal,[],[f12194])).
fof(f12194,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,X10) = s(bool,g(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X10) | s(bool,X11) = s(bool,f(s(X7,sK6(X8,X9,bool,X7)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1394,f54])).
fof(f6329,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X2,X3,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0)))))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X3))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2))))) )),
  inference(condensation,[],[f6328])).
fof(f6328,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X3))),s('type.modSem.state'(X1),X4)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X3),s('type.modSem.state'(X1),X4)))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X1),sK4(X2,X4,X3,X1)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X4,X3,X1)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X1),sK4(X2,X4,X3,X1))))))) )),
  inference(condensation,[],[f6327])).
fof(f6327,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | p(s(bool,happ(s(fun('type.modSem.state'(X3),bool),happ(s(fun('type.semanticPrimitives.state'(X3),fun('type.modSem.state'(X3),bool)),X4),s('type.semanticPrimitives.state'(X3),X5))),s('type.modSem.state'(X3),X6)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X3),X5),s('type.modSem.state'(X3),X6)))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X3),sK4(X4,X6,X5,X3)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X3),sK3(X4,X6,X5,X3)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X3),sK4(X4,X6,X5,X3))))))) )),
  inference(condensation,[],[f6326])).
fof(f6326,plain,(
  ( ! [X350,X352,X349,X351,X347,X353,X348] : (p(s(bool,happ(s(fun('type.modSem.state'(X347),bool),happ(s(fun('type.semanticPrimitives.state'(X347),fun('type.modSem.state'(X347),bool)),X348),s('type.semanticPrimitives.state'(X347),X350))),s('type.modSem.state'(X347),X349)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X347),X350),s('type.modSem.state'(X347),X349)))) | s(bool,X351) = s(bool,X352) | s(bool,X352) = s(bool,X353) | s(bool,'T_0') = s(bool,X353) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X347),sK3(X348,X349,X350,X347)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347))))))) )),
  inference(subsumption_resolution,[],[f4483,f1687])).
fof(f4483,plain,(
  ( ! [X350,X352,X349,X351,X347,X353,X348] : (p(s(bool,X351)) | p(s(bool,happ(s(fun('type.modSem.state'(X347),bool),happ(s(fun('type.semanticPrimitives.state'(X347),fun('type.modSem.state'(X347),bool)),X348),s('type.semanticPrimitives.state'(X347),X350))),s('type.modSem.state'(X347),X349)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X347),X350),s('type.modSem.state'(X347),X349)))) | s(bool,X351) = s(bool,X352) | s(bool,X352) = s(bool,X353) | s(bool,'T_0') = s(bool,X353) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X347),sK3(X348,X349,X350,X347)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X347),sK4(X348,X349,X350,X347))))))) )),
  inference(superposition,[],[f40,f1178])).
fof(f2178,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(subsumption_resolution,[],[f2170,f38])).
fof(f2170,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f1942,f39])).
fof(f341,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(subsumption_resolution,[],[f340,f38])).
fof(f340,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(forward_demodulation,[],[f338,f75])).
fof(f338,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(superposition,[],[f43,f146])).
fof(f467,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(subsumption_resolution,[],[f466,f38])).
fof(f466,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(forward_demodulation,[],[f464,f75])).
fof(f464,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(superposition,[],[f44,f146])).
fof(f516,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(subsumption_resolution,[],[f515,f38])).
fof(f515,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(forward_demodulation,[],[f513,f75])).
fof(f513,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) )),
  inference(superposition,[],[f41,f146])).
fof(f1689,plain,(
  ( ! [X94,X92,X90,X93,X91] : (~p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),sK3(X93,X92,X91,X90)))),s('type.modSem.state'(X90),sK4(X93,X92,X91,X90))))) | p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),X91))),s('type.modSem.state'(X90),X92)))) | s(bool,X94) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X90),X91),s('type.modSem.state'(X90),X92))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f1386,f37])).
fof(f1386,plain,(
  ( ! [X94,X92,X90,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),sK3(X93,X92,X91,X90)))),s('type.modSem.state'(X90),sK4(X93,X92,X91,X90))))) | p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),X91))),s('type.modSem.state'(X90),X92)))) | s(bool,X94) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X90),X91),s('type.modSem.state'(X90),X92))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f45,f54])).
fof(f1690,plain,(
  ( ! [X97,X95,X98,X96] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X95),X97),s('type.modSem.state'(X95),X96)))) | s(bool,X98) = s(bool,happ(s(fun('type.modSem.state'(X95),bool),happ(s(fun('type.semanticPrimitives.state'(X95),fun('type.modSem.state'(X95),bool)),sK5(X96,X97,X95)),s('type.semanticPrimitives.state'(X95),X97))),s('type.modSem.state'(X95),X96))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f1387,f37])).
fof(f1387,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X95),X97),s('type.modSem.state'(X95),X96)))) | s(bool,X98) = s(bool,happ(s(fun('type.modSem.state'(X95),bool),happ(s(fun('type.semanticPrimitives.state'(X95),fun('type.modSem.state'(X95),bool)),sK5(X96,X97,X95)),s('type.semanticPrimitives.state'(X95),X97))),s('type.modSem.state'(X95),X96))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f47,f54])).
fof(f6137,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3))))) )),
  inference(condensation,[],[f6136])).
fof(f6136,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f6135])).
fof(f6135,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X3),sK3(X4,X5,X6,X3)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X3),sK4(X4,X5,X6,X3)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X3),X6),s('type.modSem.state'(X3),X5)))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X3),bool),happ(s(fun('type.semanticPrimitives.state'(X3),fun('type.modSem.state'(X3),bool)),X4),s('type.semanticPrimitives.state'(X3),X6))),s('type.modSem.state'(X3),X5)))) )),
  inference(condensation,[],[f6134])).
fof(f6134,plain,(
  ( ! [X383,X385,X380,X382,X384,X386,X381] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X380),sK3(X381,X383,X382,X380)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X380),sK4(X381,X383,X382,X380)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X380),X382),s('type.modSem.state'(X380),X383)))) | s(bool,X384) = s(bool,X385) | s(bool,X385) = s(bool,X386) | s(bool,'T_0') = s(bool,X386) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X380),bool),happ(s(fun('type.semanticPrimitives.state'(X380),fun('type.modSem.state'(X380),bool)),X381),s('type.semanticPrimitives.state'(X380),X382))),s('type.modSem.state'(X380),X383)))) )),
  inference(subsumption_resolution,[],[f4490,f1687])).
fof(f4490,plain,(
  ( ! [X383,X385,X380,X382,X384,X386,X381] : (p(s(bool,X384)) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X380),sK3(X381,X383,X382,X380)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X380),sK4(X381,X383,X382,X380)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X380),X382),s('type.modSem.state'(X380),X383)))) | s(bool,X384) = s(bool,X385) | s(bool,X385) = s(bool,X386) | s(bool,'T_0') = s(bool,X386) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X380),bool),happ(s(fun('type.semanticPrimitives.state'(X380),fun('type.modSem.state'(X380),bool)),X381),s('type.semanticPrimitives.state'(X380),X382))),s('type.modSem.state'(X380),X383)))) )),
  inference(superposition,[],[f42,f1178])).
fof(f12460,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X6) = s(bool,happ(s(fun('type.modSem.state'(X3),bool),happ(s(fun('type.semanticPrimitives.state'(X3),fun('type.modSem.state'(X3),bool)),sK5(X5,X4,X3)),s('type.semanticPrimitives.state'(X3),X4))),s('type.modSem.state'(X3),X5))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X3),X4),s('type.modSem.state'(X3),X5)))) )),
  inference(subsumption_resolution,[],[f12436,f38])).
fof(f12436,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,happ(s(fun('type.modSem.state'(X3),bool),happ(s(fun('type.semanticPrimitives.state'(X3),fun('type.modSem.state'(X3),bool)),sK5(X5,X4,X3)),s('type.semanticPrimitives.state'(X3),X4))),s('type.modSem.state'(X3),X5))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X3),X4),s('type.modSem.state'(X3),X5)))) )),
  inference(superposition,[],[f1690,f39])).
fof(f14967,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (p(s(bool,happ(s(fun('type.modSem.state'(X5),bool),happ(s(fun('type.semanticPrimitives.state'(X5),fun('type.modSem.state'(X5),bool)),X6),s('type.semanticPrimitives.state'(X5),X8))),s('type.modSem.state'(X5),X7)))) | s(bool,X9) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X5),X8),s('type.modSem.state'(X5),X7))) | s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,happ(s(fun('type.modSem.state'(X5),bool),happ(s(fun('type.semanticPrimitives.state'(X5),fun('type.modSem.state'(X5),bool)),X6),s('type.semanticPrimitives.state'(X5),sK3(X6,X7,X8,X5)))),s('type.modSem.state'(X5),sK4(X6,X7,X8,X5)))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f14941,f37])).
fof(f14941,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X5),bool),happ(s(fun('type.semanticPrimitives.state'(X5),fun('type.modSem.state'(X5),bool)),X6),s('type.semanticPrimitives.state'(X5),X8))),s('type.modSem.state'(X5),X7)))) | s(bool,X9) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X5),X8),s('type.modSem.state'(X5),X7))) | s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,happ(s(fun('type.modSem.state'(X5),bool),happ(s(fun('type.semanticPrimitives.state'(X5),fun('type.modSem.state'(X5),bool)),X6),s('type.semanticPrimitives.state'(X5),sK3(X6,X7,X8,X5)))),s('type.modSem.state'(X5),sK4(X6,X7,X8,X5)))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f1689,f54])).
fof(f1198,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X38) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X35))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X36))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X37))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X35),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X36),s('type.semanticPrimitives.store_v'('type.modSem.v'),X37))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f54,f53])).
fof(f17106,plain,(
  ( ! [X509,X507,X508,X510,X506] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X506) = s(fun(bool,bool),X507) | s(bool,X508) = s(bool,sK6(X506,X507,bool,bool)) | s(bool,'T_0') = s(bool,X508) | s(bool,X509) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X509) = s(bool,X510) | s(bool,X510) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f1393,f5666])).
fof(f49675,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,'F_0') != s(bool,f(s(bool,X90))) | s(fun(bool,bool),X88) = s(fun(bool,bool),X89) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X88,X89,bool,bool)))) | s(bool,'T_0') = s(bool,X91) | s(bool,sK6(X88,X89,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X90) = s(bool,X91)) )),
  inference(superposition,[],[f213,f5666])).
fof(f50969,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(fun(X190,bool),X191) = s(fun(X190,bool),X192) | s(bool,X193) = s(bool,g(s(X190,sK6(X191,X192,bool,X190)))) | s(bool,'T_0') = s(bool,X193)) )),
  inference(subsumption_resolution,[],[f50593,f1394])).
fof(f50593,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(fun(X190,bool),X191) = s(fun(X190,bool),X192) | s(bool,X193) = s(bool,g(s(X190,sK6(X191,X192,bool,X190)))) | s(bool,'T_0') = s(bool,X193) | s(bool,'T_0') = s(bool,f(s(X190,sK6(X191,X192,bool,X190))))) )),
  inference(superposition,[],[f1394,f12459])).
fof(f50835,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f50834])).
fof(f50834,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(duplicate_literal_removal,[],[f50415])).
fof(f50415,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f12459,f1178])).
fof(f1156,plain,(
  ( ! [X45,X43,X46,X44] : (s(bool,X46) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X43),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X44),s('type.semanticPrimitives.store_v'('type.modSem.v'),X45))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X43))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X44))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X45))) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f54,f53])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f12])).
fof(f12,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.source_to_modProof.s_rel_rules',aHL_FALSITY)).
fof(f1272,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,X141) != s(bool,f(s(X138,sK6(X139,X140,bool,X138)))) | s(fun(X138,bool),X139) = s(fun(X138,bool),X140) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,g(s(X138,sK6(X139,X140,bool,X138))))) )),
  inference(superposition,[],[f52,f54])).
fof(f12178,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,X45) = s(bool,g(s(bool,sK6(X43,X44,bool,bool)))) | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,X46) = s(bool,sK6(X43,X44,bool,bool))) )),
  inference(superposition,[],[f1394,f1178])).
fof(f17103,plain,(
  ( ! [X492,X494,X493,X495,X491] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X491) = s(fun(bool,bool),X492) | s(bool,X493) = s(bool,g(s(bool,sK6(X491,X492,bool,bool)))) | s(bool,'T_0') = s(bool,X493) | s(bool,X494) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X494) = s(bool,X495) | s(bool,X495) = s(bool,sK6(X491,X492,bool,bool))) )),
  inference(superposition,[],[f1394,f5666])).
fof(f18976,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,'F_0') = s(bool,g(s(X552,sK6(X553,X554,bool,X552)))) | s(bool,X555) != s(bool,f(s(X552,sK6(X553,X554,bool,X552)))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X556) | s(bool,X555) = s(bool,X556)) )),
  inference(forward_demodulation,[],[f17409,f75])).
fof(f17409,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,X555) != s(bool,f(s(X552,sK6(X553,X554,bool,X552)))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X556) | s(bool,g(s(X552,sK6(X553,X554,bool,X552)))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X555) = s(bool,X556)) )),
  inference(superposition,[],[f52,f5666])).
fof(f28890,plain,(
  ( ! [X70,X68,X71,X69] : (p(s(bool,X70)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X69),s('type.modSem.state'(sK0),X68)))) | s(bool,'T_0') = s(bool,X71) | s(bool,X70) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X68,X69,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f1942,f5666])).
fof(f17909,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f17908])).
fof(f17908,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f17857])).
fof(f17857,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f5666])).
fof(f17897,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') != s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f17880])).
fof(f17880,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f5666])).
fof(f75,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))),
  inference(unit_resulting_resolution,[],[f38,f36,f48])).
fof(f19340,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s(bool,'T_0') != s(bool,X373) | s(fun(X370,bool),X371) = s(fun(X370,bool),X372) | s(bool,X374) = s(bool,g(s(X370,sK6(X371,X372,bool,X370)))) | s(bool,'T_0') = s(bool,X374) | s(bool,X375) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X373) = s(bool,X375)) )),
  inference(subsumption_resolution,[],[f17661,f1394])).
fof(f17661,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s(bool,'T_0') != s(bool,X373) | s(fun(X370,bool),X371) = s(fun(X370,bool),X372) | s(bool,X374) = s(bool,g(s(X370,sK6(X371,X372,bool,X370)))) | s(bool,'T_0') = s(bool,X374) | s(bool,'T_0') = s(bool,f(s(X370,sK6(X371,X372,bool,X370)))) | s(bool,X375) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X373) = s(bool,X375)) )),
  inference(superposition,[],[f1394,f5666])).
fof(f20764,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18954,f18898,f18726,f14144,f18727,f18964,f18967,f18971,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f20763,f19377])).
fof(f19377,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(fun(X2,bool),X3) = s(fun(X2,bool),X4) | s(bool,'T_0') = s(bool,g(s(X2,sK6(X3,X4,bool,X2)))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f19376])).
fof(f19376,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (s(bool,X393) != s(bool,X394) | s(fun(X390,bool),X391) = s(fun(X390,bool),X392) | s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') = s(bool,g(s(X390,sK6(X391,X392,bool,X390)))) | s(bool,'T_0') = s(bool,X395) | s(bool,X393) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(subsumption_resolution,[],[f17517,f1272])).
fof(f17517,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (s(bool,X393) != s(bool,X394) | s(fun(X390,bool),X391) = s(fun(X390,bool),X392) | s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') = s(bool,g(s(X390,sK6(X391,X392,bool,X390)))) | s(bool,'T_0') = s(bool,X395) | s(bool,X393) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X395) = s(bool,f(s(X390,sK6(X391,X392,bool,X390))))) )),
  inference(superposition,[],[f1272,f5666])).
fof(f17052,plain,(
  ( ! [X280,X282,X279,X281,X278] : (s(X278,f(s(bool,'T_0'))) != s(X278,g(s(bool,'T_0'))) | s(fun(bool,X278),X279) = s(fun(bool,X278),X280) | s(bool,'T_0') = s(bool,sK6(X279,X280,X278,bool)) | s(bool,X281) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X281) = s(bool,X282) | s(bool,'F_0') = s(bool,X282)) )),
  inference(superposition,[],[f212,f5666])).
fof(f19146,plain,(
  ( ! [X484,X486,X488,X485,X487,X483,X489] : (s(bool,'F_0') = s(bool,X489) | ~p(s(bool,X487)) | p(s(bool,happ(s(fun('type.modSem.state'(X483),bool),happ(s(fun('type.semanticPrimitives.state'(X483),fun('type.modSem.state'(X483),bool)),X484),s('type.semanticPrimitives.state'(X483),X486))),s('type.modSem.state'(X483),X485)))) | s(bool,X488) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X483),X486),s('type.modSem.state'(X483),X485))) | s(bool,'T_0') = s(bool,X488) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X483),bool),happ(s(fun('type.semanticPrimitives.state'(X483),fun('type.modSem.state'(X483),bool)),X484),s('type.semanticPrimitives.state'(X483),sK3(X484,X485,X486,X483)))),s('type.modSem.state'(X483),sK4(X484,X485,X486,X483)))) | s(bool,X487) = s(bool,X489)) )),
  inference(forward_demodulation,[],[f17690,f75])).
fof(f17690,plain,(
  ( ! [X484,X486,X488,X485,X487,X483,X489] : (~p(s(bool,X487)) | p(s(bool,happ(s(fun('type.modSem.state'(X483),bool),happ(s(fun('type.semanticPrimitives.state'(X483),fun('type.modSem.state'(X483),bool)),X484),s('type.semanticPrimitives.state'(X483),X486))),s('type.modSem.state'(X483),X485)))) | s(bool,X488) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X483),X486),s('type.modSem.state'(X483),X485))) | s(bool,'T_0') = s(bool,X488) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X483),bool),happ(s(fun('type.semanticPrimitives.state'(X483),fun('type.modSem.state'(X483),bool)),X484),s('type.semanticPrimitives.state'(X483),sK3(X484,X485,X486,X483)))),s('type.modSem.state'(X483),sK4(X484,X485,X486,X483)))) | s(bool,X489) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X487) = s(bool,X489)) )),
  inference(superposition,[],[f1689,f5666])).
fof(f4701,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f4700])).
fof(f4700,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f1178])).
fof(f12177,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,X39) = s(bool,g(s(bool,sK6(X37,X38,bool,bool)))) | s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,X41) | s(bool,X41) = s(bool,sK6(X37,X38,bool,bool)) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f1394,f1178])).
fof(f20365,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X557) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X558) = s(fun(bool,bool),X559) | s(bool,X560) = s(bool,sK6(X558,X559,bool,bool)) | s(bool,'T_0') = s(bool,X560) | s(bool,'T_0') = s(bool,X561) | s(bool,X557) = s(bool,X561)) )),
  inference(forward_demodulation,[],[f17410,f75])).
fof(f17410,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(bool,X557) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X558) = s(fun(bool,bool),X559) | s(bool,X560) = s(bool,sK6(X558,X559,bool,bool)) | s(bool,'T_0') = s(bool,X560) | s(bool,'T_0') = s(bool,X561) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X557) = s(bool,X561)) )),
  inference(superposition,[],[f1393,f5666])).
fof(f17891,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f17890])).
fof(f17890,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,X2) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f5666])).
fof(f17898,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f17878])).
fof(f17878,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f5666])).
fof(f17904,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f17868])).
fof(f17868,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f5666])).
fof(f17905,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f17866])).
fof(f17866,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(equality_factoring,[],[f5666])).
fof(f19286,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(subsumption_resolution,[],[f17862,f4719])).
fof(f17862,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(equality_factoring,[],[f5666])).
fof(f17912,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f17849])).
fof(f17849,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f5666])).
fof(f17843,plain,(
  ( ! [X549,X551,X547,X548,X550] : (s(bool,X550) != s(bool,f(s(bool,X549))) | s(fun(bool,bool),X547) = s(fun(bool,bool),X548) | s(bool,'T_0') = s(bool,X550) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X547,X548,bool,bool)))) | s(bool,'T_0') = s(bool,X549) | s(bool,X551) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X551) = s(bool,sK6(X547,X548,bool,bool))) )),
  inference(superposition,[],[f1272,f5666])).
fof(f17842,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,'T_0') != s(bool,f(s(bool,X544))) | s(fun(bool,bool),X542) = s(fun(bool,bool),X543) | s(bool,X545) = s(bool,g(s(bool,sK6(X542,X543,bool,bool)))) | s(bool,'T_0') = s(bool,X545) | s(bool,'T_0') = s(bool,X544) | s(bool,X546) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X546) = s(bool,sK6(X542,X543,bool,bool))) )),
  inference(superposition,[],[f1394,f5666])).
fof(f17696,plain,(
  ( ! [X524,X526,X525,X527,X523] : (s(X525,f(s(bool,X526))) != s(X525,g(s(bool,X526))) | s(fun(bool,X525),X523) = s(fun(bool,X525),X524) | s(bool,'T_0') = s(bool,sK6(X523,X524,X525,bool)) | s(bool,X527) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X526) = s(bool,X527)) )),
  inference(superposition,[],[f52,f5666])).
fof(f17634,plain,(
  ( ! [X288,X290,X287,X289,X286] : (s(X287,f(s(bool,X286))) != s(X287,g(s(bool,X286))) | s(fun(bool,X287),X288) = s(fun(bool,X287),X289) | s(bool,'T_0') = s(bool,sK6(X288,X289,X287,bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X290) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X286) = s(bool,X290)) )),
  inference(superposition,[],[f212,f5666])).
fof(f18011,plain,(
  ( ! [X43,X41,X42] : (s(bool,X42) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X41) | s(bool,X43) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X42) = s(bool,X43)) )),
  inference(duplicate_literal_removal,[],[f17568])).
fof(f17568,plain,(
  ( ! [X43,X41,X42] : (s(bool,X42) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X43) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X42) = s(bool,X43)) )),
  inference(superposition,[],[f146,f5666])).
fof(f18017,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f17557])).
fof(f17557,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(superposition,[],[f39,f5666])).
fof(f18252,plain,(
  ( ! [X408,X407,X406] : (s(bool,'T_0') = s(bool,X406) | s(bool,X407) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X407) = s(bool,X408) | s(bool,X408) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f17089])).
fof(f17089,plain,(
  ( ! [X408,X407,X406] : (s(bool,'T_0') = s(bool,X406) | s(bool,'T_0') = s(bool,X406) | s(bool,X407) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X407) = s(bool,X408) | s(bool,X408) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f146,f5666])).
fof(f17087,plain,(
  ( ! [X403,X402] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X402) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,X403) | s(bool,X403) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f75,f5666])).
fof(f19428,plain,(
  ( ! [X271,X272] : (s(bool,X271) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X271) = s(bool,X272) | s(bool,'F_0') = s(bool,X272)) )),
  inference(subsumption_resolution,[],[f17049,f37])).
fof(f17049,plain,(
  ( ! [X271,X272] : (~p(s(bool,'T_0')) | s(bool,X271) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X271) = s(bool,X272) | s(bool,'F_0') = s(bool,X272)) )),
  inference(superposition,[],[f38,f5666])).
fof(f18337,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18336])).
fof(f18336,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f18335])).
fof(f18335,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f16882])).
fof(f16882,plain,(
  ( ! [X111,X109,X112,X110,X108] : (s(bool,X109) = s(bool,X110) | s(bool,'T_0') = s(bool,X110) | s(bool,X111) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X108) = s(bool,X111) | s(bool,'T_0') = s(bool,X112) | s(bool,X108) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X109) = s(bool,X112)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18362,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(condensation,[],[f18361])).
fof(f18361,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f18360])).
fof(f18360,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f16811])).
fof(f16811,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,X99) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X98) | s(bool,X100) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X99) = s(bool,X100) | s(bool,'T_0') = s(bool,X101) | s(bool,X98) = s(bool,X102) | s(bool,X101) = s(bool,X102)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18380,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X19) | s(bool,X21) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X20) = s(bool,X21)) )),
  inference(duplicate_literal_removal,[],[f16796])).
fof(f16796,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X19) | s(bool,X21) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f5666,f146])).
fof(f18401,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18400])).
fof(f18400,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X3) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f18399])).
fof(f18399,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X3) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f16745])).
fof(f16745,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,X114) = s(bool,X115) | s(bool,'T_0') = s(bool,X116) | s(bool,X115) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X113) = s(bool,X116) | s(bool,'T_0') = s(bool,X117) | s(bool,X114) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X113) = s(bool,X117)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18444,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(duplicate_literal_removal,[],[f18443])).
fof(f18443,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(condensation,[],[f16678])).
fof(f16678,plain,(
  ( ! [X127,X125,X123,X126,X124] : (s(bool,X124) = s(bool,X125) | s(bool,'T_0') = s(bool,X126) | s(bool,X123) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X125) = s(bool,X126) | s(bool,'T_0') = s(bool,X124) | s(bool,X127) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X123) = s(bool,X127)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18478,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18477])).
fof(f18477,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f18476])).
fof(f18476,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f16640])).
fof(f16640,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'T_0') = s(bool,X110) | s(bool,'T_0') = s(bool,X111) | s(bool,X110) = s(bool,X112) | s(bool,X111) = s(bool,X112) | s(bool,X113) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X113) = s(bool,X114) | s(bool,X114) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18511,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(duplicate_literal_removal,[],[f18510])).
fof(f18510,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(condensation,[],[f16594])).
fof(f16594,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s(bool,X113) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X114) | s(bool,X112) = s(bool,X115) | s(bool,X114) = s(bool,X115) | s(bool,'T_0') = s(bool,X112) | s(bool,X116) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X113) = s(bool,X116)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18553,plain,(
  ( ! [X187,X185,X186] : (s(bool,'T_0') = s(bool,X185) | s(bool,X186) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X186) = s(bool,X187) | s(bool,X187) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f16568])).
fof(f16568,plain,(
  ( ! [X187,X185,X186] : (s(bool,'T_0') = s(bool,X185) | s(bool,X186) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X186) = s(bool,X187) | s(bool,X187) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X185)) )),
  inference(superposition,[],[f5666,f146])).
fof(f16567,plain,(
  ( ! [X184,X183] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X183) = s(bool,X184) | s(bool,X184) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f5666,f75])).
fof(f15426,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(X57,f(s(bool,X56))) != s(X57,g(s(bool,X56))) | s(fun(bool,X57),X58) = s(fun(bool,X57),X59) | s(bool,'T_0') = s(bool,sK6(X58,X59,X57,bool)) | s(bool,X56) = s(bool,X60) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f212,f1178])).
fof(f4703,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f4696])).
fof(f4696,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4709,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f4684])).
fof(f4684,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4720,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f4666])).
fof(f4666,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4722,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f4664])).
fof(f4664,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4729,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f4648])).
fof(f4648,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4737,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f4636])).
fof(f4636,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4743,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f4624])).
fof(f4624,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4496,plain,(
  ( ! [X428,X424,X426,X429,X425,X427] : (s(X426,f(s(bool,X427))) != s(X426,g(s(bool,X427))) | s(fun(bool,X426),X424) = s(fun(bool,X426),X425) | s(bool,X427) = s(bool,X428) | s(bool,X428) = s(bool,X429) | s(bool,'T_0') = s(bool,X429) | s(bool,'T_0') = s(bool,sK6(X424,X425,X426,bool))) )),
  inference(superposition,[],[f52,f1178])).
fof(f4441,plain,(
  ( ! [X187,X185,X182,X186,X184,X183] : (s(X183,f(s(bool,X182))) != s(X183,g(s(bool,X182))) | s(fun(bool,X183),X184) = s(fun(bool,X183),X185) | s(bool,'T_0') = s(bool,sK6(X184,X185,X183,bool)) | s(bool,X182) = s(bool,X186) | s(bool,X186) = s(bool,X187) | s(bool,'T_0') = s(bool,X187) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f212,f1178])).
fof(f4178,plain,(
  ( ! [X422,X424,X426,X421,X423,X425] : (s(X423,f(s(bool,X424))) != s(X423,g(s(bool,X424))) | s(fun(bool,X423),X421) = s(fun(bool,X423),X422) | s(bool,X424) = s(bool,X425) | s(bool,'T_0') = s(bool,sK6(X421,X422,X423,bool)) | s(bool,X425) = s(bool,X426) | s(bool,'T_0') = s(bool,X426)) )),
  inference(superposition,[],[f52,f1178])).
fof(f4123,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (s(X180,f(s(bool,X179))) != s(X180,g(s(bool,X179))) | s(fun(bool,X180),X181) = s(fun(bool,X180),X182) | s(bool,'T_0') = s(bool,sK6(X181,X182,X180,bool)) | s(bool,X179) = s(bool,X183) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X183) = s(bool,X184) | s(bool,'T_0') = s(bool,X184)) )),
  inference(superposition,[],[f212,f1178])).
fof(f19271,plain,(
  ( ! [X520,X516,X518,X517,X519] : (s(bool,'F_0') = s(bool,X520) | s(bool,X519) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X516),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X517),s('type.semanticPrimitives.store_v'('type.modSem.v'),X518))) | s(bool,'T_0') = s(bool,X519) | s(bool,X520) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X516))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X517))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X518)))) )),
  inference(forward_demodulation,[],[f17838,f75])).
fof(f17838,plain,(
  ( ! [X520,X516,X518,X517,X519] : (s(bool,X519) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X516),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X517),s('type.semanticPrimitives.store_v'('type.modSem.v'),X518))) | s(bool,'T_0') = s(bool,X519) | s(bool,X520) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X520) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X516))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X517))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X518)))) )),
  inference(superposition,[],[f53,f5666])).
fof(f19270,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,X4) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) )),
  inference(forward_demodulation,[],[f17915,f75])).
fof(f17915,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X4) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) )),
  inference(condensation,[],[f17914])).
fof(f17914,plain,(
  ( ! [X511,X512,X514,X510,X513,X515] : (s(bool,'T_0') = s(bool,X513) | s(bool,X514) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X510),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X511),s('type.semanticPrimitives.store_v'('type.modSem.v'),X512))) | s(bool,'T_0') = s(bool,X514) | s(bool,X515) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X515) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X510))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X511))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X512)))) )),
  inference(duplicate_literal_removal,[],[f17837])).
fof(f17837,plain,(
  ( ! [X511,X512,X514,X510,X513,X515] : (s(bool,'T_0') = s(bool,X513) | s(bool,X514) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X510),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X511),s('type.semanticPrimitives.store_v'('type.modSem.v'),X512))) | s(bool,'T_0') = s(bool,X514) | s(bool,'T_0') = s(bool,X513) | s(bool,X515) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X515) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X510))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X511))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X512)))) )),
  inference(superposition,[],[f1156,f5666])).
fof(f17700,plain,(
  ( ! [X546,X545,X547,X543,X544] : (s(bool,X543) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X544) = s(fun(bool,bool),X545) | s(bool,X546) = s(bool,sK6(X544,X545,bool,bool)) | s(bool,'T_0') = s(bool,X546) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X547) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X543) = s(bool,X547)) )),
  inference(superposition,[],[f1393,f5666])).
fof(f18972,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f18087,f75])).
fof(f18087,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18086])).
fof(f18086,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(duplicate_literal_removal,[],[f18085])).
fof(f18085,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f17401])).
fof(f17401,plain,(
  ( ! [X509,X505,X507,X508,X504,X506] : (s(bool,X507) = s(bool,X508) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X504),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X505),s('type.semanticPrimitives.store_v'('type.modSem.v'),X506))) | s(bool,'T_0') = s(bool,X508) | s(bool,'T_0') = s(bool,X509) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X504))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X505))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X506))) | s(bool,X507) = s(bool,X509)) )),
  inference(superposition,[],[f1198,f5666])).
fof(f18794,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f18205,f75])).
fof(f18205,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18204])).
fof(f18204,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(duplicate_literal_removal,[],[f18203])).
fof(f18203,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18202])).
fof(f18202,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) = s(bool,X4)) )),
  inference(condensation,[],[f17130])).
fof(f17130,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X104))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X104),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))) | s(bool,'T_0') = s(bool,X103) | s(bool,'T_0') = s(bool,X107) | s(bool,X103) = s(bool,X108) | s(bool,X107) = s(bool,X108)) )),
  inference(superposition,[],[f1198,f5666])).
fof(f18728,plain,(
  ( ! [X269,X271,X267,X268,X270] : (s(bool,'F_0') = s(bool,X271) | s(bool,X270) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X267),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269))) | s(bool,'T_0') = s(bool,X270) | s(bool,X271) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X267))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269)))) )),
  inference(forward_demodulation,[],[f16926,f75])).
fof(f16926,plain,(
  ( ! [X269,X271,X267,X268,X270] : (s(bool,X270) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X267),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269))) | s(bool,'T_0') = s(bool,X270) | s(bool,X271) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X271) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X267))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X268))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X269)))) )),
  inference(superposition,[],[f5666,f53])).
fof(f18647,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f18438,f75])).
fof(f18438,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18437])).
fof(f18437,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7)))) )),
  inference(duplicate_literal_removal,[],[f18436])).
fof(f18436,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16717])).
fof(f16717,plain,(
  ( ! [X255,X253,X257,X254,X256,X258] : (s(bool,X256) = s(bool,X257) | s(bool,'T_0') = s(bool,X258) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X253))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X254))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X255))) | s(bool,X257) = s(bool,X258) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X253),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.store_v'('type.modSem.v'),X255))) | s(bool,'T_0') = s(bool,X256)) )),
  inference(superposition,[],[f5666,f1198])).
fof(f18614,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f18517,f75])).
fof(f18517,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f18516])).
fof(f18516,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7)))) )),
  inference(duplicate_literal_removal,[],[f18515])).
fof(f18515,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f16586])).
fof(f16586,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X75))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X76))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X77))) | s(bool,'T_0') = s(bool,X78) | s(bool,X74) = s(bool,X79) | s(bool,X78) = s(bool,X79) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X75),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.store_v'('type.modSem.v'),X77))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f5666,f1198])).
fof(f14170,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f14089,f75])).
fof(f14089,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f14088])).
fof(f14088,plain,(
  ( ! [X54,X52,X55,X53] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X53))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X54))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X55))) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X53),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X54),s('type.semanticPrimitives.store_v'('type.modSem.v'),X55)))) )),
  inference(duplicate_literal_removal,[],[f13914])).
fof(f13914,plain,(
  ( ! [X54,X52,X55,X53] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X53))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X54))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X55))) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X53),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X54),s('type.semanticPrimitives.store_v'('type.modSem.v'),X55))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f146,f1198])).
fof(f14097,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f14096])).
fof(f14096,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) )),
  inference(duplicate_literal_removal,[],[f13903])).
fof(f13903,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f39,f1198])).
fof(f14145,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(forward_demodulation,[],[f14138,f75])).
fof(f14138,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) )),
  inference(condensation,[],[f14137])).
fof(f14137,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X25),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(duplicate_literal_removal,[],[f13843])).
fof(f13843,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X25),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f1198,f146])).
fof(f17845,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(bool,X557) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X558) = s(fun(bool,bool),X559) | s(bool,X560) = s(bool,sK6(X558,X559,bool,bool)) | s(bool,'T_0') = s(bool,X560) | s(bool,'T_0') = s(bool,X557) | s(bool,X561) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X561) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f1393,f5666])).
fof(f17104,plain,(
  ( ! [X499,X500,X496,X498,X497] : (s(bool,X498) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X496) = s(fun(bool,bool),X497) | s(bool,'T_0') = s(bool,X498) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X496,X497,bool,bool)))) | s(bool,X499) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X499) = s(bool,X500) | s(bool,X500) = s(bool,sK6(X496,X497,bool,bool))) )),
  inference(superposition,[],[f1272,f5666])).
fof(f11275,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X45) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X43,X44,bool,bool)))) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,X46) = s(bool,sK6(X43,X44,bool,bool))) )),
  inference(superposition,[],[f1272,f1178])).
fof(f11274,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X39) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X37,X38,bool,bool)))) | s(bool,X40) = s(bool,X41) | s(bool,X41) = s(bool,sK6(X37,X38,bool,bool)) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f1272,f1178])).
fof(f6619,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,X42) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X40,X41,bool,bool)))) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,sK6(X40,X41,bool,bool))) )),
  inference(superposition,[],[f1272,f1178])).
fof(f6618,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,X36) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X34,X35,bool,bool)))) | s(bool,X37) = s(bool,X38) | s(bool,X38) = s(bool,sK6(X34,X35,bool,bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f1272,f1178])).
fof(f17903,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X2) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f17869])).
fof(f17869,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f5666])).
fof(f17841,plain,(
  ( ! [X540,X538,X541,X537,X539] : (s(X539,f(s(bool,X540))) != s(X539,g(s(bool,X540))) | s(fun(bool,X539),X537) = s(fun(bool,X539),X538) | s(bool,'T_0') = s(bool,X540) | s(bool,X541) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X541) = s(bool,sK6(X537,X538,X539,bool))) )),
  inference(superposition,[],[f52,f5666])).
fof(f18029,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(X1,f(s(bool,X2))) != s(X1,g(s(bool,X2))) | s(fun(bool,X1),X3) = s(fun(bool,X1),X4) | s(bool,X0) = s(bool,sK6(X3,X4,X1,bool)) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18028])).
fof(f18028,plain,(
  ( ! [X261,X263,X265,X262,X264,X266] : (s(X262,f(s(bool,X261))) != s(X262,g(s(bool,X261))) | s(fun(bool,X262),X263) = s(fun(bool,X262),X264) | s(bool,X265) = s(bool,sK6(X263,X264,X262,bool)) | s(bool,'T_0') = s(bool,X265) | s(bool,'T_0') = s(bool,X266) | s(bool,X261) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f17477])).
fof(f17477,plain,(
  ( ! [X261,X263,X265,X262,X264,X266] : (s(X262,f(s(bool,X261))) != s(X262,g(s(bool,X261))) | s(fun(bool,X262),X263) = s(fun(bool,X262),X264) | s(bool,X265) = s(bool,sK6(X263,X264,X262,bool)) | s(bool,'T_0') = s(bool,X265) | s(bool,'T_0') = s(bool,X266) | s(bool,X261) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X266)) )),
  inference(superposition,[],[f1393,f5666])).
fof(f17102,plain,(
  ( ! [X486,X488,X490,X487,X489] : (s(X488,f(s(bool,'T_0'))) != s(X488,g(s(bool,'T_0'))) | s(fun(bool,X488),X486) = s(fun(bool,X488),X487) | s(bool,X489) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X489) = s(bool,X490) | s(bool,X490) = s(bool,sK6(X486,X487,X488,bool))) )),
  inference(superposition,[],[f52,f5666])).
fof(f16934,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(X30,f(s(bool,X29))) != s(X30,g(s(bool,X29))) | s(fun(bool,X30),X31) = s(fun(bool,X30),X32) | s(bool,X33) = s(bool,sK6(X31,X32,X30,bool)) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X34) = s(bool,X35) | s(bool,X29) = s(bool,X35)) )),
  inference(superposition,[],[f1393,f5666])).
fof(f16503,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (s(bool,X11) = s(bool,X12) | s(bool,X13) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X15) = s(bool,X16) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17) | s(bool,X11) = s(bool,X15)) )),
  inference(superposition,[],[f5666,f1178])).
fof(f16501,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X4) = s(bool,X5) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f12459,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f12434,f38])).
fof(f12434,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1690,f75])).
fof(f6347,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f1393,f39])).
fof(f6349,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,X13) = s(bool,sK6(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f1393,f54])).
fof(f6350,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK6(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1393,f54])).
fof(f6330,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,X4) = s(bool,sK6(X2,X3,X1,bool)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f4719,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(trivial_inequality_removal,[],[f4668])).
fof(f4668,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4659,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4742,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f4625])).
fof(f4625,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(equality_factoring,[],[f1178])).
fof(f4300,plain,(
  ( ! [X397,X393,X395,X396,X398,X394] : (s(X395,f(s(bool,'T_0'))) != s(X395,g(s(bool,'T_0'))) | s(fun(bool,X395),X393) = s(fun(bool,X395),X394) | s(bool,X396) = s(bool,X397) | s(bool,X397) = s(bool,sK6(X393,X394,X395,bool)) | s(bool,X396) = s(bool,X398) | s(bool,'T_0') = s(bool,X398)) )),
  inference(superposition,[],[f52,f1178])).
fof(f6097,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,X15)) | s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,X17) | s(bool,X14) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f4215,f37])).
fof(f4215,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,X17) | s(bool,X14) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f51,f1178])).
fof(f4080,plain,(
  ( ! [X428,X424,X426,X429,X425,X427] : (s(X426,f(s(bool,X427))) != s(X426,g(s(bool,X427))) | s(fun(bool,X426),X424) = s(fun(bool,X426),X425) | s(bool,X428) = s(bool,sK6(X424,X425,X426,bool)) | s(bool,'T_0') = s(bool,X427) | s(bool,X428) = s(bool,X429) | s(bool,'T_0') = s(bool,X429)) )),
  inference(superposition,[],[f52,f1178])).
fof(f6029,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f6028])).
fof(f6028,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X6)) | s(bool,X4) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X5) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f3986,f56])).
fof(f3986,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X4) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X5) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f48,f1178])).
fof(f3884,plain,(
  ( ! [X428,X424,X426,X429,X425,X427] : (s(X426,f(s(bool,X427))) != s(X426,g(s(bool,X427))) | s(fun(bool,X426),X424) = s(fun(bool,X426),X425) | s(bool,X427) = s(bool,X428) | s(bool,'T_0') = s(bool,X428) | s(bool,X429) = s(bool,sK6(X424,X425,X426,bool)) | s(bool,'T_0') = s(bool,X429)) )),
  inference(superposition,[],[f52,f1178])).
fof(f3627,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f1178,f1178])).
fof(f5666,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f5665])).
fof(f5665,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X25) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(duplicate_literal_removal,[],[f3593])).
fof(f3593,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X25) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f1178,f146])).
fof(f5680,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f5679])).
fof(f5679,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f3588])).
fof(f3588,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1178,f39])).
fof(f5884,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f5883])).
fof(f5883,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s(bool,X93) = s(bool,X94) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,X98) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99) | s(bool,X93) = s(bool,X97)) )),
  inference(duplicate_literal_removal,[],[f3487])).
fof(f3487,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s(bool,X93) = s(bool,X94) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,X98) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99) | s(bool,X93) = s(bool,X97)) )),
  inference(superposition,[],[f1178,f1178])).
fof(f3021,plain,(
  ( ! [X78,X79] : (s(bool,X78) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | s(bool,X78) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) )),
  inference(subsumption_resolution,[],[f2983,f37])).
fof(f2983,plain,(
  ( ! [X78,X79] : (~p(s(bool,'T_0')) | s(bool,X78) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | s(bool,X78) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f1687,f151])).
fof(f1393,plain,(
  ( ! [X127,X128,X126,X129] : (s(X128,f(s(bool,'T_0'))) != s(X128,g(s(bool,'T_0'))) | s(fun(bool,X128),X126) = s(fun(bool,X128),X127) | s(bool,X129) = s(bool,sK6(X126,X127,X128,bool)) | s(bool,'T_0') = s(bool,X129)) )),
  inference(superposition,[],[f52,f54])).
fof(f1687,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f1347,f37])).
fof(f1347,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f51,f54])).
fof(f1178,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f54,f54])).
fof(f214,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,'T_0') = s(bool,sK6(X2,X3,X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f212,f39])).
fof(f151,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))),
  inference(unit_resulting_resolution,[],[f31,f56])).
fof(f146,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f145,f38])).
fof(f145,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f88,f75])).
fof(f31,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2))) & s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2))) & ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f20])).
fof(f20,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))) & ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))) => p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ! [X1,X2] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),X1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))) => p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X6),X7))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X6),X7))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8)))) => p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X7),s('type.modSem.state'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X6),X7))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X8)))))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X6),X7))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X8))) & s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X8))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X8)))) => p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X6),X7),s('type.modSem.state'(X6),X8)))))),
  file('thm.source_to_modProof.s_rel_rules','thm.source_to_modProof.s_rel_rules')).
fof(f88,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f81,f38])).
fof(f81,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f48,f39])).
fof(f56,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f38,f39])).
fof(f54,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f39,f39])).
fof(f52,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.source_to_modProof.s_rel_rules',aHL_EXT)).
fof(f48,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10] : ((p(s(bool,X9)) => p(s(bool,X10))) => ((p(s(bool,X10)) => p(s(bool,X9))) => s(bool,X9) = s(bool,X10)))),
  file('thm.source_to_modProof.s_rel_rules','thm.bool.IMP_ANTISYM_AX')).
fof(f51,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f24])).
fof(f39,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.source_to_modProof.s_rel_rules',aHL_BOOL_CASES)).
fof(f32,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),sK2)))),
  inference(cnf_transformation,[],[f26])).
fof(f33,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK2)))),
  inference(cnf_transformation,[],[f26])).
fof(f34,plain,(
  s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK2)))),
  inference(cnf_transformation,[],[f26])).
fof(f35,plain,(
  s('type.ffi.ffi_state'(sK0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),sK2)))),
  inference(cnf_transformation,[],[f26])).
fof(f36,plain,(
  ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))),
  inference(cnf_transformation,[],[f26])).
fof(f53545,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X91),bool),happ(s(fun('type.semanticPrimitives.state'(X91),fun('type.modSem.state'(X91),bool)),X94),s('type.semanticPrimitives.state'(X91),sK3(X94,X93,X92,X91)))),s('type.modSem.state'(X91),sK4(X94,X93,X92,X91))))) | p(s(bool,happ(s(fun('type.modSem.state'(X91),bool),happ(s(fun('type.semanticPrimitives.state'(X91),fun('type.modSem.state'(X91),bool)),X94),s('type.semanticPrimitives.state'(X91),X92))),s('type.modSem.state'(X91),X93)))) | s(bool,'T_0') = s(bool,X95) | s(bool,X96) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X91),X92),s('type.modSem.state'(X91),X93))) | s(bool,X95) = s(bool,X96)) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f26793,f26989])).
fof(f26989,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl138)),
  inference(unit_resulting_resolution,[],[f37,f20772,f20742])).
fof(f20772,plain,(
  s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl11),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18253,f18252,f17106,f17206,f18017,f18011,f17634,f19329,f17696,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18954,f18898,f18726,f14144,f18727,f18964,f18967,f18971,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f20763,f19377,f20764,f19340,f20771,f17855,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f1942,f2178,f6041,f40,f6031,f6329,f46,f986,f19225,f18256,f17992,f17844,f17554,f14071,f6609,f18779,f18777,f18775,f18681,f18648,f18618,f18612,f18610,f284,f75,f17105,f17897,f17909])).
fof(f19289,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl11),
  inference(subsumption_resolution,[],[f17852,f191])).
fof(f17852,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(equality_factoring,[],[f5666])).
fof(f19329,plain,(
  ( ! [X434,X433] : (s(bool,'T_0') != s(bool,X433) | s(bool,X434) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X433) = s(bool,X434)) ) | $spl11),
  inference(subsumption_resolution,[],[f17680,f191])).
fof(f17680,plain,(
  ( ! [X434,X433] : (s(bool,'T_0') != s(bool,X433) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X434) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X433) = s(bool,X434)) ) | $spl11),
  inference(superposition,[],[f191,f5666])).
fof(f17206,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,X4) = s(bool,X5)) ) | $spl11),
  inference(superposition,[],[f191,f5666])).
fof(f18253,plain,(
  ( ! [X405,X404] : (s(bool,X404) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X404) = s(bool,X405) | s(bool,X405) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl11),
  inference(trivial_inequality_removal,[],[f17088])).
fof(f17088,plain,(
  ( ! [X405,X404] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X404) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X404) = s(bool,X405) | s(bool,X405) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl11),
  inference(superposition,[],[f191,f5666])).
fof(f7986,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(superposition,[],[f191,f75])).
fof(f19810,plain,(
  ( ! [X358,X357,X359] : (s(bool,'T_0') != s(bool,X357) | s(bool,X357) = s(bool,X358) | s(bool,X358) = s(bool,X359) | s(bool,'T_0') = s(bool,X359)) ) | $spl11),
  inference(subsumption_resolution,[],[f4485,f191])).
fof(f4485,plain,(
  ( ! [X358,X357,X359] : (s(bool,'T_0') != s(bool,X357) | s(bool,X357) = s(bool,X358) | s(bool,X358) = s(bool,X359) | s(bool,'T_0') = s(bool,X359) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl11),
  inference(superposition,[],[f191,f1178])).
fof(f19814,plain,(
  ( ! [X356,X354,X355] : (s(bool,'T_0') != s(bool,X354) | s(bool,X354) = s(bool,X355) | s(bool,X355) = s(bool,X356) | s(bool,'T_0') = s(bool,X356)) ) | $spl11),
  inference(subsumption_resolution,[],[f4167,f191])).
fof(f4167,plain,(
  ( ! [X356,X354,X355] : (s(bool,'T_0') != s(bool,X354) | s(bool,X354) = s(bool,X355) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X355) = s(bool,X356) | s(bool,'T_0') = s(bool,X356)) ) | $spl11),
  inference(superposition,[],[f191,f1178])).
fof(f19817,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(subsumption_resolution,[],[f204,f191])).
fof(f204,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl11),
  inference(superposition,[],[f191,f39])).
fof(f202,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(superposition,[],[f191,f75])).
fof(f26793,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X91),bool),happ(s(fun('type.semanticPrimitives.state'(X91),fun('type.modSem.state'(X91),bool)),X94),s('type.semanticPrimitives.state'(X91),sK3(X94,X93,X92,X91)))),s('type.modSem.state'(X91),sK4(X94,X93,X92,X91))))) | p(s(bool,happ(s(fun('type.modSem.state'(X91),bool),happ(s(fun('type.semanticPrimitives.state'(X91),fun('type.modSem.state'(X91),bool)),X94),s('type.semanticPrimitives.state'(X91),X92))),s('type.modSem.state'(X91),X93)))) | s(bool,'T_0') = s(bool,X95) | s(bool,X96) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X91),X92),s('type.modSem.state'(X91),X93))) | s(bool,X95) = s(bool,X96)) )),
  inference(superposition,[],[f45,f5666])).
fof(f53805,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f50982,f26989])).
fof(f50982,plain,(
  ( ! [X0] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f50630,f56])).
fof(f50630,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1942,f12459])).
fof(f53996,plain,(
  $false | ($spl11 | $spl138)),
  inference(subsumption_resolution,[],[f53995,f37])).
fof(f53995,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f53218,f53806])).
fof(f53218,plain,(
  ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | $spl138),
  inference(global_subsumption,[],[f23025,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f40,f6031,f46,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750])).
fof(f23025,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'F_0') = s(bool,X15) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) ) | $spl138),
  inference(superposition,[],[f20742,f146])).
fof(f53973,plain,(
  $false | ($spl11 | $spl138)),
  inference(subsumption_resolution,[],[f53857,f37])).
fof(f53857,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl138)),
  inference(backward_demodulation,[],[f53806,f53546])).
fof(f53969,plain,(
  $false | ($spl11 | $spl16 | $spl138)),
  inference(subsumption_resolution,[],[f53848,f53806])).
fof(f53848,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl11 | $spl16 | $spl138)),
  inference(backward_demodulation,[],[f53806,f53466])).
fof(f53466,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | ($spl11 | $spl16)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f468,f480,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1393,f2003,f1968,f2260,f2330,f2447,f2362,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f6029,f4080,f5082,f5074,f5072,f5070,f5066,f5062,f5060,f5058,f5046,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18253,f18252,f17206,f18017,f18011,f17634,f19329,f17696,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f20772,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f220,f4082,f53462,f4400,f53465,f4620])).
fof(f220,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl16),
  inference(cnf_transformation,[],[f220_D])).
fof(f220_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f5046,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X1))))))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl11 | $spl16)),
  inference(condensation,[],[f5045])).
fof(f5045,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X143))))))) | s(bool,'T_0') = s(bool,X142) | s(bool,X143) = s(bool,X144) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,X145)) ) | ($spl11 | $spl16)),
  inference(duplicate_literal_removal,[],[f4115])).
fof(f4115,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X143))))))) | s(bool,'T_0') = s(bool,X142) | s(bool,X143) = s(bool,X144) | s(bool,'T_0') = s(bool,X142) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,X145)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f2003,f1178])).
fof(f5058,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s(bool,f(s(bool,f(s(bool,X1)))))))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5057])).
fof(f5057,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,X121)))))))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f4110])).
fof(f4110,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,X121)))))))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,X122) | s(bool,'T_0') = s(bool,X120) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) ) | $spl16),
  inference(superposition,[],[f1084,f1178])).
fof(f5060,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s(bool,f(s(bool,X1)))))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5059])).
fof(f5059,plain,(
  ( ! [X118,X116,X119,X117] : (~p(s(bool,f(s(bool,f(s(bool,X117)))))) | s(bool,'T_0') = s(bool,X116) | s(bool,X117) = s(bool,X118) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f4109])).
fof(f4109,plain,(
  ( ! [X118,X116,X119,X117] : (~p(s(bool,f(s(bool,f(s(bool,X117)))))) | s(bool,'T_0') = s(bool,X116) | s(bool,X117) = s(bool,X118) | s(bool,'T_0') = s(bool,X116) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119)) ) | $spl16),
  inference(superposition,[],[f1022,f1178])).
fof(f5062,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s(bool,X1)))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5061])).
fof(f5061,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,f(s(bool,X113)))) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,X114) | s(bool,X114) = s(bool,X115) | s(bool,'T_0') = s(bool,X115)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f4108])).
fof(f4108,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,f(s(bool,X113)))) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,X114) | s(bool,'T_0') = s(bool,X112) | s(bool,X114) = s(bool,X115) | s(bool,'T_0') = s(bool,X115)) ) | $spl16),
  inference(superposition,[],[f968,f1178])).
fof(f5066,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,X1))) = s(bool,f(s(bool,f(s(bool,X1))))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5065])).
fof(f5065,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,f(s(bool,X105))) = s(bool,f(s(bool,f(s(bool,X105))))) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,X106) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f4106])).
fof(f4106,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,f(s(bool,X105))) = s(bool,f(s(bool,f(s(bool,X105))))) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X104) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) ) | $spl16),
  inference(superposition,[],[f923,f1178])).
fof(f5070,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X1))))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl11 | $spl16)),
  inference(condensation,[],[f5069])).
fof(f5069,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X97))))) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,X98) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) ) | ($spl11 | $spl16)),
  inference(duplicate_literal_removal,[],[f4104])).
fof(f4104,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X97))))) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,X98) | s(bool,'T_0') = s(bool,X96) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f917,f1178])).
fof(f5072,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl11 | $spl16)),
  inference(condensation,[],[f5071])).
fof(f5071,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'T_0') != s(bool,f(s(bool,X93))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,X94) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) ) | ($spl11 | $spl16)),
  inference(duplicate_literal_removal,[],[f4103])).
fof(f4103,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'T_0') != s(bool,f(s(bool,X93))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X92) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f648,f1178])).
fof(f5074,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl16),
  inference(condensation,[],[f5073])).
fof(f5073,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X89) = s(bool,f(s(bool,X88))) | s(bool,'T_0') = s(bool,X89) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X90) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f4102])).
fof(f4102,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X89) = s(bool,f(s(bool,X88))) | s(bool,'T_0') = s(bool,X89) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X90) | s(bool,'T_0') = s(bool,X87) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) ) | $spl16),
  inference(superposition,[],[f546,f1178])).
fof(f5082,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5081])).
fof(f5081,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,X61) = s(bool,f(s(bool,X61))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,X62) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f4096])).
fof(f4096,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,X61) = s(bool,f(s(bool,X61))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) ) | $spl16),
  inference(superposition,[],[f468,f1178])).
fof(f5662,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5661])).
fof(f5661,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(bool,X34) = s(bool,f(s(bool,X33))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X32) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X33)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f3595])).
fof(f3595,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(bool,X34) = s(bool,f(s(bool,X33))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X32) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X33)) ) | $spl16),
  inference(superposition,[],[f1178,f546])).
fof(f5664,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl16),
  inference(condensation,[],[f5663])).
fof(f5663,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) = s(bool,f(s(bool,'F_0'))) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X28) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f3594])).
fof(f3594,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) = s(bool,f(s(bool,'F_0'))) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X28) | s(bool,X30) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X28)) ) | $spl16),
  inference(superposition,[],[f1178,f480])).
fof(f3053,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X29),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X29))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31)))) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f2003,f53])).
fof(f3112,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,f(s(bool,X0)))))))))) ) | ($spl11 | $spl16)),
  inference(condensation,[],[f3111])).
fof(f3111,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl11 | $spl16)),
  inference(duplicate_literal_removal,[],[f3033])).
fof(f3033,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f2003,f546])).
fof(f2362,plain,(
  ( ! [X28,X29,X27] : (s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X27),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29))))) = s(bool,f(s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X27),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X27))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29)))) ) | $spl16),
  inference(superposition,[],[f923,f53])).
fof(f2447,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,f(s(bool,X0))))) = s(bool,f(s(bool,f(s(bool,f(s(bool,X0)))))))) ) | $spl16),
  inference(condensation,[],[f2446])).
fof(f2446,plain,(
  ( ! [X12,X11] : (s(bool,f(s(bool,f(s(bool,X12))))) = s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f2345])).
fof(f2345,plain,(
  ( ! [X12,X11] : (s(bool,f(s(bool,f(s(bool,X12))))) = s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl16),
  inference(superposition,[],[f923,f546])).
fof(f2330,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(bool,f(s(bool,f(s(bool,X7))))))) | s(bool,'T_0') = s(bool,X8)) ) | $spl16),
  inference(subsumption_resolution,[],[f2246,f37])).
fof(f2246,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(bool,f(s(bool,f(s(bool,X7))))))) | s(bool,'T_0') = s(bool,X8)) ) | $spl16),
  inference(superposition,[],[f1084,f54])).
fof(f2260,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s(bool,f(s(bool,f(s(bool,f(s(bool,X0))))))))))) ) | $spl16),
  inference(condensation,[],[f2259])).
fof(f2259,plain,(
  ( ! [X12,X11] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,f(s(bool,X12)))))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f2195])).
fof(f2195,plain,(
  ( ! [X12,X11] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,f(s(bool,X12)))))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl16),
  inference(superposition,[],[f1084,f546])).
fof(f1968,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X25),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27)))) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f917,f53])).
fof(f2003,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X0))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl16)),
  inference(condensation,[],[f2002])).
fof(f2002,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl11 | $spl16)),
  inference(duplicate_literal_removal,[],[f1953])).
fof(f1953,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f917,f546])).
fof(f1084,plain,(
  ( ! [X0] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,X0)))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(condensation,[],[f1083])).
fof(f1083,plain,(
  ( ! [X0,X1] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,X1)))))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f1045])).
fof(f1045,plain,(
  ( ! [X0,X1] : (~p(s(bool,f(s(bool,f(s(bool,f(s(bool,X1)))))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f1022,f546])).
fof(f1022,plain,(
  ( ! [X0] : (~p(s(bool,f(s(bool,f(s(bool,X0)))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(condensation,[],[f1021])).
fof(f1021,plain,(
  ( ! [X0,X1] : (~p(s(bool,f(s(bool,f(s(bool,X1)))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f990])).
fof(f990,plain,(
  ( ! [X0,X1] : (~p(s(bool,f(s(bool,f(s(bool,X1)))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f968,f546])).
fof(f887,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,f(s(bool,X116))) != s(bool,f(s(X113,sK6(X114,X115,bool,X113)))) | s(fun(X113,bool),X114) = s(fun(X113,bool),X115) | s(bool,'T_0') = s(bool,g(s(X113,sK6(X114,X115,bool,X113)))) | s(bool,'T_0') = s(bool,X116)) ) | $spl16),
  inference(superposition,[],[f52,f546])).
fof(f886,plain,(
  ( ! [X111,X109,X112,X110] : (s(X111,f(s(bool,f(s(bool,X112))))) != s(X111,g(s(bool,f(s(bool,X112))))) | s(fun(bool,X111),X109) = s(fun(bool,X111),X110) | s(bool,'T_0') = s(bool,sK6(X109,X110,X111,bool)) | s(bool,'T_0') = s(bool,X112)) ) | $spl16),
  inference(superposition,[],[f52,f546])).
fof(f917,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl16)),
  inference(condensation,[],[f916])).
fof(f916,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X35))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X35)) ) | ($spl11 | $spl16)),
  inference(duplicate_literal_removal,[],[f866])).
fof(f866,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X35))))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X35)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f648,f546])).
fof(f923,plain,(
  ( ! [X0] : (s(bool,f(s(bool,X0))) = s(bool,f(s(bool,f(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(condensation,[],[f922])).
fof(f922,plain,(
  ( ! [X23,X22] : (s(bool,f(s(bool,X23))) = s(bool,f(s(bool,f(s(bool,X23))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X23)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f861])).
fof(f861,plain,(
  ( ! [X23,X22] : (s(bool,f(s(bool,X23))) = s(bool,f(s(bool,f(s(bool,X23))))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X23)) ) | $spl16),
  inference(superposition,[],[f468,f546])).
fof(f968,plain,(
  ( ! [X0] : (~p(s(bool,f(s(bool,X0)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(condensation,[],[f967])).
fof(f967,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(condensation,[],[f966])).
fof(f966,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,f(s(bool,X9)))) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl16),
  inference(subsumption_resolution,[],[f855,f88])).
fof(f855,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,f(s(bool,X9)))) | ~p(s(bool,X10)) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl16),
  inference(superposition,[],[f51,f546])).
fof(f842,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,X30) = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X27),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29))))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X27))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29)))) ) | $spl16),
  inference(superposition,[],[f546,f53])).
fof(f944,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,f(s(bool,f(s(bool,X1))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(condensation,[],[f943])).
fof(f943,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,f(s(bool,f(s(bool,X1))))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(duplicate_literal_removal,[],[f828])).
fof(f828,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,f(s(bool,f(s(bool,X1))))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f546,f546])).
fof(f827,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,f(s(bool,X30))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X27),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X27))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X28))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X29))) | s(bool,'T_0') = s(bool,X30)) ) | $spl16),
  inference(superposition,[],[f546,f53])).
fof(f772,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X3))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2)))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X2,X3,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0))))))) ) | $spl16),
  inference(subsumption_resolution,[],[f771,f38])).
fof(f771,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X3))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2)))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X2,X3,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0))))))) ) | $spl16),
  inference(forward_demodulation,[],[f768,f220])).
fof(f768,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,f(s(bool,'F_0')))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X3))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X3),s('type.modSem.state'(X0),X2)))) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X2,X3,X0)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),sK4(X1,X2,X3,X0))))))) ) | $spl16),
  inference(superposition,[],[f40,f480])).
fof(f727,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X10),s('type.semanticPrimitives.store_v'('type.modSem.v'),X11))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X9))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X10))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X11)))) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f648,f53])).
fof(f648,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl16)),
  inference(superposition,[],[f622,f39])).
fof(f635,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) ) | $spl16),
  inference(subsumption_resolution,[],[f634,f38])).
fof(f634,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) ) | $spl16),
  inference(forward_demodulation,[],[f631,f220])).
fof(f631,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,f(s(bool,'F_0')))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X0),sK3(X1,X3,X2,X0)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),sK4(X1,X3,X2,X0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X2),s('type.modSem.state'(X0),X3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X1),s('type.semanticPrimitives.state'(X0),X2))),s('type.modSem.state'(X0),X3)))) ) | $spl16),
  inference(superposition,[],[f42,f480])).
fof(f622,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | ($spl11 | $spl16)),
  inference(subsumption_resolution,[],[f579,f191])).
fof(f579,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl16)),
  inference(superposition,[],[f191,f480])).
fof(f546,plain,(
  ( ! [X10,X9] : (s(bool,X10) = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl16),
  inference(subsumption_resolution,[],[f537,f56])).
fof(f537,plain,(
  ( ! [X10,X9] : (p(s(bool,X9)) | s(bool,X10) = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl16),
  inference(superposition,[],[f88,f468])).
fof(f544,plain,(
  ( ! [X2,X1] : (p(s(bool,X2)) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(subsumption_resolution,[],[f532,f56])).
fof(f532,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f48,f468])).
fof(f528,plain,(
  ( ! [X6,X8,X7] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.store_v'('type.modSem.v'),X8))) = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.store_v'('type.modSem.v'),X8))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X6))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X7))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X8)))) ) | $spl16),
  inference(superposition,[],[f468,f53])).
fof(f480,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl16),
  inference(subsumption_resolution,[],[f475,f38])).
fof(f475,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl16),
  inference(superposition,[],[f88,f220])).
fof(f468,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(superposition,[],[f220,f39])).
fof(f86,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f50857,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,X72)) ) | $spl222),
  inference(cnf_transformation,[],[f50857_D])).
fof(f50857_D,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,X72)) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f53789,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') = s(bool,X89) | s(bool,X88) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89)) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f50765,f26989])).
fof(f50765,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X87) | s(bool,X89) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X88) = s(bool,X89)) )),
  inference(duplicate_literal_removal,[],[f50528])).
fof(f50528,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X87) | s(bool,X89) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X88) = s(bool,X89) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f5666,f12459])).
fof(f53779,plain,(
  ( ! [X64,X62,X63] : (s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f50802,f26989])).
fof(f50802,plain,(
  ( ! [X64,X62,X63] : (s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f50478])).
fof(f50478,plain,(
  ( ! [X64,X62,X63] : (s(bool,'T_0') = s(bool,X62) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f12459,f5666])).
fof(f53776,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,X72)) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f50821,f26989])).
fof(f50821,plain,(
  ( ! [X70,X72,X71] : (s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,X72)) )),
  inference(duplicate_literal_removal,[],[f50427])).
fof(f50427,plain,(
  ( ! [X70,X72,X71] : (s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,X72)) )),
  inference(superposition,[],[f12459,f5666])).
fof(f19251,plain,(
  ( ! [X441,X444,X440,X442,X439] : (s(bool,'F_0') = s(bool,X444) | s(bool,X444) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X439),sK3(X440,X441,X442,X439)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))) | p(s(bool,happ(s(fun('type.modSem.state'(X439),bool),happ(s(fun('type.semanticPrimitives.state'(X439),fun('type.modSem.state'(X439),bool)),X440),s('type.semanticPrimitives.state'(X439),X442))),s('type.modSem.state'(X439),X441)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X439),X442),s('type.modSem.state'(X439),X441))))) ) | $spl108),
  inference(cnf_transformation,[],[f19251_D])).
fof(f19251_D,plain,(
  ( ! [X441,X444,X440,X442,X439] : (s(bool,'F_0') = s(bool,X444) | s(bool,X444) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X439),sK3(X440,X441,X442,X439)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))) | p(s(bool,happ(s(fun('type.modSem.state'(X439),bool),happ(s(fun('type.semanticPrimitives.state'(X439),fun('type.modSem.state'(X439),bool)),X440),s('type.semanticPrimitives.state'(X439),X442))),s('type.modSem.state'(X439),X441)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X439),X442),s('type.modSem.state'(X439),X441))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f53718,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f37613,f26989])).
fof(f37613,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) )),
  inference(subsumption_resolution,[],[f37608,f56])).
fof(f37608,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) )),
  inference(superposition,[],[f40,f5666])).
fof(f20757,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3)))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))))) ) | $spl142),
  inference(cnf_transformation,[],[f20757_D])).
fof(f20757_D,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3)))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1)))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f53714,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f37106,f26989])).
fof(f37106,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f37105])).
fof(f37105,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),sK3(X107,X105,X104,X103)))),s('type.modSem.state'(X103),sK4(X107,X105,X104,X103))))) | p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),X104))),s('type.modSem.state'(X103),X105)))) | s(bool,'T_0') = s(bool,X108) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X103),X104),s('type.modSem.state'(X103),X105))) | s(bool,X106) = s(bool,X108)) )),
  inference(subsumption_resolution,[],[f37089,f88])).
fof(f37089,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,X106)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),sK3(X107,X105,X104,X103)))),s('type.modSem.state'(X103),sK4(X107,X105,X104,X103))))) | p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),X104))),s('type.modSem.state'(X103),X105)))) | s(bool,'T_0') = s(bool,X108) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X103),X104),s('type.modSem.state'(X103),X105))) | s(bool,X106) = s(bool,X108)) )),
  inference(superposition,[],[f45,f5666])).
fof(f19257,plain,(
  ( ! [X472,X474,X469,X471,X470] : (s(bool,'F_0') = s(bool,X474) | s(bool,X474) = s(bool,happ(s(fun('type.modSem.state'(X469),bool),happ(s(fun('type.semanticPrimitives.state'(X469),fun('type.modSem.state'(X469),bool)),X470),s('type.semanticPrimitives.state'(X469),X471))),s('type.modSem.state'(X469),X472))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X469),sK3(X470,X472,X471,X469)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X469),sK4(X470,X472,X471,X469)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X469),X471),s('type.modSem.state'(X469),X472))))) ) | $spl110),
  inference(cnf_transformation,[],[f19257_D])).
fof(f19257_D,plain,(
  ( ! [X472,X474,X469,X471,X470] : (s(bool,'F_0') = s(bool,X474) | s(bool,X474) = s(bool,happ(s(fun('type.modSem.state'(X469),bool),happ(s(fun('type.semanticPrimitives.state'(X469),fun('type.modSem.state'(X469),bool)),X470),s('type.semanticPrimitives.state'(X469),X471))),s('type.modSem.state'(X469),X472))) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X469),sK3(X470,X472,X471,X469)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X469),sK4(X470,X472,X471,X469)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X469),X471),s('type.modSem.state'(X469),X472))))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f53710,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f36556,f26989])).
fof(f36556,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f36537,f56])).
fof(f36537,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f42,f5666])).
fof(f19260,plain,(
  ( ! [X476,X478,X480,X475,X477] : (s(bool,'F_0') = s(bool,X480) | s(bool,X480) = s(bool,happ(s(fun('type.modSem.state'(X475),bool),happ(s(fun('type.semanticPrimitives.state'(X475),fun('type.modSem.state'(X475),bool)),X476),s('type.semanticPrimitives.state'(X475),X477))),s('type.modSem.state'(X475),X478))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X475),sK3(X476,X478,X477,X475)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X475),sK4(X476,X478,X477,X475)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X475),X477),s('type.modSem.state'(X475),X478))))) ) | $spl112),
  inference(cnf_transformation,[],[f19260_D])).
fof(f19260_D,plain,(
  ( ! [X476,X478,X480,X475,X477] : (s(bool,'F_0') = s(bool,X480) | s(bool,X480) = s(bool,happ(s(fun('type.modSem.state'(X475),bool),happ(s(fun('type.semanticPrimitives.state'(X475),fun('type.modSem.state'(X475),bool)),X476),s('type.semanticPrimitives.state'(X475),X477))),s('type.modSem.state'(X475),X478))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X475),sK3(X476,X478,X477,X475)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X475),sK4(X476,X478,X477,X475)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X475),X477),s('type.modSem.state'(X475),X478))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f53708,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f36222,f26989])).
fof(f36222,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f36203,f56])).
fof(f36203,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f41,f5666])).
fof(f19263,plain,(
  ( ! [X484,X486,X482,X481,X483] : (s(bool,'F_0') = s(bool,X486) | s(bool,X486) = s(bool,happ(s(fun('type.modSem.state'(X481),bool),happ(s(fun('type.semanticPrimitives.state'(X481),fun('type.modSem.state'(X481),bool)),X482),s('type.semanticPrimitives.state'(X481),X483))),s('type.modSem.state'(X481),X484))) | s('type.ffi.ffi_state'(X481),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X481),sK3(X482,X484,X483,X481)))) = s('type.ffi.ffi_state'(X481),'const.modSem.state_ffi_1'(s('type.modSem.state'(X481),sK4(X482,X484,X483,X481)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X481),X483),s('type.modSem.state'(X481),X484))))) ) | $spl114),
  inference(cnf_transformation,[],[f19263_D])).
fof(f19263_D,plain,(
  ( ! [X484,X486,X482,X481,X483] : (s(bool,'F_0') = s(bool,X486) | s(bool,X486) = s(bool,happ(s(fun('type.modSem.state'(X481),bool),happ(s(fun('type.semanticPrimitives.state'(X481),fun('type.modSem.state'(X481),bool)),X482),s('type.semanticPrimitives.state'(X481),X483))),s('type.modSem.state'(X481),X484))) | s('type.ffi.ffi_state'(X481),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X481),sK3(X482,X484,X483,X481)))) = s('type.ffi.ffi_state'(X481),'const.modSem.state_ffi_1'(s('type.modSem.state'(X481),sK4(X482,X484,X483,X481)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X481),X483),s('type.modSem.state'(X481),X484))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f53683,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f35760,f26989])).
fof(f35760,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f35742,f56])).
fof(f35742,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f44,f5666])).
fof(f19266,plain,(
  ( ! [X492,X488,X490,X487,X489] : (s(bool,'F_0') = s(bool,X492) | s(bool,X492) = s(bool,happ(s(fun('type.modSem.state'(X487),bool),happ(s(fun('type.semanticPrimitives.state'(X487),fun('type.modSem.state'(X487),bool)),X488),s('type.semanticPrimitives.state'(X487),X489))),s('type.modSem.state'(X487),X490))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X487),sK3(X488,X490,X489,X487)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X487),sK4(X488,X490,X489,X487)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X487),X489),s('type.modSem.state'(X487),X490))))) ) | $spl116),
  inference(cnf_transformation,[],[f19266_D])).
fof(f19266_D,plain,(
  ( ! [X492,X488,X490,X487,X489] : (s(bool,'F_0') = s(bool,X492) | s(bool,X492) = s(bool,happ(s(fun('type.modSem.state'(X487),bool),happ(s(fun('type.semanticPrimitives.state'(X487),fun('type.modSem.state'(X487),bool)),X488),s('type.semanticPrimitives.state'(X487),X489))),s('type.modSem.state'(X487),X490))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X487),sK3(X488,X490,X489,X487)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X487),sK4(X488,X490,X489,X487)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X487),X489),s('type.modSem.state'(X487),X490))))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f53673,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f35434,f26989])).
fof(f35434,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f35416,f56])).
fof(f35416,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f43,f5666])).
fof(f20758,plain,(
  ( ! [X2,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | $spl144),
  inference(cnf_transformation,[],[f20758_D])).
fof(f20758_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f53656,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f34963,f26989])).
fof(f34963,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f34962])).
fof(f34962,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X80),X82),s('type.modSem.state'(X80),X81)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X80),bool),happ(s(fun('type.semanticPrimitives.state'(X80),fun('type.modSem.state'(X80),bool)),sK5(X81,X82,X80)),s('type.semanticPrimitives.state'(X80),X82))),s('type.modSem.state'(X80),X81))) | s(bool,X83) = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f34948,f88])).
fof(f34948,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,X83)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X80),X82),s('type.modSem.state'(X80),X81)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X80),bool),happ(s(fun('type.semanticPrimitives.state'(X80),fun('type.modSem.state'(X80),bool)),sK5(X81,X82,X80)),s('type.semanticPrimitives.state'(X80),X82))),s('type.modSem.state'(X80),X81))) | s(bool,X83) = s(bool,X84)) )),
  inference(superposition,[],[f47,f5666])).
fof(f53633,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f32242,f26989])).
fof(f32242,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f32221,f56])).
fof(f32221,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f42,f5666])).
fof(f53631,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f31742,f26989])).
fof(f31742,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f31722,f56])).
fof(f31722,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f41,f5666])).
fof(f53629,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f31499,f26989])).
fof(f31499,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f31479,f56])).
fof(f31479,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f44,f5666])).
fof(f53627,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f31312,f26989])).
fof(f31312,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f31292,f56])).
fof(f31292,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f43,f5666])).
fof(f53580,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f30475,f26989])).
fof(f30475,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f30474])).
fof(f30474,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X80),X82),s('type.modSem.state'(X80),X81)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X80),bool),happ(s(fun('type.semanticPrimitives.state'(X80),fun('type.modSem.state'(X80),bool)),sK5(X81,X82,X80)),s('type.semanticPrimitives.state'(X80),X82))),s('type.modSem.state'(X80),X81))) | s(bool,X83) = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f30458,f88])).
fof(f30458,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,X83)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X80),X82),s('type.modSem.state'(X80),X81)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X80),bool),happ(s(fun('type.semanticPrimitives.state'(X80),fun('type.modSem.state'(X80),bool)),sK5(X81,X82,X80)),s('type.semanticPrimitives.state'(X80),X82))),s('type.modSem.state'(X80),X81))) | s(bool,X83) = s(bool,X84)) )),
  inference(superposition,[],[f47,f5666])).
fof(f53572,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f24550,f26989])).
fof(f24550,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f24549])).
fof(f24549,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X80),X82),s('type.modSem.state'(X80),X81)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X80),bool),happ(s(fun('type.semanticPrimitives.state'(X80),fun('type.modSem.state'(X80),bool)),sK5(X81,X82,X80)),s('type.semanticPrimitives.state'(X80),X82))),s('type.modSem.state'(X80),X81))) | s(bool,X83) = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f24535,f88])).
fof(f24535,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,X83)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X80),X82),s('type.modSem.state'(X80),X81)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X80),bool),happ(s(fun('type.semanticPrimitives.state'(X80),fun('type.modSem.state'(X80),bool)),sK5(X81,X82,X80)),s('type.semanticPrimitives.state'(X80),X82))),s('type.modSem.state'(X80),X81))) | s(bool,X83) = s(bool,X84)) )),
  inference(superposition,[],[f47,f5666])).
fof(f53555,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f24980,f26989])).
fof(f24980,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f24962,f56])).
fof(f24962,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f43,f5666])).
fof(f53553,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f25407,f26989])).
fof(f25407,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f25388,f56])).
fof(f25388,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f44,f5666])).
fof(f53551,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f25731,f26989])).
fof(f25731,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f25712,f56])).
fof(f25712,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f41,f5666])).
fof(f53548,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f26321,f26989])).
fof(f26321,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(subsumption_resolution,[],[f26300,f56])).
fof(f26300,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) )),
  inference(superposition,[],[f42,f5666])).
fof(f53543,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))))) ) | ($spl11 | $spl138)),
  inference(forward_demodulation,[],[f26814,f26989])).
fof(f26814,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f26813])).
fof(f26813,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),sK3(X107,X105,X104,X103)))),s('type.modSem.state'(X103),sK4(X107,X105,X104,X103))))) | p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),X104))),s('type.modSem.state'(X103),X105)))) | s(bool,'T_0') = s(bool,X108) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X103),X104),s('type.modSem.state'(X103),X105))) | s(bool,X106) = s(bool,X108)) )),
  inference(subsumption_resolution,[],[f26795,f88])).
fof(f26795,plain,(
  ( ! [X103,X107,X105,X108,X106,X104] : (~p(s(bool,X106)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),sK3(X107,X105,X104,X103)))),s('type.modSem.state'(X103),sK4(X107,X105,X104,X103))))) | p(s(bool,happ(s(fun('type.modSem.state'(X103),bool),happ(s(fun('type.semanticPrimitives.state'(X103),fun('type.modSem.state'(X103),bool)),X107),s('type.semanticPrimitives.state'(X103),X104))),s('type.modSem.state'(X103),X105)))) | s(bool,'T_0') = s(bool,X108) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X103),X104),s('type.modSem.state'(X103),X105))) | s(bool,X106) = s(bool,X108)) )),
  inference(superposition,[],[f45,f5666])).
fof(f53536,plain,(
  ( ! [X103,X107,X105,X102,X104] : (p(s(bool,happ(s(fun('type.modSem.state'(X102),bool),happ(s(fun('type.semanticPrimitives.state'(X102),fun('type.modSem.state'(X102),bool)),X103),s('type.semanticPrimitives.state'(X102),X105))),s('type.modSem.state'(X102),X104)))) | s(bool,X107) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X102),sK4(X103,X104,X105,X102)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X102),sK3(X103,X104,X105,X102)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X102),sK4(X103,X104,X105,X102)))))) | s(bool,'T_0') = s(bool,X107) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X102),X105),s('type.modSem.state'(X102),X104))))) ) | $spl296),
  inference(cnf_transformation,[],[f53536_D])).
fof(f53536_D,plain,(
  ( ! [X103,X107,X105,X102,X104] : (p(s(bool,happ(s(fun('type.modSem.state'(X102),bool),happ(s(fun('type.semanticPrimitives.state'(X102),fun('type.modSem.state'(X102),bool)),X103),s('type.semanticPrimitives.state'(X102),X105))),s('type.modSem.state'(X102),X104)))) | s(bool,X107) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X102),sK4(X103,X104,X105,X102)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X102),sK3(X103,X104,X105,X102)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X102),sK4(X103,X104,X105,X102)))))) | s(bool,'T_0') = s(bool,X107) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X102),X105),s('type.modSem.state'(X102),X104))))) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f53537,plain,(
  ( ! [X106] : (p(s(bool,X106)) | s(bool,X106) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl298),
  inference(cnf_transformation,[],[f53537_D])).
fof(f53537_D,plain,(
  ( ! [X106] : (p(s(bool,X106)) | s(bool,X106) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f27084,plain,(
  ( ! [X103,X107,X105,X102,X106,X104] : (p(s(bool,X106)) | p(s(bool,happ(s(fun('type.modSem.state'(X102),bool),happ(s(fun('type.semanticPrimitives.state'(X102),fun('type.modSem.state'(X102),bool)),X103),s('type.semanticPrimitives.state'(X102),X105))),s('type.modSem.state'(X102),X104)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X102),X105),s('type.modSem.state'(X102),X104)))) | s(bool,'T_0') = s(bool,X107) | s(bool,X106) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X107) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X102),sK4(X103,X104,X105,X102)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X102),sK3(X103,X104,X105,X102)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X102),sK4(X103,X104,X105,X102))))))) )),
  inference(superposition,[],[f40,f5666])).
fof(f53535,plain,(
  ( ! [X116,X114,X119,X117,X115] : (p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116))))) ) | $spl294),
  inference(cnf_transformation,[],[f53535_D])).
fof(f53535_D,plain,(
  ( ! [X116,X114,X119,X117,X115] : (p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116))))) ) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f27092,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) )),
  inference(subsumption_resolution,[],[f27086,f56])).
fof(f27086,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (p(s(bool,X118)) | p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) )),
  inference(superposition,[],[f40,f5666])).
fof(f10154,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl72),
  inference(cnf_transformation,[],[f10154_D])).
fof(f10154_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f53534,plain,(
  s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | $spl293),
  inference(cnf_transformation,[],[f53534_D])).
fof(f53534_D,plain,(
  s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) <=> ~$spl293),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl293])])).
fof(f53532,plain,(
  ( ! [X104] : (s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | s(bool,X104) = s(bool,g(s(bool,'F_0')))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f50538,f53483])).
fof(f53483,plain,(
  ( ! [X365] : (s(bool,X365) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') != s(bool,X365)) ) | ($spl68 | $spl76)),
  inference(global_subsumption,[],[f17076,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f10102,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f4082,f4400,f4620,f16505])).
fof(f17076,plain,(
  ( ! [X366,X365,X367] : (s(bool,'T_0') != s(bool,X365) | s(bool,X365) = s(bool,g(s(bool,'F_0'))) | s(bool,X366) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X366) = s(bool,X367) | s(bool,X367) = s(bool,g(s(bool,X365)))) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f50538,plain,(
  ( ! [X104] : (s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | s(bool,X104) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X104)) ) | $spl76),
  inference(superposition,[],[f10519,f12459])).
fof(f20651,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X124))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X125))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X126)))) ) | $spl122),
  inference(cnf_transformation,[],[f20651_D])).
fof(f20651_D,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X124))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X125))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X126)))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f53529,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X131) != s(bool,f(s(X132,sK6(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,g(s(X132,sK6(X133,X134,bool,X132)))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134)) ) | $spl290),
  inference(cnf_transformation,[],[f53529_D])).
fof(f53529_D,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X131) != s(bool,f(s(X132,sK6(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,g(s(X132,sK6(X133,X134,bool,X132)))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134)) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f53528,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (s(bool,X131) != s(bool,f(s(X132,sK6(X133,X134,bool,X132)))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X128))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X129))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X130))) | s(bool,'T_0') = s(bool,g(s(X132,sK6(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,X131)) ) | ($spl3 | $spl33 | $spl38)),
  inference(subsumption_resolution,[],[f43324,f53498])).
fof(f53498,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) ) | ($spl3 | $spl33 | $spl38)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6049,f6050,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7578,f7635,f7767,f7769,f8528,f8449,f8451,f12459,f14182,f16501,f16503,f18580,f18559,f18558,f18556,f18609,f18395,f18357,f18338,f16934,f16940,f17102,f18029,f18020,f19076,f19100,f19101,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f14200,f14030,f15426,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f6309,f17103,f34282,f12178,f34283,f6313,f1272,f38,f1156,f35474,f35475,f35477,f50835,f50969,f29254,f49675,f52003,f17106,f35586,f35517,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f53245,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f4082,f4400,f4620,f16505,f15428,f53495,f19625,f13571,f13380])).
fof(f53245,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7635,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f6309,f17103,f34282,f12178,f34283,f1272,f38,f1156,f50835,f50969,f29254,f49675,f52003,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f40,f6031,f46,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f49662])).
fof(f35517,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl38),
  inference(condensation,[],[f35516])).
fof(f35516,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) != s(bool,f(s(bool,X65))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl38),
  inference(duplicate_literal_removal,[],[f35493])).
fof(f35493,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) != s(bool,f(s(bool,X65))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X67)) ) | $spl38),
  inference(superposition,[],[f6313,f5666])).
fof(f35586,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl38),
  inference(condensation,[],[f35585])).
fof(f35585,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl38),
  inference(condensation,[],[f35584])).
fof(f35584,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') = s(bool,X35) | s(bool,X36) = s(bool,f(s(bool,'T_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X34)) ) | $spl38),
  inference(subsumption_resolution,[],[f35508,f54])).
fof(f35508,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,X36) = s(bool,f(s(bool,'T_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X34)) ) | $spl38),
  inference(superposition,[],[f6313,f1178])).
fof(f52003,plain,(
  ( ! [X90,X91] : (s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,'F_0') != s(bool,f(s(bool,X90)))) ) | $spl33),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7635,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f6309,f17103,f34282,f12178,f34283,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675])).
fof(f35477,plain,(
  ( ! [X14,X15,X16] : (s(bool,X15) != s(bool,f(s(bool,X14))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl38),
  inference(superposition,[],[f6313,f54])).
fof(f35475,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,X4) = s(bool,X6)) ) | $spl38),
  inference(superposition,[],[f6313,f1178])).
fof(f35474,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl38),
  inference(superposition,[],[f6313,f5666])).
fof(f34283,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X46) = s(bool,X47) | s(bool,X46) = s(bool,sK6(X43,X44,bool,bool)) | s(bool,X45) = s(bool,g(s(bool,sK6(X43,X44,bool,bool)))) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X45) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,X48)) ) | $spl33),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7635,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f29254,f28913,f28890,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f212,f38,f6309,f6137,f516,f467,f341,f6663,f284,f213,f17103,f34282,f12178])).
fof(f34282,plain,(
  ( ! [X492,X494,X493,X495,X491] : (s(bool,X495) = s(bool,sK6(X491,X492,bool,bool)) | s(bool,X494) = s(bool,X495) | s(bool,'T_0') = s(bool,X493) | s(bool,X494) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X493) = s(bool,g(s(bool,sK6(X491,X492,bool,bool)))) | s(fun(bool,bool),X491) = s(fun(bool,bool),X492)) ) | $spl33),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7635,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f29254,f28913,f28890,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f212,f38,f6309,f6137,f516,f467,f341,f6663,f284,f213,f17103])).
fof(f18980,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X3) = s(bool,sK6(X4,X5,bool,bool)) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X3)) ) | $spl33),
  inference(forward_demodulation,[],[f18979,f75])).
fof(f18979,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) = s(bool,sK6(X4,X5,bool,bool)) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X3) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl33),
  inference(duplicate_literal_removal,[],[f18978])).
fof(f18978,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) = s(bool,sK6(X4,X5,bool,bool)) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl33),
  inference(condensation,[],[f18977])).
fof(f18977,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(fun(bool,bool),X558) = s(fun(bool,bool),X559) | s(bool,X560) = s(bool,sK6(X558,X559,bool,bool)) | s(bool,'T_0') = s(bool,X560) | s(bool,'T_0') = s(bool,X561) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X557) = s(bool,X561)) ) | $spl33),
  inference(subsumption_resolution,[],[f17410,f7635])).
fof(f7553,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(unit_resulting_resolution,[],[f38,f6309,f88])).
fof(f7551,plain,(
  p(s(bool,f(s(bool,'T_0')))) | $spl33),
  inference(unit_resulting_resolution,[],[f38,f6309,f48])).
fof(f7534,plain,(
  p(s(bool,f(s(bool,'T_0')))) | $spl33),
  inference(unit_resulting_resolution,[],[f38,f6309,f48])).
fof(f7533,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(unit_resulting_resolution,[],[f6309,f39])).
fof(f7621,plain,(
  ( ! [X12] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X12)) ) | $spl33),
  inference(duplicate_literal_removal,[],[f7584])).
fof(f7584,plain,(
  ( ! [X12] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f7620,plain,(
  ( ! [X15] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X15)) ) | $spl33),
  inference(duplicate_literal_removal,[],[f7587])).
fof(f7587,plain,(
  ( ! [X15] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f7615,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(condensation,[],[f7614])).
fof(f7614,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl33),
  inference(duplicate_literal_removal,[],[f7613])).
fof(f7613,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl33),
  inference(condensation,[],[f7590])).
fof(f7590,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f7612,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(condensation,[],[f7611])).
fof(f7611,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl33),
  inference(duplicate_literal_removal,[],[f7610])).
fof(f7610,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl33),
  inference(condensation,[],[f7591])).
fof(f7591,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X25)) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f7609,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(trivial_inequality_removal,[],[f7596])).
fof(f7596,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(superposition,[],[f6309,f39])).
fof(f7597,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f7631,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(condensation,[],[f7630])).
fof(f7630,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(subsumption_resolution,[],[f7598,f39])).
fof(f7598,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f7633,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(condensation,[],[f7632])).
fof(f7632,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl33),
  inference(subsumption_resolution,[],[f7599,f39])).
fof(f7599,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f7600,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X3) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f7639,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(condensation,[],[f7638])).
fof(f7638,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl33),
  inference(duplicate_literal_removal,[],[f7637])).
fof(f7637,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl33),
  inference(condensation,[],[f7636])).
fof(f7636,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl33),
  inference(subsumption_resolution,[],[f7606,f5680])).
fof(f7606,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,X19) | s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f7643,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(condensation,[],[f7642])).
fof(f7642,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(condensation,[],[f7641])).
fof(f7641,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(condensation,[],[f7640])).
fof(f7640,plain,(
  ( ! [X26,X27,X25] : (s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(subsumption_resolution,[],[f7608,f5680])).
fof(f7608,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,X25) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f7580,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f7582,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl33),
  inference(superposition,[],[f6309,f54])).
fof(f19101,plain,(
  ( ! [X288,X290,X287,X289,X286] : (s(X287,f(s(bool,X286))) != s(X287,g(s(bool,X286))) | s(fun(bool,X287),X288) = s(fun(bool,X287),X289) | s(bool,'T_0') = s(bool,sK6(X288,X289,X287,bool)) | s(bool,X290) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X286) = s(bool,X290)) ) | $spl3),
  inference(subsumption_resolution,[],[f17634,f63])).
fof(f19100,plain,(
  ( ! [X285,X284] : (s(bool,'T_0') != s(bool,X284) | s(bool,X285) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X284) = s(bool,X285)) ) | $spl3),
  inference(subsumption_resolution,[],[f17633,f63])).
fof(f17633,plain,(
  ( ! [X285,X284] : (s(bool,'T_0') != s(bool,X284) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X285) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X284) = s(bool,X285)) ) | $spl3),
  inference(superposition,[],[f63,f5666])).
fof(f16940,plain,(
  ( ! [X61,X59,X60] : (s(bool,X59) = s(bool,f(s(bool,X59))) | s(bool,X60) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X60) = s(bool,X61) | s(bool,X59) = s(bool,X61)) ) | ($spl3 | $spl33)),
  inference(superposition,[],[f7578,f5666])).
fof(f18609,plain,(
  ( ! [X184,X183] : (s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X183) = s(bool,X184) | s(bool,X184) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl3),
  inference(subsumption_resolution,[],[f16567,f63])).
fof(f14182,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl3 | $spl33 | $spl38)),
  inference(forward_demodulation,[],[f14061,f7578])).
fof(f14061,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,f(s(bool,'T_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl38),
  inference(condensation,[],[f14060])).
fof(f14060,plain,(
  ( ! [X173,X171,X172,X170] : (s(bool,f(s(bool,'T_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X171))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X172))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X173))) | s(bool,'T_0') = s(bool,X170) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X171),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X172),s('type.semanticPrimitives.store_v'('type.modSem.v'),X173)))) ) | $spl38),
  inference(duplicate_literal_removal,[],[f13934])).
fof(f13934,plain,(
  ( ! [X173,X171,X172,X170] : (s(bool,f(s(bool,'T_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X171))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X172))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X173))) | s(bool,'T_0') = s(bool,X170) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X171),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X172),s('type.semanticPrimitives.store_v'('type.modSem.v'),X173))) | s(bool,'T_0') = s(bool,X170)) ) | $spl38),
  inference(superposition,[],[f6313,f1198])).
fof(f8451,plain,(
  ( ! [X12,X10,X11] : (s(bool,X11) != s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl38),
  inference(superposition,[],[f6313,f54])).
fof(f8449,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X0) = s(bool,X2)) ) | $spl38),
  inference(superposition,[],[f6313,f1178])).
fof(f8528,plain,(
  ( ! [X52,X53,X51] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X51),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X52),s('type.semanticPrimitives.store_v'('type.modSem.v'),X53))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X51))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X52))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X53)))) ) | ($spl3 | $spl33 | $spl38)),
  inference(forward_demodulation,[],[f8448,f7578])).
fof(f8448,plain,(
  ( ! [X52,X53,X51] : (s(bool,f(s(bool,'T_0'))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X51),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X52),s('type.semanticPrimitives.store_v'('type.modSem.v'),X53))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X51))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X52))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X53)))) ) | $spl38),
  inference(superposition,[],[f6313,f53])).
fof(f7769,plain,(
  ( ! [X8,X9] : (s(bool,X8) = s(bool,f(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl3 | $spl33)),
  inference(superposition,[],[f7578,f54])).
fof(f7767,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | ($spl3 | $spl33)),
  inference(superposition,[],[f7578,f1178])).
fof(f7635,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl33),
  inference(condensation,[],[f7634])).
fof(f7634,plain,(
  ( ! [X17,X18,X16] : (s(bool,X17) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl33),
  inference(subsumption_resolution,[],[f7605,f39])).
fof(f7605,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,X16) | s(bool,X17) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f7578,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl33)),
  inference(unit_resulting_resolution,[],[f37,f63,f6309,f1687])).
fof(f6050,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (s(X180,f(s(bool,X179))) != s(X180,g(s(bool,X179))) | s(fun(bool,X180),X181) = s(fun(bool,X180),X182) | s(bool,'T_0') = s(bool,sK6(X181,X182,X180,bool)) | s(bool,X179) = s(bool,X183) | s(bool,X183) = s(bool,X184) | s(bool,'T_0') = s(bool,X184)) ) | $spl3),
  inference(subsumption_resolution,[],[f4123,f63])).
fof(f6049,plain,(
  ( ! [X177,X178,X176] : (s(bool,'T_0') != s(bool,X176) | s(bool,X176) = s(bool,X177) | s(bool,X177) = s(bool,X178) | s(bool,'T_0') = s(bool,X178)) ) | $spl3),
  inference(subsumption_resolution,[],[f4122,f63])).
fof(f4122,plain,(
  ( ! [X177,X178,X176] : (s(bool,'T_0') != s(bool,X176) | s(bool,X176) = s(bool,X177) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X177) = s(bool,X178) | s(bool,'T_0') = s(bool,X178)) ) | $spl3),
  inference(superposition,[],[f63,f1178])).
fof(f43324,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (s(bool,X131) != s(bool,f(s(X132,sK6(X133,X134,bool,X132)))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X128))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X129))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X130))) | s(bool,'T_0') = s(bool,g(s(X132,sK6(X133,X134,bool,X132)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X128),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X129),s('type.semanticPrimitives.store_v'('type.modSem.v'),X130))) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f1272,f1198])).
fof(f53485,plain,(
  ( ! [X47,X48,X49] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X47),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49)))) ) | $spl280),
  inference(cnf_transformation,[],[f53485_D])).
fof(f53485_D,plain,(
  ( ! [X47,X48,X49] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X47),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49)))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f53527,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X194))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X195))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X196))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X194))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X195))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X196))))) | s(bool,X193) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X194),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X195),s('type.semanticPrimitives.store_v'('type.modSem.v'),X196)))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f43234,f53483])).
fof(f43234,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X194))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X195))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X196))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X194))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X195))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X196))))) | s(bool,X193) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X194),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X195),s('type.semanticPrimitives.store_v'('type.modSem.v'),X196))) | s(bool,'T_0') = s(bool,X193)) ) | $spl76),
  inference(superposition,[],[f10519,f1198])).
fof(f53489,plain,(
  ( ! [X12,X13,X11] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13)))) ) | $spl282),
  inference(cnf_transformation,[],[f53489_D])).
fof(f53489_D,plain,(
  ( ! [X12,X13,X11] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13)))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f53522,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X187),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X188),s('type.semanticPrimitives.store_v'('type.modSem.v'),X189))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X187),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X188),s('type.semanticPrimitives.store_v'('type.modSem.v'),X189))))) | s(bool,X186) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X187))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X188))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X189)))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f42319,f53483])).
fof(f42319,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X187),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X188),s('type.semanticPrimitives.store_v'('type.modSem.v'),X189))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X187),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X188),s('type.semanticPrimitives.store_v'('type.modSem.v'),X189))))) | s(bool,X186) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X187))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X188))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X189))) | s(bool,'T_0') = s(bool,X186)) ) | $spl76),
  inference(superposition,[],[f10519,f1156])).
fof(f53479,plain,(
  ( ! [X400,X402] : (s(bool,X400) = s(bool,g(s(bool,'F_0'))) | s(bool,X402) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,g(s(bool,X400)))) ) | $spl278),
  inference(cnf_transformation,[],[f53479_D])).
fof(f53479_D,plain,(
  ( ! [X400,X402] : (s(bool,X400) = s(bool,g(s(bool,'F_0'))) | s(bool,X402) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,g(s(bool,X400)))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f53521,plain,(
  ( ! [X64,X62,X63] : (s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X62) = s(bool,g(s(bool,'F_0'))) | s(bool,X64) = s(bool,g(s(bool,X62)))) ) | ($spl66 | $spl74 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f15426,f15567,f15570,f15573,f15575,f15576,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f15499,f15566,f15574,f38487,f38497,f38499,f38501,f38555,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f10519,f9968,f4082,f4400,f4620,f10155,f15550,f15554,f15568,f53475,f15577,f16505,f17809,f53478,f17746,f53480,f17519,f17374,f19388,f53481,f17178,f53482,f17151,f17076,f15428,f53495,f19625,f13571,f13380,f14200,f14030,f38558])).
fof(f38558,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,X63) | s(bool,X62) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X64) = s(bool,g(s(bool,X62)))) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f53482,plain,(
  ( ! [X280,X279,X278] : (s(bool,X279) = s(bool,X280) | s(bool,'T_0') = s(bool,X279) | s(bool,X278) = s(bool,g(s(bool,'F_0'))) | s(bool,X280) = s(bool,g(s(bool,X278)))) ) | ($spl66 | $spl74 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f15567,f15570,f15573,f15575,f15576,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f15499,f15566,f15574,f38487,f38497,f38499,f38501,f38555,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f10519,f9968,f4082,f4400,f4620,f10155,f15550,f15554,f15568,f53475,f15577,f16505,f17809,f53478,f17746,f53480,f17519,f17374,f19388,f53481,f17178])).
fof(f17178,plain,(
  ( ! [X280,X279,X278] : (s(bool,X278) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X278) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X279) | s(bool,X280) = s(bool,g(s(bool,X278))) | s(bool,X279) = s(bool,X280)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f53481,plain,(
  ( ! [X194,X195,X193] : (s(bool,'T_0') = s(bool,X194) | s(bool,X193) = s(bool,X195) | s(bool,X194) = s(bool,X195) | s(bool,X193) != s(bool,g(s(bool,X193)))) ) | ($spl74 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f15567,f15570,f15573,f15575,f15576,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f15499,f15566,f15574,f38487,f38497,f38499,f38501,f38555,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f10519,f4082,f4400,f4620,f10155,f15550,f15554,f15568,f15577,f16505,f17809,f17746,f53480,f17519,f17374,f19388])).
fof(f19388,plain,(
  ( ! [X194,X195,X193] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X193) != s(bool,g(s(bool,X193))) | s(bool,'T_0') = s(bool,X194) | s(bool,X193) = s(bool,X195) | s(bool,X194) = s(bool,X195)) ) | $spl76),
  inference(forward_demodulation,[],[f17251,f75])).
fof(f17251,plain,(
  ( ! [X194,X195,X193] : (s(bool,X193) != s(bool,g(s(bool,X193))) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X194) | s(bool,X193) = s(bool,X195) | s(bool,X194) = s(bool,X195)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f17374,plain,(
  ( ! [X401,X400,X402] : (s(bool,X400) != s(bool,X401) | s(bool,X400) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X402) | s(bool,g(s(bool,X400))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X401) = s(bool,X402)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f17519,plain,(
  ( ! [X401,X400,X402] : (s(bool,X400) != s(bool,X401) | s(bool,X400) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X402) | s(bool,X401) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,g(s(bool,X400)))) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f53480,plain,(
  ( ! [X182] : (s(bool,'T_0') = s(bool,X182) | s(bool,X182) != s(bool,g(s(bool,X182)))) ) | ($spl74 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f15567,f15570,f15573,f15575,f15576,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f15499,f15566,f15574,f38487,f38497,f38499,f38501,f38555,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f10519,f4082,f4400,f4620,f10155,f15550,f15554,f15568,f15577,f16505,f17809,f17746])).
fof(f17746,plain,(
  ( ! [X182,X183,X181] : (s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,X181) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X182) | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X181) = s(bool,X183)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f17809,plain,(
  ( ! [X401,X400,X402] : (s(bool,X400) != s(bool,X401) | s(bool,X400) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X401) | s(bool,X402) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,g(s(bool,X400)))) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f15577,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X38) != s(bool,X39) | s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X40) = s(bool,g(s(bool,X38))) | s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f53475,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl66 | $spl74 | $spl76)),
  inference(condensation,[],[f53474])).
fof(f53474,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,g(s(bool,X11))) | s(bool,X11) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X12)) ) | ($spl66 | $spl74 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f15567,f15570,f15573,f15575,f15576,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f15499,f15566,f15574,f38487,f38497,f38499,f38501,f38555,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f10519,f9968,f4082,f4400,f4620,f10155,f15550,f15554,f15568])).
fof(f15568,plain,(
  ( ! [X12,X11] : (s(bool,X11) != s(bool,X12) | s(bool,X11) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,g(s(bool,X11)))) ) | $spl76),
  inference(superposition,[],[f10519,f54])).
fof(f15554,plain,(
  ( ! [X105,X106,X104] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X104),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X104),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))))) | s(bool,g(s(bool,'F_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X104))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106)))) ) | $spl76),
  inference(superposition,[],[f10519,f53])).
fof(f38555,plain,(
  ( ! [X54,X55,X53] : (s(bool,X53) != s(bool,X54) | s(bool,X53) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X55) | s(bool,g(s(bool,X53))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X54) = s(bool,X55)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f15574,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) != s(bool,X27) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,X28) = s(bool,g(s(bool,X26))) | s(bool,'T_0') = s(bool,X28) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f15566,plain,(
  ( ! [X8] : (s(bool,'F_0') != s(bool,X8) | s(bool,X8) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X8)))) ) | $spl76),
  inference(superposition,[],[f10519,f39])).
fof(f15576,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') != s(bool,X34) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X35) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,X35) = s(bool,g(s(bool,X34)))) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f15575,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') != s(bool,X30) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,g(s(bool,X30))) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f15573,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,X22) != s(bool,X23) | s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,g(s(bool,X22))) | s(bool,'T_0') = s(bool,X25)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f15570,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') != s(bool,X15) | s(bool,X15) = s(bool,g(s(bool,'F_0'))) | s(bool,X16) = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X16)) ) | $spl76),
  inference(superposition,[],[f10519,f54])).
fof(f15567,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,X9) | s(bool,X9) = s(bool,g(s(bool,'F_0'))) | s(bool,X10) = s(bool,g(s(bool,X9))) | s(bool,'T_0') = s(bool,X10)) ) | $spl76),
  inference(superposition,[],[f10519,f54])).
fof(f53520,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | $spl289),
  inference(cnf_transformation,[],[f53520_D])).
fof(f53520_D,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) <=> ~$spl289),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl289])])).
fof(f53518,plain,(
  ( ! [X62] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,X62) = s(bool,g(s(bool,'F_0')))) ) | ($spl31 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f38509,f53483])).
fof(f38509,plain,(
  ( ! [X62] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,X62) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X62)) ) | ($spl31 | $spl76)),
  inference(superposition,[],[f10519,f30703])).
fof(f30703,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl31),
  inference(trivial_inequality_removal,[],[f30682])).
fof(f30682,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl31),
  inference(superposition,[],[f6306,f54])).
fof(f6306,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl31),
  inference(cnf_transformation,[],[f6306_D])).
fof(f6306_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f53227,plain,(
  s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | $spl259),
  inference(cnf_transformation,[],[f53227_D])).
fof(f53227_D,plain,(
  s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) <=> ~$spl259),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl259])])).
fof(f53515,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0')))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f38492,f53483])).
fof(f38492,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl76),
  inference(superposition,[],[f10519,f146])).
fof(f20713,plain,(
  ( ! [X368,X367,X373,X369] : (s(fun(X367,bool),X368) = s(fun(X367,bool),X369) | s(bool,'T_0') = s(bool,X373) | s(bool,X373) = s(bool,g(s(X367,sK6(X368,X369,bool,X367))))) ) | $spl132),
  inference(cnf_transformation,[],[f20713_D])).
fof(f20713_D,plain,(
  ( ! [X368,X367,X373,X369] : (s(fun(X367,bool),X368) = s(fun(X367,bool),X369) | s(bool,'T_0') = s(bool,X373) | s(bool,X373) = s(bool,g(s(X367,sK6(X368,X369,bool,X367))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f53499,plain,(
  ( ! [X372,X370,X371] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X370))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372)))) ) | $spl286),
  inference(cnf_transformation,[],[f53499_D])).
fof(f53499_D,plain,(
  ( ! [X372,X370,X371] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X370))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372)))) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f14200,plain,(
  ( ! [X372,X368,X370,X367,X373,X369,X371] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X370))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372))) | s(fun(X367,bool),X368) = s(fun(X367,bool),X369) | s(bool,X373) = s(bool,g(s(X367,sK6(X368,X369,bool,X367)))) | s(bool,'T_0') = s(bool,X373) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372)))) )),
  inference(subsumption_resolution,[],[f13956,f1394])).
fof(f13956,plain,(
  ( ! [X372,X368,X370,X367,X373,X369,X371] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X370))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372))) | s(fun(X367,bool),X368) = s(fun(X367,bool),X369) | s(bool,X373) = s(bool,g(s(X367,sK6(X368,X369,bool,X367)))) | s(bool,'T_0') = s(bool,X373) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372))) | s(bool,'T_0') = s(bool,f(s(X367,sK6(X368,X369,bool,X367))))) )),
  inference(superposition,[],[f1394,f1198])).
fof(f53497,plain,(
  ( ! [X370,X369,X371] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X369),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X369))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371)))) ) | $spl284),
  inference(cnf_transformation,[],[f53497_D])).
fof(f53497_D,plain,(
  ( ! [X370,X369,X371] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X369),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X369))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371)))) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f13571,plain,(
  ( ! [X366,X372,X368,X370,X367,X369,X371] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X369),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371))) | s(fun(X366,bool),X367) = s(fun(X366,bool),X368) | s(bool,X372) = s(bool,g(s(X366,sK6(X367,X368,bool,X366)))) | s(bool,'T_0') = s(bool,X372) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X369))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371)))) )),
  inference(subsumption_resolution,[],[f13264,f1394])).
fof(f13264,plain,(
  ( ! [X366,X372,X368,X370,X367,X369,X371] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X369),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371))) | s(fun(X366,bool),X367) = s(fun(X366,bool),X368) | s(bool,X372) = s(bool,g(s(X366,sK6(X367,X368,bool,X366)))) | s(bool,'T_0') = s(bool,X372) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X369))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X370))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X371))) | s(bool,'T_0') = s(bool,f(s(X366,sK6(X367,X368,bool,X366))))) )),
  inference(superposition,[],[f1394,f1156])).
fof(f53494,plain,(
  $false | ($spl13 | $spl66 | $spl74 | $spl76)),
  inference(subsumption_resolution,[],[f53493,f217])).
fof(f217,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl13),
  inference(cnf_transformation,[],[f217_D])).
fof(f217_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f53493,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | ($spl66 | $spl74 | $spl76)),
  inference(subsumption_resolution,[],[f19861,f53475])).
fof(f19861,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl76),
  inference(forward_demodulation,[],[f15549,f151])).
fof(f15549,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | $spl76),
  inference(superposition,[],[f10519,f151])).
fof(f53490,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0')))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f15504,f53483])).
fof(f15504,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl76),
  inference(superposition,[],[f10519,f146])).
fof(f53488,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13)))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f15505,f53483])).
fof(f15505,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) | s(bool,'T_0') = s(bool,X10)) ) | $spl76),
  inference(superposition,[],[f10519,f1156])).
fof(f53484,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))))) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X47),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49)))) ) | ($spl68 | $spl76)),
  inference(subsumption_resolution,[],[f15514,f53483])).
fof(f15514,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))))) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X47),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) | s(bool,'T_0') = s(bool,X46)) ) | $spl76),
  inference(superposition,[],[f10519,f1198])).
fof(f53224,plain,(
  ( ! [X28,X26,X29] : (s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X28)) ) | $spl254),
  inference(cnf_transformation,[],[f53224_D])).
fof(f53224_D,plain,(
  ( ! [X28,X26,X29] : (s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X28)) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f17151,plain,(
  ( ! [X180,X181,X179] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X179) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X180) | s(bool,X179) = s(bool,X181) | s(bool,X180) = s(bool,X181)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f53478,plain,(
  ( ! [X401,X400,X402] : (s(bool,'T_0') = s(bool,X401) | s(bool,X400) = s(bool,g(s(bool,'F_0'))) | s(bool,X402) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,g(s(bool,X400)))) ) | ($spl66 | $spl74 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f15567,f15570,f15573,f15575,f15576,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f15499,f15566,f15574,f38487,f38497,f38499,f38501,f38555,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f10519,f9968,f4082,f4400,f4620,f10155,f15550,f15554,f15568,f53475,f15577,f16505,f17809])).
fof(f53473,plain,(
  s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl276),
  inference(cnf_transformation,[],[f53473_D])).
fof(f53473_D,plain,(
  s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f53215,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | $spl247),
  inference(cnf_transformation,[],[f53215_D])).
fof(f53215_D,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl247),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl247])])).
fof(f15550,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl76),
  inference(superposition,[],[f10519,f75])).
fof(f219,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl14),
  inference(cnf_transformation,[],[f219_D])).
fof(f219_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f53463,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl274),
  inference(cnf_transformation,[],[f53463_D])).
fof(f53463_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f53465,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X3) = s(bool,g(s(bool,'F_0')))) ) | $spl16),
  inference(condensation,[],[f53464])).
fof(f53464,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,X440) | s(bool,'T_0') = s(bool,X436) | s(bool,X439) = s(bool,X440) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X439) = s(bool,g(s(bool,'F_0')))) ) | $spl16),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f468,f480,f528,f544,f546,f635,f772,f827,f944,f842,f968,f923,f886,f887,f1022,f1084,f1178,f1687,f1393,f2260,f2330,f2447,f2362,f3021,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f6029,f4080,f5082,f5074,f5066,f5062,f5060,f5058,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f220,f4082,f53462,f4400])).
fof(f53462,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK6(X2,X3,bool,bool)) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | $spl16),
  inference(condensation,[],[f53461])).
fof(f53461,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,X439) = s(bool,X440) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,X440) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X439) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X436)) ) | $spl16),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f468,f480,f528,f544,f546,f635,f772,f827,f944,f842,f968,f923,f886,f887,f1022,f1084,f1178,f1687,f1393,f2260,f2330,f2447,f2362,f3021,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f6029,f4080,f5082,f5074,f5066,f5062,f5060,f5058,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f49662,f49771,f49773,f49717,f53246,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f46,f40,f6031,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f220,f4082])).
fof(f53460,plain,(
  $false | ($spl13 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f217,f53264])).
fof(f53264,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53263,f53249])).
fof(f53249,plain,(
  ~p(s(bool,'F_0')) | ($spl31 | $spl138 | $spl198 | $spl240)),
  inference(global_subsumption,[],[f53248,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f40,f6031,f46,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f49662,f49771,f49773,f49717,f53246])).
fof(f53248,plain,(
  ( ! [X114,X113] : (~p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,X114) | s(bool,'T_0') = s(bool,X113)) ) | ($spl31 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f53247,f52090])).
fof(f53247,plain,(
  ( ! [X114,X113] : (~p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) | s(bool,'F_0') = s(bool,X114) | s(bool,'T_0') = s(bool,X113)) ) | ($spl31 | $spl138 | $spl198)),
  inference(subsumption_resolution,[],[f50545,f41550])).
fof(f41550,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | ($spl31 | $spl198)),
  inference(superposition,[],[f41387,f30703])).
fof(f50545,plain,(
  ( ! [X114,X113] : (~p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) | s(bool,'F_0') = s(bool,X114) | s(bool,X113) = s(bool,X114) | s(bool,'T_0') = s(bool,X113)) ) | $spl138),
  inference(superposition,[],[f20742,f12459])).
fof(f53263,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl92 | $spl240)),
  inference(forward_demodulation,[],[f50982,f53251])).
fof(f53251,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl92 | $spl240)),
  inference(global_subsumption,[],[f53250,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f40,f6031,f46,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f49662,f49771,f49773,f49717,f53246])).
fof(f53250,plain,(
  ( ! [X116] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X116)) ) | ($spl92 | $spl240)),
  inference(forward_demodulation,[],[f52094,f52090])).
fof(f52094,plain,(
  ( ! [X116] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X116)) ) | $spl92),
  inference(subsumption_resolution,[],[f50681,f39])).
fof(f50681,plain,(
  ( ! [X116] : (s(bool,'F_0') != s(bool,X116) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X116)) ) | $spl92),
  inference(superposition,[],[f18998,f12459])).
fof(f53454,plain,(
  $false | ($spl3 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f63,f53264])).
fof(f53453,plain,(
  $false | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f21950,f53264])).
fof(f21950,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(superposition,[],[f20772,f75])).
fof(f53452,plain,(
  $false | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f42057,f53264])).
fof(f42057,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl11 | $spl92)),
  inference(unit_resulting_resolution,[],[f20772,f18998])).
fof(f53445,plain,(
  $false | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53444,f37])).
fof(f53444,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30612,f53264])).
fof(f30612,plain,(
  ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f1687])).
fof(f53443,plain,(
  $false | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53442,f37])).
fof(f53442,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30548,f53264])).
fof(f30548,plain,(
  ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f1687])).
fof(f53441,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53440,f37])).
fof(f53440,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30621,f53264])).
fof(f30621,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl31),
  inference(unit_resulting_resolution,[],[f37,f6306,f51])).
fof(f53439,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53438,f37])).
fof(f53438,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30613,f53264])).
fof(f30613,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f6306,f6306,f1687])).
fof(f53437,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53436,f37])).
fof(f53436,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30609,f53264])).
fof(f30609,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f6306,f6306,f1687])).
fof(f53435,plain,(
  $false | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53434,f37])).
fof(f53434,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30608,f53264])).
fof(f30608,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f6306,f1687])).
fof(f53433,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53432,f37])).
fof(f53432,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30563,f53264])).
fof(f30563,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl31),
  inference(unit_resulting_resolution,[],[f37,f6306,f51])).
fof(f53431,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53430,f37])).
fof(f53430,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30549,f53264])).
fof(f30549,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f6306,f6306,f1687])).
fof(f53429,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53428,f37])).
fof(f53428,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f30490,f53264])).
fof(f30490,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f56])).
fof(f53427,plain,(
  $false | ($spl31 | $spl33 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53426,f53264])).
fof(f53426,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl31 | $spl33 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f52007,f53264])).
fof(f52007,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | ($spl31 | $spl33)),
  inference(global_subsumption,[],[f47235,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7635,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f6309,f17103,f34282,f12178,f34283,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675,f52003])).
fof(f47235,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5)) ) | $spl31),
  inference(subsumption_resolution,[],[f6347,f6306])).
fof(f53425,plain,(
  $false | ($spl31 | $spl33 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53424,f53264])).
fof(f53424,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl31 | $spl33 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(forward_demodulation,[],[f6309,f53264])).
fof(f53423,plain,(
  $false | ($spl31 | $spl38 | $spl92 | $spl138 | $spl198 | $spl206 | $spl240)),
  inference(subsumption_resolution,[],[f35438,f53380])).
fof(f53380,plain,(
  ( ! [X57] : (s(bool,X57) = s(bool,g(s(bool,'T_0')))) ) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl206 | $spl240)),
  inference(subsumption_resolution,[],[f53379,f53264])).
fof(f53379,plain,(
  ( ! [X57] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X57) = s(bool,g(s(bool,'T_0')))) ) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl206 | $spl240)),
  inference(forward_demodulation,[],[f53296,f53264])).
fof(f53296,plain,(
  ( ! [X57] : (s(bool,X57) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') != s(bool,g(s(bool,X57)))) ) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl206 | $spl240)),
  inference(backward_demodulation,[],[f53264,f46428])).
fof(f35438,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | ($spl31 | $spl38)),
  inference(unit_resulting_resolution,[],[f6306,f6313])).
fof(f53422,plain,(
  $false | ($spl11 | $spl31 | $spl38 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f35437,f53378])).
fof(f53378,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53274,f53264])).
fof(f53274,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(backward_demodulation,[],[f53264,f18998])).
fof(f35437,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl38)),
  inference(unit_resulting_resolution,[],[f20772,f6313])).
fof(f53382,plain,(
  $false | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53307,f37])).
fof(f53307,plain,(
  ~p(s(bool,'T_0')) | ($spl31 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(backward_demodulation,[],[f53264,f53249])).
fof(f53381,plain,(
  $false | ($spl31 | $spl33 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(subsumption_resolution,[],[f53306,f53264])).
fof(f53306,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl31 | $spl33 | $spl92 | $spl138 | $spl198 | $spl240)),
  inference(backward_demodulation,[],[f53264,f53245])).
fof(f53256,plain,(
  ( ! [X85,X86,X84] : (s(bool,'F_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,X86) | s(bool,X86) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl92 | $spl240)),
  inference(forward_demodulation,[],[f50727,f53251])).
fof(f50727,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X85) = s(bool,X86) | s(bool,X86) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f50664])).
fof(f50664,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X85) = s(bool,X86) | s(bool,X86) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f5666,f12459])).
fof(f5993,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | $spl24),
  inference(cnf_transformation,[],[f5993_D])).
fof(f5993_D,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f20652,plain,(
  ( ! [X127,X128,X129] : (s(fun(X127,bool),X128) = s(fun(X127,bool),X129) | s(bool,'T_0') = s(bool,g(s(X127,sK6(X128,X129,bool,X127))))) ) | $spl124),
  inference(cnf_transformation,[],[f20652_D])).
fof(f20652_D,plain,(
  ( ! [X127,X128,X129] : (s(fun(X127,bool),X128) = s(fun(X127,bool),X129) | s(bool,'T_0') = s(bool,g(s(X127,sK6(X128,X129,bool,X127))))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f53246,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(fun(X118,bool),X119) = s(fun(X118,bool),X120) | s(bool,'T_0') = s(bool,X122) | s(bool,'F_0') != s(bool,X121) | s(bool,'T_0') = s(bool,g(s(X118,sK6(X119,X120,bool,X118)))) | s(bool,X121) = s(bool,X122)) )),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f40,f6031,f46,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750,f49662,f49771,f49773,f49717])).
fof(f49773,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'F_0') != s(bool,X3) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f49772])).
fof(f49772,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,'F_0') != s(bool,X47) | s(fun(X44,bool),X45) = s(fun(X44,bool),X46) | s(bool,'T_0') = s(bool,g(s(X44,sK6(X45,X46,bool,X44)))) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f49703,f1272])).
fof(f49703,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,'F_0') != s(bool,X47) | s(fun(X44,bool),X45) = s(fun(X44,bool),X46) | s(bool,'T_0') = s(bool,g(s(X44,sK6(X45,X46,bool,X44)))) | s(bool,X48) = s(bool,f(s(X44,sK6(X45,X46,bool,X44)))) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f213,f1178])).
fof(f49771,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'F_0') != s(bool,X3) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f49770])).
fof(f49770,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,'F_0') != s(bool,X41) | s(fun(X38,bool),X39) = s(fun(X38,bool),X40) | s(bool,'T_0') = s(bool,g(s(X38,sK6(X39,X40,bool,X38)))) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f49702,f1272])).
fof(f49702,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,'F_0') != s(bool,X41) | s(fun(X38,bool),X39) = s(fun(X38,bool),X40) | s(bool,'T_0') = s(bool,g(s(X38,sK6(X39,X40,bool,X38)))) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,f(s(X38,sK6(X39,X40,bool,X38)))) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f213,f1178])).
fof(f53244,plain,(
  ( ! [X73] : (s(bool,X73) = s(bool,g(s(bool,'F_0'))) | s(bool,g(s(bool,X73))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl272),
  inference(cnf_transformation,[],[f53244_D])).
fof(f53244_D,plain,(
  ( ! [X73] : (s(bool,X73) = s(bool,g(s(bool,'F_0'))) | s(bool,g(s(bool,X73))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f46565,plain,(
  ( ! [X74,X75,X73] : (s(bool,'F_0') != s(bool,X74) | s(bool,X73) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X75) | s(bool,g(s(bool,X73))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X74) = s(bool,X75)) ) | $spl206),
  inference(superposition,[],[f46428,f5666])).
fof(f53243,plain,(
  ( ! [X26,X23] : (s(bool,X23) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X26) | s(bool,X26) = s(bool,g(s(bool,X23)))) ) | $spl270),
  inference(cnf_transformation,[],[f53243_D])).
fof(f53243_D,plain,(
  ( ! [X26,X23] : (s(bool,X23) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X26) | s(bool,X26) = s(bool,g(s(bool,X23)))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f46551,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'F_0') != s(bool,X28) | s(bool,X27) = s(bool,g(s(bool,'F_0'))) | s(bool,X29) = s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl206),
  inference(superposition,[],[f46428,f1178])).
fof(f46550,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'F_0') != s(bool,X24) | s(bool,X23) = s(bool,g(s(bool,'F_0'))) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X26) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X26)) ) | $spl206),
  inference(superposition,[],[f46428,f1178])).
fof(f53242,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | $spl269),
  inference(cnf_transformation,[],[f53242_D])).
fof(f53242_D,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) <=> ~$spl269),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl269])])).
fof(f46488,plain,(
  ( ! [X59,X60,X58] : (s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X58) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,X60) | s(bool,X59) = s(bool,X60)) ) | $spl206),
  inference(superposition,[],[f46428,f5666])).
fof(f53240,plain,(
  ( ! [X31] : (s(bool,'F_0') != s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X31)) ) | $spl266),
  inference(cnf_transformation,[],[f53240_D])).
fof(f53240_D,plain,(
  ( ! [X31] : (s(bool,'F_0') != s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X31)) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f46481,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'F_0') != s(bool,g(s(bool,X39))) | s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X38) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X39)) ) | $spl206),
  inference(superposition,[],[f46428,f1178])).
fof(f46479,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'F_0') != s(bool,g(s(bool,X31))) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl206),
  inference(superposition,[],[f46428,f1178])).
fof(f53213,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl244),
  inference(cnf_transformation,[],[f53213_D])).
fof(f53213_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f46468,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl206),
  inference(superposition,[],[f46428,f39])).
fof(f61,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f53239,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) ) | $spl264),
  inference(cnf_transformation,[],[f53239_D])).
fof(f53239_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f53238,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) | s(bool,'F_0') = s(bool,X3)) ) | ($spl31 | $spl138 | $spl198)),
  inference(condensation,[],[f53237])).
fof(f53237,plain,(
  ( ! [X216,X215,X213,X217,X214] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X214))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X215))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X216)))) | s(bool,'F_0') = s(bool,X217) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X214),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X215),s('type.semanticPrimitives.store_v'('type.modSem.v'),X216))) | s(bool,'T_0') = s(bool,X213)) ) | ($spl31 | $spl138 | $spl198)),
  inference(subsumption_resolution,[],[f43239,f41550])).
fof(f43239,plain,(
  ( ! [X216,X215,X213,X217,X214] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X214))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X215))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X216)))) | s(bool,'F_0') = s(bool,X217) | s(bool,X213) = s(bool,X217) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X214),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X215),s('type.semanticPrimitives.store_v'('type.modSem.v'),X216))) | s(bool,'T_0') = s(bool,X213)) ) | $spl138),
  inference(superposition,[],[f20742,f1198])).
fof(f53232,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | ~p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) ) | $spl262),
  inference(cnf_transformation,[],[f53232_D])).
fof(f53232_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | ~p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f53231,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | ~p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) | s(bool,'F_0') = s(bool,X3)) ) | ($spl31 | $spl138 | $spl198)),
  inference(condensation,[],[f53230])).
fof(f53230,plain,(
  ( ! [X210,X208,X206,X209,X207] : (~p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X207),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209)))) | s(bool,'F_0') = s(bool,X210) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X207))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))) | s(bool,'T_0') = s(bool,X206)) ) | ($spl31 | $spl138 | $spl198)),
  inference(subsumption_resolution,[],[f42324,f41550])).
fof(f42324,plain,(
  ( ! [X210,X208,X206,X209,X207] : (~p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X207),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209)))) | s(bool,'F_0') = s(bool,X210) | s(bool,X206) = s(bool,X210) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X207))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))) | s(bool,'T_0') = s(bool,X206)) ) | $spl138),
  inference(superposition,[],[f20742,f1156])).
fof(f189,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl8),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f42143,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') != s(bool,X49) | s(bool,X48) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,X50)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f42099])).
fof(f42099,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') != s(bool,X49) | s(bool,X48) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X50) | s(bool,X48) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X49) = s(bool,X50)) ) | $spl92),
  inference(superposition,[],[f18998,f5666])).
fof(f42172,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl92),
  inference(condensation,[],[f42171])).
fof(f42171,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'F_0') != s(bool,X15) | s(bool,X14) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X14) = s(bool,X16) | s(bool,X15) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl92),
  inference(subsumption_resolution,[],[f42090,f17897])).
fof(f42090,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'F_0') != s(bool,X15) | s(bool,X14) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16) | s(bool,X15) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl92),
  inference(superposition,[],[f18998,f1178])).
fof(f42170,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl92),
  inference(condensation,[],[f42169])).
fof(f42169,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'F_0') != s(bool,X11) | s(bool,X10) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X10) = s(bool,X13)) ) | $spl92),
  inference(subsumption_resolution,[],[f42089,f17897])).
fof(f42089,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'F_0') != s(bool,X11) | s(bool,X10) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl92),
  inference(superposition,[],[f18998,f1178])).
fof(f53219,plain,(
  ( ! [X74,X72] : (s(bool,'F_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X72) = s(bool,X74)) ) | $spl248),
  inference(cnf_transformation,[],[f53219_D])).
fof(f53219_D,plain,(
  ( ! [X74,X72] : (s(bool,'F_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X72) = s(bool,X74)) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f53228,plain,(
  ( ! [X52] : (s(bool,X52) != s(bool,g(s(bool,'T_0'))) | s(bool,X52) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl260),
  inference(cnf_transformation,[],[f53228_D])).
fof(f53228_D,plain,(
  ( ! [X52] : (s(bool,X52) != s(bool,g(s(bool,'T_0'))) | s(bool,X52) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f41492,plain,(
  ( ! [X52,X53,X51] : (s(bool,X52) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X51) | s(bool,'T_0') = s(bool,X53) | s(bool,X52) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X51) = s(bool,X53)) ) | $spl198),
  inference(superposition,[],[f41387,f5666])).
fof(f38501,plain,(
  ( ! [X43,X44,X42] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f53225,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X27)) ) | $spl256),
  inference(cnf_transformation,[],[f53225_D])).
fof(f53225_D,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X27)) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f38499,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,g(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f38497,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) != s(bool,g(s(bool,X27))) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f38487,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl76),
  inference(superposition,[],[f10519,f39])).
fof(f53223,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl253),
  inference(cnf_transformation,[],[f53223_D])).
fof(f53223_D,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) <=> ~$spl253),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl253])])).
fof(f53221,plain,(
  ( ! [X82] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X82)) ) | ($spl31 | $spl34 | $spl138)),
  inference(global_subsumption,[],[f37645,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f8170,f8172,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16937,f17102,f18029,f18025,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8362,f8364,f8169,f8312,f8367,f8307,f8370,f8290,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18728,f18255,f18794,f18802,f18955,f18972,f17986,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f52010,f1198,f14967,f12460,f6137,f1690,f1689,f516,f467,f341,f2178,f6329,f12220,f6663,f1394,f20763,f19254,f18971,f18954,f18779,f18777,f18775,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212,f13519,f13281,f3668,f3626,f3587,f3509,f14136,f14122,f53,f14970,f12462,f6102,f6101,f6039,f6037,f6035,f6033,f47,f45,f44,f43,f42,f41,f6041,f1942,f40,f6031,f46,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f18975,f18843,f18840,f18750])).
fof(f17986,plain,(
  ( ! [X144,X142,X143] : (s(bool,X143) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X142) | s(bool,X144) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X143) = s(bool,X144)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f17588])).
fof(f17588,plain,(
  ( ! [X144,X142,X143] : (s(bool,X143) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,X142) | s(bool,X144) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X143) = s(bool,X144)) ) | $spl34),
  inference(superposition,[],[f6310,f5666])).
fof(f18955,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(forward_demodulation,[],[f18090,f75])).
fof(f18090,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(condensation,[],[f18089])).
fof(f18089,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f18088])).
fof(f18088,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(condensation,[],[f17378])).
fof(f17378,plain,(
  ( ! [X412,X414,X413] : (s(bool,X412) = s(bool,X413) | s(bool,'T_0') = s(bool,X413) | s(bool,'T_0') = s(bool,X414) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X412) = s(bool,X414)) ) | $spl34),
  inference(superposition,[],[f6310,f5666])).
fof(f18802,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(forward_demodulation,[],[f18189,f75])).
fof(f18189,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(condensation,[],[f18188])).
fof(f18188,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f18187])).
fof(f18187,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | $spl34),
  inference(condensation,[],[f17138])).
fof(f17138,plain,(
  ( ! [X142,X140,X141] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X140) | s(bool,'T_0') = s(bool,X141) | s(bool,X140) = s(bool,X142) | s(bool,X141) = s(bool,X142)) ) | $spl34),
  inference(superposition,[],[f6310,f5666])).
fof(f18255,plain,(
  ( ! [X374,X373,X375] : (s(bool,'T_0') = s(bool,X373) | s(bool,X374) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X374) = s(bool,X375) | s(bool,X375) = s(bool,g(s(bool,'T_0')))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f17078])).
fof(f17078,plain,(
  ( ! [X374,X373,X375] : (s(bool,'T_0') = s(bool,X373) | s(bool,'T_0') = s(bool,X373) | s(bool,X374) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X374) = s(bool,X375) | s(bool,X375) = s(bool,g(s(bool,'T_0')))) ) | $spl34),
  inference(superposition,[],[f6310,f5666])).
fof(f18356,plain,(
  ( ! [X130,X128,X129] : (s(bool,X129) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X128) | s(bool,X130) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X129) = s(bool,X130)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f16817])).
fof(f16817,plain,(
  ( ! [X130,X128,X129] : (s(bool,X129) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X128) | s(bool,X130) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X129) = s(bool,X130) | s(bool,'T_0') = s(bool,X128)) ) | $spl34),
  inference(superposition,[],[f5666,f6310])).
fof(f18643,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(forward_demodulation,[],[f18440,f75])).
fof(f18440,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f18439])).
fof(f18439,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(condensation,[],[f16711])).
fof(f16711,plain,(
  ( ! [X239,X240,X238] : (s(bool,X238) = s(bool,X239) | s(bool,'T_0') = s(bool,X240) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X239) = s(bool,X240) | s(bool,'T_0') = s(bool,X238)) ) | $spl34),
  inference(superposition,[],[f5666,f6310])).
fof(f18617,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(forward_demodulation,[],[f18509,f75])).
fof(f18509,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f18508])).
fof(f18508,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(condensation,[],[f16596])).
fof(f16596,plain,(
  ( ! [X123,X124,X122] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X123) | s(bool,X122) = s(bool,X124) | s(bool,X123) = s(bool,X124) | s(bool,'T_0') = s(bool,X122)) ) | $spl34),
  inference(superposition,[],[f5666,f6310])).
fof(f18557,plain,(
  ( ! [X175,X173,X174] : (s(bool,'T_0') = s(bool,X173) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X174) = s(bool,X175) | s(bool,X175) = s(bool,g(s(bool,'T_0')))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f16564])).
fof(f16564,plain,(
  ( ! [X175,X173,X174] : (s(bool,'T_0') = s(bool,X173) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X174) = s(bool,X175) | s(bool,X175) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X173)) ) | $spl34),
  inference(superposition,[],[f5666,f6310])).
fof(f14960,plain,(
  ( ! [X142,X140,X138,X141,X139] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,happ(s(fun('type.modSem.state'(X138),bool),happ(s(fun('type.semanticPrimitives.state'(X138),fun('type.modSem.state'(X138),bool)),X139),s('type.semanticPrimitives.state'(X138),X141))),s('type.modSem.state'(X138),X140)))) | s(bool,X142) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X138),X141),s('type.modSem.state'(X138),X140))) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X138),bool),happ(s(fun('type.semanticPrimitives.state'(X138),fun('type.modSem.state'(X138),bool)),X139),s('type.semanticPrimitives.state'(X138),sK3(X139,X140,X141,X138)))),s('type.modSem.state'(X138),sK4(X139,X140,X141,X138))))) ) | $spl34),
  inference(superposition,[],[f1689,f6310])).
fof(f14063,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,g(s(bool,'T_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl34),
  inference(condensation,[],[f14062])).
fof(f14062,plain,(
  ( ! [X167,X169,X166,X168] : (s(bool,g(s(bool,'T_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X167))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X168))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X169))) | s(bool,'T_0') = s(bool,X166) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X167),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X168),s('type.semanticPrimitives.store_v'('type.modSem.v'),X169)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f13933])).
fof(f13933,plain,(
  ( ! [X167,X169,X166,X168] : (s(bool,g(s(bool,'T_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X167))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X168))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X169))) | s(bool,'T_0') = s(bool,X166) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X167),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X168),s('type.semanticPrimitives.store_v'('type.modSem.v'),X169))) | s(bool,'T_0') = s(bool,X166)) ) | $spl34),
  inference(superposition,[],[f6310,f1198])).
fof(f14118,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,g(s(bool,'T_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl34),
  inference(condensation,[],[f14117])).
fof(f14117,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,g(s(bool,'T_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X119))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X120))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X121))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X119),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X120),s('type.semanticPrimitives.store_v'('type.modSem.v'),X121))) | s(bool,'T_0') = s(bool,X118)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f13858])).
fof(f13858,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,g(s(bool,'T_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X119))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X120))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X121))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X119),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X120),s('type.semanticPrimitives.store_v'('type.modSem.v'),X121))) | s(bool,'T_0') = s(bool,X118) | s(bool,'T_0') = s(bool,X118)) ) | $spl34),
  inference(superposition,[],[f1198,f6310])).
fof(f13432,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl34),
  inference(condensation,[],[f13431])).
fof(f13431,plain,(
  ( ! [X165,X163,X166,X164] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X164),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X165),s('type.semanticPrimitives.store_v'('type.modSem.v'),X166))) | s(bool,'T_0') = s(bool,X163) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X164))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X165))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X166)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f13240])).
fof(f13240,plain,(
  ( ! [X165,X163,X166,X164] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X164),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X165),s('type.semanticPrimitives.store_v'('type.modSem.v'),X166))) | s(bool,'T_0') = s(bool,X163) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X164))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X165))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X166))) | s(bool,'T_0') = s(bool,X163)) ) | $spl34),
  inference(superposition,[],[f6310,f1156])).
fof(f13503,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl34),
  inference(condensation,[],[f13502])).
fof(f13502,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X112),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X112))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114))) | s(bool,'T_0') = s(bool,X111)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f13148])).
fof(f13148,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X112),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X112))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114))) | s(bool,'T_0') = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) ) | $spl34),
  inference(superposition,[],[f1156,f6310])).
fof(f19882,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(X107,bool),X108) = s(fun(X107,bool),X109) | s(bool,X110) = s(bool,g(s(X107,sK6(X108,X109,bool,X107)))) | s(bool,'T_0') = s(bool,X110)) ) | $spl34),
  inference(subsumption_resolution,[],[f12211,f1394])).
fof(f12211,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(X107,bool),X108) = s(fun(X107,bool),X109) | s(bool,X110) = s(bool,g(s(X107,sK6(X108,X109,bool,X107)))) | s(bool,'T_0') = s(bool,X110) | s(bool,'T_0') = s(bool,f(s(X107,sK6(X108,X109,bool,X107))))) ) | $spl34),
  inference(superposition,[],[f1394,f6310])).
fof(f11312,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,g(s(bool,'T_0'))) != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl34),
  inference(condensation,[],[f11311])).
fof(f11311,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(X105,sK6(X106,X107,bool,X105)))) | s(fun(X105,bool),X106) = s(fun(X105,bool),X107) | s(bool,'T_0') = s(bool,X104) | s(bool,'T_0') = s(bool,g(s(X105,sK6(X106,X107,bool,X105))))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f11255])).
fof(f11255,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(X105,sK6(X106,X107,bool,X105)))) | s(fun(X105,bool),X106) = s(fun(X105,bool),X107) | s(bool,'T_0') = s(bool,X104) | s(bool,'T_0') = s(bool,g(s(X105,sK6(X106,X107,bool,X105)))) | s(bool,'T_0') = s(bool,X104)) ) | $spl34),
  inference(superposition,[],[f1272,f6310])).
fof(f8891,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,g(s(bool,'T_0')))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X87),bool),happ(s(fun('type.semanticPrimitives.state'(X87),fun('type.modSem.state'(X87),bool)),X90),s('type.semanticPrimitives.state'(X87),sK3(X90,X89,X88,X87)))),s('type.modSem.state'(X87),sK4(X90,X89,X88,X87))))) | p(s(bool,happ(s(fun('type.modSem.state'(X87),bool),happ(s(fun('type.semanticPrimitives.state'(X87),fun('type.modSem.state'(X87),bool)),X90),s('type.semanticPrimitives.state'(X87),X88))),s('type.modSem.state'(X87),X89)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X87),X88),s('type.modSem.state'(X87),X89)))) ) | $spl34),
  inference(superposition,[],[f45,f6310])).
fof(f8269,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | $spl34),
  inference(equality_factoring,[],[f6310])).
fof(f8383,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl34),
  inference(subsumption_resolution,[],[f8248,f56])).
fof(f8248,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | p(s(bool,X7)) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl34),
  inference(superposition,[],[f48,f6310])).
fof(f8381,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,X5) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl34),
  inference(subsumption_resolution,[],[f8247,f56])).
fof(f8247,plain,(
  ( ! [X4,X5] : (p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X5) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl34),
  inference(superposition,[],[f48,f6310])).
fof(f8241,plain,(
  ( ! [X83,X81,X82] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(X81,sK6(X82,X83,bool,X81)))) | s(fun(X81,bool),X82) = s(fun(X81,bool),X83) | s(bool,'T_0') = s(bool,g(s(X81,sK6(X82,X83,bool,X81))))) ) | $spl34),
  inference(superposition,[],[f52,f6310])).
fof(f8240,plain,(
  ( ! [X80,X78,X79] : (s(X80,f(s(bool,g(s(bool,'T_0'))))) != s(X80,g(s(bool,g(s(bool,'T_0'))))) | s(fun(bool,X80),X78) = s(fun(bool,X80),X79) | s(bool,'T_0') = s(bool,sK6(X78,X79,X80,bool))) ) | $spl34),
  inference(superposition,[],[f52,f6310])).
fof(f8239,plain,(
  ( ! [X74,X72,X73] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X72),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X73),s('type.semanticPrimitives.store_v'('type.modSem.v'),X74))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X72))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X73))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X74)))) ) | $spl34),
  inference(superposition,[],[f53,f6310])).
fof(f8236,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X61),X63),s('type.modSem.state'(X61),X62)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X61),bool),happ(s(fun('type.semanticPrimitives.state'(X61),fun('type.modSem.state'(X61),bool)),sK5(X62,X63,X61)),s('type.semanticPrimitives.state'(X61),X63))),s('type.modSem.state'(X61),X62)))) ) | $spl34),
  inference(superposition,[],[f47,f6310])).
fof(f8290,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'T_0'))))) ) | $spl34),
  inference(condensation,[],[f8289])).
fof(f8289,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8288])).
fof(f8288,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl34),
  inference(condensation,[],[f8224])).
fof(f8224,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X53)) ) | $spl34),
  inference(superposition,[],[f1687,f6310])).
fof(f8370,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X18)) ) | $spl34),
  inference(forward_demodulation,[],[f8306,f75])).
fof(f8306,plain,(
  ( ! [X18] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X18)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8213])).
fof(f8213,plain,(
  ( ! [X18] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl34),
  inference(superposition,[],[f146,f6310])).
fof(f8307,plain,(
  ( ! [X15] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X15)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8211])).
fof(f8211,plain,(
  ( ! [X15] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl34),
  inference(superposition,[],[f56,f6310])).
fof(f8367,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'T_0'))))) ) | $spl34),
  inference(condensation,[],[f8366])).
fof(f8366,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | $spl34),
  inference(subsumption_resolution,[],[f8206,f88])).
fof(f8206,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'T_0')))) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | $spl34),
  inference(superposition,[],[f51,f6310])).
fof(f8312,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8203])).
fof(f8203,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(superposition,[],[f39,f6310])).
fof(f8169,plain,(
  ( ! [X52,X53,X51] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X51),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X52),s('type.semanticPrimitives.store_v'('type.modSem.v'),X53))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X51))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X52))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X53)))) ) | $spl34),
  inference(superposition,[],[f6310,f53])).
fof(f8364,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl34),
  inference(forward_demodulation,[],[f8357,f75])).
fof(f8357,plain,(
  ( ! [X9] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8151])).
fof(f8151,plain,(
  ( ! [X9] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl34),
  inference(superposition,[],[f6310,f146])).
fof(f8362,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8146])).
fof(f8146,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(superposition,[],[f6310,f39])).
fof(f8268,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,X60) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X61) = s(fun(bool,bool),X62) | s(bool,X63) = s(bool,sK6(X61,X62,bool,bool)) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X60)) ) | $spl34),
  inference(superposition,[],[f1393,f6310])).
fof(f18025,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(condensation,[],[f18024])).
fof(f18024,plain,(
  ( ! [X277,X279,X278] : (s(bool,X278) = s(bool,g(s(bool,X277))) | s(bool,'T_0') = s(bool,X278) | s(bool,'T_0') = s(bool,X279) | s(bool,X277) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f17480])).
fof(f17480,plain,(
  ( ! [X277,X279,X278] : (s(bool,X278) = s(bool,g(s(bool,X277))) | s(bool,'T_0') = s(bool,X278) | s(bool,'T_0') = s(bool,X279) | s(bool,X277) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X279)) ) | $spl34),
  inference(superposition,[],[f6310,f5666])).
fof(f16937,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X49) = s(bool,g(s(bool,X48))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X50) = s(bool,X51) | s(bool,X48) = s(bool,X51)) ) | $spl34),
  inference(superposition,[],[f6310,f5666])).
fof(f8172,plain,(
  ( ! [X12,X10,X11] : (s(bool,X11) = s(bool,g(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl34),
  inference(superposition,[],[f6310,f54])).
fof(f8170,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X0) = s(bool,X2)) ) | $spl34),
  inference(superposition,[],[f6310,f1178])).
fof(f37645,plain,(
  ( ! [X83,X82] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X83) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X82)) ) | ($spl31 | $spl138)),
  inference(superposition,[],[f20742,f30703])).
fof(f53220,plain,(
  ( ! [X75,X73] : (~p(s(bool,X73)) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl250),
  inference(cnf_transformation,[],[f53220_D])).
fof(f53220_D,plain,(
  ( ! [X75,X73] : (~p(s(bool,X73)) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f37642,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,X73)) | s(bool,'F_0') = s(bool,X74) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | $spl138),
  inference(superposition,[],[f20742,f5666])).
fof(f27011,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,X73)) | s(bool,'F_0') = s(bool,X74) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | $spl138),
  inference(superposition,[],[f20742,f5666])).
fof(f23038,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,X73)) | s(bool,'F_0') = s(bool,X74) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | $spl138),
  inference(superposition,[],[f20742,f5666])).
fof(f15499,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl76),
  inference(superposition,[],[f10519,f39])).
fof(f53201,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f53200,f37])).
fof(f53200,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl11 | $spl12 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f51593,f52946])).
fof(f52946,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f52945,f52454])).
fof(f52454,plain,(
  ~p(s(bool,'F_0')) | $spl12),
  inference(global_subsumption,[],[f52453,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f1272,f38,f1156,f50835,f50969,f29254,f49675,f17106,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f20763,f19254,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f284,f213,f212])).
fof(f52453,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'F_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X19),X21),s('type.modSem.state'(X19),X20)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X19),bool),happ(s(fun('type.semanticPrimitives.state'(X19),fun('type.modSem.state'(X19),bool)),sK5(X20,X21,X19)),s('type.semanticPrimitives.state'(X19),X21))),s('type.modSem.state'(X19),X20)))) ) | $spl12),
  inference(forward_demodulation,[],[f34937,f51564])).
fof(f51564,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl12),
  inference(global_subsumption,[],[f27864,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f49675,f29254])).
fof(f27864,plain,(
  ( ! [X47,X48,X46] : (s(bool,X47) = s(bool,g(s(bool,X46))) | s(bool,'T_0') = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X46) = s(bool,X48)) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f9692,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(condensation,[],[f9691])).
fof(f9691,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') = s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9454])).
fof(f9454,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') = s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X34)) ) | $spl12),
  inference(superposition,[],[f450,f3018])).
fof(f3018,plain,(
  ( ! [X68,X67] : (s(bool,X67) = s(bool,g(s(bool,'F_0'))) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) ) | $spl12),
  inference(subsumption_resolution,[],[f2979,f37])).
fof(f2979,plain,(
  ( ! [X68,X67] : (~p(s(bool,'T_0')) | s(bool,X67) = s(bool,g(s(bool,'F_0'))) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) ) | $spl12),
  inference(superposition,[],[f1687,f218])).
fof(f450,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f218,f39])).
fof(f34937,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X19),X21),s('type.modSem.state'(X19),X20)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X19),bool),happ(s(fun('type.semanticPrimitives.state'(X19),fun('type.modSem.state'(X19),bool)),sK5(X20,X21,X19)),s('type.semanticPrimitives.state'(X19),X21))),s('type.modSem.state'(X19),X20)))) )),
  inference(superposition,[],[f47,f146])).
fof(f52945,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(forward_demodulation,[],[f50982,f51564])).
fof(f51593,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl11 | $spl12 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f26992,f51564])).
fof(f26992,plain,(
  ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl3 | $spl11 | $spl12 | $spl76 | $spl138)),
  inference(unit_resulting_resolution,[],[f20772,f20703,f20742])).
fof(f20703,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl3 | $spl12 | $spl76)),
  inference(global_subsumption,[],[f19404,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6049,f6050,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18609,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19100,f19101,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220])).
fof(f19404,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19403,f218])).
fof(f19403,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19402,f75])).
fof(f19402,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl76)),
  inference(duplicate_literal_removal,[],[f19401])).
fof(f19401,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19400])).
fof(f19400,plain,(
  ( ! [X180,X181,X179] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X180) | s(bool,X179) = s(bool,X181) | s(bool,X180) = s(bool,X181)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17151,f10249])).
fof(f10249,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f10248])).
fof(f10248,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f10177])).
fof(f10177,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl12),
  inference(superposition,[],[f9640,f1178])).
fof(f9640,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(condensation,[],[f9618])).
fof(f9618,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl12),
  inference(equality_factoring,[],[f3018])).
fof(f53199,plain,(
  $false | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53198,f37])).
fof(f53198,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f51669,f52946])).
fof(f51669,plain,(
  ~p(s(bool,'F_0')) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f30612,f51564])).
fof(f53197,plain,(
  $false | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53196,f37])).
fof(f53196,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f51679,f52946])).
fof(f51679,plain,(
  ~p(s(bool,'F_0')) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f30548,f51564])).
fof(f53195,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f53194,f37])).
fof(f53194,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f51726,f52946])).
fof(f51726,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f30655,f51660])).
fof(f51660,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30652,f51564])).
fof(f30652,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f6306,f6306,f5666])).
fof(f30655,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f20742])).
fof(f53193,plain,(
  $false | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53192,f37])).
fof(f53192,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f51727,f52946])).
fof(f51727,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30621,f51660])).
fof(f53191,plain,(
  $false | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53190,f37])).
fof(f53190,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f51728,f52946])).
fof(f51728,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30613,f51660])).
fof(f53189,plain,(
  $false | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53188,f37])).
fof(f53188,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f51729,f52946])).
fof(f51729,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30609,f51660])).
fof(f53187,plain,(
  $false | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53186,f37])).
fof(f53186,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f51730,f52946])).
fof(f51730,plain,(
  ~p(s(bool,'F_0')) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f30608,f51660])).
fof(f53185,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(subsumption_resolution,[],[f53184,f37])).
fof(f53184,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(forward_demodulation,[],[f51731,f52946])).
fof(f51731,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(forward_demodulation,[],[f30607,f51660])).
fof(f30607,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f6306,f1687])).
fof(f53183,plain,(
  $false | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53182,f37])).
fof(f53182,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f51732,f52946])).
fof(f51732,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30563,f51660])).
fof(f53181,plain,(
  $false | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53180,f37])).
fof(f53180,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f51735,f52946])).
fof(f51735,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30549,f51660])).
fof(f53179,plain,(
  $false | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f53178,f37])).
fof(f53178,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f51737,f52946])).
fof(f51737,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl31)),
  inference(forward_demodulation,[],[f30490,f51660])).
fof(f53177,plain,(
  $false | ($spl12 | $spl29 | $spl33 | $spl38 | $spl68)),
  inference(subsumption_resolution,[],[f6261,f53154])).
fof(f53154,plain,(
  ( ! [X119] : (s(bool,X119) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl33 | $spl38 | $spl68)),
  inference(subsumption_resolution,[],[f53022,f52946])).
fof(f53022,plain,(
  ( ! [X119] : (s(bool,X119) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X119)) ) | ($spl12 | $spl33 | $spl38 | $spl68)),
  inference(backward_demodulation,[],[f52946,f52028])).
fof(f52028,plain,(
  ( ! [X119] : (s(bool,X119) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') != s(bool,X119)) ) | ($spl12 | $spl33 | $spl38 | $spl68)),
  inference(global_subsumption,[],[f52027,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f10102,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675,f17106])).
fof(f52027,plain,(
  ( ! [X118,X119] : (s(bool,'T_0') != s(bool,X119) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl33 | $spl38)),
  inference(forward_demodulation,[],[f44751,f52025])).
fof(f52025,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl12 | $spl33 | $spl38)),
  inference(global_subsumption,[],[f44417,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7635,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f6309,f17103,f34282,f12178,f34283,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675,f52003,f17106])).
fof(f44417,plain,(
  ( ! [X306,X307] : (s(bool,X306) != s(bool,X307) | s(bool,'T_0') = s(bool,X307) | s(bool,X306) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl12 | $spl38)),
  inference(superposition,[],[f6313,f3018])).
fof(f44751,plain,(
  ( ! [X118,X119] : (s(bool,X119) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl38)),
  inference(duplicate_literal_removal,[],[f44343])).
fof(f44343,plain,(
  ( ! [X118,X119] : (s(bool,X119) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl12 | $spl38)),
  inference(superposition,[],[f6313,f3018])).
fof(f53176,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f53175,f37])).
fof(f53175,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(forward_demodulation,[],[f38,f52946])).
fof(f53155,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f53025,f37])).
fof(f53025,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f52946,f52454])).
fof(f52921,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') = s(bool,X89) | s(bool,X88) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89)) ) | $spl12),
  inference(forward_demodulation,[],[f50765,f51564])).
fof(f52907,plain,(
  ( ! [X64,X62,X63] : (s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(forward_demodulation,[],[f50802,f51564])).
fof(f52902,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,X72)) ) | $spl12),
  inference(forward_demodulation,[],[f50821,f51564])).
fof(f52890,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,f(s(bool,X2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl242),
  inference(cnf_transformation,[],[f52890_D])).
fof(f52890_D,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,f(s(bool,X2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f20700,plain,(
  ( ! [X547,X548] : (s(fun(bool,bool),X547) = s(fun(bool,bool),X548) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X547,X548,bool,bool))))) ) | $spl128),
  inference(cnf_transformation,[],[f20700_D])).
fof(f20700_D,plain,(
  ( ! [X547,X548] : (s(fun(bool,bool),X547) = s(fun(bool,bool),X548) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X547,X548,bool,bool))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f52889,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(bool,'F_0') != s(bool,f(s(bool,X2))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f52888])).
fof(f52888,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') != s(bool,f(s(bool,X94))) | s(fun(bool,bool),X92) = s(fun(bool,bool),X93) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X92,X93,bool,bool)))) | s(bool,'T_0') = s(bool,X95) | s(bool,X94) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f49676,f11934])).
fof(f11934,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,g(s(bool,X2)))) ) | $spl12),
  inference(superposition,[],[f9640,f9692])).
fof(f49676,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') != s(bool,f(s(bool,X94))) | s(fun(bool,bool),X92) = s(fun(bool,bool),X93) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X92,X93,bool,bool)))) | s(bool,'T_0') = s(bool,X95) | s(bool,X94) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X95) = s(bool,sK6(X92,X93,bool,bool))) )),
  inference(superposition,[],[f213,f5666])).
fof(f52544,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) ) | $spl12),
  inference(forward_demodulation,[],[f37613,f51564])).
fof(f52532,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f37106,f51564])).
fof(f52528,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f36556,f51564])).
fof(f52526,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f36222,f51564])).
fof(f52497,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f35760,f51564])).
fof(f52474,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f35434,f51564])).
fof(f52457,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f34963,f51564])).
fof(f52450,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92 | $spl138)),
  inference(subsumption_resolution,[],[f52449,f37])).
fof(f52449,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92 | $spl138)),
  inference(forward_demodulation,[],[f51591,f52129])).
fof(f52129,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f52128,f52121])).
fof(f52121,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(global_subsumption,[],[f52120,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675,f17106])).
fof(f52120,plain,(
  ( ! [X5] : (~p(s(bool,'F_0')) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK3(sK5(sK2,sK1,sK0),sK2,sK1,sK0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK4(sK5(sK2,sK1,sK0),sK2,sK1,sK0)))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f52119,f52096])).
fof(f52096,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(global_subsumption,[],[f52095,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675,f17106])).
fof(f52095,plain,(
  ( ! [X116] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X116)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f52094,f51304])).
fof(f51304,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(duplicate_literal_removal,[],[f51303])).
fof(f51303,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(condensation,[],[f51302])).
fof(f51302,plain,(
  ( ! [X127,X126] : (s(bool,X126) = s(bool,X127) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X127)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(subsumption_resolution,[],[f50688,f40412])).
fof(f40412,plain,(
  ( ! [X19,X18] : (s(bool,'T_0') != s(bool,X18) | s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,X19)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(superposition,[],[f20703,f22516])).
fof(f22516,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f20749,f20749])).
fof(f20749,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | ($spl12 | $spl24 | $spl64)),
  inference(global_subsumption,[],[f12403,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f9966,f14144,f14145,f14097,f14170,f18614,f18647,f18727,f18728,f18794,f18964,f18967,f18971,f18972,f19144,f19145,f19146,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18954,f18898,f18726])).
fof(f12403,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,g(s(bool,X43))) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12344,f450])).
fof(f12344,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') != s(bool,X43) | s(bool,'T_0') = s(bool,g(s(bool,X43))) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f3018])).
fof(f12163,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f12162])).
fof(f12162,plain,(
  ( ! [X80,X81] : (s(bool,'F_0') != s(bool,X80) | s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,g(s(bool,X80)))) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f11965,f9640])).
fof(f11965,plain,(
  ( ! [X80,X81] : (s(bool,'F_0') != s(bool,X80) | s(bool,'T_0') = s(bool,X81) | s(bool,X81) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X80)))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f9692])).
fof(f50688,plain,(
  ( ! [X127,X126] : (s(bool,X126) = s(bool,X127) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X127) | s(bool,'T_0') = s(bool,X126)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f22516,f12459])).
fof(f52119,plain,(
  ( ! [X5] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK3(sK5(sK2,sK1,sK0),sK2,sK1,sK0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK4(sK5(sK2,sK1,sK0),sK2,sK1,sK0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f50635,f56])).
fof(f50635,plain,(
  ( ! [X5] : (p(s(bool,X5)) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(sK0),sK3(sK5(sK2,sK1,sK0),sK2,sK1,sK0)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),sK4(sK5(sK2,sK1,sK0),sK2,sK1,sK0)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f43,f12459])).
fof(f52128,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f50982,f52096])).
fof(f51591,plain,(
  ~p(s(bool,'F_0')) | ($spl12 | $spl24 | $spl64 | $spl138)),
  inference(global_subsumption,[],[f51590,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f49675,f29254])).
fof(f51590,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1)) ) | ($spl12 | $spl24 | $spl64 | $spl138)),
  inference(forward_demodulation,[],[f51589,f51564])).
fof(f51589,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) ) | ($spl12 | $spl24 | $spl64 | $spl138)),
  inference(condensation,[],[f51588])).
fof(f51588,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X1) | s(bool,X1) = s(bool,X2)) ) | ($spl12 | $spl24 | $spl64 | $spl138)),
  inference(condensation,[],[f51587])).
fof(f51587,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'F_0') = s(bool,X57) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X58) | s(bool,X58) = s(bool,X59)) ) | ($spl12 | $spl24 | $spl64 | $spl138)),
  inference(subsumption_resolution,[],[f27007,f40408])).
fof(f40408,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,X5) != s(bool,X6) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f5993,f22516])).
fof(f27007,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'F_0') = s(bool,X57) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X58) | s(bool,X56) = s(bool,X59) | s(bool,X58) = s(bool,X59)) ) | $spl138),
  inference(superposition,[],[f20742,f5666])).
fof(f52448,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl31 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f35438,f52359])).
fof(f52359,plain,(
  ( ! [X119] : (s(bool,X119) = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f52231,f52129])).
fof(f52231,plain,(
  ( ! [X119] : (s(bool,X119) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X119)) ) | ($spl3 | $spl12 | $spl24 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(backward_demodulation,[],[f52129,f52028])).
fof(f52447,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl38 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f35437,f52343])).
fof(f52343,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f52162,f52129])).
fof(f52162,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(backward_demodulation,[],[f52129,f18998])).
fof(f52446,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl31 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f35594,f52359])).
fof(f35594,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | ($spl12 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f9640])).
fof(f52445,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f35593,f52343])).
fof(f35593,plain,(
  s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl12)),
  inference(unit_resulting_resolution,[],[f20772,f9640])).
fof(f52444,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92 | $spl198)),
  inference(subsumption_resolution,[],[f35592,f52423])).
fof(f52423,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92 | $spl198)),
  inference(subsumption_resolution,[],[f45418,f52359])).
fof(f45418,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl198)),
  inference(condensation,[],[f45417])).
fof(f45417,plain,(
  ( ! [X210,X209] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X209) | s(bool,X209) = s(bool,X210)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl198)),
  inference(subsumption_resolution,[],[f44049,f40412])).
fof(f44049,plain,(
  ( ! [X210,X209] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X209) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210)) ) | ($spl12 | $spl198)),
  inference(superposition,[],[f41387,f3018])).
fof(f35592,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | ($spl3 | $spl12 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f9640])).
fof(f52439,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl31 | $spl64 | $spl76 | $spl92 | $spl138)),
  inference(subsumption_resolution,[],[f52438,f37])).
fof(f52438,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl24 | $spl31 | $spl64 | $spl76 | $spl92 | $spl138)),
  inference(forward_demodulation,[],[f37623,f52129])).
fof(f37623,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138)),
  inference(unit_resulting_resolution,[],[f6306,f20703,f20742])).
fof(f52437,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92 | $spl138)),
  inference(subsumption_resolution,[],[f52436,f37])).
fof(f52436,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl11 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92 | $spl138)),
  inference(forward_demodulation,[],[f37622,f52129])).
fof(f37622,plain,(
  ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl3 | $spl11 | $spl12 | $spl76 | $spl138)),
  inference(unit_resulting_resolution,[],[f20772,f20703,f20742])).
fof(f52412,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl31 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45851,f52359])).
fof(f45851,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f6306,f10195])).
fof(f10195,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f9640,f39])).
fof(f52411,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl31 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45850,f52359])).
fof(f45850,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl12 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f10195])).
fof(f52410,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl31 | $spl33 | $spl38 | $spl64 | $spl68 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45849,f52359])).
fof(f45849,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f10195])).
fof(f52409,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl31 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45848,f52343])).
fof(f45848,plain,(
  s(bool,g(s(bool,g(s(bool,'T_0'))))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl12 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f20772,f10195])).
fof(f52408,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45847,f52343])).
fof(f45847,plain,(
  s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl12)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f10195])).
fof(f52407,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45846,f52343])).
fof(f45846,plain,(
  s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20772,f10195])).
fof(f52360,plain,(
  $false | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f52240,f37])).
fof(f52240,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(backward_demodulation,[],[f52129,f52121])).
fof(f52107,plain,(
  ( ! [X85,X86,X84] : (s(bool,'F_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,X86) | s(bool,X86) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f50727,f52096])).
fof(f52090,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | $spl240),
  inference(cnf_transformation,[],[f52090_D])).
fof(f52090_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f52093,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl24 | $spl64)),
  inference(condensation,[],[f52092])).
fof(f52092,plain,(
  ( ! [X156,X157] : (s(bool,'T_0') = s(bool,X157) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X156)) ) | ($spl12 | $spl24 | $spl64)),
  inference(subsumption_resolution,[],[f50706,f54])).
fof(f50706,plain,(
  ( ! [X156,X157] : (s(bool,X156) != s(bool,X157) | s(bool,'T_0') = s(bool,X157) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X156)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f12459])).
fof(f36904,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f9640,f20749])).
fof(f52091,plain,(
  ( ! [X172] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X172)) ) | $spl194),
  inference(subsumption_resolution,[],[f50714,f146])).
fof(f50714,plain,(
  ( ! [X172] : (s(bool,X172) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X172)) ) | $spl194),
  inference(superposition,[],[f41367,f12459])).
fof(f52088,plain,(
  ( ! [X173] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X173)) ) | ($spl31 | $spl198)),
  inference(subsumption_resolution,[],[f50715,f30703])).
fof(f50715,plain,(
  ( ! [X173] : (s(bool,X173) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X173)) ) | $spl198),
  inference(superposition,[],[f41387,f12459])).
fof(f52064,plain,(
  ( ! [X212] : (s(bool,X212) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X212)) ) | $spl238),
  inference(cnf_transformation,[],[f52064_D])).
fof(f52064_D,plain,(
  ( ! [X212] : (s(bool,X212) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X212)) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f41137,plain,(
  ( ! [X212,X211] : (s(bool,'T_0') = s(bool,X211) | s(bool,X212) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X212)) ) | ($spl12 | $spl24 | $spl38 | $spl64)),
  inference(subsumption_resolution,[],[f40535,f39])).
fof(f40535,plain,(
  ( ! [X212,X211] : (s(bool,'F_0') != s(bool,X211) | s(bool,'T_0') = s(bool,X211) | s(bool,X212) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X212)) ) | ($spl12 | $spl24 | $spl38 | $spl64)),
  inference(superposition,[],[f6313,f22516])).
fof(f41193,plain,(
  ( ! [X212,X211] : (s(bool,'T_0') = s(bool,X211) | s(bool,X212) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X212)) ) | ($spl12 | $spl24 | $spl38 | $spl64)),
  inference(subsumption_resolution,[],[f40694,f39])).
fof(f40694,plain,(
  ( ! [X212,X211] : (s(bool,'F_0') != s(bool,X211) | s(bool,'T_0') = s(bool,X211) | s(bool,X212) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X212)) ) | ($spl12 | $spl24 | $spl38 | $spl64)),
  inference(superposition,[],[f6313,f22516])).
fof(f52043,plain,(
  ( ! [X121,X118,X119] : (s(bool,X121) = s(bool,sK6(X118,X119,bool,bool)) | s(bool,'F_0') = s(bool,X121) | s(fun(bool,bool),X118) = s(fun(bool,bool),X119)) ) | $spl234),
  inference(cnf_transformation,[],[f52043_D])).
fof(f52043_D,plain,(
  ( ! [X121,X118,X119] : (s(bool,X121) = s(bool,sK6(X118,X119,bool,bool)) | s(bool,'F_0') = s(bool,X121) | s(fun(bool,bool),X118) = s(fun(bool,bool),X119)) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f52045,plain,(
  ( ! [X109,X107,X108,X106] : (s(bool,X109) = s(bool,sK6(X106,X107,bool,bool)) | s(bool,'F_0') = s(bool,X109) | s(fun(bool,bool),X106) = s(fun(bool,bool),X107) | s(bool,'T_0') = s(bool,X108)) ) | ($spl12 | $spl14 | $spl24 | $spl64)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f219,f6248,f6255,f6256,f6220,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f5993,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18048,f19018,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f10135,f9966,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9142,f9144,f9147,f10005,f9486,f19682,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f13559,f13571,f13359,f19541,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18252,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19383,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f22516,f491,f12142,f12140,f12155,f12115,f510,f28893,f28913,f28890,f22712,f18976,f19643,f19641,f19637,f19635,f19633,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f22711,f22497,f20749,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12163,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f8756,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f36904,f39983,f40038,f40103,f40284,f40408,f40409,f40410,f40411,f40413,f41139,f40561,f40563,f41261,f41334,f41329,f41321,f41318,f41315,f43400,f43712,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47407,f47393,f49037,f50835,f50758,f50748,f50969,f29254,f29715,f27864,f51564,f51565,f51584,f51594,f51596,f51597,f51606,f51608,f51612,f51614,f51616,f51617,f51618,f51619,f51620,f51621,f51622,f51636,f51637,f51658,f51714,f51717,f51720,f51723,f19324,f49675,f49671,f47389,f17106,f44652,f41413,f52042,f41412,f41411,f41410])).
fof(f41410,plain,(
  ( ! [X109,X107,X108,X106] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X106) = s(fun(bool,bool),X107) | s(bool,X108) = s(bool,g(s(bool,sK6(X106,X107,bool,bool)))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,sK6(X106,X107,bool,bool)) | s(bool,'F_0') = s(bool,X109)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f1394,f22516])).
fof(f41413,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X118) = s(fun(bool,bool),X119) | s(bool,X120) = s(bool,g(s(bool,sK6(X118,X119,bool,bool)))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,sK6(X118,X119,bool,bool)) | s(bool,'F_0') = s(bool,X121)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f1394,f22516])).
fof(f44652,plain,(
  ( ! [X412,X410,X409,X411] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X409) = s(fun(bool,bool),X410) | s(bool,X411) = s(bool,sK6(X409,X410,bool,bool)) | s(bool,'T_0') = s(bool,X411) | s(bool,X412) = s(bool,g(s(bool,'F_0'))) | s(bool,X412) = s(bool,g(s(bool,'T_0')))) ) | $spl12),
  inference(superposition,[],[f1393,f3018])).
fof(f47389,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f47388])).
fof(f47388,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,g(s(bool,X0)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f47387])).
fof(f47387,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,X0)))) ) | $spl12),
  inference(condensation,[],[f47386])).
fof(f47386,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f47335])).
fof(f47335,plain,(
  ( ! [X80,X78,X81,X79] : (s(bool,X79) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,g(s(bool,X79))) | s(bool,'T_0') = s(bool,X80) | s(bool,X78) = s(bool,X81) | s(bool,X80) = s(bool,X81)) ) | $spl12),
  inference(superposition,[],[f11934,f5666])).
fof(f49671,plain,(
  ( ! [X76,X74,X75] : (s(bool,'F_0') != s(bool,f(s(bool,X76))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X74,X75,bool,bool)))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK6(X74,X75,bool,bool)) | s(bool,'T_0') = s(bool,X76)) ) | $spl12),
  inference(superposition,[],[f213,f3018])).
fof(f19324,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X2))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3)) ) | $spl12),
  inference(condensation,[],[f19323])).
fof(f19323,plain,(
  ( ! [X532,X528,X530,X529,X531] : (s(bool,'T_0') != s(bool,f(s(bool,X530))) | s(fun(bool,bool),X528) = s(fun(bool,bool),X529) | s(bool,'T_0') = s(bool,X531) | s(bool,'T_0') = s(bool,sK6(X528,X529,bool,bool)) | s(bool,X532) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X530) = s(bool,X532)) ) | $spl12),
  inference(subsumption_resolution,[],[f17697,f10195])).
fof(f17697,plain,(
  ( ! [X532,X528,X530,X529,X531] : (s(bool,'T_0') != s(bool,f(s(bool,X530))) | s(fun(bool,bool),X528) = s(fun(bool,bool),X529) | s(bool,X531) = s(bool,g(s(bool,sK6(X528,X529,bool,bool)))) | s(bool,'T_0') = s(bool,X531) | s(bool,'T_0') = s(bool,sK6(X528,X529,bool,bool)) | s(bool,X532) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X530) = s(bool,X532)) )),
  inference(superposition,[],[f1394,f5666])).
fof(f51637,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,'F_0') = s(bool,X78) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X75),X77),s('type.modSem.state'(X75),X76)))) | s(bool,X78) = s(bool,X79) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(X75),bool),happ(s(fun('type.semanticPrimitives.state'(X75),fun('type.modSem.state'(X75),bool)),sK5(X76,X77,X75)),s('type.semanticPrimitives.state'(X75),X77))),s('type.modSem.state'(X75),X76)))) ) | $spl12),
  inference(forward_demodulation,[],[f24547,f51564])).
fof(f24547,plain,(
  ( ! [X78,X76,X79,X77,X75] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X75),X77),s('type.modSem.state'(X75),X76)))) | s(bool,X78) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X78) = s(bool,X79) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(X75),bool),happ(s(fun('type.semanticPrimitives.state'(X75),fun('type.modSem.state'(X75),bool)),sK5(X76,X77,X75)),s('type.semanticPrimitives.state'(X75),X77))),s('type.modSem.state'(X75),X76)))) )),
  inference(subsumption_resolution,[],[f24534,f37])).
fof(f24534,plain,(
  ( ! [X78,X76,X79,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X75),X77),s('type.modSem.state'(X75),X76)))) | s(bool,X78) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X78) = s(bool,X79) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(X75),bool),happ(s(fun('type.semanticPrimitives.state'(X75),fun('type.modSem.state'(X75),bool)),sK5(X76,X77,X75)),s('type.semanticPrimitives.state'(X75),X77))),s('type.modSem.state'(X75),X76)))) )),
  inference(superposition,[],[f47,f5666])).
fof(f51622,plain,(
  ( ! [X39,X38,X40] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X38),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X39),s('type.semanticPrimitives.store_v'('type.modSem.v'),X40))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X38))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X39))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X40)))) ) | $spl12),
  inference(forward_demodulation,[],[f24697,f51564])).
fof(f24697,plain,(
  ( ! [X39,X38,X40] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X38),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X39),s('type.semanticPrimitives.store_v'('type.modSem.v'),X40))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X38))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X39))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X40)))) )),
  inference(superposition,[],[f146,f53])).
fof(f51621,plain,(
  ( ! [X101,X99,X97,X100,X98] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X97),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X98),s('type.semanticPrimitives.store_v'('type.modSem.v'),X99))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X97))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X98))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X99))) | s(bool,X100) = s(bool,X101)) ) | $spl12),
  inference(forward_demodulation,[],[f24708,f51564])).
fof(f24708,plain,(
  ( ! [X101,X99,X97,X100,X98] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X97),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X98),s('type.semanticPrimitives.store_v'('type.modSem.v'),X99))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X97))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X98))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X99))) | s(bool,X100) = s(bool,X101)) )),
  inference(superposition,[],[f5666,f53])).
fof(f51620,plain,(
  ( ! [X103,X105,X102,X106,X104] : (s(bool,'F_0') = s(bool,X105) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X102),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X103),s('type.semanticPrimitives.store_v'('type.modSem.v'),X104))) | s(bool,X105) = s(bool,X106) | s(bool,X106) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X102))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X103))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X104)))) ) | $spl12),
  inference(forward_demodulation,[],[f24709,f51564])).
fof(f24709,plain,(
  ( ! [X103,X105,X102,X106,X104] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X102),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X103),s('type.semanticPrimitives.store_v'('type.modSem.v'),X104))) | s(bool,X105) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X105) = s(bool,X106) | s(bool,X106) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X102))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X103))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X104)))) )),
  inference(superposition,[],[f5666,f53])).
fof(f51619,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X107))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,X110) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X107),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,'T_0') = s(bool,X111) | s(bool,X110) = s(bool,X111)) ) | $spl12),
  inference(forward_demodulation,[],[f24710,f51564])).
fof(f24710,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,X110) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X107),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,'T_0') = s(bool,X111) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X107))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,X110) = s(bool,X111)) )),
  inference(superposition,[],[f5666,f53])).
fof(f51618,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s(bool,'F_0') = s(bool,X115) | s(bool,X115) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X112),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114))) | s(bool,'T_0') = s(bool,X116) | s(bool,X116) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X112))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114)))) ) | $spl12),
  inference(forward_demodulation,[],[f24711,f51564])).
fof(f24711,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s(bool,X115) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X112),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114))) | s(bool,'T_0') = s(bool,X116) | s(bool,X115) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X116) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X112))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X113))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X114)))) )),
  inference(superposition,[],[f5666,f53])).
fof(f51617,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,'F_0') = s(bool,X121) | s(bool,X120) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X117),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.store_v'('type.modSem.v'),X119))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X117))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X118))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X119))) | s(bool,X120) = s(bool,X121)) ) | $spl12),
  inference(forward_demodulation,[],[f24712,f51564])).
fof(f24712,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,X120) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X117),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.store_v'('type.modSem.v'),X119))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X117))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X118))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X119))) | s(bool,X121) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X120) = s(bool,X121)) )),
  inference(superposition,[],[f5666,f53])).
fof(f51616,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,'F_0') = s(bool,X126) | s(bool,X125) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X122),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X123),s('type.semanticPrimitives.store_v'('type.modSem.v'),X124))) | s(bool,'T_0') = s(bool,X125) | s(bool,X126) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X122))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X123))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X124)))) ) | $spl12),
  inference(forward_demodulation,[],[f24713,f51564])).
fof(f24713,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,X125) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X122),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X123),s('type.semanticPrimitives.store_v'('type.modSem.v'),X124))) | s(bool,'T_0') = s(bool,X125) | s(bool,X126) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X126) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X122))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X123))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X124)))) )),
  inference(superposition,[],[f5666,f53])).
fof(f51597,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,'F_0') = s(bool,X101) | ~p(s(bool,happ(s(fun('type.modSem.state'(X97),bool),happ(s(fun('type.semanticPrimitives.state'(X97),fun('type.modSem.state'(X97),bool)),X100),s('type.semanticPrimitives.state'(X97),sK3(X100,X99,X98,X97)))),s('type.modSem.state'(X97),sK4(X100,X99,X98,X97))))) | p(s(bool,happ(s(fun('type.modSem.state'(X97),bool),happ(s(fun('type.semanticPrimitives.state'(X97),fun('type.modSem.state'(X97),bool)),X100),s('type.semanticPrimitives.state'(X97),X98))),s('type.modSem.state'(X97),X99)))) | s(bool,X101) = s(bool,X102) | s(bool,X102) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X97),X98),s('type.modSem.state'(X97),X99)))) ) | $spl12),
  inference(forward_demodulation,[],[f26811,f51564])).
fof(f26811,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (~p(s(bool,happ(s(fun('type.modSem.state'(X97),bool),happ(s(fun('type.semanticPrimitives.state'(X97),fun('type.modSem.state'(X97),bool)),X100),s('type.semanticPrimitives.state'(X97),sK3(X100,X99,X98,X97)))),s('type.modSem.state'(X97),sK4(X100,X99,X98,X97))))) | p(s(bool,happ(s(fun('type.modSem.state'(X97),bool),happ(s(fun('type.semanticPrimitives.state'(X97),fun('type.modSem.state'(X97),bool)),X100),s('type.semanticPrimitives.state'(X97),X98))),s('type.modSem.state'(X97),X99)))) | s(bool,X101) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X101) = s(bool,X102) | s(bool,X102) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X97),X98),s('type.modSem.state'(X97),X99)))) )),
  inference(subsumption_resolution,[],[f26794,f37])).
fof(f26794,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X97),bool),happ(s(fun('type.semanticPrimitives.state'(X97),fun('type.modSem.state'(X97),bool)),X100),s('type.semanticPrimitives.state'(X97),sK3(X100,X99,X98,X97)))),s('type.modSem.state'(X97),sK4(X100,X99,X98,X97))))) | p(s(bool,happ(s(fun('type.modSem.state'(X97),bool),happ(s(fun('type.semanticPrimitives.state'(X97),fun('type.modSem.state'(X97),bool)),X100),s('type.semanticPrimitives.state'(X97),X98))),s('type.modSem.state'(X97),X99)))) | s(bool,X101) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X101) = s(bool,X102) | s(bool,X102) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X97),X98),s('type.modSem.state'(X97),X99)))) )),
  inference(superposition,[],[f45,f5666])).
fof(f51594,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (s(bool,'F_0') = s(bool,X120) | ~p(s(bool,X118)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X115),bool),happ(s(fun('type.semanticPrimitives.state'(X115),fun('type.modSem.state'(X115),bool)),X119),s('type.semanticPrimitives.state'(X115),sK3(X119,X117,X116,X115)))),s('type.modSem.state'(X115),sK4(X119,X117,X116,X115))))) | p(s(bool,happ(s(fun('type.modSem.state'(X115),bool),happ(s(fun('type.semanticPrimitives.state'(X115),fun('type.modSem.state'(X115),bool)),X119),s('type.semanticPrimitives.state'(X115),X116))),s('type.modSem.state'(X115),X117)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X115),X116),s('type.modSem.state'(X115),X117))) | s(bool,X118) = s(bool,X120)) ) | $spl12),
  inference(forward_demodulation,[],[f26797,f51564])).
fof(f26797,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (~p(s(bool,X118)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X115),bool),happ(s(fun('type.semanticPrimitives.state'(X115),fun('type.modSem.state'(X115),bool)),X119),s('type.semanticPrimitives.state'(X115),sK3(X119,X117,X116,X115)))),s('type.modSem.state'(X115),sK4(X119,X117,X116,X115))))) | p(s(bool,happ(s(fun('type.modSem.state'(X115),bool),happ(s(fun('type.semanticPrimitives.state'(X115),fun('type.modSem.state'(X115),bool)),X119),s('type.semanticPrimitives.state'(X115),X116))),s('type.modSem.state'(X115),X117)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X115),X116),s('type.modSem.state'(X115),X117))) | s(bool,X120) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X118) = s(bool,X120)) )),
  inference(superposition,[],[f45,f5666])).
fof(f51565,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl12),
  inference(backward_demodulation,[],[f51564,f29254])).
fof(f29715,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | $spl12),
  inference(condensation,[],[f29714])).
fof(f29714,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f29713])).
fof(f29713,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | $spl12),
  inference(condensation,[],[f29712])).
fof(f29712,plain,(
  ( ! [X116,X117,X115] : (s(bool,'T_0') = s(bool,X116) | s(bool,X115) = s(bool,X117) | s(bool,X116) = s(bool,X117) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f28011,f10249])).
fof(f28011,plain,(
  ( ! [X116,X117,X115] : (s(bool,X115) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X116) | s(bool,X115) = s(bool,X117) | s(bool,X116) = s(bool,X117) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | $spl12),
  inference(superposition,[],[f5666,f9692])).
fof(f50758,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f50757])).
fof(f50757,plain,(
  ( ! [X107,X108] : (s(bool,X108) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,g(s(bool,X108)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f50540])).
fof(f50540,plain,(
  ( ! [X107,X108] : (s(bool,X108) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,g(s(bool,X108))) | s(bool,'T_0') = s(bool,X107)) ) | $spl12),
  inference(superposition,[],[f11934,f12459])).
fof(f49037,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,f(s(bool,X5))) != s(X6,g(s(bool,X5))) | s(fun(bool,X6),X7) = s(fun(bool,X6),X8) | s(bool,'T_0') = s(bool,sK6(X7,X8,X6,bool)) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f212,f22516])).
fof(f47393,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) ) | $spl12),
  inference(condensation,[],[f47392])).
fof(f47392,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s(bool,X65) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X62))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,g(s(bool,X65))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X62),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f47330])).
fof(f47330,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s(bool,X65) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X62))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,g(s(bool,X65))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X62),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64))) | s(bool,'T_0') = s(bool,X61)) ) | $spl12),
  inference(superposition,[],[f11934,f1198])).
fof(f47407,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) ) | $spl12),
  inference(condensation,[],[f47406])).
fof(f47406,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X20) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f47321])).
fof(f47321,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X20) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16)) ) | $spl12),
  inference(superposition,[],[f11934,f1156])).
fof(f46406,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f46405])).
fof(f46405,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'F_0') != s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f46289])).
fof(f46289,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'F_0') != s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl12),
  inference(superposition,[],[f46090,f1178])).
fof(f46412,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))))) ) | $spl12),
  inference(condensation,[],[f46411])).
fof(f46411,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f46283])).
fof(f46283,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) | s(bool,'T_0') = s(bool,X10)) ) | $spl12),
  inference(superposition,[],[f46090,f1156])).
fof(f46048,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) ) | $spl12),
  inference(condensation,[],[f46047])).
fof(f46047,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X20) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45917])).
fof(f45917,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X20) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16)) ) | $spl12),
  inference(superposition,[],[f10195,f1156])).
fof(f46060,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f46059])).
fof(f46059,plain,(
  ( ! [X94,X97,X95,X96] : (s(bool,X95) != s(bool,g(s(bool,X96))) | s(bool,'T_0') = s(bool,X94) | s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X95) = s(bool,X97)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45878])).
fof(f45878,plain,(
  ( ! [X94,X97,X95,X96] : (s(bool,X95) != s(bool,g(s(bool,X96))) | s(bool,'T_0') = s(bool,X94) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X94) | s(bool,X97) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X95) = s(bool,X97)) ) | $spl12),
  inference(superposition,[],[f10195,f5666])).
fof(f46066,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(condensation,[],[f46065])).
fof(f46065,plain,(
  ( ! [X76,X77,X75] : (s(bool,X76) != s(bool,g(s(bool,X77))) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X77) | s(bool,X76) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45873])).
fof(f45873,plain,(
  ( ! [X76,X77,X75] : (s(bool,X76) != s(bool,g(s(bool,X77))) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X77) | s(bool,X76) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X75)) ) | $spl12),
  inference(superposition,[],[f10195,f3018])).
fof(f46068,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,X0))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) ) | $spl12),
  inference(condensation,[],[f46067])).
fof(f46067,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s(bool,g(s(bool,X65))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X62))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X65) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X62),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45869])).
fof(f45869,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s(bool,g(s(bool,X65))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X62))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X65) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X62),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X63),s('type.semanticPrimitives.store_v'('type.modSem.v'),X64))) | s(bool,'T_0') = s(bool,X61)) ) | $spl12),
  inference(superposition,[],[f10195,f1198])).
fof(f46076,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl12),
  inference(condensation,[],[f46075])).
fof(f46075,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,X47) != s(bool,g(s(bool,X48))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45866])).
fof(f45866,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,X47) != s(bool,g(s(bool,X48))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X46) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl12),
  inference(superposition,[],[f10195,f1178])).
fof(f46082,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,X0))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X1),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X2))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X3)))) ) | $spl12),
  inference(condensation,[],[f46081])).
fof(f46081,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,g(s(bool,X20))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45860])).
fof(f45860,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,g(s(bool,X20))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X18))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X19))) | s(bool,'T_0') = s(bool,X16)) ) | $spl12),
  inference(superposition,[],[f10195,f1156])).
fof(f46090,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(condensation,[],[f46089])).
fof(f46089,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f45854])).
fof(f45854,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f10195,f39])).
fof(f43712,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f3018,f22516])).
fof(f43400,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,X3) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'F_0') = s(bool,X3)) ) | ($spl12 | $spl24 | $spl64)),
  inference(condensation,[],[f43399])).
fof(f43399,plain,(
  ( ! [X302,X304,X301,X303,X305] : (s(bool,X305) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X302))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X303))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X304))) | s(bool,'T_0') = s(bool,X301) | s(bool,'F_0') = s(bool,X305) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X302),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X303),s('type.semanticPrimitives.store_v'('type.modSem.v'),X304)))) ) | ($spl12 | $spl24 | $spl64)),
  inference(duplicate_literal_removal,[],[f43258])).
fof(f43258,plain,(
  ( ! [X302,X304,X301,X303,X305] : (s(bool,X305) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X302))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X303))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X304))) | s(bool,'T_0') = s(bool,X301) | s(bool,'F_0') = s(bool,X305) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X302),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X303),s('type.semanticPrimitives.store_v'('type.modSem.v'),X304))) | s(bool,'T_0') = s(bool,X301)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f1198])).
fof(f41315,plain,(
  ( ! [X158,X156,X157,X155] : (s(bool,X158) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X155),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X156),s('type.semanticPrimitives.store_v'('type.modSem.v'),X157))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X155))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X156))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X157))) | s(bool,'F_0') = s(bool,X158)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f53])).
fof(f41329,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | ($spl12 | $spl24 | $spl64)),
  inference(condensation,[],[f41328])).
fof(f41328,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X42) != s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | ($spl12 | $spl24 | $spl64)),
  inference(duplicate_literal_removal,[],[f41273])).
fof(f41273,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X42) != s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X41) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f1178])).
fof(f41261,plain,(
  ( ! [X165,X163,X166,X164] : (s(bool,X166) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X163),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X164),s('type.semanticPrimitives.store_v'('type.modSem.v'),X165))) | s(bool,'T_0') = s(bool,X166) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X163))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X164))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X165)))) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f53])).
fof(f40563,plain,(
  ( ! [X300,X302,X301,X299] : (s(bool,'F_0') != s(bool,f(s(X299,sK6(X300,X301,bool,X299)))) | s(fun(X299,bool),X300) = s(fun(X299,bool),X301) | s(bool,X302) = s(bool,g(s(X299,sK6(X300,X301,bool,X299)))) | s(bool,'F_0') = s(bool,X302)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f52,f22516])).
fof(f40561,plain,(
  ( ! [X292,X294,X293,X291] : (s(X293,f(s(bool,'F_0'))) != s(X293,g(s(bool,'F_0'))) | s(fun(bool,X293),X291) = s(fun(bool,X293),X292) | s(bool,X294) = s(bool,sK6(X291,X292,X293,bool)) | s(bool,'F_0') = s(bool,X294)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f52,f22516])).
fof(f41139,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,'F_0') = s(bool,X3)) ) | ($spl12 | $spl24 | $spl64)),
  inference(condensation,[],[f41138])).
fof(f41138,plain,(
  ( ! [X216,X215,X213,X217,X214] : (s(fun(X213,bool),X214) = s(fun(X213,bool),X215) | s(bool,'T_0') = s(bool,X216) | s(bool,'T_0') = s(bool,g(s(X213,sK6(X214,X215,bool,X213)))) | s(bool,X217) = s(bool,f(s(X213,sK6(X214,X215,bool,X213)))) | s(bool,'F_0') = s(bool,X217)) ) | ($spl12 | $spl24 | $spl64)),
  inference(subsumption_resolution,[],[f40536,f39])).
fof(f40536,plain,(
  ( ! [X216,X215,X213,X217,X214] : (s(bool,'F_0') != s(bool,X216) | s(fun(X213,bool),X214) = s(fun(X213,bool),X215) | s(bool,'T_0') = s(bool,X216) | s(bool,'T_0') = s(bool,g(s(X213,sK6(X214,X215,bool,X213)))) | s(bool,X217) = s(bool,f(s(X213,sK6(X214,X215,bool,X213)))) | s(bool,'F_0') = s(bool,X217)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f1272,f22516])).
fof(f40413,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,g(s(bool,X20))) | s(bool,'F_0') = s(bool,X21) | s(bool,X20) = s(bool,X22) | s(bool,'F_0') = s(bool,X22)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f20749,f22516])).
fof(f40411,plain,(
  ( ! [X17,X15,X16] : (s(bool,X15) != s(bool,X16) | s(bool,'T_0') = s(bool,g(s(bool,X16))) | s(bool,X15) = s(bool,X17) | s(bool,'F_0') = s(bool,X17)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f12163,f22516])).
fof(f40410,plain,(
  ( ! [X14,X12,X13] : (s(bool,X13) = s(bool,g(s(bool,X12))) | s(bool,'T_0') = s(bool,g(s(bool,X13))) | s(bool,X12) = s(bool,X14) | s(bool,'F_0') = s(bool,X14)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f9692,f22516])).
fof(f40409,plain,(
  ( ! [X10,X11,X9] : (s(bool,X10) != s(bool,g(s(bool,X9))) | s(bool,'T_0') = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f9640,f22516])).
fof(f40284,plain,(
  ( ! [X333,X335,X332,X334] : (s(X334,f(s(bool,X335))) != s(X334,g(s(bool,X335))) | s(fun(bool,X334),X332) = s(fun(bool,X334),X333) | s(bool,'F_0') = s(bool,X335) | s(bool,'F_0') = s(bool,sK6(X332,X333,X334,bool))) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f52,f22516])).
fof(f40103,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X138),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X139),s('type.semanticPrimitives.store_v'('type.modSem.v'),X140))) | s(bool,X141) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X138))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X139))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X140))) | s(bool,'F_0') = s(bool,X141)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f22516,f53])).
fof(f40038,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f22516,f22516])).
fof(f39983,plain,(
  ( ! [X165,X163,X166,X164] : (s(bool,X166) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X163),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X164),s('type.semanticPrimitives.store_v'('type.modSem.v'),X165))) | s(bool,'F_0') = s(bool,X166) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X163))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X164))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X165)))) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f22516,f53])).
fof(f14977,plain,(
  ( ! [X152,X151,X149,X150,X148] : (p(s(bool,happ(s(fun('type.modSem.state'(X148),bool),happ(s(fun('type.semanticPrimitives.state'(X148),fun('type.modSem.state'(X148),bool)),X149),s('type.semanticPrimitives.state'(X148),X151))),s('type.modSem.state'(X148),X150)))) | s(bool,X152) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X148),X151),s('type.modSem.state'(X148),X150))) | s(bool,'T_0') = s(bool,X152) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X148),bool),happ(s(fun('type.semanticPrimitives.state'(X148),fun('type.modSem.state'(X148),bool)),X149),s('type.semanticPrimitives.state'(X148),sK3(X149,X150,X151,X148)))),s('type.modSem.state'(X148),sK4(X149,X150,X151,X148))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f14976,f37])).
fof(f14976,plain,(
  ( ! [X152,X151,X149,X150,X148] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X148),bool),happ(s(fun('type.semanticPrimitives.state'(X148),fun('type.modSem.state'(X148),bool)),X149),s('type.semanticPrimitives.state'(X148),X151))),s('type.modSem.state'(X148),X150)))) | s(bool,X152) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X148),X151),s('type.modSem.state'(X148),X150))) | s(bool,'T_0') = s(bool,X152) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X148),bool),happ(s(fun('type.semanticPrimitives.state'(X148),fun('type.modSem.state'(X148),bool)),X149),s('type.semanticPrimitives.state'(X148),sK3(X149,X150,X151,X148)))),s('type.modSem.state'(X148),sK4(X149,X150,X151,X148))))))) ) | $spl12),
  inference(forward_demodulation,[],[f14962,f218])).
fof(f14962,plain,(
  ( ! [X152,X151,X149,X150,X148] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,happ(s(fun('type.modSem.state'(X148),bool),happ(s(fun('type.semanticPrimitives.state'(X148),fun('type.modSem.state'(X148),bool)),X149),s('type.semanticPrimitives.state'(X148),X151))),s('type.modSem.state'(X148),X150)))) | s(bool,X152) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X148),X151),s('type.modSem.state'(X148),X150))) | s(bool,'T_0') = s(bool,X152) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X148),bool),happ(s(fun('type.semanticPrimitives.state'(X148),fun('type.modSem.state'(X148),bool)),X149),s('type.semanticPrimitives.state'(X148),sK3(X149,X150,X151,X148)))),s('type.modSem.state'(X148),sK4(X149,X150,X151,X148))))))) ) | $spl12),
  inference(superposition,[],[f1689,f9692])).
fof(f10273,plain,(
  ( ! [X64,X65,X63] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X63),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X63))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65)))) ) | $spl12),
  inference(forward_demodulation,[],[f10193,f218])).
fof(f10193,plain,(
  ( ! [X64,X65,X63] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X63),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X63))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65)))) ) | $spl12),
  inference(superposition,[],[f9640,f53])).
fof(f13599,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,g(s(bool,X67))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X64))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X65))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X66))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X64),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X65),s('type.semanticPrimitives.store_v'('type.modSem.v'),X66))) | s(bool,'T_0') = s(bool,X68)) ) | $spl12),
  inference(subsumption_resolution,[],[f13347,f37])).
fof(f13347,plain,(
  ( ! [X68,X66,X64,X67,X65] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X67))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X64))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X65))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X66))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X64),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X65),s('type.semanticPrimitives.store_v'('type.modSem.v'),X66))) | s(bool,'T_0') = s(bool,X68)) ) | $spl12),
  inference(superposition,[],[f510,f1156])).
fof(f14184,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl12),
  inference(forward_demodulation,[],[f14055,f218])).
fof(f14055,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,g(s(bool,'F_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl12),
  inference(condensation,[],[f14054])).
fof(f14054,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,g(s(bool,'F_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X183))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X184))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X185))) | s(bool,'T_0') = s(bool,X182) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X183),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X184),s('type.semanticPrimitives.store_v'('type.modSem.v'),X185)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f13937])).
fof(f13937,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,g(s(bool,'F_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X183))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X184))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X185))) | s(bool,'T_0') = s(bool,X182) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X183),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X184),s('type.semanticPrimitives.store_v'('type.modSem.v'),X185))) | s(bool,'T_0') = s(bool,X182)) ) | $spl12),
  inference(superposition,[],[f9640,f1198])).
fof(f8756,plain,(
  ( ! [X80,X78,X81,X79] : (s(bool,'F_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X78),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X79),s('type.semanticPrimitives.store_v'('type.modSem.v'),X80))) | s(bool,'T_0') = s(bool,X81) | s(bool,X81) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X78))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X79))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X80)))) ) | $spl24),
  inference(superposition,[],[f5993,f53])).
fof(f9245,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X3)) ) | $spl12),
  inference(superposition,[],[f3018,f3018])).
fof(f9246,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,'F_0'))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X4) = s(bool,X7)) ) | $spl12),
  inference(superposition,[],[f3018,f1178])).
fof(f9888,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f9887])).
fof(f9887,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9177])).
fof(f9177,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl12),
  inference(superposition,[],[f3018,f1178])).
fof(f10132,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X33))) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X32) = s(bool,X34)) ) | $spl12),
  inference(subsumption_resolution,[],[f9561,f37])).
fof(f9561,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,X32) = s(bool,g(s(bool,X33))) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X32) = s(bool,X34)) ) | $spl12),
  inference(superposition,[],[f510,f3018])).
fof(f12102,plain,(
  ( ! [X28,X27] : (s(bool,g(s(bool,X27))) = s(bool,g(s(bool,X28))) | s(bool,'T_0') = s(bool,X28) | s(bool,X27) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(subsumption_resolution,[],[f11839,f37])).
fof(f11839,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X27))) = s(bool,g(s(bool,X28))) | s(bool,'T_0') = s(bool,X28) | s(bool,X27) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f510,f9692])).
fof(f22497,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f20749,f39])).
fof(f22711,plain,(
  ( ! [X123,X121,X122] : (s(X123,f(s(bool,'T_0'))) != s(X123,g(s(bool,'T_0'))) | s(fun(bool,X123),X121) = s(fun(bool,X123),X122) | s(bool,'F_0') = s(bool,sK6(X121,X122,X123,bool))) ) | ($spl12 | $spl24 | $spl64)),
  inference(forward_demodulation,[],[f22591,f20634])).
fof(f22591,plain,(
  ( ! [X123,X121,X122] : (s(X123,f(s(bool,g(s(bool,'F_0'))))) != s(X123,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X123),X121) = s(fun(bool,X123),X122) | s(bool,'F_0') = s(bool,sK6(X121,X122,X123,bool))) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f52,f20749])).
fof(f12152,plain,(
  ( ! [X144,X145,X143] : (s(bool,'T_0') != s(bool,f(s(X143,sK6(X144,X145,bool,X143)))) | s(fun(X143,bool),X144) = s(fun(X143,bool),X145) | s(bool,'T_0') = s(bool,g(s(bool,g(s(X143,sK6(X144,X145,bool,X143))))))) ) | $spl12),
  inference(forward_demodulation,[],[f11932,f218])).
fof(f11932,plain,(
  ( ! [X144,X145,X143] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X143,sK6(X144,X145,bool,X143)))) | s(fun(X143,bool),X144) = s(fun(X143,bool),X145) | s(bool,'T_0') = s(bool,g(s(bool,g(s(X143,sK6(X144,X145,bool,X143))))))) ) | $spl12),
  inference(superposition,[],[f52,f9692])).
fof(f12236,plain,(
  ( ! [X111,X114,X112,X113] : (s(fun(X111,bool),X112) = s(fun(X111,bool),X113) | s(bool,X114) = s(bool,g(s(X111,sK6(X112,X113,bool,X111)))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,g(s(bool,f(s(X111,sK6(X112,X113,bool,X111))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f12212,f218])).
fof(f12212,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X111,bool),X112) = s(fun(X111,bool),X113) | s(bool,X114) = s(bool,g(s(X111,sK6(X112,X113,bool,X111)))) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,g(s(bool,f(s(X111,sK6(X112,X113,bool,X111))))))) ) | $spl12),
  inference(superposition,[],[f1394,f9692])).
fof(f766,plain,(
  ( ! [X17,X16] : (s(bool,g(s(bool,X16))) = s(bool,g(s(bool,X17))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X16)) ) | $spl12),
  inference(subsumption_resolution,[],[f756,f37])).
fof(f756,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X16))) = s(bool,g(s(bool,X17))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X16)) ) | $spl12),
  inference(superposition,[],[f510,f450])).
fof(f12150,plain,(
  ( ! [X138,X139,X137] : (s(X139,f(s(bool,'T_0'))) != s(X139,g(s(bool,'T_0'))) | s(fun(bool,X139),X137) = s(fun(bool,X139),X138) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X137,X138,X139,bool))))) ) | $spl12),
  inference(forward_demodulation,[],[f11930,f218])).
fof(f11930,plain,(
  ( ! [X138,X139,X137] : (s(X139,f(s(bool,g(s(bool,'F_0'))))) != s(X139,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X139),X137) = s(fun(bool,X139),X138) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X137,X138,X139,bool))))) ) | $spl12),
  inference(superposition,[],[f52,f9692])).
fof(f19633,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X2))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f19632])).
fof(f19632,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,'T_0') = s(bool,sK6(X81,X82,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X83))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82) | s(bool,'T_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X83)) ) | $spl12),
  inference(subsumption_resolution,[],[f19631,f10195])).
fof(f19631,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,'T_0') = s(bool,sK6(X81,X82,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X83))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82) | s(bool,X84) = s(bool,g(s(bool,sK6(X81,X82,bool,bool)))) | s(bool,'T_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X83)) ) | $spl12),
  inference(forward_demodulation,[],[f12185,f218])).
fof(f12185,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,'T_0') != s(bool,f(s(bool,X83))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82) | s(bool,X84) = s(bool,g(s(bool,sK6(X81,X82,bool,bool)))) | s(bool,'T_0') = s(bool,X84) | s(bool,g(s(bool,'F_0'))) = s(bool,sK6(X81,X82,bool,bool)) | s(bool,'T_0') = s(bool,X83)) ) | $spl12),
  inference(superposition,[],[f1394,f3018])).
fof(f19635,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,sK6(X2,X3,bool,bool))) ) | $spl12),
  inference(condensation,[],[f19634])).
fof(f19634,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(bool,'T_0') != s(bool,f(s(bool,X69))) | s(fun(bool,bool),X67) = s(fun(bool,bool),X68) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,X71) | s(bool,X71) = s(bool,X72) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,sK6(X67,X68,bool,bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f12182,f10195])).
fof(f12182,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(bool,'T_0') != s(bool,f(s(bool,X69))) | s(fun(bool,bool),X67) = s(fun(bool,bool),X68) | s(bool,X70) = s(bool,g(s(bool,sK6(X67,X68,bool,bool)))) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,X71) | s(bool,X71) = s(bool,X72) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,sK6(X67,X68,bool,bool))) )),
  inference(superposition,[],[f1394,f1178])).
fof(f19637,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X2))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(condensation,[],[f19636])).
fof(f19636,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,'T_0') != s(bool,f(s(bool,X57))) | s(fun(bool,bool),X55) = s(fun(bool,bool),X56) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,X59) | s(bool,'T_0') = s(bool,sK6(X55,X56,bool,bool)) | s(bool,X59) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) ) | $spl12),
  inference(subsumption_resolution,[],[f12180,f10195])).
fof(f12180,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,'T_0') != s(bool,f(s(bool,X57))) | s(fun(bool,bool),X55) = s(fun(bool,bool),X56) | s(bool,X58) = s(bool,g(s(bool,sK6(X55,X56,bool,bool)))) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,X59) | s(bool,'T_0') = s(bool,sK6(X55,X56,bool,bool)) | s(bool,X59) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f1394,f1178])).
fof(f19641,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X2))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f19640])).
fof(f19640,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') != s(bool,f(s(bool,X16))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK6(X14,X15,bool,bool)) | s(bool,'T_0') = s(bool,X16)) ) | $spl12),
  inference(subsumption_resolution,[],[f12172,f10195])).
fof(f12172,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') != s(bool,f(s(bool,X16))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,X17) = s(bool,g(s(bool,sK6(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK6(X14,X15,bool,bool)) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f1394,f54])).
fof(f19643,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,sK6(X1,X2,bool,bool))) ) | $spl12),
  inference(condensation,[],[f19642])).
fof(f19642,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,X12))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,sK6(X10,X11,bool,bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f12171,f10195])).
fof(f12171,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,X12))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,X13) = s(bool,g(s(bool,sK6(X10,X11,bool,bool)))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,sK6(X10,X11,bool,bool))) )),
  inference(superposition,[],[f1394,f54])).
fof(f22712,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') != s(bool,f(s(X124,sK6(X125,X126,bool,X124)))) | s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,'F_0') = s(bool,g(s(X124,sK6(X125,X126,bool,X124))))) ) | ($spl12 | $spl24 | $spl64)),
  inference(forward_demodulation,[],[f22592,f20634])).
fof(f22592,plain,(
  ( ! [X125,X126,X124] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X124,sK6(X125,X126,bool,X124)))) | s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,'F_0') = s(bool,g(s(X124,sK6(X125,X126,bool,X124))))) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f52,f20749])).
fof(f510,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X6) = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(subsumption_resolution,[],[f497,f37])).
fof(f497,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X6) = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(superposition,[],[f51,f450])).
fof(f12115,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X5)))) ) | $spl12),
  inference(subsumption_resolution,[],[f12114,f37])).
fof(f12114,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X5)))) ) | $spl12),
  inference(forward_demodulation,[],[f11869,f218])).
fof(f11869,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X5)))) ) | $spl12),
  inference(superposition,[],[f51,f9692])).
fof(f12155,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl12),
  inference(condensation,[],[f12154])).
fof(f12154,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,X12) | p(s(bool,X11)) | s(bool,'T_0') = s(bool,g(s(bool,X11)))) ) | $spl12),
  inference(subsumption_resolution,[],[f12153,f56])).
fof(f12153,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,X12) | p(s(bool,X11)) | p(s(bool,X12)) | s(bool,'T_0') = s(bool,g(s(bool,X11)))) ) | $spl12),
  inference(forward_demodulation,[],[f11940,f218])).
fof(f11940,plain,(
  ( ! [X12,X11] : (p(s(bool,X11)) | p(s(bool,X12)) | s(bool,X12) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X11)))) ) | $spl12),
  inference(superposition,[],[f48,f9692])).
fof(f12140,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,happ(s(fun('type.modSem.state'(X104),bool),happ(s(fun('type.semanticPrimitives.state'(X104),fun('type.modSem.state'(X104),bool)),X107),s('type.semanticPrimitives.state'(X104),sK3(X107,X106,X105,X104)))),s('type.modSem.state'(X104),sK4(X107,X106,X105,X104))))) | p(s(bool,happ(s(fun('type.modSem.state'(X104),bool),happ(s(fun('type.semanticPrimitives.state'(X104),fun('type.modSem.state'(X104),bool)),X107),s('type.semanticPrimitives.state'(X104),X105))),s('type.modSem.state'(X104),X106)))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X104),X105),s('type.modSem.state'(X104),X106)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f12139,f37])).
fof(f12139,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X104),bool),happ(s(fun('type.semanticPrimitives.state'(X104),fun('type.modSem.state'(X104),bool)),X107),s('type.semanticPrimitives.state'(X104),sK3(X107,X106,X105,X104)))),s('type.modSem.state'(X104),sK4(X107,X106,X105,X104))))) | p(s(bool,happ(s(fun('type.modSem.state'(X104),bool),happ(s(fun('type.semanticPrimitives.state'(X104),fun('type.modSem.state'(X104),bool)),X107),s('type.semanticPrimitives.state'(X104),X105))),s('type.modSem.state'(X104),X106)))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X104),X105),s('type.modSem.state'(X104),X106)))))) ) | $spl12),
  inference(forward_demodulation,[],[f11921,f218])).
fof(f11921,plain,(
  ( ! [X107,X105,X106,X104] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X104),bool),happ(s(fun('type.semanticPrimitives.state'(X104),fun('type.modSem.state'(X104),bool)),X107),s('type.semanticPrimitives.state'(X104),sK3(X107,X106,X105,X104)))),s('type.modSem.state'(X104),sK4(X107,X106,X105,X104))))) | p(s(bool,happ(s(fun('type.modSem.state'(X104),bool),happ(s(fun('type.semanticPrimitives.state'(X104),fun('type.modSem.state'(X104),bool)),X107),s('type.semanticPrimitives.state'(X104),X105))),s('type.modSem.state'(X104),X106)))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X104),X105),s('type.modSem.state'(X104),X106)))))) ) | $spl12),
  inference(superposition,[],[f45,f9692])).
fof(f12142,plain,(
  ( ! [X109,X110,X108] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X108),X110),s('type.modSem.state'(X108),X109)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X108),bool),happ(s(fun('type.semanticPrimitives.state'(X108),fun('type.modSem.state'(X108),bool)),sK5(X109,X110,X108)),s('type.semanticPrimitives.state'(X108),X110))),s('type.modSem.state'(X108),X109)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f12141,f37])).
fof(f12141,plain,(
  ( ! [X109,X110,X108] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X108),X110),s('type.modSem.state'(X108),X109)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X108),bool),happ(s(fun('type.semanticPrimitives.state'(X108),fun('type.modSem.state'(X108),bool)),sK5(X109,X110,X108)),s('type.semanticPrimitives.state'(X108),X110))),s('type.modSem.state'(X108),X109)))))) ) | $spl12),
  inference(forward_demodulation,[],[f11922,f218])).
fof(f11922,plain,(
  ( ! [X109,X110,X108] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X108),X110),s('type.modSem.state'(X108),X109)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X108),bool),happ(s(fun('type.semanticPrimitives.state'(X108),fun('type.modSem.state'(X108),bool)),sK5(X109,X110,X108)),s('type.semanticPrimitives.state'(X108),X110))),s('type.modSem.state'(X108),X109)))))) ) | $spl12),
  inference(superposition,[],[f47,f9692])).
fof(f491,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7)))) ) | $spl12),
  inference(superposition,[],[f450,f53])).
fof(f18680,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f18679])).
fof(f18679,plain,(
  ( ! [X227,X228,X226] : (s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X228) | s(bool,X227) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,g(s(bool,X226)))) ) | $spl12),
  inference(subsumption_resolution,[],[f16776,f9640])).
fof(f16776,plain,(
  ( ! [X227,X228,X226] : (s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X228) | s(bool,X227) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X228) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X226)))) ) | $spl12),
  inference(superposition,[],[f5666,f9692])).
fof(f20634,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl12),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f766,f510,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f3018,f284,f218,f213,f212,f75,f38,f9888,f9884,f9858,f9839,f9245,f9246,f9807,f9692,f10132,f9612,f9640,f10249,f10195,f11775,f11792,f12102,f12115,f12140,f12142,f12150,f12152,f11934,f12155,f12220,f12218,f12236,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f18730,f16934,f18750,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19079,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f13559,f13571,f13380,f14184,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19377,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19340,f17696,f19304,f19178,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f11738])).
fof(f11738,plain,(
  ( ! [X41,X42] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X41) = s(bool,g(s(bool,'F_0'))) | s(bool,X42) = s(bool,g(s(bool,X41))) | s(bool,'T_0') = s(bool,X42)) ) | $spl12),
  inference(superposition,[],[f9692,f3018])).
fof(f19180,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19179])).
fof(f19179,plain,(
  ( ! [X198,X199,X197] : (s(bool,'T_0') = s(bool,g(s(bool,X197))) | s(bool,'T_0') = s(bool,X198) | s(bool,X199) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X197) = s(bool,X199)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f17751,f39])).
fof(f17751,plain,(
  ( ! [X198,X199,X197] : (s(bool,'F_0') != s(bool,X198) | s(bool,'T_0') = s(bool,g(s(bool,X197))) | s(bool,'T_0') = s(bool,X198) | s(bool,X199) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X197) = s(bool,X199)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f5666])).
fof(f19178,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19177])).
fof(f19177,plain,(
  ( ! [X196,X194,X195] : (s(bool,'T_0') = s(bool,g(s(bool,X194))) | s(bool,'T_0') = s(bool,X195) | s(bool,X196) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X194) = s(bool,X196)) ) | $spl12),
  inference(subsumption_resolution,[],[f17750,f56])).
fof(f17750,plain,(
  ( ! [X196,X194,X195] : (p(s(bool,X195)) | s(bool,'T_0') = s(bool,g(s(bool,X194))) | s(bool,'T_0') = s(bool,X195) | s(bool,X196) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X194) = s(bool,X196)) ) | $spl12),
  inference(superposition,[],[f12155,f5666])).
fof(f19304,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19303])).
fof(f19303,plain,(
  ( ! [X165,X163,X164] : (s(bool,'T_0') = s(bool,g(s(bool,X163))) | s(bool,'T_0') = s(bool,X164) | s(bool,X165) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X163) = s(bool,X165)) ) | $spl12),
  inference(subsumption_resolution,[],[f17740,f9640])).
fof(f17740,plain,(
  ( ! [X165,X163,X164] : (s(bool,X164) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X163))) | s(bool,'T_0') = s(bool,X164) | s(bool,X165) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X163) = s(bool,X165)) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f17644,plain,(
  ( ! [X318,X320,X319] : (s(bool,X318) != s(bool,X319) | s(bool,'T_0') = s(bool,g(s(bool,X319))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X320) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X318) = s(bool,X320)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f5666])).
fof(f17641,plain,(
  ( ! [X310,X309,X311] : (s(bool,X310) = s(bool,g(s(bool,X309))) | s(bool,'T_0') = s(bool,g(s(bool,X310))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X311) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X309) = s(bool,X311)) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f17639,plain,(
  ( ! [X304,X303,X305] : (s(bool,X304) != s(bool,g(s(bool,X303))) | s(bool,'T_0') = s(bool,X304) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X305) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X303) = s(bool,X305)) ) | $spl12),
  inference(superposition,[],[f9640,f5666])).
fof(f17637,plain,(
  ( ! [X300,X298,X297,X299] : (s(bool,X297) != s(bool,X298) | s(bool,'T_0') = s(bool,X299) | s(bool,X298) = s(bool,X299) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X300) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X297) = s(bool,X300)) ) | $spl24),
  inference(superposition,[],[f5993,f5666])).
fof(f17636,plain,(
  ( ! [X294,X296,X293,X295] : (s(bool,X294) = s(bool,g(s(bool,X293))) | s(bool,X294) = s(bool,X295) | s(bool,'T_0') = s(bool,X295) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X296) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X293) = s(bool,X296)) ) | $spl12),
  inference(superposition,[],[f3018,f5666])).
fof(f17635,plain,(
  ( ! [X292,X291] : (s(bool,'T_0') = s(bool,g(s(bool,X291))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X292) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X291) = s(bool,X292)) ) | $spl12),
  inference(superposition,[],[f218,f5666])).
fof(f19083,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19082])).
fof(f19082,plain,(
  ( ! [X167,X166,X168] : (s(bool,'T_0') = s(bool,g(s(bool,X167))) | s(bool,'T_0') = s(bool,X166) | s(bool,X168) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X167) = s(bool,X168)) ) | $spl12),
  inference(subsumption_resolution,[],[f17596,f9640])).
fof(f17596,plain,(
  ( ! [X167,X166,X168] : (s(bool,'T_0') = s(bool,g(s(bool,X167))) | s(bool,X166) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X166) | s(bool,X168) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X167) = s(bool,X168)) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f18010,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f18009])).
fof(f18009,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') = s(bool,g(s(bool,X45))) | s(bool,'T_0') = s(bool,X44) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X45) = s(bool,X46)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f17569])).
fof(f17569,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') = s(bool,g(s(bool,X45))) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X45) = s(bool,X46)) ) | $spl12),
  inference(superposition,[],[f450,f5666])).
fof(f19369,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f19368])).
fof(f19368,plain,(
  ( ! [X428,X430,X429] : (s(bool,X428) != s(bool,X429) | s(bool,'T_0') = s(bool,X429) | s(bool,'T_0') = s(bool,X430) | s(bool,X428) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f17529,f9640])).
fof(f17529,plain,(
  ( ! [X428,X430,X429] : (s(bool,X428) != s(bool,X429) | s(bool,'T_0') = s(bool,X429) | s(bool,'T_0') = s(bool,X430) | s(bool,X428) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X430) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f9640,f5666])).
fof(f19049,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f19048])).
fof(f19048,plain,(
  ( ! [X422,X424,X423] : (s(bool,X422) = s(bool,X423) | s(bool,'T_0') = s(bool,g(s(bool,X423))) | s(bool,'T_0') = s(bool,X424) | s(bool,X422) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f17527,f9640])).
fof(f17527,plain,(
  ( ! [X422,X424,X423] : (s(bool,X422) = s(bool,X423) | s(bool,'T_0') = s(bool,g(s(bool,X423))) | s(bool,'T_0') = s(bool,X424) | s(bool,X422) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X424) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f18807,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(forward_demodulation,[],[f18806,f218])).
fof(f18806,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(forward_demodulation,[],[f18176,f75])).
fof(f18176,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f18175])).
fof(f18175,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f18174])).
fof(f18174,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f17142])).
fof(f17142,plain,(
  ( ! [X154,X152,X153] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X152) | s(bool,'T_0') = s(bool,X153) | s(bool,X152) = s(bool,X154) | s(bool,X153) = s(bool,X154)) ) | $spl12),
  inference(superposition,[],[f9640,f5666])).
fof(f18768,plain,(
  ( ! [X310,X312,X311] : (s(bool,'T_0') = s(bool,g(s(bool,X310))) | s(bool,X311) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X311) = s(bool,X312) | s(bool,'F_0') = s(bool,X312)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f17062,f450])).
fof(f17062,plain,(
  ( ! [X310,X312,X311] : (s(bool,'T_0') != s(bool,X310) | s(bool,'T_0') = s(bool,g(s(bool,X310))) | s(bool,X311) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X311) = s(bool,X312) | s(bool,'F_0') = s(bool,X312)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f5666])).
fof(f17059,plain,(
  ( ! [X302,X301,X303] : (s(bool,X301) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X301))) | s(bool,X302) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X302) = s(bool,X303) | s(bool,'F_0') = s(bool,X303)) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f18766,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl24),
  inference(condensation,[],[f18765])).
fof(f18765,plain,(
  ( ! [X292,X290,X289,X291] : (s(bool,'T_0') = s(bool,X290) | s(bool,X289) = s(bool,X290) | s(bool,X291) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X291) = s(bool,X292) | s(bool,'F_0') = s(bool,X292)) ) | $spl24),
  inference(subsumption_resolution,[],[f17055,f54])).
fof(f17055,plain,(
  ( ! [X292,X290,X289,X291] : (s(bool,'T_0') != s(bool,X289) | s(bool,'T_0') = s(bool,X290) | s(bool,X289) = s(bool,X290) | s(bool,X291) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X291) = s(bool,X292) | s(bool,'F_0') = s(bool,X292)) ) | $spl24),
  inference(superposition,[],[f5993,f5666])).
fof(f17054,plain,(
  ( ! [X288,X285,X287,X286] : (s(bool,X285) = s(bool,g(s(bool,'T_0'))) | s(bool,X285) = s(bool,X286) | s(bool,'T_0') = s(bool,X286) | s(bool,X287) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X287) = s(bool,X288) | s(bool,'F_0') = s(bool,X288)) ) | $spl12),
  inference(superposition,[],[f3018,f5666])).
fof(f17053,plain,(
  ( ! [X283,X284] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X283) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X283) = s(bool,X284) | s(bool,'F_0') = s(bool,X284)) ) | $spl12),
  inference(superposition,[],[f218,f5666])).
fof(f17024,plain,(
  ( ! [X180,X178,X179] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X178))) | s(bool,X179) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X179) = s(bool,X180) | s(bool,X178) = s(bool,X180)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f5666])).
fof(f17005,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X120) | s(bool,X119) = s(bool,X120) | s(bool,X121) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X121) = s(bool,X122) | s(bool,X119) = s(bool,X122)) ) | $spl24),
  inference(superposition,[],[f5993,f5666])).
fof(f19435,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19434])).
fof(f19434,plain,(
  ( ! [X134,X136,X135] : (s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X134) = s(bool,X136) | s(bool,'T_0') = s(bool,g(s(bool,X134)))) ) | $spl12),
  inference(subsumption_resolution,[],[f16888,f9640])).
fof(f16888,plain,(
  ( ! [X134,X136,X135] : (s(bool,X135) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X134) = s(bool,X136) | s(bool,'T_0') = s(bool,g(s(bool,X134)))) ) | $spl12),
  inference(superposition,[],[f5666,f9692])).
fof(f19541,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19540])).
fof(f19540,plain,(
  ( ! [X229,X227,X230,X228] : (s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X227),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X228),s('type.semanticPrimitives.store_v'('type.modSem.v'),X229))))) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X230)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f19539,f11934])).
fof(f19539,plain,(
  ( ! [X229,X227,X230,X228] : (s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X227),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X228),s('type.semanticPrimitives.store_v'('type.modSem.v'),X229))))) | s(bool,'T_0') != s(bool,'F_0') | s(bool,X230) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X227),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X228),s('type.semanticPrimitives.store_v'('type.modSem.v'),X229))) | s(bool,'T_0') = s(bool,X230)) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f13378,f53])).
fof(f13378,plain,(
  ( ! [X229,X227,X230,X228] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X227))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X228))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X229))))) | s(bool,X230) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X227),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X228),s('type.semanticPrimitives.store_v'('type.modSem.v'),X229))) | s(bool,'T_0') = s(bool,X230)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f1156])).
fof(f13359,plain,(
  ( ! [X152,X151,X149,X150,X148] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X151) | s(bool,X151) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X148))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X149))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X150))) | s(bool,X152) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X148),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X149),s('type.semanticPrimitives.store_v'('type.modSem.v'),X150))) | s(bool,'T_0') = s(bool,X152)) ) | $spl24),
  inference(superposition,[],[f5993,f1156])).
fof(f13559,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl12),
  inference(forward_demodulation,[],[f13424,f218])).
fof(f13424,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl12),
  inference(condensation,[],[f13423])).
fof(f13423,plain,(
  ( ! [X187,X185,X186,X184] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X185),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X186),s('type.semanticPrimitives.store_v'('type.modSem.v'),X187))) | s(bool,'T_0') = s(bool,X184) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X185))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X186))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X187)))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f13245])).
fof(f13245,plain,(
  ( ! [X187,X185,X186,X184] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X185),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X186),s('type.semanticPrimitives.store_v'('type.modSem.v'),X187))) | s(bool,'T_0') = s(bool,X184) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X185))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X186))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X187))) | s(bool,'T_0') = s(bool,X184)) ) | $spl12),
  inference(superposition,[],[f9640,f1156])).
fof(f12377,plain,(
  ( ! [X65] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X65))))) | s(bool,'T_0') = s(bool,X65)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f450])).
fof(f19604,plain,(
  ( ! [X64] : (s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X64)))))) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f12376,f218])).
fof(f12376,plain,(
  ( ! [X64] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X64))))) | s(bool,X64) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f9692])).
fof(f12418,plain,(
  ( ! [X51] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X51)))) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f12394,f218])).
fof(f12394,plain,(
  ( ! [X51] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X51)))) ) | ($spl12 | $spl24)),
  inference(duplicate_literal_removal,[],[f12366])).
fof(f12366,plain,(
  ( ! [X51] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X51))) | s(bool,'T_0') = s(bool,g(s(bool,X51)))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f9692])).
fof(f12362,plain,(
  ( ! [X45,X44] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X44))) | s(bool,X45) = s(bool,g(s(bool,'F_0'))) | s(bool,X44) = s(bool,X45)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f3018])).
fof(f12415,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f12414,f218])).
fof(f12414,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'F_0') != s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f12413])).
fof(f12413,plain,(
  ( ! [X43,X42] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X42))) | s(bool,'T_0') = s(bool,X43)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12361,f11934])).
fof(f12361,plain,(
  ( ! [X43,X42] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X42))) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f3018])).
fof(f12356,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X22))) | s(bool,X23) = s(bool,X24) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X22) = s(bool,X23)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f1178])).
fof(f12355,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X18))) | s(bool,X19) = s(bool,X20) | s(bool,X18) = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f1178])).
fof(f19612,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19611])).
fof(f19611,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12351,f11934])).
fof(f12351,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X7))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f54])).
fof(f19615,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19614])).
fof(f19614,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12348,f11934])).
fof(f12348,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f54])).
fof(f12346,plain,(
  ( ! [X47,X48] : (s(bool,X47) != s(bool,X48) | s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f3018])).
fof(f12343,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X39) != s(bool,X40) | s(bool,'T_0') = s(bool,g(s(bool,X40))) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f1178])).
fof(f12341,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X31) != s(bool,X32) | s(bool,'T_0') = s(bool,g(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f1178])).
fof(f19652,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19651])).
fof(f19651,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X71) | s(bool,'T_0') = s(bool,g(s(bool,X70)))) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12124,f11934])).
fof(f12124,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X71) | s(bool,X70) = s(bool,X71) | s(bool,'T_0') = s(bool,g(s(bool,X70)))) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f11894,f218])).
fof(f11894,plain,(
  ( ! [X70,X71] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X71) | s(bool,X70) = s(bool,X71) | s(bool,'T_0') = s(bool,g(s(bool,X70)))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f9692])).
fof(f11851,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X70) | s(bool,X70) = s(bool,g(s(bool,X69))) | s(bool,X69) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f9692])).
fof(f19656,plain,(
  ( ! [X61,X59,X60] : (s(bool,X60) = s(bool,g(s(bool,X59))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,X59) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(subsumption_resolution,[],[f11847,f37])).
fof(f11847,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,g(s(bool,X59))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,X59) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f1687,f9692])).
fof(f11993,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,X2))) | s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(condensation,[],[f11992])).
fof(f11992,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,g(s(bool,X47))) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f11844])).
fof(f11844,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,g(s(bool,X47))) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f1178,f9692])).
fof(f11999,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,X2))) | s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(condensation,[],[f11998])).
fof(f11998,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,g(s(bool,X39))) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f11842])).
fof(f11842,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,g(s(bool,X39))) | s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f1178,f9692])).
fof(f11791,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f9692,f3018])).
fof(f11788,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) = s(bool,g(s(bool,X39))) | s(bool,'T_0') = s(bool,g(s(bool,X40))) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f9692,f1178])).
fof(f11786,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,g(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl12),
  inference(superposition,[],[f9692,f1178])).
fof(f12015,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f12014])).
fof(f12014,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,g(s(bool,'F_0'))) | s(bool,X35) = s(bool,g(s(bool,X33))) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f11736])).
fof(f11736,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,g(s(bool,'F_0'))) | s(bool,X35) = s(bool,g(s(bool,X33))) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X34)) ) | $spl12),
  inference(superposition,[],[f9692,f1178])).
fof(f12021,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f12020])).
fof(f12020,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'T_0') = s(bool,X26) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,X27) = s(bool,g(s(bool,X25))) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f11734])).
fof(f11734,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'T_0') = s(bool,X26) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,X27) = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl12),
  inference(superposition,[],[f9692,f1178])).
fof(f10211,plain,(
  ( ! [X47,X48] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f9640,f3018])).
fof(f10208,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) != s(bool,g(s(bool,X39))) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f9640,f1178])).
fof(f10206,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) != s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl12),
  inference(superposition,[],[f9640,f1178])).
fof(f10185,plain,(
  ( ! [X56] : (s(bool,X56) != s(bool,g(s(bool,X56))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X56)) ) | $spl12),
  inference(superposition,[],[f9640,f39])).
fof(f10266,plain,(
  ( ! [X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(forward_demodulation,[],[f10265,f218])).
fof(f10265,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(forward_demodulation,[],[f10254,f75])).
fof(f10254,plain,(
  ( ! [X9] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f10171])).
fof(f10171,plain,(
  ( ! [X9] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(superposition,[],[f9640,f146])).
fof(f10264,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(forward_demodulation,[],[f10259,f218])).
fof(f10259,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f10166])).
fof(f10166,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f9640,f39])).
fof(f9631,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(equality_factoring,[],[f3018])).
fof(f9635,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') != s(bool,X0)) ) | $spl12),
  inference(condensation,[],[f9625])).
fof(f9625,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl12),
  inference(equality_factoring,[],[f3018])).
fof(f9641,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9617])).
fof(f9617,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(equality_factoring,[],[f3018])).
fof(f19682,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19681])).
fof(f19681,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19680])).
fof(f19680,plain,(
  ( ! [X72,X71,X73] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X72) | s(bool,X71) = s(bool,X72) | s(bool,X71) = s(bool,X73)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f9569,f10249])).
fof(f9569,plain,(
  ( ! [X72,X71,X73] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X72) | s(bool,X71) = s(bool,X72) | s(bool,X73) = s(bool,g(s(bool,'F_0'))) | s(bool,X71) = s(bool,X73)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f3018])).
fof(f9486,plain,(
  ( ! [X134,X135,X133] : (s(bool,X133) != s(bool,X134) | s(bool,'T_0') = s(bool,X135) | s(bool,X134) = s(bool,X135) | s(bool,X133) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f3018])).
fof(f10005,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl24)),
  inference(forward_demodulation,[],[f9773,f218])).
fof(f9773,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f9772])).
fof(f9772,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl24)),
  inference(duplicate_literal_removal,[],[f9771])).
fof(f9771,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f9310])).
fof(f9310,plain,(
  ( ! [X85,X83,X84] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X84) | s(bool,X83) = s(bool,X84) | s(bool,X83) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f3018])).
fof(f9147,plain,(
  ( ! [X64,X65,X63] : (s(bool,X64) = s(bool,g(s(bool,X63))) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65) | s(bool,X63) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f3018,f3018])).
fof(f9144,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X53) = s(bool,g(s(bool,X52))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54) | s(bool,X52) = s(bool,X55) | s(bool,X55) = s(bool,X56) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f3018,f1178])).
fof(f9142,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,X43) = s(bool,g(s(bool,X42))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl12),
  inference(superposition,[],[f3018,f1178])).
fof(f8753,plain,(
  ( ! [X74] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X74) | s(bool,X74) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) ) | $spl24),
  inference(superposition,[],[f5993,f151])).
fof(f19703,plain,(
  ( ! [X70] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X70)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f8750,f9640])).
fof(f8750,plain,(
  ( ! [X70] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X70) | s(bool,X70) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f218])).
fof(f19706,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19705])).
fof(f19705,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X68)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f8749,f10195])).
fof(f8749,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X69) | s(bool,X69) = s(bool,g(s(bool,X68))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f450])).
fof(f8765,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl24),
  inference(condensation,[],[f8764])).
fof(f8764,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X3)) ) | $spl24),
  inference(duplicate_literal_removal,[],[f8763])).
fof(f8763,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl24),
  inference(condensation,[],[f8762])).
fof(f8762,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(condensation,[],[f8739])).
fof(f8739,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,X31) = s(bool,X33)) ) | $spl24),
  inference(superposition,[],[f5993,f1178])).
fof(f8769,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl24),
  inference(condensation,[],[f8768])).
fof(f8768,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(duplicate_literal_removal,[],[f8767])).
fof(f8767,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(condensation,[],[f8766])).
fof(f8766,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl24),
  inference(condensation,[],[f8738])).
fof(f8738,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl24),
  inference(superposition,[],[f5993,f1178])).
fof(f8780,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl24),
  inference(condensation,[],[f8779])).
fof(f8779,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(duplicate_literal_removal,[],[f8778])).
fof(f8778,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(condensation,[],[f8734])).
fof(f8734,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X12) | s(bool,X11) = s(bool,X12) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl24),
  inference(superposition,[],[f5993,f54])).
fof(f8783,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl24),
  inference(condensation,[],[f8782])).
fof(f8782,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(duplicate_literal_removal,[],[f8781])).
fof(f8781,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(condensation,[],[f8731])).
fof(f8731,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X3) | s(bool,X2) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl24),
  inference(superposition,[],[f5993,f54])).
fof(f8729,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X52) != s(bool,X53) | s(bool,'T_0') = s(bool,X54) | s(bool,X53) = s(bool,X54) | s(bool,X52) = s(bool,X55) | s(bool,X55) = s(bool,X56) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl24),
  inference(superposition,[],[f5993,f1178])).
fof(f8727,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,X42) != s(bool,X43) | s(bool,'T_0') = s(bool,X44) | s(bool,X43) = s(bool,X44) | s(bool,X42) = s(bool,X45) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl24),
  inference(superposition,[],[f5993,f1178])).
fof(f11789,plain,(
  ( ! [X43,X44] : (s(bool,X43) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X43))) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | $spl12),
  inference(superposition,[],[f9692,f3018])).
fof(f10135,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f10134])).
fof(f10134,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') = s(bool,X120) | s(bool,X119) = s(bool,X120) | s(bool,X121) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X121)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f9590,f54])).
fof(f9590,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') != s(bool,X119) | s(bool,'T_0') = s(bool,X120) | s(bool,X119) = s(bool,X120) | s(bool,X121) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X121)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f5993,f3018])).
fof(f9589,plain,(
  ( ! [X118] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X118) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X118)) ) | $spl12),
  inference(superposition,[],[f218,f3018])).
fof(f9649,plain,(
  ( ! [X116,X115] : (s(bool,'T_0') = s(bool,X115) | s(bool,X116) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X116)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9587])).
fof(f9587,plain,(
  ( ! [X116,X115] : (s(bool,'T_0') = s(bool,X115) | s(bool,'T_0') = s(bool,X115) | s(bool,X116) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X116)) ) | $spl12),
  inference(superposition,[],[f39,f3018])).
fof(f19898,plain,(
  ( ! [X114] : (s(bool,X114) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X114)) ) | $spl12),
  inference(subsumption_resolution,[],[f9586,f37])).
fof(f9586,plain,(
  ( ! [X114] : (~p(s(bool,'T_0')) | s(bool,X114) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X114)) ) | $spl12),
  inference(superposition,[],[f38,f3018])).
fof(f19900,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,'T_0') = s(bool,X213) | s(bool,X213) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,sK6(X214,X215,bool,bool)) | s(bool,'T_0') = s(bool,X216) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl12),
  inference(forward_demodulation,[],[f9514,f218])).
fof(f9514,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,X213) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,sK6(X214,X215,bool,bool)) | s(bool,'T_0') = s(bool,X216) | s(bool,X213) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl12),
  inference(superposition,[],[f1393,f3018])).
fof(f9700,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9441])).
fof(f9441,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f39,f3018])).
fof(f9806,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X62)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9279])).
fof(f9279,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X62) | s(bool,'T_0') = s(bool,X61)) ) | $spl12),
  inference(superposition,[],[f3018,f39])).
fof(f9145,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) = s(bool,g(s(bool,'T_0'))) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X59)) ) | $spl12),
  inference(superposition,[],[f3018,f3018])).
fof(f19954,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X213) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,sK6(X214,X215,bool,bool)) | s(bool,'T_0') = s(bool,X216) | s(bool,'T_0') = s(bool,X213)) ) | $spl12),
  inference(forward_demodulation,[],[f9440,f218])).
fof(f9440,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,X213) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,sK6(X214,X215,bool,bool)) | s(bool,'T_0') = s(bool,X216) | s(bool,g(s(bool,'T_0'))) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X213)) ) | $spl12),
  inference(superposition,[],[f1393,f3018])).
fof(f18751,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X41) = s(bool,g(s(bool,X42))) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X43) = s(bool,X44) | s(bool,X41) = s(bool,X44)) ) | $spl12),
  inference(subsumption_resolution,[],[f16991,f37])).
fof(f16991,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X41) = s(bool,g(s(bool,X42))) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X43) = s(bool,X44) | s(bool,X41) = s(bool,X44)) ) | $spl12),
  inference(superposition,[],[f510,f5666])).
fof(f18714,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,g(s(bool,X0)))) ) | $spl12),
  inference(condensation,[],[f18713])).
fof(f18713,plain,(
  ( ! [X218,X219,X217] : (s(bool,'T_0') = s(bool,X217) | s(bool,'T_0') = s(bool,X218) | s(bool,X219) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X219) = s(bool,g(s(bool,X217)))) ) | $spl12),
  inference(forward_demodulation,[],[f18306,f218])).
fof(f18306,plain,(
  ( ! [X218,X219,X217] : (s(bool,'T_0') = s(bool,X218) | s(bool,X219) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X219) = s(bool,g(s(bool,X217))) | s(bool,X217) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f16911])).
fof(f16911,plain,(
  ( ! [X218,X219,X217] : (s(bool,'T_0') = s(bool,X218) | s(bool,'T_0') = s(bool,X218) | s(bool,X219) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X219) = s(bool,g(s(bool,X217))) | s(bool,X217) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f5666,f9692])).
fof(f18600,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,X10) | s(bool,X6) = s(bool,X7) | s(bool,X8) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X8) = s(bool,X9) | s(bool,X7) = s(bool,X9) | s(bool,X6) = s(bool,X10)) ) | $spl12),
  inference(forward_demodulation,[],[f16502,f218])).
fof(f16502,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,X6) = s(bool,X7) | s(bool,X8) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X8) = s(bool,X9) | s(bool,X7) = s(bool,X9) | s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,X6) = s(bool,X10)) ) | $spl12),
  inference(superposition,[],[f5666,f3018])).
fof(f11792,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl12),
  inference(superposition,[],[f9692,f9692])).
fof(f11775,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f9692,f39])).
fof(f6324,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f6323])).
fof(f6323,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f6322])).
fof(f6322,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f6321])).
fof(f6321,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK6(X0,X1,bool,bool)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl12),
  inference(condensation,[],[f6320])).
fof(f6320,plain,(
  ( ! [X408,X405,X407,X409,X406] : (s(bool,'T_0') = s(bool,X407) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X405) = s(fun(bool,bool),X406) | s(bool,'T_0') = s(bool,sK6(X405,X406,bool,bool)) | s(bool,X407) = s(bool,X408) | s(bool,X408) = s(bool,X409) | s(bool,'T_0') = s(bool,X409)) ) | $spl12),
  inference(forward_demodulation,[],[f4620,f218])).
fof(f6256,plain,(
  ( ! [X37,X38,X36] : (s(bool,g(s(bool,X38))) = s(bool,sK6(X36,X37,bool,bool)) | s(bool,'T_0') = s(bool,X38) | s(fun(bool,bool),X36) = s(fun(bool,bool),X37)) ) | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f6194,f37])).
fof(f6194,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X38))) = s(bool,sK6(X36,X37,bool,bool)) | s(bool,'T_0') = s(bool,X38) | s(fun(bool,bool),X36) = s(fun(bool,bool),X37)) ) | ($spl12 | $spl14)),
  inference(superposition,[],[f510,f219])).
fof(f6255,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6(X8,X9,bool,bool)) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | $spl14),
  inference(subsumption_resolution,[],[f6184,f37])).
fof(f6184,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6(X8,X9,bool,bool)) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | $spl14),
  inference(superposition,[],[f51,f219])).
fof(f6248,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X0) = s(bool,X3)) ) | $spl14),
  inference(condensation,[],[f6247])).
fof(f6247,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,X37) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,X38) = s(bool,sK6(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl14),
  inference(duplicate_literal_removal,[],[f6177])).
fof(f6177,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,X37) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,X38) = s(bool,sK6(X35,X36,bool,bool)) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl14),
  inference(superposition,[],[f219,f1178])).
fof(f6098,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,X60) = s(bool,g(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,X63) | s(bool,X60) = s(bool,X63) | s(bool,X62) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) ) | $spl12),
  inference(subsumption_resolution,[],[f4225,f37])).
fof(f4225,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,g(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,X63) | s(bool,X60) = s(bool,X63) | s(bool,X62) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) ) | $spl12),
  inference(superposition,[],[f510,f1178])).
fof(f5084,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f5083])).
fof(f5083,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,'T_0') = s(bool,g(s(bool,X57))) | s(bool,'T_0') = s(bool,X56) | s(bool,X57) = s(bool,X58) | s(bool,X58) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f4095])).
fof(f4095,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,'T_0') = s(bool,g(s(bool,X57))) | s(bool,'T_0') = s(bool,X56) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X56) | s(bool,X58) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) ) | $spl12),
  inference(superposition,[],[f450,f1178])).
fof(f1688,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) = s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl12),
  inference(subsumption_resolution,[],[f1355,f37])).
fof(f1355,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,g(s(bool,X27))) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl12),
  inference(superposition,[],[f510,f54])).
fof(f503,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') != s(bool,f(s(bool,sK6(X14,X15,bool,bool)))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,sK6(X14,X15,bool,bool))) ) | $spl12),
  inference(superposition,[],[f52,f450])).
fof(f34279,plain,(
  ( ! [X542,X545,X543] : (s(bool,'F_0') = s(bool,sK6(X542,X543,bool,bool)) | s(bool,'T_0') = s(bool,X545) | s(bool,X545) = s(bool,g(s(bool,sK6(X542,X543,bool,bool)))) | s(fun(bool,bool),X542) = s(fun(bool,bool),X543)) ) | $spl192),
  inference(cnf_transformation,[],[f34279_D])).
fof(f34279_D,plain,(
  ( ! [X542,X545,X543] : (s(bool,'F_0') = s(bool,sK6(X542,X543,bool,bool)) | s(bool,'T_0') = s(bool,X545) | s(bool,X545) = s(bool,g(s(bool,sK6(X542,X543,bool,bool)))) | s(fun(bool,bool),X542) = s(fun(bool,bool),X543)) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f52044,plain,(
  ( ! [X116] : (s(bool,'T_0') != s(bool,f(s(bool,X116))) | s(bool,'F_0') = s(bool,X116)) ) | $spl236),
  inference(cnf_transformation,[],[f52044_D])).
fof(f52044_D,plain,(
  ( ! [X116] : (s(bool,'T_0') != s(bool,f(s(bool,X116))) | s(bool,'F_0') = s(bool,X116)) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f41411,plain,(
  ( ! [X111,X112,X110,X113] : (s(bool,'T_0') != s(bool,f(s(bool,X112))) | s(fun(bool,bool),X110) = s(fun(bool,bool),X111) | s(bool,X113) = s(bool,g(s(bool,sK6(X110,X111,bool,bool)))) | s(bool,'T_0') = s(bool,X113) | s(bool,'F_0') = s(bool,X112) | s(bool,'F_0') = s(bool,sK6(X110,X111,bool,bool))) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f1394,f22516])).
fof(f41412,plain,(
  ( ! [X116,X114,X117,X115] : (s(bool,'T_0') != s(bool,f(s(bool,X116))) | s(fun(bool,bool),X114) = s(fun(bool,bool),X115) | s(bool,X117) = s(bool,g(s(bool,sK6(X114,X115,bool,bool)))) | s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,sK6(X114,X115,bool,bool)) | s(bool,'F_0') = s(bool,X116)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f1394,f22516])).
fof(f52042,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,X121) = s(bool,sK6(X118,X119,bool,bool)) | s(bool,'T_0') = s(bool,X120) | s(fun(bool,bool),X118) = s(fun(bool,bool),X119) | s(bool,'F_0') = s(bool,X121)) ) | ($spl12 | $spl14 | $spl24 | $spl64)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f219,f6248,f6255,f6256,f6220,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f5993,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18048,f19018,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f10135,f9966,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9142,f9144,f9147,f10005,f9486,f19682,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f13559,f13571,f13359,f19541,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18252,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19383,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f22516,f491,f12142,f12140,f12155,f12115,f510,f28893,f28913,f28890,f22712,f18976,f19643,f19641,f19637,f19635,f19633,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f22711,f22497,f20749,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12163,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f8756,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f36904,f39983,f40038,f40103,f40284,f40408,f40409,f40410,f40411,f40413,f41139,f40561,f40563,f41261,f41334,f41329,f41321,f41318,f41315,f43400,f43712,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47407,f47393,f49037,f50835,f50758,f50748,f50969,f29254,f29715,f27864,f51564,f51565,f51584,f51594,f51596,f51597,f51606,f51608,f51612,f51614,f51616,f51617,f51618,f51619,f51620,f51621,f51622,f51636,f51637,f51658,f51714,f51717,f51720,f51723,f19324,f49675,f49671,f47389,f17106,f44652,f41413])).
fof(f52015,plain,(
  ( ! [X412] : (s(bool,X412) = s(bool,g(s(bool,'F_0'))) | s(bool,X412) = s(bool,g(s(bool,'T_0')))) ) | $spl232),
  inference(cnf_transformation,[],[f52015_D])).
fof(f52015_D,plain,(
  ( ! [X412] : (s(bool,X412) = s(bool,g(s(bool,'F_0'))) | s(bool,X412) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f52014,plain,(
  ( ! [X412,X411] : (s(bool,X412) = s(bool,g(s(bool,'F_0'))) | s(bool,X412) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X411)) ) | ($spl12 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f218,f8170,f8172,f9884,f9858,f9839,f9807,f9522,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f16937,f18751,f17102,f18029,f18025,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f8268,f19954,f11274,f11275,f17104,f17845,f8362,f8364,f8169,f8312,f8367,f8307,f8370,f8304,f8290,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f19919,f8891,f9145,f9838,f9806,f9804,f9700,f9675,f19900,f19898,f9649,f9589,f9647,f10269,f10283,f11312,f12039,f11789,f19882,f12317,f13503,f13432,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18728,f18255,f18794,f18802,f18955,f18972,f17986,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f18767,f17059,f17087,f18252,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f491,f12142,f12140,f12155,f12115,f510,f28893,f28913,f28890,f18976,f19643,f19641,f19637,f19635,f19633,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47407,f47393,f50835,f50758,f50969,f29254,f29715,f27864,f51564,f51565,f51584,f51594,f51596,f51597,f51606,f51608,f51612,f51614,f51616,f51617,f51618,f51619,f51620,f51621,f51622,f51636,f51637,f51658,f51714,f51717,f51720,f51723,f19324,f49675,f49671,f47389,f17106,f52010,f44652])).
fof(f18767,plain,(
  ( ! [X296,X295,X297] : (s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X296) = s(bool,X297) | s(bool,'F_0') = s(bool,X297)) ) | ($spl12 | $spl34)),
  inference(subsumption_resolution,[],[f17057,f6310])).
fof(f17057,plain,(
  ( ! [X296,X295,X297] : (s(bool,X295) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X296) = s(bool,X297) | s(bool,'F_0') = s(bool,X297)) ) | $spl12),
  inference(superposition,[],[f9640,f5666])).
fof(f12317,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl34)),
  inference(condensation,[],[f12316])).
fof(f12316,plain,(
  ( ! [X79] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X79)) ) | ($spl12 | $spl34)),
  inference(subsumption_resolution,[],[f12280,f56])).
fof(f12280,plain,(
  ( ! [X79] : (p(s(bool,X79)) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X79)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f12155,f6310])).
fof(f12039,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl34)),
  inference(condensation,[],[f12038])).
fof(f12038,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl34)),
  inference(subsumption_resolution,[],[f11694,f9640])).
fof(f11694,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,X50) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f9692,f6310])).
fof(f10283,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | ($spl12 | $spl34)),
  inference(subsumption_resolution,[],[f10209,f6310])).
fof(f10209,plain,(
  ( ! [X43,X44] : (s(bool,X43) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | $spl12),
  inference(superposition,[],[f9640,f3018])).
fof(f10269,plain,(
  ( ! [X50] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl34)),
  inference(forward_demodulation,[],[f10239,f218])).
fof(f10239,plain,(
  ( ! [X50] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl34)),
  inference(duplicate_literal_removal,[],[f10184])).
fof(f10184,plain,(
  ( ! [X50] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f9640,f6310])).
fof(f9647,plain,(
  ( ! [X132,X131] : (s(bool,'T_0') = s(bool,X131) | s(bool,X132) = s(bool,g(s(bool,'F_0'))) | s(bool,X132) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl34)),
  inference(duplicate_literal_removal,[],[f9595])).
fof(f9595,plain,(
  ( ! [X132,X131] : (s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,X131) | s(bool,X132) = s(bool,g(s(bool,'F_0'))) | s(bool,X132) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f6310,f3018])).
fof(f9675,plain,(
  ( ! [X87,X86] : (s(bool,X87) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl34)),
  inference(duplicate_literal_removal,[],[f9466])).
fof(f9466,plain,(
  ( ! [X87,X86] : (s(bool,X87) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X86)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f6310,f3018])).
fof(f9804,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,g(s(bool,'F_0'))) | s(bool,X69) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl34)),
  inference(duplicate_literal_removal,[],[f9281])).
fof(f9281,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,g(s(bool,'F_0'))) | s(bool,X69) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f3018,f6310])).
fof(f9838,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,g(s(bool,'T_0'))) | s(bool,X69) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl12 | $spl34)),
  inference(duplicate_literal_removal,[],[f9225])).
fof(f9225,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,g(s(bool,'T_0'))) | s(bool,X69) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f3018,f6310])).
fof(f19919,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'T_0'))))) ) | ($spl12 | $spl34)),
  inference(condensation,[],[f19918])).
fof(f19918,plain,(
  ( ! [X57,X56] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56)) ) | ($spl12 | $spl34)),
  inference(subsumption_resolution,[],[f8822,f10195])).
fof(f8822,plain,(
  ( ! [X57,X56] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,X56) = s(bool,g(s(bool,X57))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f510,f6310])).
fof(f8304,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl34)),
  inference(condensation,[],[f8303])).
fof(f8303,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl12 | $spl34)),
  inference(duplicate_literal_removal,[],[f8215])).
fof(f8215,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f450,f6310])).
fof(f9522,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,g(s(bool,X32))) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X32) = s(bool,X34)) ) | ($spl12 | $spl34)),
  inference(superposition,[],[f6310,f3018])).
fof(f6378,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) | $spl50),
  inference(cnf_transformation,[],[f6378_D])).
fof(f6378_D,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f52013,plain,(
  ( ! [X440] : (s(bool,X440) != s(bool,f(s(bool,'T_0'))) | s(bool,X440) = s(bool,g(s(bool,'F_0')))) ) | $spl230),
  inference(cnf_transformation,[],[f52013_D])).
fof(f52013_D,plain,(
  ( ! [X440] : (s(bool,X440) != s(bool,f(s(bool,'T_0'))) | s(bool,X440) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f52012,plain,(
  ( ! [X441,X443,X440,X442] : (s(bool,X440) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X441) = s(fun(bool,bool),X442) | s(bool,X443) = s(bool,sK6(X441,X442,bool,bool)) | s(bool,'T_0') = s(bool,X443) | s(bool,X440) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl31)),
  inference(subsumption_resolution,[],[f44458,f6306])).
fof(f44458,plain,(
  ( ! [X441,X443,X440,X442] : (s(bool,X440) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X441) = s(fun(bool,bool),X442) | s(bool,X443) = s(bool,sK6(X441,X442,bool,bool)) | s(bool,'T_0') = s(bool,X443) | s(bool,X440) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl12),
  inference(superposition,[],[f1393,f3018])).
fof(f52011,plain,(
  ( ! [X509,X510] : (s(bool,X509) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X510) = s(bool,g(s(bool,'T_0'))) | s(bool,X509) = s(bool,X510)) ) | $spl228),
  inference(cnf_transformation,[],[f52011_D])).
fof(f52011_D,plain,(
  ( ! [X509,X510] : (s(bool,X509) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X510) = s(bool,g(s(bool,'T_0'))) | s(bool,X509) = s(bool,X510)) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f52010,plain,(
  ( ! [X509,X508,X510] : (s(bool,X509) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X509) = s(bool,X510) | s(bool,'T_0') = s(bool,X508) | s(bool,X510) = s(bool,g(s(bool,'T_0')))) ) | $spl34),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f8170,f8172,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16937,f17102,f18029,f18025,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8362,f8364,f8169,f8312,f8367,f8307,f8370,f8290,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18728,f18255,f18794,f18802,f18955,f18972,f17986,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f29254,f49675,f17106])).
fof(f52000,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl38 | $spl64 | $spl76 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f35436,f51928])).
fof(f51928,plain,(
  ( ! [X65] : (s(bool,'F_0') = s(bool,X65)) ) | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f51927,f51755])).
fof(f51755,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl16 | $spl188)),
  inference(condensation,[],[f51754])).
fof(f51754,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl11 | $spl16 | $spl188)),
  inference(condensation,[],[f51753])).
fof(f51753,plain,(
  ( ! [X28,X26,X29] : (s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X29)) ) | ($spl11 | $spl16 | $spl188)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f468,f480,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1393,f2003,f1968,f2260,f2330,f2447,f2362,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f6029,f4080,f5082,f5074,f5072,f5070,f5066,f5062,f5060,f5058,f5046,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18253,f18252,f17106,f17206,f18017,f18011,f17634,f19329,f17696,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f20772,f28913,f28890,f18976,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f49675,f220,f29254,f34251])).
fof(f51927,plain,(
  ( ! [X65] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X65)) ) | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl188 | $spl194)),
  inference(forward_demodulation,[],[f43077,f51755])).
fof(f43077,plain,(
  ( ! [X65] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X65)) ) | ($spl12 | $spl24 | $spl64 | $spl194)),
  inference(duplicate_literal_removal,[],[f43010])).
fof(f43010,plain,(
  ( ! [X65] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | ($spl12 | $spl24 | $spl64 | $spl194)),
  inference(superposition,[],[f41367,f20749])).
fof(f35436,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl38 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6313])).
fof(f51999,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl33 | $spl64 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f6309,f51928])).
fof(f51998,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl29 | $spl31 | $spl188)),
  inference(subsumption_resolution,[],[f6261,f51934])).
fof(f51934,plain,(
  ( ! [X312] : (s(bool,X312) = s(bool,g(s(bool,'T_0')))) ) | ($spl11 | $spl12 | $spl16 | $spl31 | $spl188)),
  inference(duplicate_literal_removal,[],[f51933])).
fof(f51933,plain,(
  ( ! [X312] : (s(bool,X312) = s(bool,g(s(bool,'T_0'))) | s(bool,X312) = s(bool,g(s(bool,'T_0')))) ) | ($spl11 | $spl12 | $spl16 | $spl31 | $spl188)),
  inference(forward_demodulation,[],[f44697,f51755])).
fof(f44697,plain,(
  ( ! [X312] : (s(bool,X312) = s(bool,g(s(bool,'F_0'))) | s(bool,X312) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl31)),
  inference(trivial_inequality_removal,[],[f44627])).
fof(f44627,plain,(
  ( ! [X312] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X312) = s(bool,g(s(bool,'F_0'))) | s(bool,X312) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl31)),
  inference(superposition,[],[f6306,f3018])).
fof(f51971,plain,(
  $false | ($spl11 | $spl16 | $spl188)),
  inference(subsumption_resolution,[],[f51970,f37])).
fof(f51970,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl16 | $spl188)),
  inference(forward_demodulation,[],[f38,f51755])).
fof(f51953,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl76 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f46273,f51928])).
fof(f46273,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | ($spl3 | $spl12 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f46090])).
fof(f51952,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f46274,f51928])).
fof(f46274,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl12)),
  inference(unit_resulting_resolution,[],[f20772,f46090])).
fof(f51951,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl31 | $spl64 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f46275,f51928])).
fof(f46275,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f46090])).
fof(f51950,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl76 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45843,f51928])).
fof(f45843,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | ($spl3 | $spl12 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f10195])).
fof(f51949,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl76 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45844,f51928])).
fof(f45844,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl3 | $spl11 | $spl12 | $spl76)),
  inference(unit_resulting_resolution,[],[f20772,f20703,f10195])).
fof(f51948,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl31 | $spl64 | $spl76 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45845,f51928])).
fof(f45845,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f20703,f10195])).
fof(f51947,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl76 | $spl92 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45846,f51930])).
fof(f51930,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl92 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45392,f51928])).
fof(f45392,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') != s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl92)),
  inference(condensation,[],[f45391])).
fof(f45391,plain,(
  ( ! [X132,X131] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,X131) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X131) = s(bool,X132)) ) | ($spl12 | $spl92)),
  inference(subsumption_resolution,[],[f44020,f17897])).
fof(f44020,plain,(
  ( ! [X132,X131] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,X131) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X131) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) ) | ($spl12 | $spl92)),
  inference(superposition,[],[f18998,f3018])).
fof(f51946,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl92 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45847,f51930])).
fof(f51945,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl31 | $spl64 | $spl92 | $spl188 | $spl194)),
  inference(subsumption_resolution,[],[f45848,f51930])).
fof(f51944,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl31 | $spl76 | $spl188)),
  inference(subsumption_resolution,[],[f45849,f51934])).
fof(f51943,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl188)),
  inference(subsumption_resolution,[],[f45850,f51934])).
fof(f51942,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl188)),
  inference(subsumption_resolution,[],[f45851,f51934])).
fof(f51839,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl76 | $spl138 | $spl188)),
  inference(subsumption_resolution,[],[f51838,f37])).
fof(f51838,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl11 | $spl12 | $spl16 | $spl76 | $spl138 | $spl188)),
  inference(forward_demodulation,[],[f37622,f51755])).
fof(f51837,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl31 | $spl76 | $spl138 | $spl188)),
  inference(subsumption_resolution,[],[f51836,f37])).
fof(f51836,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl11 | $spl12 | $spl16 | $spl31 | $spl76 | $spl138 | $spl188)),
  inference(forward_demodulation,[],[f37623,f51755])).
fof(f51807,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl188)),
  inference(subsumption_resolution,[],[f51806,f51755])).
fof(f51806,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | ($spl11 | $spl12 | $spl16 | $spl188)),
  inference(forward_demodulation,[],[f35593,f51755])).
fof(f51804,plain,(
  $false | ($spl11 | $spl16 | $spl38 | $spl188)),
  inference(subsumption_resolution,[],[f51803,f51755])).
fof(f51803,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl11 | $spl16 | $spl38 | $spl188)),
  inference(forward_demodulation,[],[f35437,f51755])).
fof(f51802,plain,(
  $false | ($spl11 | $spl16 | $spl31 | $spl38 | $spl188)),
  inference(subsumption_resolution,[],[f51801,f51755])).
fof(f51801,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl11 | $spl16 | $spl31 | $spl38 | $spl188)),
  inference(forward_demodulation,[],[f35438,f51755])).
fof(f51790,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl138 | $spl188)),
  inference(subsumption_resolution,[],[f51765,f37])).
fof(f51765,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl138 | $spl188)),
  inference(backward_demodulation,[],[f51755,f51591])).
fof(f51723,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f32242,f51564])).
fof(f51720,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f31742,f51564])).
fof(f51717,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f31499,f51564])).
fof(f51714,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f31312,f51564])).
fof(f51658,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f30475,f51564])).
fof(f51636,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f24550,f51564])).
fof(f51614,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f24980,f51564])).
fof(f51612,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s('type.ffi.ffi_state'(X114),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s('type.ffi.ffi_state'(X114),'const.modSem.state_ffi_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f25407,f51564])).
fof(f51608,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f25731,f51564])).
fof(f51606,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X117,X116,X114)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X114),sK4(X115,X117,X116,X114)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X116),s('type.modSem.state'(X114),X117)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X116))),s('type.modSem.state'(X114),X117)))) ) | $spl12),
  inference(forward_demodulation,[],[f26321,f51564])).
fof(f51596,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))))) ) | $spl12),
  inference(forward_demodulation,[],[f26814,f51564])).
fof(f51584,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (s(bool,'F_0') = s(bool,X119) | p(s(bool,happ(s(fun('type.modSem.state'(X114),bool),happ(s(fun('type.semanticPrimitives.state'(X114),fun('type.modSem.state'(X114),bool)),X115),s('type.semanticPrimitives.state'(X114),X117))),s('type.modSem.state'(X114),X116)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X114),X117),s('type.modSem.state'(X114),X116)))) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X114),sK3(X115,X116,X117,X114)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X114),sK4(X115,X116,X117,X114))))))) ) | $spl12),
  inference(forward_demodulation,[],[f27092,f51564])).
fof(f51529,plain,(
  $false | ($spl16 | $spl20 | $spl225)),
  inference(subsumption_resolution,[],[f50919,f51309])).
fof(f51309,plain,(
  ( ! [X91] : (s(bool,'T_0') = s(bool,X91)) ) | ($spl16 | $spl20)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f468,f480,f528,f544,f546,f635,f772,f827,f944,f842,f968,f923,f886,f887,f1022,f1084,f1178,f1687,f1393,f2260,f2330,f2447,f2362,f3021,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f6029,f4080,f5082,f5074,f5066,f5062,f5060,f5058,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7963,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f29254,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f19551,f220,f444,f17103,f12178,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f50835,f50969,f49675])).
fof(f19551,plain,(
  ( ! [X364,X362,X365,X363] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X363),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X364),s('type.semanticPrimitives.store_v'('type.modSem.v'),X365))) | s(bool,'T_0') = s(bool,X362) | s(bool,'T_0') = s(bool,f(s(bool,X362)))) ) | $spl20),
  inference(subsumption_resolution,[],[f19550,f56])).
fof(f19550,plain,(
  ( ! [X364,X362,X365,X363] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X363),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X364),s('type.semanticPrimitives.store_v'('type.modSem.v'),X365))) | p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X363),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X364),s('type.semanticPrimitives.store_v'('type.modSem.v'),X365)))) | s(bool,'T_0') = s(bool,X362) | s(bool,'T_0') = s(bool,f(s(bool,X362)))) ) | $spl20),
  inference(forward_demodulation,[],[f13263,f53])).
fof(f13263,plain,(
  ( ! [X364,X362,X365,X363] : (p(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X363),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X364),s('type.semanticPrimitives.store_v'('type.modSem.v'),X365)))) | s(bool,'T_0') = s(bool,X362) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X363))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X364))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X365))) | s(bool,'T_0') = s(bool,f(s(bool,X362)))) ) | $spl20),
  inference(superposition,[],[f444,f1156])).
fof(f7971,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f7970])).
fof(f7970,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(duplicate_literal_removal,[],[f7969])).
fof(f7969,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(condensation,[],[f7968])).
fof(f7968,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X38)))) ) | $spl20),
  inference(subsumption_resolution,[],[f7931,f1687])).
fof(f7931,plain,(
  ( ! [X39,X41,X38,X40] : (p(s(bool,X39)) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X38)))) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f7967,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f7966])).
fof(f7966,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f7965])).
fof(f7965,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(condensation,[],[f7964])).
fof(f7964,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(subsumption_resolution,[],[f7929,f1687])).
fof(f7929,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,X31)) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f19745,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | $spl20),
  inference(subsumption_resolution,[],[f19744,f38])).
fof(f19744,plain,(
  ( ! [X9] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | $spl20),
  inference(forward_demodulation,[],[f7923,f75])).
fof(f7923,plain,(
  ( ! [X9] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f19748,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f19747])).
fof(f19747,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl20),
  inference(subsumption_resolution,[],[f7921,f56])).
fof(f7921,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f19751,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f19750])).
fof(f19750,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl20),
  inference(subsumption_resolution,[],[f7920,f56])).
fof(f7920,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f19753,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(subsumption_resolution,[],[f7918,f38])).
fof(f7918,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f21646,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f33835,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33834])).
fof(f33834,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl20),
  inference(subsumption_resolution,[],[f21648,f56])).
fof(f21648,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f33832,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33831])).
fof(f33831,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl20),
  inference(subsumption_resolution,[],[f21649,f56])).
fof(f21649,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f21701,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f21700])).
fof(f21700,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f21699])).
fof(f21699,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(condensation,[],[f21698])).
fof(f21698,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(subsumption_resolution,[],[f21657,f1687])).
fof(f21657,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,X31)) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f21705,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f21704])).
fof(f21704,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(duplicate_literal_removal,[],[f21703])).
fof(f21703,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(condensation,[],[f21702])).
fof(f21702,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X38)))) ) | $spl20),
  inference(subsumption_resolution,[],[f21659,f1687])).
fof(f21659,plain,(
  ( ! [X39,X41,X38,X40] : (p(s(bool,X39)) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X38)))) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f33824,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33823])).
fof(f33823,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X59) = s(bool,f(s(bool,X57)))) ) | $spl20),
  inference(subsumption_resolution,[],[f21665,f56])).
fof(f21665,plain,(
  ( ! [X59,X57,X58] : (p(s(bool,X58)) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X59) = s(bool,f(s(bool,X57)))) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f24784,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f33815,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33814])).
fof(f33814,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X4)))) ) | $spl20),
  inference(subsumption_resolution,[],[f24786,f56])).
fof(f24786,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X4)))) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f33812,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33811])).
fof(f33811,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X7)) ) | $spl20),
  inference(subsumption_resolution,[],[f24787,f56])).
fof(f24787,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X7)) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f24841,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f24840])).
fof(f24840,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f24839])).
fof(f24839,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(condensation,[],[f24838])).
fof(f24838,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,f(s(bool,X31))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl20),
  inference(subsumption_resolution,[],[f24795,f1687])).
fof(f24795,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,X32)) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,f(s(bool,X31))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f24845,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f24844])).
fof(f24844,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(duplicate_literal_removal,[],[f24843])).
fof(f24843,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(condensation,[],[f24842])).
fof(f24842,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,f(s(bool,X39)))) ) | $spl20),
  inference(subsumption_resolution,[],[f24797,f1687])).
fof(f24797,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,f(s(bool,X39)))) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f33804,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33803])).
fof(f33803,plain,(
  ( ! [X59,X60,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X59) | s(bool,X60) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X60) = s(bool,f(s(bool,X58)))) ) | $spl20),
  inference(subsumption_resolution,[],[f24803,f56])).
fof(f24803,plain,(
  ( ! [X59,X60,X58] : (p(s(bool,X59)) | s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X59) | s(bool,X60) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X60) = s(bool,f(s(bool,X58)))) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f31631,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f33518,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33517])).
fof(f33517,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | $spl20),
  inference(subsumption_resolution,[],[f31633,f56])).
fof(f31633,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f33515,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33514])).
fof(f33514,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) ) | $spl20),
  inference(subsumption_resolution,[],[f31634,f56])).
fof(f31634,plain,(
  ( ! [X8,X7] : (p(s(bool,X8)) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X8)) ) | $spl20),
  inference(superposition,[],[f444,f54])).
fof(f31695,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f31694])).
fof(f31694,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f31693])).
fof(f31693,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(condensation,[],[f31692])).
fof(f31692,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,f(s(bool,X32))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | $spl20),
  inference(subsumption_resolution,[],[f31642,f1687])).
fof(f31642,plain,(
  ( ! [X35,X33,X34,X32] : (p(s(bool,X33)) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,f(s(bool,X32))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f31699,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f31698])).
fof(f31698,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(duplicate_literal_removal,[],[f31697])).
fof(f31697,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl20),
  inference(condensation,[],[f31696])).
fof(f31696,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,f(s(bool,X40)))) ) | $spl20),
  inference(subsumption_resolution,[],[f31644,f1687])).
fof(f31644,plain,(
  ( ! [X43,X41,X42,X40] : (p(s(bool,X41)) | s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,f(s(bool,X40)))) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f33507,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | $spl20),
  inference(condensation,[],[f33506])).
fof(f33506,plain,(
  ( ! [X61,X59,X60] : (s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X61) = s(bool,f(s(bool,X59)))) ) | $spl20),
  inference(subsumption_resolution,[],[f31650,f56])).
fof(f31650,plain,(
  ( ! [X61,X59,X60] : (p(s(bool,X60)) | s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X61) = s(bool,f(s(bool,X59)))) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f7939,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,X1)))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl20),
  inference(condensation,[],[f7938])).
fof(f7938,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,f(s(bool,X31)))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f7900])).
fof(f7900,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,f(s(bool,X31)))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f7956,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(forward_demodulation,[],[f7944,f75])).
fof(f7944,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f7894])).
fof(f7894,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f7949,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f7889])).
fof(f7889,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f7963,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl20),
  inference(condensation,[],[f7962])).
fof(f7962,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,X26) | s(bool,X28) = s(bool,f(s(bool,X26))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl20),
  inference(subsumption_resolution,[],[f7928,f56])).
fof(f7928,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,X27)) | s(bool,'T_0') = s(bool,X26) | s(bool,X28) = s(bool,f(s(bool,X26))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl20),
  inference(superposition,[],[f444,f1178])).
fof(f51525,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f51524,f37])).
fof(f51524,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f26992,f51309])).
fof(f51520,plain,(
  $false | ($spl11 | $spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51519,f37])).
fof(f51519,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30612,f51309])).
fof(f51518,plain,(
  $false | ($spl11 | $spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51517,f37])).
fof(f51517,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30548,f51309])).
fof(f51513,plain,(
  $false | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f51512,f37])).
fof(f51512,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f30655,f51309])).
fof(f51511,plain,(
  $false | ($spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51510,f37])).
fof(f51510,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30621,f51309])).
fof(f51509,plain,(
  $false | ($spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51508,f37])).
fof(f51508,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30613,f51309])).
fof(f51507,plain,(
  $false | ($spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51506,f37])).
fof(f51506,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30609,f51309])).
fof(f51505,plain,(
  $false | ($spl11 | $spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51504,f37])).
fof(f51504,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30608,f51309])).
fof(f51503,plain,(
  $false | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl76)),
  inference(subsumption_resolution,[],[f51502,f37])).
fof(f51502,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl76)),
  inference(forward_demodulation,[],[f30607,f51309])).
fof(f51501,plain,(
  $false | ($spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51500,f37])).
fof(f51500,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30563,f51309])).
fof(f51499,plain,(
  $false | ($spl12 | $spl16 | $spl20 | $spl31 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f30560,f51390])).
fof(f51390,plain,(
  ( ! [X60] : (s(bool,X60) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl16 | $spl20 | $spl68 | $spl76)),
  inference(forward_demodulation,[],[f51389,f51309])).
fof(f51389,plain,(
  ( ! [X60] : (s(bool,X60) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl16 | $spl20 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f20705,f51309])).
fof(f20705,plain,(
  ( ! [X60] : (s(bool,'T_0') != s(bool,X60) | s(bool,X60) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl76)),
  inference(global_subsumption,[],[f15583,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f10102,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220])).
fof(f15583,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') != s(bool,X60) | s(bool,X60) = s(bool,g(s(bool,'F_0'))) | s(bool,X61) = s(bool,g(s(bool,'F_0'))) | s(bool,X61) = s(bool,g(s(bool,X60)))) ) | ($spl12 | $spl76)),
  inference(superposition,[],[f10519,f3018])).
fof(f30560,plain,(
  s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f19301])).
fof(f19301,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19300])).
fof(f19300,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19299])).
fof(f19299,plain,(
  ( ! [X182,X183,X181] : (s(bool,'T_0') = s(bool,X181) | s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,'T_0') = s(bool,X182) | s(bool,X181) = s(bool,X183)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f19298,f17903])).
fof(f19298,plain,(
  ( ! [X182,X183,X181] : (s(bool,'T_0') = s(bool,X181) | s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,'T_0') = s(bool,X182) | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X181) = s(bool,X183)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f17746,f218])).
fof(f51498,plain,(
  $false | ($spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51497,f37])).
fof(f51497,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30549,f51309])).
fof(f51496,plain,(
  $false | ($spl16 | $spl20 | $spl31)),
  inference(subsumption_resolution,[],[f51495,f37])).
fof(f51495,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20 | $spl31)),
  inference(forward_demodulation,[],[f30490,f51309])).
fof(f51487,plain,(
  $false | ($spl12 | $spl16 | $spl20 | $spl31 | $spl38 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f35438,f51390])).
fof(f51486,plain,(
  $false | ($spl11 | $spl16 | $spl20 | $spl38 | $spl92)),
  inference(subsumption_resolution,[],[f35437,f51398])).
fof(f51398,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl16 | $spl20 | $spl92)),
  inference(subsumption_resolution,[],[f51397,f51309])).
fof(f51397,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl16 | $spl20 | $spl92)),
  inference(forward_demodulation,[],[f18998,f51309])).
fof(f51485,plain,(
  $false | ($spl12 | $spl16 | $spl20 | $spl31 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f35594,f51390])).
fof(f51484,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl92)),
  inference(subsumption_resolution,[],[f35593,f51398])).
fof(f51483,plain,(
  $false | ($spl3 | $spl12 | $spl16 | $spl20 | $spl24 | $spl64 | $spl68 | $spl76 | $spl198)),
  inference(subsumption_resolution,[],[f35592,f51453])).
fof(f51453,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl16 | $spl20 | $spl24 | $spl64 | $spl68 | $spl76 | $spl198)),
  inference(subsumption_resolution,[],[f45418,f51390])).
fof(f51478,plain,(
  $false | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f51477,f37])).
fof(f51477,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f37623,f51309])).
fof(f51476,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f51475,f37])).
fof(f51475,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f37622,f51309])).
fof(f51438,plain,(
  $false | ($spl12 | $spl16 | $spl20 | $spl31 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f45851,f51390])).
fof(f51437,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl31 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f45850,f51390])).
fof(f51436,plain,(
  $false | ($spl3 | $spl12 | $spl16 | $spl20 | $spl31 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f45849,f51390])).
fof(f51435,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl31 | $spl92)),
  inference(subsumption_resolution,[],[f45848,f51398])).
fof(f51434,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl92)),
  inference(subsumption_resolution,[],[f45847,f51398])).
fof(f51433,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f45846,f51398])).
fof(f51407,plain,(
  $false | ($spl16 | $spl20)),
  inference(subsumption_resolution,[],[f51406,f37])).
fof(f51406,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl20)),
  inference(forward_demodulation,[],[f38,f51309])).
fof(f51325,plain,(
  $false | ($spl16 | $spl20 | $spl29)),
  inference(subsumption_resolution,[],[f51324,f51309])).
fof(f51324,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl16 | $spl20 | $spl29)),
  inference(forward_demodulation,[],[f6261,f51309])).
fof(f51262,plain,(
  $false | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f50985,f37])).
fof(f50985,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f50984,f38])).
fof(f50984,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f50983,f38])).
fof(f50983,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f50982,f29637])).
fof(f29637,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl12 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f28392,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f14144,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f1942,f2178,f6041,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f284,f213,f212,f38,f29254,f28913,f28890])).
fof(f28392,plain,(
  ( ! [X47,X48,X46] : (s(bool,X47) = s(bool,g(s(bool,X46))) | s(bool,'T_0') = s(bool,f(s(bool,X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X46) = s(bool,X48)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f5666])).
fof(f12618,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f12617])).
fof(f12617,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,g(s(bool,'F_0'))) | s(bool,X52) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X51)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f12549,f9968])).
fof(f12549,plain,(
  ( ! [X52,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X51) = s(bool,g(s(bool,'F_0'))) | s(bool,X52) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X51)))) ) | ($spl12 | $spl70)),
  inference(superposition,[],[f10103,f3018])).
fof(f50919,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | $spl225),
  inference(cnf_transformation,[],[f50919_D])).
fof(f50919_D,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) <=> ~$spl225),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl225])])).
fof(f50970,plain,(
  ( ! [X193] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X193)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f9142,f9144,f9147,f9641,f9635,f9631,f10102,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f22984,f491,f12142,f12140,f12155,f12115,f510,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f28586,f28392,f29852,f29918,f19559,f18976,f31875,f31579,f31576,f31567,f31555,f33543,f31551,f33552,f33555,f31504,f31503,f31071,f31054,f29654,f29652,f29609,f29560,f33701,f33706,f33711,f33713,f28590,f28804,f28803,f28508,f28461,f33749,f33756,f33758,f33760,f33767,f33772,f33778,f33780,f28400,f28732,f28731,f28340,f28221,f28277,f28276,f19344,f19575,f12616,f19643,f19641,f19637,f19635,f33937,f33939,f12508,f12618,f12556,f34243,f19324,f34245,f19633,f19409,f19523,f19596,f19598,f19216,f28733,f28737,f33776,f33774,f33751,f33744,f28806,f28810,f33709,f28855,f29561,f29650,f33547,f31560,f12151,f34277,f17103,f12178,f34294,f29574,f12150,f12462,f12460,f29758,f29750,f29686,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f12595,f29610,f29582,f29584,f29603,f29570,f29557,f22874,f20705,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f15631,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f29637,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f29819,f19499,f14977,f29706,f29708,f39612,f39618,f39645,f42826,f44468,f45797,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47407,f47393,f50835,f50856,f50871,f50905,f50758,f50928,f50969])).
fof(f45797,plain,(
  ( ! [X146,X144,X145] : (s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,g(s(bool,X145))) | s(bool,X146) = s(bool,g(s(bool,'F_0'))) | s(bool,X144) = s(bool,X146)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f44564,f37])).
fof(f44564,plain,(
  ( ! [X146,X144,X145] : (~p(s(bool,'T_0')) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,g(s(bool,X145))) | s(bool,X146) = s(bool,g(s(bool,'F_0'))) | s(bool,X144) = s(bool,X146)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29750,f3018])).
fof(f44468,plain,(
  ( ! [X45,X43,X44] : (s(bool,X43) != s(bool,X44) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,X45) = s(bool,g(s(bool,'F_0'))) | s(bool,X43) = s(bool,X45)) ) | ($spl12 | $spl68 | $spl76)),
  inference(superposition,[],[f20705,f3018])).
fof(f42826,plain,(
  ( ! [X235,X233,X236,X234,X232] : (s(bool,X235) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X232))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X233))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X234))) | s(bool,'T_0') = s(bool,g(s(bool,X235))) | s(bool,X236) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X232),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X233),s('type.semanticPrimitives.store_v'('type.modSem.v'),X234))) | s(bool,'T_0') = s(bool,X236)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f42492,f37])).
fof(f42492,plain,(
  ( ! [X235,X233,X236,X234,X232] : (~p(s(bool,'T_0')) | s(bool,X235) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X232))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X233))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X234))) | s(bool,'T_0') = s(bool,g(s(bool,X235))) | s(bool,X236) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X232),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X233),s('type.semanticPrimitives.store_v'('type.modSem.v'),X234))) | s(bool,'T_0') = s(bool,X236)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29750,f1156])).
fof(f39645,plain,(
  ( ! [X139] : (s(bool,X139) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,g(s(bool,X139)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f39600,f37])).
fof(f39600,plain,(
  ( ! [X139] : (~p(s(bool,'T_0')) | s(bool,X139) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,g(s(bool,X139)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29750,f151])).
fof(f39618,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,g(s(bool,X61))) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X62) = s(bool,X63) | s(bool,X60) = s(bool,X63)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f39572,f37])).
fof(f39572,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,g(s(bool,X61))) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X62) = s(bool,X63) | s(bool,X60) = s(bool,X63)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29750,f5666])).
fof(f39612,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,g(s(bool,X27))) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f39565,f37])).
fof(f39565,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,g(s(bool,X27))) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29750,f1178])).
fof(f29708,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),X122),s('type.semanticPrimitives.state'(X119),sK3(X122,X121,X120,X119)))),s('type.modSem.state'(X119),sK4(X122,X121,X120,X119))))) | p(s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),X122),s('type.semanticPrimitives.state'(X119),X120))),s('type.modSem.state'(X119),X121)))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X119),X120),s('type.modSem.state'(X119),X121)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29707,f37])).
fof(f29707,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),X122),s('type.semanticPrimitives.state'(X119),sK3(X122,X121,X120,X119)))),s('type.modSem.state'(X119),sK4(X122,X121,X120,X119))))) | p(s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),X122),s('type.semanticPrimitives.state'(X119),X120))),s('type.modSem.state'(X119),X121)))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X119),X120),s('type.modSem.state'(X119),X121)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28013,f29557])).
fof(f28013,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),X122),s('type.semanticPrimitives.state'(X119),sK3(X122,X121,X120,X119)))),s('type.modSem.state'(X119),sK4(X122,X121,X120,X119))))) | p(s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),X122),s('type.semanticPrimitives.state'(X119),X120))),s('type.modSem.state'(X119),X121)))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X119),X120),s('type.modSem.state'(X119),X121)))))) ) | $spl12),
  inference(superposition,[],[f45,f9692])).
fof(f29706,plain,(
  ( ! [X125,X123,X124] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X123),X125),s('type.modSem.state'(X123),X124)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X123),bool),happ(s(fun('type.semanticPrimitives.state'(X123),fun('type.modSem.state'(X123),bool)),sK5(X124,X125,X123)),s('type.semanticPrimitives.state'(X123),X125))),s('type.modSem.state'(X123),X124)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29705,f37])).
fof(f29705,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X123),X125),s('type.modSem.state'(X123),X124)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X123),bool),happ(s(fun('type.semanticPrimitives.state'(X123),fun('type.modSem.state'(X123),bool)),sK5(X124,X125,X123)),s('type.semanticPrimitives.state'(X123),X125))),s('type.modSem.state'(X123),X124)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28014,f29557])).
fof(f28014,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X123),X125),s('type.modSem.state'(X123),X124)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(X123),bool),happ(s(fun('type.semanticPrimitives.state'(X123),fun('type.modSem.state'(X123),bool)),sK5(X124,X125,X123)),s('type.semanticPrimitives.state'(X123),X125))),s('type.modSem.state'(X123),X124)))))) ) | $spl12),
  inference(superposition,[],[f47,f9692])).
fof(f19499,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19498])).
fof(f19498,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X11),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15505,f9640])).
fof(f29819,plain,(
  ( ! [X99,X100,X98] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X98))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X99))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X100))) | s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X98),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X99),s('type.semanticPrimitives.store_v'('type.modSem.v'),X100)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f27786,f29557])).
fof(f27786,plain,(
  ( ! [X99,X100,X98] : (s(bool,'T_0') = s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X98),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X99),s('type.semanticPrimitives.store_v'('type.modSem.v'),X100))))) | s(bool,g(s(bool,'F_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X98))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X99))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X100)))) ) | $spl12),
  inference(superposition,[],[f9692,f53])).
fof(f12604,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12603])).
fof(f12603,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X29) = s(bool,g(s(bool,'F_0'))) | s(bool,X31) = s(bool,f(s(bool,X29))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12542,f3018])).
fof(f12542,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X29) != s(bool,X30) | s(bool,X29) = s(bool,g(s(bool,'F_0'))) | s(bool,X31) = s(bool,f(s(bool,X29))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f15631,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f15630])).
fof(f15630,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,g(s(bool,X46))) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X47)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15579,f3018])).
fof(f15579,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X46) != s(bool,X47) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,g(s(bool,X46))) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X47)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f22874,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X4) != s(bool,X5) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,X6) = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,X4) = s(bool,X6)) ) | ($spl12 | $spl68 | $spl76)),
  inference(superposition,[],[f20705,f1178])).
fof(f29557,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f28672,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f14144,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f1942,f2178,f6041,f46,f40,f6031,f6329,f986,f491,f12142,f14977,f12140,f13599,f12155,f12115,f766,f510,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f12102,f10249,f10132,f9888,f9692,f9246,f9245,f3018,f284,f213,f212,f38,f29254,f28893,f28913,f28890])).
fof(f29570,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f29569])).
fof(f29569,plain,(
  ( ! [X31,X32] : (s(bool,'T_0') = s(bool,X32) | p(s(bool,X31)) | s(bool,'T_0') = s(bool,f(s(bool,X31)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f28853,f29557])).
fof(f28853,plain,(
  ( ! [X31,X32] : (p(s(bool,X31)) | s(bool,X32) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X31)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28605,f20705])).
fof(f28605,plain,(
  ( ! [X31,X32] : (p(s(bool,X31)) | s(bool,X32) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X31)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f88,f12618])).
fof(f29603,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29602,f37])).
fof(f29602,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28511,f29557])).
fof(f28511,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f51,f12618])).
fof(f29584,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,happ(s(fun('type.modSem.state'(X125),bool),happ(s(fun('type.semanticPrimitives.state'(X125),fun('type.modSem.state'(X125),bool)),X128),s('type.semanticPrimitives.state'(X125),sK3(X128,X127,X126,X125)))),s('type.modSem.state'(X125),sK4(X128,X127,X126,X125))))) | p(s(bool,happ(s(fun('type.modSem.state'(X125),bool),happ(s(fun('type.semanticPrimitives.state'(X125),fun('type.modSem.state'(X125),bool)),X128),s('type.semanticPrimitives.state'(X125),X126))),s('type.modSem.state'(X125),X127)))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X125),X126),s('type.modSem.state'(X125),X127)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29583,f37])).
fof(f29583,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X125),bool),happ(s(fun('type.semanticPrimitives.state'(X125),fun('type.modSem.state'(X125),bool)),X128),s('type.semanticPrimitives.state'(X125),sK3(X128,X127,X126,X125)))),s('type.modSem.state'(X125),sK4(X128,X127,X126,X125))))) | p(s(bool,happ(s(fun('type.modSem.state'(X125),bool),happ(s(fun('type.semanticPrimitives.state'(X125),fun('type.modSem.state'(X125),bool)),X128),s('type.semanticPrimitives.state'(X125),X126))),s('type.modSem.state'(X125),X127)))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X125),X126),s('type.modSem.state'(X125),X127)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28576,f29557])).
fof(f28576,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X125),bool),happ(s(fun('type.semanticPrimitives.state'(X125),fun('type.modSem.state'(X125),bool)),X128),s('type.semanticPrimitives.state'(X125),sK3(X128,X127,X126,X125)))),s('type.modSem.state'(X125),sK4(X128,X127,X126,X125))))) | p(s(bool,happ(s(fun('type.modSem.state'(X125),bool),happ(s(fun('type.semanticPrimitives.state'(X125),fun('type.modSem.state'(X125),bool)),X128),s('type.semanticPrimitives.state'(X125),X126))),s('type.modSem.state'(X125),X127)))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X125),X126),s('type.modSem.state'(X125),X127)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f45,f12618])).
fof(f29582,plain,(
  ( ! [X130,X131,X129] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X129),X131),s('type.modSem.state'(X129),X130)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(X129),bool),happ(s(fun('type.semanticPrimitives.state'(X129),fun('type.modSem.state'(X129),bool)),sK5(X130,X131,X129)),s('type.semanticPrimitives.state'(X129),X131))),s('type.modSem.state'(X129),X130)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29581,f37])).
fof(f29581,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X129),X131),s('type.modSem.state'(X129),X130)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(X129),bool),happ(s(fun('type.semanticPrimitives.state'(X129),fun('type.modSem.state'(X129),bool)),sK5(X130,X131,X129)),s('type.semanticPrimitives.state'(X129),X131))),s('type.modSem.state'(X129),X130)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28577,f29557])).
fof(f28577,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X129),X131),s('type.modSem.state'(X129),X130)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(X129),bool),happ(s(fun('type.semanticPrimitives.state'(X129),fun('type.modSem.state'(X129),bool)),sK5(X130,X131,X129)),s('type.semanticPrimitives.state'(X129),X131))),s('type.modSem.state'(X129),X130)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f47,f12618])).
fof(f29610,plain,(
  ( ! [X103,X101,X102] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X101))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X102))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X103))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X101),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X102),s('type.semanticPrimitives.store_v'('type.modSem.v'),X103)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28482,f29557])).
fof(f28482,plain,(
  ( ! [X103,X101,X102] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X101),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X102),s('type.semanticPrimitives.store_v'('type.modSem.v'),X103))))) | s(bool,g(s(bool,'F_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X101))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X102))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X103)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f53])).
fof(f12595,plain,(
  ( ! [X80,X81,X82] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X80))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X81))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X82))) | s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X80),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X81),s('type.semanticPrimitives.store_v'('type.modSem.v'),X82))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X80),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X81),s('type.semanticPrimitives.store_v'('type.modSem.v'),X82)))))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f12525,f218])).
fof(f12525,plain,(
  ( ! [X80,X81,X82] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X80),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X81),s('type.semanticPrimitives.store_v'('type.modSem.v'),X82))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X80),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X81),s('type.semanticPrimitives.store_v'('type.modSem.v'),X82))))) | s(bool,g(s(bool,'F_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X80))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X81))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X82)))) ) | $spl70),
  inference(superposition,[],[f10103,f53])).
fof(f29573,plain,(
  ( ! [X161,X159,X160] : (s(bool,'T_0') != s(bool,f(s(X159,sK6(X160,X161,bool,X159)))) | s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,f(s(bool,g(s(X159,sK6(X160,X161,bool,X159))))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28585,f29557])).
fof(f28585,plain,(
  ( ! [X161,X159,X160] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X159,sK6(X160,X161,bool,X159)))) | s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,f(s(bool,g(s(X159,sK6(X160,X161,bool,X159))))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f52,f12618])).
fof(f29686,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f29685])).
fof(f29685,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,X29) | p(s(bool,X28)) | s(bool,'T_0') = s(bool,g(s(bool,X28)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f28178,f29557])).
fof(f28178,plain,(
  ( ! [X28,X29] : (p(s(bool,X28)) | s(bool,X29) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X28)))) ) | ($spl12 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f28040,f20705])).
fof(f28040,plain,(
  ( ! [X28,X29] : (p(s(bool,X28)) | s(bool,X29) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,g(s(bool,X28)))) ) | $spl12),
  inference(superposition,[],[f88,f9692])).
fof(f29750,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X5)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29749,f37])).
fof(f29749,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X5)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f27953,f29557])).
fof(f27953,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X5)))) ) | $spl12),
  inference(superposition,[],[f51,f9692])).
fof(f29758,plain,(
  ( ! [X17,X16] : (~p(s(bool,X17)) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,g(s(bool,X16)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28158,f29557])).
fof(f28158,plain,(
  ( ! [X17,X16] : (~p(s(bool,X17)) | s(bool,X17) = s(bool,g(s(bool,X16))) | s(bool,X16) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(subsumption_resolution,[],[f27909,f37])).
fof(f27909,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X17) = s(bool,g(s(bool,X16))) | s(bool,X16) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f51,f9692])).
fof(f29574,plain,(
  ( ! [X158,X156,X157] : (s(X158,f(s(bool,'T_0'))) != s(X158,g(s(bool,'T_0'))) | s(fun(bool,X158),X156) = s(fun(bool,X158),X157) | s(bool,'T_0') = s(bool,f(s(bool,sK6(X156,X157,X158,bool))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28584,f29557])).
fof(f28584,plain,(
  ( ! [X158,X156,X157] : (s(X158,f(s(bool,g(s(bool,'F_0'))))) != s(X158,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X158),X156) = s(fun(bool,X158),X157) | s(bool,'T_0') = s(bool,f(s(bool,sK6(X156,X157,X158,bool))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f52,f12618])).
fof(f31560,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31559])).
fof(f31559,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,f(s(bool,X57))) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X57) = s(bool,X59)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31523,f56])).
fof(f31523,plain,(
  ( ! [X59,X57,X58] : (p(s(bool,X58)) | s(bool,'T_0') = s(bool,f(s(bool,X57))) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X57) = s(bool,X59)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f5666])).
fof(f33547,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f33546])).
fof(f33546,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31514,f56])).
fof(f31514,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,X27)) | s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f1178])).
fof(f29650,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f29649,f29637])).
fof(f29649,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f29648])).
fof(f29648,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29647])).
fof(f29647,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29646])).
fof(f29646,plain,(
  ( ! [X88,X87,X89] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X88) | s(bool,X87) = s(bool,X89) | s(bool,X88) = s(bool,X89)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28373,f10249])).
fof(f28373,plain,(
  ( ! [X88,X87,X89] : (s(bool,X87) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X88) | s(bool,X87) = s(bool,X89) | s(bool,X88) = s(bool,X89)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f5666])).
fof(f29561,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,X11) | ~p(s(bool,X12)) | s(bool,X12) = s(bool,f(s(bool,X11)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28862,f29557])).
fof(f28862,plain,(
  ( ! [X12,X11] : (~p(s(bool,X12)) | s(bool,X12) = s(bool,f(s(bool,X11))) | s(bool,X11) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28650,f37])).
fof(f28650,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X12)) | s(bool,X12) = s(bool,f(s(bool,X11))) | s(bool,X11) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f51,f12618])).
fof(f19216,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19215])).
fof(f19215,plain,(
  ( ! [X366,X368,X367] : (s(bool,'T_0') = s(bool,X366) | s(bool,'T_0') = s(bool,X367) | s(bool,X368) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X368) = s(bool,f(s(bool,X366)))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f19214,f218])).
fof(f19214,plain,(
  ( ! [X366,X368,X367] : (s(bool,X366) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X367) | s(bool,X368) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X368) = s(bool,f(s(bool,X366)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f17801,f3018])).
fof(f17801,plain,(
  ( ! [X366,X368,X367] : (s(bool,X366) != s(bool,X367) | s(bool,X366) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X367) | s(bool,X368) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X368) = s(bool,f(s(bool,X366)))) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f19523,plain,(
  ( ! [X356,X358,X357,X355] : (s(bool,'T_0') = s(bool,X355) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X356),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X357),s('type.semanticPrimitives.store_v'('type.modSem.v'),X358))) | s(bool,'T_0') = s(bool,f(s(bool,X355)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f19522,f1198])).
fof(f19522,plain,(
  ( ! [X356,X358,X357,X355] : (s(bool,'T_0') = s(bool,X355) | s(bool,X355) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X356))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X357))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X358))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X356),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X357),s('type.semanticPrimitives.store_v'('type.modSem.v'),X358))) | s(bool,'T_0') = s(bool,f(s(bool,X355)))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f13953,f218])).
fof(f13953,plain,(
  ( ! [X356,X358,X357,X355] : (s(bool,X355) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X356))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X357))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X358))) | s(bool,X355) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X356),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X357),s('type.semanticPrimitives.store_v'('type.modSem.v'),X358))) | s(bool,'T_0') = s(bool,f(s(bool,X355)))) ) | $spl70),
  inference(superposition,[],[f10103,f1198])).
fof(f34243,plain,(
  ( ! [X47] : (s(bool,X47) != s(bool,f(s(bool,X47))) | s(bool,'T_0') = s(bool,X47)) ) | ($spl12 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f29254,f28893,f28913,f28890,f284,f6137,f516,f467,f341,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f14977,f13599,f766,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9888,f9246,f9245,f3018,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f9692,f212,f38,f12556])).
fof(f12556,plain,(
  ( ! [X47,X46] : (s(bool,X47) != s(bool,f(s(bool,X47))) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X47)) ) | ($spl12 | $spl70)),
  inference(duplicate_literal_removal,[],[f12496])).
fof(f12496,plain,(
  ( ! [X47,X46] : (s(bool,X47) != s(bool,f(s(bool,X47))) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X47)) ) | ($spl12 | $spl70)),
  inference(superposition,[],[f10103,f3018])).
fof(f12508,plain,(
  ( ! [X69] : (s(bool,X69) != s(bool,f(s(bool,X69))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X69)) ) | $spl70),
  inference(superposition,[],[f10103,f39])).
fof(f33939,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,f(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f12483,f20705])).
fof(f12483,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,f(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f33937,plain,(
  ( ! [X4,X3] : (s(bool,X4) != s(bool,f(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f12482,f20705])).
fof(f12482,plain,(
  ( ! [X4,X3] : (s(bool,X4) != s(bool,f(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f12616,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f12615,f218])).
fof(f12615,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12614])).
fof(f12614,plain,(
  ( ! [X50,X49] : (s(bool,'T_0') = s(bool,X49) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f12613,f218])).
fof(f12613,plain,(
  ( ! [X50,X49] : (s(bool,X49) = s(bool,g(s(bool,'F_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12548,f3018])).
fof(f12548,plain,(
  ( ! [X50,X49] : (s(bool,X49) != s(bool,X50) | s(bool,X49) = s(bool,g(s(bool,'F_0'))) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl70)),
  inference(superposition,[],[f10103,f3018])).
fof(f19575,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,f(s(bool,X12)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f19574,f146])).
fof(f19574,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12) | s(bool,X12) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,f(s(bool,X12)))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f12537,f218])).
fof(f12537,plain,(
  ( ! [X12] : (s(bool,X12) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X12) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X12)))) ) | $spl70),
  inference(superposition,[],[f10103,f146])).
fof(f19344,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19343])).
fof(f19343,plain,(
  ( ! [X352,X354,X353] : (s(bool,'T_0') = s(bool,X352) | s(bool,'T_0') = s(bool,f(s(bool,X352))) | s(bool,X354) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X353) = s(bool,X354)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f19342,f5666])).
fof(f19342,plain,(
  ( ! [X352,X354,X353] : (s(bool,'T_0') = s(bool,X352) | s(bool,X352) != s(bool,X353) | s(bool,'T_0') = s(bool,f(s(bool,X352))) | s(bool,X354) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X353) = s(bool,X354)) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f17656,f218])).
fof(f17656,plain,(
  ( ! [X352,X354,X353] : (s(bool,X352) != s(bool,X353) | s(bool,X352) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X352))) | s(bool,X354) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X353) = s(bool,X354)) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f28276,plain,(
  ( ! [X4,X3] : (s(bool,X4) != s(bool,f(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28192,f20705])).
fof(f28192,plain,(
  ( ! [X4,X3] : (s(bool,X4) != s(bool,f(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f28277,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,f(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28193,f20705])).
fof(f28193,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,f(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f28221,plain,(
  ( ! [X82] : (s(bool,X82) != s(bool,f(s(bool,X82))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X82)) ) | $spl70),
  inference(superposition,[],[f10103,f39])).
fof(f28340,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f39])).
fof(f28731,plain,(
  ( ! [X4,X3] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28342,f20705])).
fof(f28342,plain,(
  ( ! [X4,X3] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f54])).
fof(f28732,plain,(
  ( ! [X6,X5] : (s(bool,X6) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28343,f20705])).
fof(f28343,plain,(
  ( ! [X6,X5] : (s(bool,X6) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f54])).
fof(f28400,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,X7))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f9692])).
fof(f33780,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,f(s(bool,X13))) | s(bool,X14) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28405,f20705])).
fof(f28405,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,f(s(bool,X13))) | s(bool,X14) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f54])).
fof(f33778,plain,(
  ( ! [X19,X20] : (s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28408,f20705])).
fof(f28408,plain,(
  ( ! [X19,X20] : (s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f54])).
fof(f33772,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33771])).
fof(f33771,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f33770])).
fof(f33770,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33769])).
fof(f33769,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,f(s(bool,X29))) | s(bool,X30) = s(bool,X31) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28411,f10249])).
fof(f28411,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,f(s(bool,X29))) | s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,g(s(bool,'F_0'))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f33767,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33766])).
fof(f33766,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f33765])).
fof(f33765,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33764])).
fof(f33764,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,f(s(bool,X33))) | s(bool,X34) = s(bool,X35) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28412,f10249])).
fof(f28412,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,f(s(bool,X33))) | s(bool,X34) = s(bool,X35) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,X34) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f33760,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28431,f20705])).
fof(f28431,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f54])).
fof(f33758,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28432,f20705])).
fof(f28432,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f54])).
fof(f33756,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33755])).
fof(f33755,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f33754])).
fof(f33754,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33753])).
fof(f33753,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,f(s(bool,X27))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28439,f10249])).
fof(f28439,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,f(s(bool,X27))) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f33749,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33748])).
fof(f33748,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f33747])).
fof(f33747,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33746])).
fof(f33746,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') = s(bool,f(s(bool,X35))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28441,f10249])).
fof(f28441,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') = s(bool,f(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f28461,plain,(
  ( ! [X83] : (s(bool,'T_0') = s(bool,f(s(bool,X83))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X83)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f39])).
fof(f28508,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f39,f12618])).
fof(f28803,plain,(
  ( ! [X10,X9] : (s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28513,f20705])).
fof(f28513,plain,(
  ( ! [X10,X9] : (s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f54,f12618])).
fof(f28804,plain,(
  ( ! [X12,X11] : (s(bool,X12) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,f(s(bool,X11)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28514,f20705])).
fof(f28514,plain,(
  ( ! [X12,X11] : (s(bool,X12) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,f(s(bool,X11)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f54,f12618])).
fof(f28590,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,X7) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X7)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f9692,f12618])).
fof(f33713,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X23) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X22)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28600,f20705])).
fof(f28600,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X23) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,f(s(bool,X22)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f54,f12618])).
fof(f33711,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X28)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28603,f20705])).
fof(f28603,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,f(s(bool,X28)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f54,f12618])).
fof(f33706,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33705])).
fof(f33705,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f33704])).
fof(f33704,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33703])).
fof(f33703,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,X46) | s(bool,X45) = s(bool,X47) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,f(s(bool,X44)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28610,f10249])).
fof(f28610,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,X46) | s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,X45) = s(bool,X47) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,f(s(bool,X44)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f33701,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33700])).
fof(f33700,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f33699])).
fof(f33699,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f33698])).
fof(f33698,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,X50) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,'T_0') = s(bool,f(s(bool,X48)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28611,f10249])).
fof(f28611,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,X50) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X48)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f29560,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29559])).
fof(f29559,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X69) = s(bool,f(s(bool,X67)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28693,f29557])).
fof(f28693,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X69) = s(bool,f(s(bool,X67))) | s(bool,X67) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f28669])).
fof(f28669,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X68) | s(bool,X69) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X69) = s(bool,f(s(bool,X67))) | s(bool,X67) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f5666,f12618])).
fof(f29609,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29608])).
fof(f29608,plain,(
  ( ! [X52,X53,X51] : (s(bool,'T_0') = s(bool,X51) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X53) = s(bool,f(s(bool,X51)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28714,f29557])).
fof(f28714,plain,(
  ( ! [X52,X53,X51] : (s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,g(s(bool,'F_0'))) | s(bool,X53) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X53) = s(bool,f(s(bool,X51)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f28500])).
fof(f28500,plain,(
  ( ! [X52,X53,X51] : (s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X53) = s(bool,f(s(bool,X51)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f5666])).
fof(f29652,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl70 | $spl76)),
  inference(condensation,[],[f29651])).
fof(f29651,plain,(
  ( ! [X73] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28364,f19301])).
fof(f28364,plain,(
  ( ! [X73] : (s(bool,X73) = s(bool,g(s(bool,X73))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f39])).
fof(f29654,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29653])).
fof(f29653,plain,(
  ( ! [X61,X62,X60] : (s(bool,'T_0') = s(bool,X60) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X62) = s(bool,f(s(bool,X60)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28333,f29557])).
fof(f28333,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X62) = s(bool,f(s(bool,X60)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f28266,f3018])).
fof(f28266,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X60) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X62) = s(bool,f(s(bool,X60)))) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f31054,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29557,f12618])).
fof(f31071,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f29557])).
fof(f31503,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(unit_resulting_resolution,[],[f38,f29570])).
fof(f31504,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f39])).
fof(f33555,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f33554])).
fof(f33554,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31506,f56])).
fof(f31506,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f54])).
fof(f33552,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f33551])).
fof(f33551,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31507,f56])).
fof(f31507,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f54])).
fof(f31551,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31550])).
fof(f31550,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f31549])).
fof(f31549,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31548])).
fof(f31548,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31515,f1687])).
fof(f31515,plain,(
  ( ! [X30,X33,X31,X32] : (p(s(bool,X31)) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f1178])).
fof(f33543,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f33542])).
fof(f33542,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') = s(bool,f(s(bool,X34))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31516,f56])).
fof(f31516,plain,(
  ( ! [X37,X35,X36,X34] : (p(s(bool,X35)) | s(bool,'T_0') = s(bool,f(s(bool,X34))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f1178])).
fof(f31555,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31554])).
fof(f31554,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f31553])).
fof(f31553,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31552])).
fof(f31552,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,f(s(bool,X38))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31517,f1687])).
fof(f31517,plain,(
  ( ! [X39,X41,X38,X40] : (p(s(bool,X39)) | s(bool,'T_0') = s(bool,f(s(bool,X38))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f1178])).
fof(f31567,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31566])).
fof(f31566,plain,(
  ( ! [X77] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X77)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31531,f56])).
fof(f31531,plain,(
  ( ! [X77] : (p(s(bool,X77)) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X77)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f39])).
fof(f31576,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f31575,f29637])).
fof(f31575,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f31574])).
fof(f31574,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31573])).
fof(f31573,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31572])).
fof(f31572,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,X85) = s(bool,X86)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31543,f1687])).
fof(f31543,plain,(
  ( ! [X85,X86,X84] : (p(s(bool,X84)) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,X85) = s(bool,X86)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f5666])).
fof(f31579,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f31578,f29637])).
fof(f31578,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(condensation,[],[f31577])).
fof(f31577,plain,(
  ( ! [X87] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X87)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31544,f56])).
fof(f31544,plain,(
  ( ! [X87] : (p(s(bool,X87)) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X87)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f146])).
fof(f31875,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f31874,f29637])).
fof(f31874,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31816,f38])).
fof(f31816,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f29637])).
fof(f19559,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19558])).
fof(f19558,plain,(
  ( ! [X210,X208,X211,X209] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X209),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X210),s('type.semanticPrimitives.store_v'('type.modSem.v'),X211))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X209),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X210),s('type.semanticPrimitives.store_v'('type.modSem.v'),X211))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X209))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X210))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X211))) | s(bool,'T_0') = s(bool,X208)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f13251,f9640])).
fof(f13251,plain,(
  ( ! [X210,X208,X211,X209] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X209),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X210),s('type.semanticPrimitives.store_v'('type.modSem.v'),X211))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X209),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X210),s('type.semanticPrimitives.store_v'('type.modSem.v'),X211))))) | s(bool,X208) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X209))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X210))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X211))) | s(bool,'T_0') = s(bool,X208)) ) | $spl70),
  inference(superposition,[],[f10103,f1156])).
fof(f28586,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f9692,f12618])).
fof(f28672,plain,(
  ( ! [X73] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X73))))) | s(bool,X73) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f9692,f12618])).
fof(f28692,plain,(
  ( ! [X79] : (s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X79))) | s(bool,X79) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(trivial_inequality_removal,[],[f28678])).
fof(f28678,plain,(
  ( ! [X79] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X79))) | s(bool,X79) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f20705,f12618])).
fof(f28396,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f12618])).
fof(f28377,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f39])).
fof(f22984,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | ($spl12 | $spl68 | $spl76)),
  inference(forward_demodulation,[],[f22873,f20634])).
fof(f22873,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | ($spl12 | $spl68 | $spl76)),
  inference(superposition,[],[f20705,f5666])).
fof(f12539,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X17) != s(bool,X18) | s(bool,X17) = s(bool,g(s(bool,'F_0'))) | s(bool,X19) = s(bool,f(s(bool,X17))) | s(bool,'T_0') = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f20702,plain,(
  ( ! [X185,X186,X184] : (s(bool,X184) != s(bool,f(s(bool,X184))) | s(bool,X185) = s(bool,X186) | s(bool,X184) = s(bool,X186) | s(bool,'T_0') = s(bool,X185)) ) | ($spl12 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f6609,f284,f218,f75,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f12140,f12142,f11934,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f16934,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19079,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12539,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19559,f19556,f13571,f13380,f14184,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19409,f19379,f19377,f19049,f19369,f18017,f18011,f18010,f19083,f19359,f17634,f17635,f17636,f17639,f17641,f19344,f19340,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f11738,f20634,f12177,f38,f212,f213,f3018,f9245,f9246,f9692,f9888,f10103,f10132,f10249,f12102,f12604,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12152,f12218,f12220,f12236,f510,f766,f12115,f12155,f12150,f19392])).
fof(f19392,plain,(
  ( ! [X185,X186,X184] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X184) != s(bool,f(s(bool,X184))) | s(bool,'T_0') = s(bool,X185) | s(bool,X184) = s(bool,X186) | s(bool,X185) = s(bool,X186)) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f19391,f218])).
fof(f19391,plain,(
  ( ! [X185,X186,X184] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X184) != s(bool,f(s(bool,X184))) | s(bool,'T_0') = s(bool,X185) | s(bool,X184) = s(bool,X186) | s(bool,X185) = s(bool,X186)) ) | $spl70),
  inference(forward_demodulation,[],[f17248,f75])).
fof(f17248,plain,(
  ( ! [X185,X186,X184] : (s(bool,X184) != s(bool,f(s(bool,X184))) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X185) | s(bool,X184) = s(bool,X186) | s(bool,X185) = s(bool,X186)) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f20701,plain,(
  ( ! [X194,X195,X193] : (s(bool,X193) != s(bool,g(s(bool,X193))) | s(bool,X194) = s(bool,X195) | s(bool,X193) = s(bool,X195) | s(bool,'T_0') = s(bool,X194)) ) | ($spl12 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f6609,f284,f218,f75,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f12140,f12142,f11934,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f16934,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19079,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f13559,f13571,f13380,f14184,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19499,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15574,f15575,f15576,f15625,f15631,f15583,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19404,f19377,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19340,f17696,f19304,f19178,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f11738,f20634,f12177,f38,f212,f213,f3018,f9245,f9246,f9692,f9888,f10132,f10249,f10519,f12102,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12152,f12218,f12220,f12236,f510,f766,f12115,f12155,f12150,f19301,f19389])).
fof(f19389,plain,(
  ( ! [X194,X195,X193] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X193) != s(bool,g(s(bool,X193))) | s(bool,'T_0') = s(bool,X194) | s(bool,X193) = s(bool,X195) | s(bool,X194) = s(bool,X195)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19388,f218])).
fof(f19357,plain,(
  ( ! [X182,X183,X181] : (s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,'T_0') = s(bool,X181) | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X182) = s(bool,X183)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17601,f9640])).
fof(f17601,plain,(
  ( ! [X182,X183,X181] : (s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,X181) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X181) | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X182) = s(bool,X183)) ) | $spl76),
  inference(superposition,[],[f10519,f5666])).
fof(f19374,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19373])).
fof(f19373,plain,(
  ( ! [X401,X400,X402] : (s(bool,'T_0') = s(bool,X400) | s(bool,X400) != s(bool,X401) | s(bool,'T_0') = s(bool,X402) | s(bool,X401) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f19372,f10195])).
fof(f19372,plain,(
  ( ! [X401,X400,X402] : (s(bool,'T_0') = s(bool,X400) | s(bool,X400) != s(bool,X401) | s(bool,'T_0') = s(bool,X402) | s(bool,X401) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X402) = s(bool,g(s(bool,X400)))) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f17519,f218])).
fof(f19379,plain,(
  ( ! [X366,X368,X367] : (s(bool,'T_0') = s(bool,X366) | s(bool,X366) != s(bool,X367) | s(bool,'T_0') = s(bool,X368) | s(bool,X367) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X368) = s(bool,f(s(bool,X366)))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f17511,f218])).
fof(f17511,plain,(
  ( ! [X366,X368,X367] : (s(bool,X366) != s(bool,X367) | s(bool,X366) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X368) | s(bool,X367) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X368) = s(bool,f(s(bool,X366)))) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f15625,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f15624])).
fof(f15624,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X40) = s(bool,g(s(bool,X38))) | s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15577,f3018])).
fof(f15593,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl76)),
  inference(duplicate_literal_removal,[],[f15557])).
fof(f15557,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl76)),
  inference(superposition,[],[f10519,f9692])).
fof(f19461,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X107),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,X110) != s(bool,g(s(bool,X110))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X107))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,'T_0') = s(bool,X110)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f15555,f218])).
fof(f15555,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,X110) != s(bool,g(s(bool,X110))) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X107),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X107))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X108))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X109))) | s(bool,'T_0') = s(bool,X110)) ) | $spl76),
  inference(superposition,[],[f10519,f1156])).
fof(f15619,plain,(
  ( ! [X105,X106,X104] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X104))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))) | s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X104),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X104),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106)))))) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f15554,f218])).
fof(f19464,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X96))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X97))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X98))) | s(bool,X99) != s(bool,g(s(bool,X99))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X96),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X97),s('type.semanticPrimitives.store_v'('type.modSem.v'),X98))) | s(bool,'T_0') = s(bool,X99)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f15552,f218])).
fof(f15552,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,X99) != s(bool,g(s(bool,X99))) | s(bool,g(s(bool,'F_0'))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X96))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X97))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X98))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X96),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X97),s('type.semanticPrimitives.store_v'('type.modSem.v'),X98))) | s(bool,'T_0') = s(bool,X99)) ) | $spl76),
  inference(superposition,[],[f10519,f1198])).
fof(f19467,plain,(
  ( ! [X95] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X95) != s(bool,g(s(bool,X95))) | s(bool,'T_0') = s(bool,X95)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19466,f218])).
fof(f19466,plain,(
  ( ! [X95] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X95) != s(bool,g(s(bool,X95))) | s(bool,'T_0') = s(bool,X95)) ) | $spl76),
  inference(forward_demodulation,[],[f15551,f75])).
fof(f15551,plain,(
  ( ! [X95] : (s(bool,X95) != s(bool,g(s(bool,X95))) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X95)) ) | $spl76),
  inference(superposition,[],[f10519,f146])).
fof(f19473,plain,(
  ( ! [X80] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X80) != s(bool,g(s(bool,X80))) | s(bool,'T_0') = s(bool,X80)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f15531,f218])).
fof(f15531,plain,(
  ( ! [X80] : (s(bool,X80) != s(bool,g(s(bool,X80))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X80)) ) | $spl76),
  inference(superposition,[],[f10519,f39])).
fof(f15594,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,g(s(bool,X55))) | s(bool,X54) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X55)) ) | ($spl12 | $spl76)),
  inference(duplicate_literal_removal,[],[f15517])).
fof(f15517,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,g(s(bool,X55))) | s(bool,X54) = s(bool,g(s(bool,'F_0'))) | s(bool,X54) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X55)) ) | ($spl12 | $spl76)),
  inference(superposition,[],[f10519,f3018])).
fof(f19480,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19479,f53])).
fof(f19479,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19478])).
fof(f19478,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) != s(bool,g(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X47))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X47),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X48),s('type.semanticPrimitives.store_v'('type.modSem.v'),X49))) | s(bool,'T_0') = s(bool,X46)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15514,f9640])).
fof(f19483,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19482])).
fof(f19482,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) != s(bool,g(s(bool,X43))) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X42)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15513,f9640])).
fof(f15513,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) != s(bool,g(s(bool,X43))) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X42)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f19488,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19487])).
fof(f19487,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19486])).
fof(f19486,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X3) != s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19485])).
fof(f19485,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) != s(bool,g(s(bool,X39))) | s(bool,X38) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X39)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15512,f10249])).
fof(f15512,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) != s(bool,g(s(bool,X39))) | s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X38) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X39)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f19491,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19490])).
fof(f19490,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,g(s(bool,X35))) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15511,f9640])).
fof(f15511,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,g(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f19496,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19495])).
fof(f19495,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X2) != s(bool,g(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl76)),
  inference(duplicate_literal_removal,[],[f19494])).
fof(f19494,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X2) != s(bool,g(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19493])).
fof(f19493,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,g(s(bool,X31))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15510,f10249])).
fof(f15510,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,g(s(bool,X31))) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl76),
  inference(superposition,[],[f10519,f1178])).
fof(f19503,plain,(
  ( ! [X9] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19502,f218])).
fof(f19502,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl76)),
  inference(forward_demodulation,[],[f19501,f75])).
fof(f19501,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15504,f9640])).
fof(f19506,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19505])).
fof(f19505,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,g(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15502,f9640])).
fof(f15502,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,g(s(bool,X6))) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | $spl76),
  inference(superposition,[],[f10519,f54])).
fof(f19509,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,X0)))) ) | ($spl12 | $spl76)),
  inference(condensation,[],[f19508])).
fof(f19508,plain,(
  ( ! [X4,X3] : (s(bool,X4) != s(bool,g(s(bool,X4))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15501,f9640])).
fof(f15501,plain,(
  ( ! [X4,X3] : (s(bool,X4) != s(bool,g(s(bool,X4))) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | $spl76),
  inference(superposition,[],[f10519,f54])).
fof(f19556,plain,(
  ( ! [X350,X352,X351,X353] : (s(bool,'T_0') = s(bool,X350) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X351))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X352))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X353))) | s(bool,'T_0') = s(bool,f(s(bool,X350)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f19555,f1156])).
fof(f19555,plain,(
  ( ! [X350,X352,X351,X353] : (s(bool,'T_0') = s(bool,X350) | s(bool,X350) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X351),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X352),s('type.semanticPrimitives.store_v'('type.modSem.v'),X353))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X351))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X352))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X353))) | s(bool,'T_0') = s(bool,f(s(bool,X350)))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f13260,f218])).
fof(f13260,plain,(
  ( ! [X350,X352,X351,X353] : (s(bool,X350) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X351),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X352),s('type.semanticPrimitives.store_v'('type.modSem.v'),X353))) | s(bool,X350) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X351))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X352))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X353))) | s(bool,'T_0') = s(bool,f(s(bool,X350)))) ) | $spl70),
  inference(superposition,[],[f10103,f1156])).
fof(f12547,plain,(
  ( ! [X47,X48] : (s(bool,'T_0') != s(bool,X47) | s(bool,X47) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,f(s(bool,X47)))) ) | ($spl12 | $spl70)),
  inference(superposition,[],[f10103,f3018])).
fof(f12612,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12611])).
fof(f12611,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12610])).
fof(f12610,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12609])).
fof(f12609,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X41) = s(bool,g(s(bool,'F_0'))) | s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12545,f9888])).
fof(f12545,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X41) != s(bool,X42) | s(bool,X41) = s(bool,g(s(bool,'F_0'))) | s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f12608,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12607])).
fof(f12607,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl70)),
  inference(duplicate_literal_removal,[],[f12606])).
fof(f12606,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12605])).
fof(f12605,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X33) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,f(s(bool,X33))) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12543,f9888])).
fof(f12543,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X33) != s(bool,X34) | s(bool,X33) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,f(s(bool,X33))) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f12541,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'T_0') != s(bool,X25) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X26) = s(bool,f(s(bool,X25)))) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f12540,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | s(bool,X21) = s(bool,g(s(bool,'F_0'))) | s(bool,X22) = s(bool,X23) | s(bool,X23) = s(bool,f(s(bool,X21))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f12538,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,X13) != s(bool,X14) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,f(s(bool,X13))) | s(bool,'T_0') = s(bool,X16)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f12536,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') != s(bool,X10) | s(bool,X10) = s(bool,g(s(bool,'F_0'))) | s(bool,X11) = s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X11)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f12602,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12601])).
fof(f12601,plain,(
  ( ! [X8,X9] : (s(bool,X8) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12535,f3018])).
fof(f12535,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,X9) | s(bool,X8) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f12600,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f12599])).
fof(f12599,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,X6)))) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12534,f3018])).
fof(f12534,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,X6)))) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f12533,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X4) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,X5) = s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X5)) ) | $spl70),
  inference(superposition,[],[f10103,f54])).
fof(f12532,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,X3) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl70),
  inference(superposition,[],[f10103,f39])).
fof(f19590,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19589])).
fof(f19589,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12493,f9640])).
fof(f12493,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) != s(bool,f(s(bool,X39))) | s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f19593,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19592])).
fof(f19592,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,f(s(bool,X31))) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12491,f9640])).
fof(f12491,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,f(s(bool,X31))) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f50959,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(condensation,[],[f50958])).
fof(f50958,plain,(
  ( ! [X165,X164] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X164) = s(bool,X165) | s(bool,'F_0') = s(bool,X165)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(subsumption_resolution,[],[f50574,f40412])).
fof(f50574,plain,(
  ( ! [X165,X164] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X164) = s(bool,X165) | s(bool,'F_0') = s(bool,X165) | s(bool,'T_0') = s(bool,X164)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(superposition,[],[f40412,f12459])).
fof(f50951,plain,(
  ( ! [X153] : (s(bool,X153) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X153)) ) | $spl226),
  inference(cnf_transformation,[],[f50951_D])).
fof(f50951_D,plain,(
  ( ! [X153] : (s(bool,X153) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X153)) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f50748,plain,(
  ( ! [X152,X153] : (s(bool,X153) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X152) | s(bool,'F_0') = s(bool,X153)) ) | ($spl12 | $spl24 | $spl64)),
  inference(duplicate_literal_removal,[],[f50568])).
fof(f50568,plain,(
  ( ! [X152,X153] : (s(bool,X153) != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X152) | s(bool,'F_0') = s(bool,X153) | s(bool,'T_0') = s(bool,X152)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f12459])).
fof(f50948,plain,(
  ( ! [X139] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X139)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f50754,f34559])).
fof(f34559,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f29570,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6049,f6050,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6325,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6497,f6483,f6484,f5993,f6513,f6586,f6616,f6617,f6462,f218,f7490,f7444,f7446,f7578,f7635,f7687,f7689,f7767,f7769,f8576,f8673,f8799,f8869,f8943,f8965,f9092,f9099,f9959,f9965,f9967,f9884,f9858,f9839,f9983,f9807,f9673,f9672,f10105,f10106,f9521,f9524,f9525,f10133,f9612,f10270,f10195,f10282,f10284,f10305,f10306,f10500,f10492,f10464,f10731,f10565,f10582,f10748,f10770,f10774,f10776,f10782,f10783,f10664,f10901,f10908,f10932,f10933,f10934,f10936,f11145,f11149,f11049,f11419,f11420,f11422,f11775,f12093,f12097,f11792,f11793,f12107,f12109,f12126,f11934,f12223,f12237,f12402,f12404,f12459,f12722,f13039,f13043,f12739,f12740,f12741,f13050,f13056,f13067,f13082,f13088,f13100,f13102,f13110,f13111,f12898,f13114,f13123,f13601,f13607,f13778,f13806,f14399,f14465,f14836,f14979,f15093,f16292,f16300,f16176,f16462,f16474,f16501,f18600,f16503,f18580,f18559,f18558,f18607,f18556,f18609,f18668,f18671,f18395,f18357,f18338,f18707,f18709,f18311,f18711,f18307,f18714,f18293,f16934,f16936,f16939,f16940,f18732,f18751,f18763,f18764,f17102,f18940,f18048,f19018,f19020,f19022,f18029,f18026,f18021,f18020,f19030,f17984,f19079,f19087,f17980,f19094,f19100,f19101,f19102,f19103,f19104,f19105,f19106,f17928,f19218,f19220,f17927,f19250,f19256,f19259,f19262,f19265,f19268,f17913,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f19954,f11310,f11274,f11275,f17104,f17845,f9064,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f10135,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f7986,f8124,f8121,f8128,f8111,f8105,f8132,f19732,f8135,f8137,f19728,f19726,f19721,f8706,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9057,f9142,f9144,f9147,f10005,f10060,f9486,f10109,f19687,f19682,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f12222,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f12388,f13559,f19553,f13571,f13359,f19541,f13380,f8087,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18253,f18252,f17106,f19412,f18807,f19397,f17206,f19394,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f19347,f19329,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f9317,f9098,f9097,f19383,f14199,f20714,f19621,f19623,f6512,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f17508,f19377,f20764,f19340,f20771,f19211,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f6306,f30656,f30657,f30659,f22217,f22337,f20763,f20639,f18976,f18975,f18840,f18750,f18730,f12163,f10249,f10132,f9888,f9246,f9245,f6504,f3018,f19643,f19641,f19637,f19635,f30700,f30773,f30770,f30702,f30481,f30491,f30703,f30701,f9692,f212,f38,f19324,f19633,f9640,f6309,f284,f213,f12151,f17103,f34282,f12178,f34283,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f8756,f19254,f18971,f18779,f18777,f18775,f12102,f18954,f18843,f221,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f14977,f13599,f766,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272])).
fof(f30701,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,g(s(bool,'T_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl31),
  inference(trivial_inequality_removal,[],[f30688])).
fof(f30688,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,g(s(bool,'T_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl31),
  inference(superposition,[],[f6306,f1178])).
fof(f30491,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl31),
  inference(unit_resulting_resolution,[],[f38,f6306,f88])).
fof(f30481,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f39])).
fof(f30702,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl31),
  inference(trivial_inequality_removal,[],[f30685])).
fof(f30685,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl31),
  inference(superposition,[],[f6306,f54])).
fof(f30770,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | $spl31),
  inference(condensation,[],[f30769])).
fof(f30769,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl31),
  inference(condensation,[],[f30768])).
fof(f30768,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl31),
  inference(subsumption_resolution,[],[f30686,f54])).
fof(f30686,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl31),
  inference(superposition,[],[f6306,f1178])).
fof(f30773,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl31),
  inference(duplicate_literal_removal,[],[f30772])).
fof(f30772,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl31),
  inference(condensation,[],[f30771])).
fof(f30771,plain,(
  ( ! [X8,X7,X9] : (s(bool,X8) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl31),
  inference(subsumption_resolution,[],[f30687,f54])).
fof(f30687,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,X7) | s(bool,X8) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl31),
  inference(superposition,[],[f6306,f1178])).
fof(f30700,plain,(
  ( ! [X14,X15,X13] : (s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X13) = s(bool,g(s(bool,'T_0')))) ) | $spl31),
  inference(trivial_inequality_removal,[],[f30689])).
fof(f30689,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X13) = s(bool,g(s(bool,'T_0')))) ) | $spl31),
  inference(superposition,[],[f6306,f1178])).
fof(f6504,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl17),
  inference(condensation,[],[f6503])).
fof(f6503,plain,(
  ( ! [X17,X18,X16] : (s(bool,X17) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl17),
  inference(subsumption_resolution,[],[f6487,f39])).
fof(f6487,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,X16) | s(bool,X17) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f20639,plain,(
  ( ! [X99] : (s(bool,X99) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X99)) ) | ($spl12 | $spl17)),
  inference(global_subsumption,[],[f9317,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f766,f510,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f218,f75,f9888,f9884,f9858,f9839,f9807,f9692,f10132,f9612,f9640,f10249,f10195,f11775,f11792,f12102,f12115,f12140,f12142,f12150,f12152,f11934,f12155,f12220,f12218,f12236,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f18730,f16934,f18750,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19079,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f13559,f13571,f13380,f14184,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19377,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19340,f17696,f19304,f19178,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f11738,f20634,f12177,f38,f212,f213,f3018,f9245,f9246])).
fof(f22337,plain,(
  ( ! [X8,X7] : (~p(s(bool,X8)) | s(bool,X8) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl17),
  inference(subsumption_resolution,[],[f22239,f37])).
fof(f22239,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | s(bool,X8) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl17),
  inference(superposition,[],[f51,f20714])).
fof(f22217,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X72),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X73),s('type.semanticPrimitives.store_v'('type.modSem.v'),X74))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X72))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X73))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X74)))) ) | $spl17),
  inference(superposition,[],[f20714,f53])).
fof(f30659,plain,(
  ( ! [X12,X11] : (s(bool,X11) != s(bool,g(s(bool,X11))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl31),
  inference(superposition,[],[f6306,f54])).
fof(f30657,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X3) != s(bool,g(s(bool,X3))) | s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X3) = s(bool,X4)) ) | $spl31),
  inference(superposition,[],[f6306,f1178])).
fof(f30656,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl31),
  inference(superposition,[],[f6306,f5666])).
fof(f19211,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(condensation,[],[f19210])).
fof(f19210,plain,(
  ( ! [X358,X357,X359] : (s(bool,'T_0') = s(bool,X357) | s(bool,'T_0') = s(bool,X358) | s(bool,X359) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X359) = s(bool,f(s(bool,X357)))) ) | $spl17),
  inference(subsumption_resolution,[],[f17798,f54])).
fof(f17798,plain,(
  ( ! [X358,X357,X359] : (s(bool,X357) != s(bool,X358) | s(bool,'T_0') = s(bool,X357) | s(bool,'T_0') = s(bool,X358) | s(bool,X359) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X359) = s(bool,f(s(bool,X357)))) ) | $spl17),
  inference(superposition,[],[f6464,f5666])).
fof(f17508,plain,(
  ( ! [X358,X357,X359] : (s(bool,X357) != s(bool,X358) | s(bool,'T_0') = s(bool,X357) | s(bool,'T_0') = s(bool,X359) | s(bool,X358) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X359) = s(bool,f(s(bool,X357)))) ) | $spl17),
  inference(superposition,[],[f6464,f5666])).
fof(f6512,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(condensation,[],[f6511])).
fof(f6511,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(condensation,[],[f6510])).
fof(f6510,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(condensation,[],[f6509])).
fof(f6509,plain,(
  ( ! [X26,X27,X25] : (s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(subsumption_resolution,[],[f6490,f5680])).
fof(f6490,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') != s(bool,X25) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f20714,plain,(
  ( ! [X363] : (s(bool,'T_0') = s(bool,f(s(bool,X363))) | s(bool,'T_0') = s(bool,X363)) ) | $spl17),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6483,f6484,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f17984,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f221,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f6512,f8121,f8128,f8111,f8105,f19732,f8135,f8137,f19728,f19726,f19721,f19625,f19623,f19621,f19553,f13571,f13380,f8087,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19412,f17508,f19377,f18017,f18011,f17634,f19347,f19340,f17696,f19211,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f6504,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f14199])).
fof(f14199,plain,(
  ( ! [X364,X366,X365,X363] : (s(bool,'T_0') = s(bool,X363) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X364),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X365),s('type.semanticPrimitives.store_v'('type.modSem.v'),X366))) | s(bool,'T_0') = s(bool,f(s(bool,X363)))) ) | $spl17),
  inference(subsumption_resolution,[],[f13955,f1198])).
fof(f13955,plain,(
  ( ! [X364,X366,X365,X363] : (s(bool,X363) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X364))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X365))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X366))) | s(bool,'T_0') = s(bool,X363) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X364),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X365),s('type.semanticPrimitives.store_v'('type.modSem.v'),X366))) | s(bool,'T_0') = s(bool,f(s(bool,X363)))) ) | $spl17),
  inference(superposition,[],[f6464,f1198])).
fof(f9097,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6(X8,X9,bool,bool)) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | ($spl12 | $spl17)),
  inference(subsumption_resolution,[],[f9040,f37])).
fof(f9040,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6(X8,X9,bool,bool)) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f51,f6325])).
fof(f9098,plain,(
  ( ! [X35,X36,X34] : (s(bool,g(s(bool,X36))) = s(bool,sK6(X34,X35,bool,bool)) | s(bool,'T_0') = s(bool,X36) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35)) ) | ($spl12 | $spl17)),
  inference(subsumption_resolution,[],[f9049,f37])).
fof(f9049,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X36))) = s(bool,sK6(X34,X35,bool,bool)) | s(bool,'T_0') = s(bool,X36) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f510,f6325])).
fof(f9317,plain,(
  ( ! [X99,X100] : (s(bool,X99) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X99) | s(bool,X100) = s(bool,f(s(bool,X99))) | s(bool,'T_0') = s(bool,X100)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f6464,f3018])).
fof(f19347,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | $spl17),
  inference(condensation,[],[f19346])).
fof(f19346,plain,(
  ( ! [X344,X343,X345] : (s(bool,'T_0') = s(bool,X343) | s(bool,'T_0') = s(bool,f(s(bool,X343))) | s(bool,X345) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X344) = s(bool,X345)) ) | $spl17),
  inference(subsumption_resolution,[],[f17653,f5666])).
fof(f17653,plain,(
  ( ! [X344,X343,X345] : (s(bool,X343) != s(bool,X344) | s(bool,'T_0') = s(bool,X343) | s(bool,'T_0') = s(bool,f(s(bool,X343))) | s(bool,X345) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X344) = s(bool,X345)) ) | $spl17),
  inference(superposition,[],[f6464,f5666])).
fof(f19394,plain,(
  ( ! [X161,X162,X160] : (s(bool,X160) != s(bool,f(s(bool,X160))) | s(bool,'T_0') = s(bool,X161) | s(bool,X160) = s(bool,X162) | s(bool,X161) = s(bool,X162)) ) | ($spl11 | $spl17)),
  inference(subsumption_resolution,[],[f17240,f191])).
fof(f17240,plain,(
  ( ! [X161,X162,X160] : (s(bool,X160) != s(bool,f(s(bool,X160))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X161) | s(bool,X160) = s(bool,X162) | s(bool,X161) = s(bool,X162)) ) | $spl17),
  inference(superposition,[],[f6464,f5666])).
fof(f19397,plain,(
  ( ! [X282,X281,X283] : (s(bool,X281) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X282) | s(bool,X283) = s(bool,g(s(bool,X281))) | s(bool,X282) = s(bool,X283)) ) | ($spl11 | $spl12)),
  inference(subsumption_resolution,[],[f17179,f191])).
fof(f17179,plain,(
  ( ! [X282,X281,X283] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X281) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X282) | s(bool,X283) = s(bool,g(s(bool,X281))) | s(bool,X282) = s(bool,X283)) ) | $spl12),
  inference(superposition,[],[f9692,f5666])).
fof(f19412,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(forward_demodulation,[],[f18183,f75])).
fof(f18183,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | $spl17),
  inference(condensation,[],[f18182])).
fof(f18182,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X0) = s(bool,X1)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f18181])).
fof(f18181,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | $spl17),
  inference(condensation,[],[f17140])).
fof(f17140,plain,(
  ( ! [X146,X147,X148] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X146) | s(bool,'T_0') = s(bool,X147) | s(bool,X146) = s(bool,X148) | s(bool,X147) = s(bool,X148)) ) | $spl17),
  inference(superposition,[],[f6464,f5666])).
fof(f19445,plain,(
  ( ! [X180,X178,X179] : (s(bool,'T_0') = s(bool,X179) | s(bool,X180) = s(bool,g(s(bool,X178))) | s(bool,X179) = s(bool,X180) | s(bool,X178) = s(bool,g(s(bool,'F_0')))) ) | ($spl11 | $spl12)),
  inference(subsumption_resolution,[],[f16610,f191])).
fof(f16610,plain,(
  ( ! [X180,X178,X179] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X179) | s(bool,X180) = s(bool,g(s(bool,X178))) | s(bool,X179) = s(bool,X180) | s(bool,X178) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(superposition,[],[f5666,f9692])).
fof(f8087,plain,(
  ( ! [X50,X51,X49] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X49),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X50),s('type.semanticPrimitives.store_v'('type.modSem.v'),X51))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X49),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X50),s('type.semanticPrimitives.store_v'('type.modSem.v'),X51))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X49))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X50))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X51)))) ) | $spl17),
  inference(superposition,[],[f6464,f53])).
fof(f19553,plain,(
  ( ! [X358,X360,X359,X361] : (s(bool,'T_0') = s(bool,X358) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X359))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X360))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X361))) | s(bool,'T_0') = s(bool,f(s(bool,X358)))) ) | $spl17),
  inference(subsumption_resolution,[],[f13262,f1156])).
fof(f13262,plain,(
  ( ! [X358,X360,X359,X361] : (s(bool,X358) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X359),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X360),s('type.semanticPrimitives.store_v'('type.modSem.v'),X361))) | s(bool,'T_0') = s(bool,X358) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X359))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X360))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X361))) | s(bool,'T_0') = s(bool,f(s(bool,X358)))) ) | $spl17),
  inference(superposition,[],[f6464,f1156])).
fof(f12388,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,g(s(bool,sK6(X75,X76,bool,bool)))) | s(fun(bool,bool),X75) = s(fun(bool,bool),X76)) ) | ($spl12 | $spl17 | $spl24)),
  inference(superposition,[],[f12163,f6325])).
fof(f12222,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f12168])).
fof(f12168,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(bool,'T_0') = s(bool,X2) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f1394,f6325])).
fof(f10272,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl11 | $spl12)),
  inference(forward_demodulation,[],[f10271,f218])).
fof(f10271,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | ($spl11 | $spl12)),
  inference(subsumption_resolution,[],[f10191,f191])).
fof(f10191,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl12),
  inference(superposition,[],[f9640,f75])).
fof(f10262,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl11 | $spl12)),
  inference(forward_demodulation,[],[f10261,f218])).
fof(f10261,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | ($spl11 | $spl12)),
  inference(forward_demodulation,[],[f10163,f75])).
fof(f10163,plain,(
  s(bool,g(s(bool,'F_0'))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl12)),
  inference(unit_resulting_resolution,[],[f191,f9640])).
fof(f19687,plain,(
  ( ! [X161] : (s(bool,'T_0') != s(bool,X161) | s(bool,X161) = s(bool,g(s(bool,'F_0')))) ) | ($spl11 | $spl12)),
  inference(subsumption_resolution,[],[f9502,f191])).
fof(f9502,plain,(
  ( ! [X161] : (s(bool,'T_0') != s(bool,X161) | s(bool,X161) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl11 | $spl12)),
  inference(superposition,[],[f191,f3018])).
fof(f10109,plain,(
  ( ! [X144,X143] : (s(bool,'T_0') = s(bool,X143) | s(bool,X144) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X143)))) ) | ($spl12 | $spl17)),
  inference(subsumption_resolution,[],[f9492,f3018])).
fof(f9492,plain,(
  ( ! [X144,X143] : (s(bool,X143) != s(bool,X144) | s(bool,'T_0') = s(bool,X143) | s(bool,X144) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X143)))) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f6464,f3018])).
fof(f10060,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl17)),
  inference(forward_demodulation,[],[f10059,f218])).
fof(f10059,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl17)),
  inference(condensation,[],[f10058])).
fof(f10058,plain,(
  ( ! [X144,X143] : (s(bool,'T_0') = s(bool,X143) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X143))) | s(bool,'T_0') = s(bool,X144)) ) | ($spl12 | $spl17)),
  inference(subsumption_resolution,[],[f9418,f54])).
fof(f9418,plain,(
  ( ! [X144,X143] : (s(bool,X143) != s(bool,X144) | s(bool,'T_0') = s(bool,X143) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X143))) | s(bool,'T_0') = s(bool,X144)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f6464,f3018])).
fof(f9057,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X77) | s(bool,X77) = s(bool,sK6(X75,X76,bool,bool)) | s(fun(bool,bool),X75) = s(fun(bool,bool),X76)) ) | ($spl12 | $spl17 | $spl24)),
  inference(superposition,[],[f5993,f6325])).
fof(f8706,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl11 | $spl24)),
  inference(unit_resulting_resolution,[],[f191,f191,f5993])).
fof(f19721,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(condensation,[],[f19720])).
fof(f19720,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl17),
  inference(duplicate_literal_removal,[],[f19719])).
fof(f19719,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | $spl17),
  inference(condensation,[],[f19718])).
fof(f19718,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X38)))) ) | $spl17),
  inference(subsumption_resolution,[],[f8103,f1178])).
fof(f8103,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X38) != s(bool,X39) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,f(s(bool,X38)))) ) | $spl17),
  inference(superposition,[],[f6464,f1178])).
fof(f19726,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(condensation,[],[f19725])).
fof(f19725,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f19724])).
fof(f19724,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl17),
  inference(condensation,[],[f19723])).
fof(f19723,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl17),
  inference(subsumption_resolution,[],[f8101,f1178])).
fof(f8101,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl17),
  inference(superposition,[],[f6464,f1178])).
fof(f19728,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | $spl17),
  inference(subsumption_resolution,[],[f8095,f146])).
fof(f8095,plain,(
  ( ! [X9] : (s(bool,X9) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | $spl17),
  inference(superposition,[],[f6464,f146])).
fof(f8137,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(condensation,[],[f8136])).
fof(f8136,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl17),
  inference(subsumption_resolution,[],[f8093,f54])).
fof(f8093,plain,(
  ( ! [X6,X5] : (s(bool,X5) != s(bool,X6) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl17),
  inference(superposition,[],[f6464,f54])).
fof(f8135,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(condensation,[],[f8134])).
fof(f8134,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl17),
  inference(subsumption_resolution,[],[f8092,f54])).
fof(f8092,plain,(
  ( ! [X4,X3] : (s(bool,X3) != s(bool,X4) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl17),
  inference(superposition,[],[f6464,f54])).
fof(f19732,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(subsumption_resolution,[],[f8090,f39])).
fof(f8090,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | $spl17),
  inference(superposition,[],[f6464,f39])).
fof(f8132,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | ($spl11 | $spl17)),
  inference(subsumption_resolution,[],[f8085,f191])).
fof(f8085,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl17),
  inference(superposition,[],[f6464,f75])).
fof(f8105,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl17),
  inference(condensation,[],[f8104])).
fof(f8104,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) != s(bool,f(s(bool,X39))) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f8073])).
fof(f8073,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) != s(bool,f(s(bool,X39))) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | $spl17),
  inference(superposition,[],[f6464,f1178])).
fof(f8111,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl17),
  inference(condensation,[],[f8110])).
fof(f8110,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,f(s(bool,X31))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f8071])).
fof(f8071,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,f(s(bool,X31))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl17),
  inference(superposition,[],[f6464,f1178])).
fof(f8128,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl17),
  inference(forward_demodulation,[],[f8116,f75])).
fof(f8116,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f8065])).
fof(f8065,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl17),
  inference(superposition,[],[f6464,f146])).
fof(f8121,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f8060])).
fof(f8060,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(superposition,[],[f6464,f39])).
fof(f8124,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | ($spl11 | $spl17)),
  inference(forward_demodulation,[],[f8057,f75])).
fof(f8057,plain,(
  s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl17)),
  inference(unit_resulting_resolution,[],[f191,f6464])).
fof(f6508,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(condensation,[],[f6507])).
fof(f6507,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f6506])).
fof(f6506,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl17),
  inference(condensation,[],[f6505])).
fof(f6505,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl17),
  inference(subsumption_resolution,[],[f6488,f5680])).
fof(f6488,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,X19) | s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6486,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X13) = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6485,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,f(s(bool,'F_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6482,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X3) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl17),
  inference(superposition,[],[f221,f54])).
fof(f6501,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(condensation,[],[f6500])).
fof(f6500,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl17),
  inference(subsumption_resolution,[],[f6481,f39])).
fof(f6481,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl17),
  inference(superposition,[],[f221,f54])).
fof(f6499,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(condensation,[],[f6498])).
fof(f6498,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(subsumption_resolution,[],[f6480,f39])).
fof(f6480,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl17),
  inference(superposition,[],[f221,f54])).
fof(f6479,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(superposition,[],[f221,f54])).
fof(f6491,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(trivial_inequality_removal,[],[f6478])).
fof(f6478,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(superposition,[],[f221,f39])).
fof(f6477,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,f(s(bool,X26))) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6475,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,X20))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6425,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(unit_resulting_resolution,[],[f221,f39])).
fof(f6426,plain,(
  p(s(bool,f(s(bool,'F_0')))) | $spl17),
  inference(unit_resulting_resolution,[],[f38,f221,f48])).
fof(f6440,plain,(
  p(s(bool,f(s(bool,'F_0')))) | $spl17),
  inference(unit_resulting_resolution,[],[f38,f221,f48])).
fof(f6442,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(unit_resulting_resolution,[],[f38,f221,f88])).
fof(f19902,plain,(
  ( ! [X160] : (s(bool,'F_0') = s(bool,X160) | s(bool,X160) = s(bool,g(s(bool,'F_0')))) ) | ($spl11 | $spl12)),
  inference(subsumption_resolution,[],[f9501,f191])).
fof(f9501,plain,(
  ( ! [X160] : (s(bool,'F_0') = s(bool,X160) | s(bool,X160) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(superposition,[],[f75,f3018])).
fof(f19910,plain,(
  ( ! [X96] : (s(bool,'F_0') = s(bool,X96) | s(bool,X96) = s(bool,g(s(bool,'F_0')))) ) | ($spl11 | $spl12)),
  inference(subsumption_resolution,[],[f9241,f191])).
fof(f9241,plain,(
  ( ! [X96] : (s(bool,'F_0') = s(bool,X96) | s(bool,X96) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(superposition,[],[f3018,f75])).
fof(f9064,plain,(
  ( ! [X90,X89] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X89) = s(fun(bool,bool),X90)) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f9063])).
fof(f9063,plain,(
  ( ! [X90,X89] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X89) = s(fun(bool,bool),X90) | s(fun(bool,bool),X89) = s(fun(bool,bool),X90)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f52,f6325])).
fof(f11310,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool))))) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f11265])).
fof(f11265,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f1272,f6325])).
fof(f19106,plain,(
  ( ! [X318,X320,X319] : (s(bool,X318) != s(bool,X319) | s(bool,'T_0') = s(bool,g(s(bool,X319))) | s(bool,X320) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X318) = s(bool,X320)) ) | ($spl3 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f17644,f63])).
fof(f19105,plain,(
  ( ! [X310,X309,X311] : (s(bool,X310) = s(bool,g(s(bool,X309))) | s(bool,'T_0') = s(bool,g(s(bool,X310))) | s(bool,X311) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X309) = s(bool,X311)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f17641,f63])).
fof(f19104,plain,(
  ( ! [X304,X303,X305] : (s(bool,X304) != s(bool,g(s(bool,X303))) | s(bool,'T_0') = s(bool,X304) | s(bool,X305) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X303) = s(bool,X305)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f17639,f63])).
fof(f19103,plain,(
  ( ! [X300,X298,X297,X299] : (s(bool,X297) != s(bool,X298) | s(bool,'T_0') = s(bool,X299) | s(bool,X298) = s(bool,X299) | s(bool,X300) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X297) = s(bool,X300)) ) | ($spl3 | $spl24)),
  inference(subsumption_resolution,[],[f17637,f63])).
fof(f19102,plain,(
  ( ! [X294,X296,X293,X295] : (s(bool,X294) = s(bool,g(s(bool,X293))) | s(bool,X294) = s(bool,X295) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X293) = s(bool,X296)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f17636,f63])).
fof(f19030,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12)),
  inference(condensation,[],[f19029])).
fof(f19029,plain,(
  ( ! [X288,X287,X289] : (s(bool,'T_0') = s(bool,X288) | s(bool,X287) != s(bool,X288) | s(bool,'T_0') = s(bool,X289) | s(bool,X287) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12)),
  inference(forward_demodulation,[],[f18019,f218])).
fof(f18019,plain,(
  ( ! [X288,X287,X289] : (s(bool,X287) != s(bool,X288) | s(bool,X288) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X289) | s(bool,X287) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12)),
  inference(duplicate_literal_removal,[],[f17484])).
fof(f17484,plain,(
  ( ! [X288,X287,X289] : (s(bool,X287) != s(bool,X288) | s(bool,X288) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X289) | s(bool,X287) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X289)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10105,f5666])).
fof(f18764,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,X198) = s(bool,f(s(bool,X199))) | s(bool,X200) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X200) = s(bool,X201) | s(bool,X198) = s(bool,X201)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f17030,f6306])).
fof(f17030,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X198) = s(bool,f(s(bool,X199))) | s(bool,X200) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X200) = s(bool,X201) | s(bool,X198) = s(bool,X201)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f5666])).
fof(f18763,plain,(
  ( ! [X167,X165,X166,X168] : (s(bool,X165) = s(bool,X166) | s(bool,'F_0') = s(bool,X166) | s(bool,X167) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X167) = s(bool,X168) | s(bool,X165) = s(bool,X168)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f17020,f37])).
fof(f17020,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,'T_0')) | s(bool,X165) = s(bool,X166) | s(bool,'F_0') = s(bool,X166) | s(bool,X167) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X167) = s(bool,X168) | s(bool,X165) = s(bool,X168)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f10748,f5666])).
fof(f18732,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'T_0') = s(bool,X63) | s(bool,X62) != s(bool,X63) | s(bool,X64) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X64) = s(bool,X65) | s(bool,X62) = s(bool,X65)) ) | ($spl3 | $spl12)),
  inference(forward_demodulation,[],[f16941,f218])).
fof(f16941,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X62) != s(bool,X63) | s(bool,X63) = s(bool,g(s(bool,'F_0'))) | s(bool,X64) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X64) = s(bool,X65) | s(bool,X62) = s(bool,X65)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10105,f5666])).
fof(f16939,plain,(
  ( ! [X57,X58,X56] : (s(bool,'F_0') = s(bool,g(s(bool,X56))) | s(bool,X57) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X57) = s(bool,X58) | s(bool,X56) = s(bool,X58)) ) | ($spl11 | $spl31)),
  inference(superposition,[],[f7490,f5666])).
fof(f16936,plain,(
  ( ! [X47,X45,X46] : (s(bool,X45) != s(bool,g(s(bool,X45))) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X46) = s(bool,X47) | s(bool,X45) = s(bool,X47)) ) | $spl31),
  inference(superposition,[],[f6306,f5666])).
fof(f18711,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(condensation,[],[f18710])).
fof(f18710,plain,(
  ( ! [X208,X209,X207] : (s(bool,'T_0') = s(bool,X207) | s(bool,'T_0') = s(bool,X208) | s(bool,X209) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X209) = s(bool,f(s(bool,X207)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f18310,f218])).
fof(f18310,plain,(
  ( ! [X208,X209,X207] : (s(bool,'T_0') = s(bool,X208) | s(bool,X209) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X209) = s(bool,f(s(bool,X207))) | s(bool,X207) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f16908])).
fof(f16908,plain,(
  ( ! [X208,X209,X207] : (s(bool,'T_0') = s(bool,X208) | s(bool,'T_0') = s(bool,X208) | s(bool,X209) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X209) = s(bool,f(s(bool,X207))) | s(bool,X207) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f5666,f9672])).
fof(f18607,plain,(
  ( ! [X177,X176] : (s(bool,'F_0') = s(bool,X177) | s(bool,X176) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X176) = s(bool,X177)) ) | ($spl3 | $spl11 | $spl31)),
  inference(forward_demodulation,[],[f18606,f7490])).
fof(f18606,plain,(
  ( ! [X177,X176] : (s(bool,X176) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X176) = s(bool,X177) | s(bool,X177) = s(bool,g(s(bool,'T_0')))) ) | ($spl3 | $spl11 | $spl31)),
  inference(subsumption_resolution,[],[f16565,f63])).
fof(f16565,plain,(
  ( ! [X177,X176] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X176) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X176) = s(bool,X177) | s(bool,X177) = s(bool,g(s(bool,'T_0')))) ) | ($spl11 | $spl31)),
  inference(superposition,[],[f5666,f7490])).
fof(f16474,plain,(
  ( ! [X146,X147,X148] : (s(bool,X147) = s(bool,g(s(bool,X146))) | s(bool,'F_0') = s(bool,X147) | s(bool,X146) = s(bool,f(s(bool,X148)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f16118,f37])).
fof(f16118,plain,(
  ( ! [X146,X147,X148] : (~p(s(bool,'T_0')) | s(bool,X147) = s(bool,g(s(bool,X146))) | s(bool,'F_0') = s(bool,X147) | s(bool,X146) = s(bool,f(s(bool,X148)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f10748,f14836])).
fof(f16462,plain,(
  ( ! [X52,X53,X51] : (s(bool,g(s(bool,X51))) = s(bool,g(s(bool,X52))) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,f(s(bool,X53)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f16089,f37])).
fof(f16089,plain,(
  ( ! [X52,X53,X51] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X51))) = s(bool,g(s(bool,X52))) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,f(s(bool,X53)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f510,f14836])).
fof(f16176,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X3) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f16175])).
fof(f16175,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'T_0') = s(bool,X45) | s(bool,X44) = s(bool,f(s(bool,X46))) | s(bool,X47) = s(bool,g(s(bool,X44))) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f15870])).
fof(f15870,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'T_0') = s(bool,X45) | s(bool,X44) = s(bool,f(s(bool,X46))) | s(bool,X47) = s(bool,g(s(bool,X44))) | s(bool,'T_0') = s(bool,X45) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f1178])).
fof(f16300,plain,(
  ( ! [X70,X71,X69] : (s(bool,X69) = s(bool,f(s(bool,X70))) | s(bool,X71) = s(bool,g(s(bool,'F_0'))) | s(bool,X69) = s(bool,X71)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f15813,f6306])).
fof(f15813,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X69) = s(bool,f(s(bool,X70))) | s(bool,X71) = s(bool,g(s(bool,'F_0'))) | s(bool,X69) = s(bool,X71)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f3018])).
fof(f16292,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,X31) = s(bool,f(s(bool,X32))) | s(bool,X33) = s(bool,X34) | s(bool,X31) = s(bool,X34) | s(bool,X33) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f15805,f6306])).
fof(f15805,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X31) = s(bool,f(s(bool,X32))) | s(bool,X33) = s(bool,X34) | s(bool,X31) = s(bool,X34) | s(bool,X33) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f1178])).
fof(f15093,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f15092])).
fof(f15092,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f14997])).
fof(f14997,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f13806,f1178])).
fof(f14979,plain,(
  ( ! [X156,X154,X157,X155,X153] : (p(s(bool,happ(s(fun('type.modSem.state'(X153),bool),happ(s(fun('type.semanticPrimitives.state'(X153),fun('type.modSem.state'(X153),bool)),X154),s('type.semanticPrimitives.state'(X153),X156))),s('type.modSem.state'(X153),X155)))) | s(bool,X157) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X153),X156),s('type.modSem.state'(X153),X155))) | s(bool,'T_0') = s(bool,X157) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X153),bool),happ(s(fun('type.semanticPrimitives.state'(X153),fun('type.modSem.state'(X153),bool)),X154),s('type.semanticPrimitives.state'(X153),sK3(X154,X155,X156,X153)))),s('type.modSem.state'(X153),sK4(X154,X155,X156,X153))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f14978,f37])).
fof(f14978,plain,(
  ( ! [X156,X154,X157,X155,X153] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X153),bool),happ(s(fun('type.semanticPrimitives.state'(X153),fun('type.modSem.state'(X153),bool)),X154),s('type.semanticPrimitives.state'(X153),X156))),s('type.modSem.state'(X153),X155)))) | s(bool,X157) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X153),X156),s('type.modSem.state'(X153),X155))) | s(bool,'T_0') = s(bool,X157) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X153),bool),happ(s(fun('type.semanticPrimitives.state'(X153),fun('type.modSem.state'(X153),bool)),X154),s('type.semanticPrimitives.state'(X153),sK3(X154,X155,X156,X153)))),s('type.modSem.state'(X153),sK4(X154,X155,X156,X153))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f14963,f218])).
fof(f14963,plain,(
  ( ! [X156,X154,X157,X155,X153] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,happ(s(fun('type.modSem.state'(X153),bool),happ(s(fun('type.semanticPrimitives.state'(X153),fun('type.modSem.state'(X153),bool)),X154),s('type.semanticPrimitives.state'(X153),X156))),s('type.modSem.state'(X153),X155)))) | s(bool,X157) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X153),X156),s('type.modSem.state'(X153),X155))) | s(bool,'T_0') = s(bool,X157) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X153),bool),happ(s(fun('type.semanticPrimitives.state'(X153),fun('type.modSem.state'(X153),bool)),X154),s('type.semanticPrimitives.state'(X153),sK3(X154,X155,X156,X153)))),s('type.modSem.state'(X153),sK4(X154,X155,X156,X153))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f1689,f9983])).
fof(f14836,plain,(
  ( ! [X127,X126] : (s(bool,X126) = s(bool,f(s(bool,X127))) | s(bool,'T_0') = s(bool,g(s(bool,X126)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f14835,f63])).
fof(f14835,plain,(
  ( ! [X127,X126] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X126) = s(bool,f(s(bool,X127))) | s(bool,'T_0') = s(bool,g(s(bool,X126)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(forward_demodulation,[],[f14505,f218])).
fof(f14505,plain,(
  ( ! [X127,X126] : (s(bool,X126) = s(bool,f(s(bool,X127))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,X126)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14465,f9692])).
fof(f14465,plain,(
  ( ! [X97,X98] : (s(bool,X98) = s(bool,f(s(bool,X97))) | s(bool,'F_0') = s(bool,X98)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f14361,f37])).
fof(f14361,plain,(
  ( ! [X97,X98] : (~p(s(bool,'T_0')) | s(bool,X98) = s(bool,f(s(bool,X97))) | s(bool,'F_0') = s(bool,X98)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f10748,f13778])).
fof(f14399,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X0) = s(bool,X1)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f14398])).
fof(f14398,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,f(s(bool,X27))) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f14301])).
fof(f14301,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f13778,f1178])).
fof(f13806,plain,(
  ( ! [X82] : (s(bool,X82) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X82)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f13787,f63])).
fof(f13787,plain,(
  ( ! [X82] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X82) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X82)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(backward_demodulation,[],[f13778,f11049])).
fof(f13778,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f13777,f63])).
fof(f13777,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f13776])).
fof(f13776,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f13704,f11422])).
fof(f13704,plain,(
  ( ! [X6,X5] : (s(bool,X5) != s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl12 | $spl17 | $spl24)),
  inference(superposition,[],[f13123,f54])).
fof(f13607,plain,(
  ( ! [X212,X210,X213,X211,X214] : (s(bool,X213) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X210))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X211))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X212))) | s(bool,'F_0') = s(bool,X213) | s(bool,X214) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X210),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X211),s('type.semanticPrimitives.store_v'('type.modSem.v'),X212))) | s(bool,'T_0') = s(bool,X214)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f13374,f37])).
fof(f13374,plain,(
  ( ! [X212,X210,X213,X211,X214] : (~p(s(bool,'T_0')) | s(bool,X213) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X210))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X211))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X212))) | s(bool,'F_0') = s(bool,X213) | s(bool,X214) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X210),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X211),s('type.semanticPrimitives.store_v'('type.modSem.v'),X212))) | s(bool,'T_0') = s(bool,X214)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f10748,f1156])).
fof(f13601,plain,(
  ( ! [X173,X171,X169,X172,X170] : (s(bool,f(s(bool,X172))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X169))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X170))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X171))) | s(bool,'T_0') = s(bool,X172) | s(bool,X173) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X169),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X170),s('type.semanticPrimitives.store_v'('type.modSem.v'),X171))) | s(bool,'T_0') = s(bool,X173)) ) | ($spl3 | $spl17)),
  inference(subsumption_resolution,[],[f13364,f37])).
fof(f13364,plain,(
  ( ! [X173,X171,X169,X172,X170] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X172))) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X169))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X170))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X171))) | s(bool,'T_0') = s(bool,X172) | s(bool,X173) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X169),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X170),s('type.semanticPrimitives.store_v'('type.modSem.v'),X171))) | s(bool,'T_0') = s(bool,X173)) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f8673,f1156])).
fof(f13123,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl17 | $spl24)),
  inference(condensation,[],[f13122])).
fof(f13122,plain,(
  ( ! [X83,X84] : (s(bool,'F_0') != s(bool,X83) | s(bool,'T_0') = s(bool,X84) | s(bool,'T_0') = s(bool,f(s(bool,X83)))) ) | ($spl3 | $spl12 | $spl17 | $spl24)),
  inference(subsumption_resolution,[],[f12930,f9640])).
fof(f12930,plain,(
  ( ! [X83,X84] : (s(bool,'F_0') != s(bool,X83) | s(bool,'T_0') = s(bool,X84) | s(bool,X84) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X83)))) ) | ($spl3 | $spl12 | $spl17 | $spl24)),
  inference(superposition,[],[f5993,f9672])).
fof(f13114,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(condensation,[],[f13113])).
fof(f13113,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,X15) | p(s(bool,X14)) | s(bool,'T_0') = s(bool,f(s(bool,X14)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f13112,f56])).
fof(f13112,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,X15) | p(s(bool,X14)) | p(s(bool,X15)) | s(bool,'T_0') = s(bool,f(s(bool,X14)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12905,f218])).
fof(f12905,plain,(
  ( ! [X14,X15] : (p(s(bool,X14)) | p(s(bool,X15)) | s(bool,X15) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X14)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f48,f9672])).
fof(f12898,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X4)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f9640,f9672])).
fof(f13111,plain,(
  ( ! [X163,X164,X162] : (s(bool,'T_0') != s(bool,f(s(X162,sK6(X163,X164,bool,X162)))) | s(fun(X162,bool),X163) = s(fun(X162,bool),X164) | s(bool,'T_0') = s(bool,f(s(bool,g(s(X162,sK6(X163,X164,bool,X162))))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12895,f218])).
fof(f12895,plain,(
  ( ! [X163,X164,X162] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X162,sK6(X163,X164,bool,X162)))) | s(fun(X162,bool),X163) = s(fun(X162,bool),X164) | s(bool,'T_0') = s(bool,f(s(bool,g(s(X162,sK6(X163,X164,bool,X162))))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f52,f9672])).
fof(f13110,plain,(
  ( ! [X154,X155,X153] : (s(X155,f(s(bool,'T_0'))) != s(X155,g(s(bool,'T_0'))) | s(fun(bool,X155),X153) = s(fun(bool,X155),X154) | s(bool,'T_0') = s(bool,f(s(bool,sK6(X153,X154,X155,bool))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12892,f218])).
fof(f12892,plain,(
  ( ! [X154,X155,X153] : (s(X155,f(s(bool,g(s(bool,'F_0'))))) != s(X155,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X155),X153) = s(fun(bool,X155),X154) | s(bool,'T_0') = s(bool,f(s(bool,sK6(X153,X154,X155,bool))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f52,f9672])).
fof(f13102,plain,(
  ( ! [X125,X126,X124] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X124),X126),s('type.modSem.state'(X124),X125)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(X124),bool),happ(s(fun('type.semanticPrimitives.state'(X124),fun('type.modSem.state'(X124),bool)),sK5(X125,X126,X124)),s('type.semanticPrimitives.state'(X124),X126))),s('type.modSem.state'(X124),X125)))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f13101,f37])).
fof(f13101,plain,(
  ( ! [X125,X126,X124] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X124),X126),s('type.modSem.state'(X124),X125)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(X124),bool),happ(s(fun('type.semanticPrimitives.state'(X124),fun('type.modSem.state'(X124),bool)),sK5(X125,X126,X124)),s('type.semanticPrimitives.state'(X124),X126))),s('type.modSem.state'(X124),X125)))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12884,f218])).
fof(f12884,plain,(
  ( ! [X125,X126,X124] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X124),X126),s('type.modSem.state'(X124),X125)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(X124),bool),happ(s(fun('type.semanticPrimitives.state'(X124),fun('type.modSem.state'(X124),bool)),sK5(X125,X126,X124)),s('type.semanticPrimitives.state'(X124),X126))),s('type.modSem.state'(X124),X125)))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f47,f9672])).
fof(f13100,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,happ(s(fun('type.modSem.state'(X120),bool),happ(s(fun('type.semanticPrimitives.state'(X120),fun('type.modSem.state'(X120),bool)),X123),s('type.semanticPrimitives.state'(X120),sK3(X123,X122,X121,X120)))),s('type.modSem.state'(X120),sK4(X123,X122,X121,X120))))) | p(s(bool,happ(s(fun('type.modSem.state'(X120),bool),happ(s(fun('type.semanticPrimitives.state'(X120),fun('type.modSem.state'(X120),bool)),X123),s('type.semanticPrimitives.state'(X120),X121))),s('type.modSem.state'(X120),X122)))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X120),X121),s('type.modSem.state'(X120),X122)))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f13099,f37])).
fof(f13099,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X120),bool),happ(s(fun('type.semanticPrimitives.state'(X120),fun('type.modSem.state'(X120),bool)),X123),s('type.semanticPrimitives.state'(X120),sK3(X123,X122,X121,X120)))),s('type.modSem.state'(X120),sK4(X123,X122,X121,X120))))) | p(s(bool,happ(s(fun('type.modSem.state'(X120),bool),happ(s(fun('type.semanticPrimitives.state'(X120),fun('type.modSem.state'(X120),bool)),X123),s('type.semanticPrimitives.state'(X120),X121))),s('type.modSem.state'(X120),X122)))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X120),X121),s('type.modSem.state'(X120),X122)))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12883,f218])).
fof(f12883,plain,(
  ( ! [X123,X121,X122,X120] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X120),bool),happ(s(fun('type.semanticPrimitives.state'(X120),fun('type.modSem.state'(X120),bool)),X123),s('type.semanticPrimitives.state'(X120),sK3(X123,X122,X121,X120)))),s('type.modSem.state'(X120),sK4(X123,X122,X121,X120))))) | p(s(bool,happ(s(fun('type.modSem.state'(X120),bool),happ(s(fun('type.semanticPrimitives.state'(X120),fun('type.modSem.state'(X120),bool)),X123),s('type.semanticPrimitives.state'(X120),X121))),s('type.modSem.state'(X120),X122)))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X120),X121),s('type.modSem.state'(X120),X122)))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f45,f9672])).
fof(f13088,plain,(
  ( ! [X97,X95,X98,X96] : (s(fun(X95,bool),X96) = s(fun(X95,bool),X97) | s(bool,X98) = s(bool,g(s(X95,sK6(X96,X97,bool,X95)))) | s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,f(s(bool,f(s(X95,sK6(X96,X97,bool,X95))))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f12867,f218])).
fof(f12867,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X95,bool),X96) = s(fun(X95,bool),X97) | s(bool,X98) = s(bool,g(s(X95,sK6(X96,X97,bool,X95)))) | s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,f(s(bool,f(s(X95,sK6(X96,X97,bool,X95))))))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f1394,f9672])).
fof(f13082,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,f(s(bool,X77))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,f(s(bool,X76)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f13081,f37])).
fof(f13081,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | s(bool,X76) = s(bool,f(s(bool,X77))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,f(s(bool,X76)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12852,f218])).
fof(f12852,plain,(
  ( ! [X76,X77] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,X76) = s(bool,f(s(bool,X77))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,f(s(bool,X76)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f8673,f9672])).
fof(f13067,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f13066,f37])).
fof(f13066,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f12822,f218])).
fof(f12822,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X5)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f51,f9672])).
fof(f13056,plain,(
  ( ! [X81,X82] : (s(bool,f(s(bool,X81))) = s(bool,f(s(bool,X82))) | s(bool,'T_0') = s(bool,X82) | s(bool,X81) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f12806,f37])).
fof(f12806,plain,(
  ( ! [X81,X82] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X81))) = s(bool,f(s(bool,X82))) | s(bool,'T_0') = s(bool,X82) | s(bool,X81) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f8673,f9672])).
fof(f13050,plain,(
  ( ! [X33,X34] : (s(bool,f(s(bool,X33))) = s(bool,g(s(bool,X34))) | s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f12789,f37])).
fof(f12789,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X33))) = s(bool,g(s(bool,X34))) | s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f510,f9672])).
fof(f12741,plain,(
  ( ! [X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X5))) | s(bool,'F_0') = s(bool,X4)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f9672,f9983])).
fof(f12740,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,g(s(bool,X2)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f9672,f9692])).
fof(f12739,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f9672,f9672])).
fof(f13043,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,f(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f12738,f63])).
fof(f12738,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,f(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f9672,f3018])).
fof(f13039,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,f(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f12733,f63])).
fof(f12733,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,f(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f9672,f1178])).
fof(f12722,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f9672,f39])).
fof(f12404,plain,(
  ( ! [X47,X48] : (s(bool,X47) != s(bool,X48) | s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12346,f63])).
fof(f12402,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X31) != s(bool,X32) | s(bool,'T_0') = s(bool,g(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f12341,f63])).
fof(f12237,plain,(
  ( ! [X118,X116,X117,X115] : (s(fun(X115,bool),X116) = s(fun(X115,bool),X117) | s(bool,X118) = s(bool,g(s(X115,sK6(X116,X117,bool,X115)))) | s(bool,'T_0') = s(bool,X118) | s(bool,'F_0') = s(bool,f(s(X115,sK6(X116,X117,bool,X115))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f12213,f218])).
fof(f12213,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X115,bool),X116) = s(fun(X115,bool),X117) | s(bool,X118) = s(bool,g(s(X115,sK6(X116,X117,bool,X115)))) | s(bool,'T_0') = s(bool,X118) | s(bool,'F_0') = s(bool,f(s(X115,sK6(X116,X117,bool,X115))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f1394,f9983])).
fof(f12223,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl12 | $spl17 | $spl33)),
  inference(subsumption_resolution,[],[f12222,f7578])).
fof(f12126,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,f(s(bool,X77))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,g(s(bool,X76)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f12125,f37])).
fof(f12125,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | s(bool,X76) = s(bool,f(s(bool,X77))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,g(s(bool,X76)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(forward_demodulation,[],[f11899,f218])).
fof(f11899,plain,(
  ( ! [X76,X77] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,X76) = s(bool,f(s(bool,X77))) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,g(s(bool,X76)))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f8673,f9692])).
fof(f12109,plain,(
  ( ! [X81,X82] : (s(bool,X82) = s(bool,g(s(bool,X81))) | s(bool,'F_0') = s(bool,X82) | s(bool,X81) = s(bool,g(s(bool,'F_0')))) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f11861,f37])).
fof(f11861,plain,(
  ( ! [X81,X82] : (~p(s(bool,'T_0')) | s(bool,X82) = s(bool,g(s(bool,X81))) | s(bool,'F_0') = s(bool,X82) | s(bool,X81) = s(bool,g(s(bool,'F_0')))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f10748,f9692])).
fof(f12107,plain,(
  ( ! [X76,X75] : (s(bool,f(s(bool,X76))) = s(bool,g(s(bool,X75))) | s(bool,'T_0') = s(bool,X76) | s(bool,X75) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f11856,f37])).
fof(f11856,plain,(
  ( ! [X76,X75] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X76))) = s(bool,g(s(bool,X75))) | s(bool,'T_0') = s(bool,X76) | s(bool,X75) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f8673,f9692])).
fof(f11793,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,g(s(bool,X3))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f9692,f9983])).
fof(f12097,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f11791,f63])).
fof(f12093,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,g(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f11786,f63])).
fof(f11422,plain,(
  ( ! [X14,X15,X13] : (s(bool,X14) = s(bool,f(s(bool,X13))) | s(bool,'F_0') = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl33)),
  inference(superposition,[],[f10933,f54])).
fof(f11420,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(bool,X4) = s(bool,f(s(bool,X3))) | s(bool,'F_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X3) = s(bool,X5)) ) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl33)),
  inference(superposition,[],[f10933,f1178])).
fof(f11419,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl33)),
  inference(superposition,[],[f10933,f3018])).
fof(f11049,plain,(
  ( ! [X82] : (s(bool,X82) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X82) | s(bool,'F_0') = s(bool,f(s(bool,X82)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f6464,f10932])).
fof(f11149,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,f(s(bool,X47))) | s(bool,'F_0') = s(bool,X48) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(subsumption_resolution,[],[f10987,f63])).
fof(f10987,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,f(s(bool,X47))) | s(bool,'F_0') = s(bool,X48) | s(bool,X47) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f10932,f3018])).
fof(f11145,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,f(s(bool,X31))) | s(bool,'F_0') = s(bool,X32) | s(bool,X31) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(subsumption_resolution,[],[f10982,f63])).
fof(f10982,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,f(s(bool,X31))) | s(bool,'F_0') = s(bool,X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f10932,f1178])).
fof(f10936,plain,(
  ( ! [X118,X116,X117] : (s(bool,X118) = s(bool,sK6(X116,X117,bool,bool)) | s(bool,'F_0') = s(bool,X118) | s(fun(bool,bool),X116) = s(fun(bool,bool),X117)) ) | ($spl11 | $spl12 | $spl17 | $spl31)),
  inference(subsumption_resolution,[],[f10882,f37])).
fof(f10882,plain,(
  ( ! [X118,X116,X117] : (~p(s(bool,'T_0')) | s(bool,X118) = s(bool,sK6(X116,X117,bool,bool)) | s(bool,'F_0') = s(bool,X118) | s(fun(bool,bool),X116) = s(fun(bool,bool),X117)) ) | ($spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f10748,f6325])).
fof(f10934,plain,(
  ( ! [X108] : (s(bool,X108) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | s(bool,'F_0') = s(bool,X108)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f10878,f37])).
fof(f10878,plain,(
  ( ! [X108] : (~p(s(bool,'T_0')) | s(bool,X108) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2))))) | s(bool,'F_0') = s(bool,X108)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f10748,f151])).
fof(f10933,plain,(
  ( ! [X94] : (s(bool,X94) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X94)) ) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f10870,f37])).
fof(f10870,plain,(
  ( ! [X94] : (~p(s(bool,'T_0')) | s(bool,X94) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X94)) ) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl33)),
  inference(superposition,[],[f10748,f7578])).
fof(f10932,plain,(
  ( ! [X93] : (s(bool,X93) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X93)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(subsumption_resolution,[],[f10869,f37])).
fof(f10869,plain,(
  ( ! [X93] : (~p(s(bool,'T_0')) | s(bool,X93) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X93)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f10748,f6462])).
fof(f10908,plain,(
  ( ! [X61,X59,X60] : (s(bool,X59) = s(bool,X60) | s(bool,'F_0') = s(bool,X60) | s(bool,X61) = s(bool,g(s(bool,'F_0'))) | s(bool,X59) = s(bool,X61)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f10858,f37])).
fof(f10858,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,'T_0')) | s(bool,X59) = s(bool,X60) | s(bool,'F_0') = s(bool,X60) | s(bool,X61) = s(bool,g(s(bool,'F_0'))) | s(bool,X59) = s(bool,X61)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f10748,f3018])).
fof(f10901,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f10851,f37])).
fof(f10851,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f10748,f1178])).
fof(f10664,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f9640,f9983])).
fof(f10783,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') != s(bool,f(s(X124,sK6(X125,X126,bool,X124)))) | s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,'F_0') = s(bool,g(s(X124,sK6(X125,X126,bool,X124))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f10663,f218])).
fof(f10663,plain,(
  ( ! [X125,X126,X124] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X124,sK6(X125,X126,bool,X124)))) | s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,'F_0') = s(bool,g(s(X124,sK6(X125,X126,bool,X124))))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f52,f9983])).
fof(f10782,plain,(
  ( ! [X123,X121,X122] : (s(X123,f(s(bool,'T_0'))) != s(X123,g(s(bool,'T_0'))) | s(fun(bool,X123),X121) = s(fun(bool,X123),X122) | s(bool,'F_0') = s(bool,sK6(X121,X122,X123,bool))) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f10662,f218])).
fof(f10662,plain,(
  ( ! [X123,X121,X122] : (s(X123,f(s(bool,g(s(bool,'F_0'))))) != s(X123,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X123),X121) = s(fun(bool,X123),X122) | s(bool,'F_0') = s(bool,sK6(X121,X122,X123,bool))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f52,f9983])).
fof(f10776,plain,(
  ( ! [X94,X95,X96] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X94),X96),s('type.modSem.state'(X94),X95)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X94),bool),happ(s(fun('type.semanticPrimitives.state'(X94),fun('type.modSem.state'(X94),bool)),sK5(X95,X96,X94)),s('type.semanticPrimitives.state'(X94),X96))),s('type.modSem.state'(X94),X95)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f10775,f37])).
fof(f10775,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X94),X96),s('type.modSem.state'(X94),X95)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X94),bool),happ(s(fun('type.semanticPrimitives.state'(X94),fun('type.modSem.state'(X94),bool)),sK5(X95,X96,X94)),s('type.semanticPrimitives.state'(X94),X96))),s('type.modSem.state'(X94),X95)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f10655,f218])).
fof(f10655,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X94),X96),s('type.modSem.state'(X94),X95)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X94),bool),happ(s(fun('type.semanticPrimitives.state'(X94),fun('type.modSem.state'(X94),bool)),sK5(X95,X96,X94)),s('type.semanticPrimitives.state'(X94),X96))),s('type.modSem.state'(X94),X95)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f47,f9983])).
fof(f10774,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),sK3(X93,X92,X91,X90)))),s('type.modSem.state'(X90),sK4(X93,X92,X91,X90))))) | p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),X91))),s('type.modSem.state'(X90),X92)))) | s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X90),X91),s('type.modSem.state'(X90),X92)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f10773,f37])).
fof(f10773,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),sK3(X93,X92,X91,X90)))),s('type.modSem.state'(X90),sK4(X93,X92,X91,X90))))) | p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),X91))),s('type.modSem.state'(X90),X92)))) | s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X90),X91),s('type.modSem.state'(X90),X92)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f10654,f218])).
fof(f10654,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),sK3(X93,X92,X91,X90)))),s('type.modSem.state'(X90),sK4(X93,X92,X91,X90))))) | p(s(bool,happ(s(fun('type.modSem.state'(X90),bool),happ(s(fun('type.semanticPrimitives.state'(X90),fun('type.modSem.state'(X90),bool)),X93),s('type.semanticPrimitives.state'(X90),X91))),s('type.modSem.state'(X90),X92)))) | s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X90),X91),s('type.modSem.state'(X90),X92)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f45,f9983])).
fof(f10770,plain,(
  ( ! [X72,X73] : (s(bool,X72) = s(bool,f(s(bool,X73))) | s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,X72)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(subsumption_resolution,[],[f10769,f37])).
fof(f10769,plain,(
  ( ! [X72,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,f(s(bool,X73))) | s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,X72)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(forward_demodulation,[],[f10637,f218])).
fof(f10637,plain,(
  ( ! [X72,X73] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,X72) = s(bool,f(s(bool,X73))) | s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,X72)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl31)),
  inference(superposition,[],[f8673,f9983])).
fof(f10748,plain,(
  ( ! [X6,X5] : (~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X5)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f10747,f37])).
fof(f10747,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X5)) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f10608,f218])).
fof(f10608,plain,(
  ( ! [X6,X5] : (~p(s(bool,g(s(bool,'F_0')))) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X5)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f51,f9983])).
fof(f10582,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f9983,f9983])).
fof(f10565,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f9983,f39])).
fof(f10731,plain,(
  ( ! [X64,X65,X63] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X63),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X63))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f10563,f218])).
fof(f10563,plain,(
  ( ! [X64,X65,X63] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X63),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X63))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65)))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f9983,f53])).
fof(f10464,plain,(
  ( ! [X64,X65,X63] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X63),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65))) != s(bool,g(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X63),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X63))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X64))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X65)))) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10270,f53])).
fof(f10500,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl12)),
  inference(condensation,[],[f10499])).
fof(f10499,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl3 | $spl12)),
  inference(duplicate_literal_removal,[],[f10439])).
fof(f10439,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) != s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X30) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10270,f1178])).
fof(f10306,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(bool,X3) != s(bool,X4) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X3) = s(bool,X5)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10105,f1178])).
fof(f10305,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,X2)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10105,f3018])).
fof(f10284,plain,(
  ( ! [X47,X48] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f10211,f63])).
fof(f10282,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) != s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f10206,f63])).
fof(f10270,plain,(
  ( ! [X56] : (s(bool,X56) != s(bool,g(s(bool,X56))) | s(bool,'T_0') = s(bool,X56)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f10185,f63])).
fof(f10133,plain,(
  ( ! [X83,X84,X82] : (s(bool,X82) = s(bool,f(s(bool,X83))) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,g(s(bool,'F_0'))) | s(bool,X82) = s(bool,X84)) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f9574,f37])).
fof(f9574,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'T_0')) | s(bool,X82) = s(bool,f(s(bool,X83))) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,g(s(bool,'F_0'))) | s(bool,X82) = s(bool,X84)) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f8673,f3018])).
fof(f9525,plain,(
  ( ! [X41,X40] : (s(bool,X40) = s(bool,f(s(bool,X40))) | s(bool,X41) = s(bool,g(s(bool,'F_0'))) | s(bool,X40) = s(bool,X41)) ) | ($spl3 | $spl12 | $spl33)),
  inference(superposition,[],[f7578,f3018])).
fof(f9524,plain,(
  ( ! [X39,X38] : (s(bool,'F_0') = s(bool,g(s(bool,X38))) | s(bool,X39) = s(bool,g(s(bool,'F_0'))) | s(bool,X38) = s(bool,X39)) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f7490,f3018])).
fof(f9521,plain,(
  ( ! [X30,X31] : (s(bool,X30) != s(bool,g(s(bool,X30))) | s(bool,X31) = s(bool,g(s(bool,'F_0'))) | s(bool,X30) = s(bool,X31)) ) | ($spl12 | $spl31)),
  inference(superposition,[],[f6306,f3018])).
fof(f10106,plain,(
  ( ! [X134,X135,X133] : (s(bool,X133) != s(bool,X134) | s(bool,'T_0') = s(bool,X135) | s(bool,X134) = s(bool,X135) | s(bool,X133) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f9486,f63])).
fof(f10105,plain,(
  ( ! [X131] : (s(bool,'T_0') != s(bool,X131) | s(bool,X131) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f9484,f63])).
fof(f9484,plain,(
  ( ! [X131] : (s(bool,'T_0') != s(bool,X131) | s(bool,X131) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f63,f3018])).
fof(f9672,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(condensation,[],[f9671])).
fof(f9671,plain,(
  ( ! [X92,X93] : (s(bool,'T_0') = s(bool,f(s(bool,X93))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f9469])).
fof(f9469,plain,(
  ( ! [X92,X93] : (s(bool,'T_0') = s(bool,f(s(bool,X93))) | s(bool,'T_0') = s(bool,X92) | s(bool,X93) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X92)) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f6513,f3018])).
fof(f9983,plain,(
  ( ! [X94] : (s(bool,X94) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X94)) ) | ($spl11 | $spl12 | $spl31)),
  inference(subsumption_resolution,[],[f9239,f6306])).
fof(f9239,plain,(
  ( ! [X94] : (s(bool,'F_0') = s(bool,X94) | s(bool,X94) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl11 | $spl12 | $spl31)),
  inference(superposition,[],[f3018,f7490])).
fof(f9967,plain,(
  ( ! [X64,X65,X63] : (s(bool,X64) = s(bool,g(s(bool,X63))) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f9147,f63])).
fof(f9959,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,X43) = s(bool,g(s(bool,X42))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,X42) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f9142,f63])).
fof(f9099,plain,(
  ( ! [X88,X87,X86] : (s(bool,f(s(bool,X88))) = s(bool,sK6(X86,X87,bool,bool)) | s(bool,'T_0') = s(bool,X88) | s(fun(bool,bool),X86) = s(fun(bool,bool),X87)) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f9062,f37])).
fof(f9062,plain,(
  ( ! [X88,X87,X86] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X88))) = s(bool,sK6(X86,X87,bool,bool)) | s(bool,'T_0') = s(bool,X88) | s(fun(bool,bool),X86) = s(fun(bool,bool),X87)) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f8673,f6325])).
fof(f9092,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl12 | $spl17)),
  inference(condensation,[],[f9091])).
fof(f9091,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,X33) = s(bool,sK6(X30,X31,bool,bool)) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f9032])).
fof(f9032,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,X32) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,X33) = s(bool,sK6(X30,X31,bool,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f6325,f1178])).
fof(f8965,plain,(
  ( ! [X78,X79] : (s(bool,f(s(bool,X78))) = s(bool,f(s(bool,X79))) | s(bool,'T_0') = s(bool,X79) | s(bool,'T_0') = s(bool,X78)) ) | ($spl3 | $spl17)),
  inference(subsumption_resolution,[],[f8925,f37])).
fof(f8925,plain,(
  ( ! [X78,X79] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X78))) = s(bool,f(s(bool,X79))) | s(bool,'T_0') = s(bool,X79) | s(bool,'T_0') = s(bool,X78)) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f8673,f6513])).
fof(f8943,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,X26) = s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl3 | $spl17)),
  inference(subsumption_resolution,[],[f8911,f37])).
fof(f8911,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X29) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f8673,f1178])).
fof(f8869,plain,(
  ( ! [X78,X79] : (s(bool,f(s(bool,X78))) = s(bool,g(s(bool,X79))) | s(bool,'T_0') = s(bool,X79) | s(bool,'T_0') = s(bool,X78)) ) | ($spl3 | $spl12 | $spl17)),
  inference(subsumption_resolution,[],[f8830,f37])).
fof(f8830,plain,(
  ( ! [X78,X79] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X78))) = s(bool,g(s(bool,X79))) | s(bool,'T_0') = s(bool,X79) | s(bool,'T_0') = s(bool,X78)) ) | ($spl3 | $spl12 | $spl17)),
  inference(superposition,[],[f510,f6513])).
fof(f8799,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,X42) != s(bool,X43) | s(bool,'T_0') = s(bool,X44) | s(bool,X43) = s(bool,X44) | s(bool,X42) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | ($spl3 | $spl24)),
  inference(subsumption_resolution,[],[f8727,f63])).
fof(f8673,plain,(
  ( ! [X8,X9] : (~p(s(bool,X9)) | s(bool,X9) = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl3 | $spl17)),
  inference(subsumption_resolution,[],[f8594,f37])).
fof(f8594,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | s(bool,X9) = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f51,f6513])).
fof(f8576,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X52),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X53),s('type.semanticPrimitives.store_v'('type.modSem.v'),X54))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X52))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X53))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X54)))) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f6513,f53])).
fof(f7689,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl11 | $spl31)),
  inference(superposition,[],[f7490,f54])).
fof(f7687,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | ($spl11 | $spl31)),
  inference(superposition,[],[f7490,f1178])).
fof(f7446,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl31),
  inference(superposition,[],[f6306,f54])).
fof(f7444,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl31),
  inference(superposition,[],[f6306,f1178])).
fof(f7490,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl31)),
  inference(forward_demodulation,[],[f7440,f75])).
fof(f7440,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f37,f191,f6306,f1687])).
fof(f6462,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl3 | $spl17)),
  inference(unit_resulting_resolution,[],[f37,f63,f221,f1687])).
fof(f6586,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,f(s(bool,X20))) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | ($spl3 | $spl17)),
  inference(subsumption_resolution,[],[f6524,f63])).
fof(f6524,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,f(s(bool,X20))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f6462,f1178])).
fof(f6513,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl17)),
  inference(superposition,[],[f6462,f39])).
fof(f6497,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,X20))) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | ($spl3 | $spl17)),
  inference(subsumption_resolution,[],[f6475,f63])).
fof(f6464,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(superposition,[],[f221,f39])).
fof(f6325,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl17)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f53,f47,f45,f44,f43,f42,f41,f40,f46,f31,f38,f75,f146,f151,f176,f212,f213,f214,f216,f221,f227,f226,f228,f240,f284,f283,f301,f321,f336,f341,f355,f409,f442,f445,f449,f218,f450,f467,f491,f510,f503,f516,f766,f986,f1156,f1178,f1198,f1272,f1687,f1688,f1689,f1690,f1393,f1394,f1942,f2178,f3018,f3021,f5884,f3509,f3587,f5680,f5666,f3626,f3627,f3668,f3884,f3885,f6029,f6031,f6033,f6035,f6037,f6039,f6041,f4080,f4081,f5084,f4179,f6097,f6098,f6101,f6102,f4300,f4301,f4742,f4659,f4719,f6324])).
fof(f449,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,X0))))) ) | $spl17),
  inference(condensation,[],[f448])).
fof(f448,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,X0)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl17),
  inference(condensation,[],[f447])).
fof(f447,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,f(s(bool,X21)))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) ) | $spl17),
  inference(subsumption_resolution,[],[f387,f409])).
fof(f387,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,f(s(bool,X21)))) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) ) | $spl17),
  inference(superposition,[],[f88,f336])).
fof(f409,plain,(
  ( ! [X4,X3] : (s(bool,X3) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f380])).
fof(f380,plain,(
  ( ! [X4,X3] : (s(bool,X3) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | $spl17),
  inference(superposition,[],[f228,f336])).
fof(f355,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,f(s(bool,X21))) = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X18),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X19),s('type.semanticPrimitives.store_v'('type.modSem.v'),X20))))) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X18))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X19))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X20)))) ) | $spl17),
  inference(superposition,[],[f336,f53])).
fof(f336,plain,(
  ( ! [X8,X7] : (s(bool,f(s(bool,X7))) = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl17),
  inference(subsumption_resolution,[],[f328,f37])).
fof(f328,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X7))) = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl17),
  inference(superposition,[],[f321,f240])).
fof(f321,plain,(
  ( ! [X6,X7] : (~p(s(bool,X7)) | s(bool,X7) = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X6)) ) | $spl17),
  inference(subsumption_resolution,[],[f308,f37])).
fof(f308,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X6)) ) | $spl17),
  inference(superposition,[],[f51,f240])).
fof(f301,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X7)))) ) | $spl17),
  inference(superposition,[],[f240,f53])).
fof(f283,plain,(
  ( ! [X30,X28,X29] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X28),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X29),s('type.semanticPrimitives.store_v'('type.modSem.v'),X30))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X28),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X29),s('type.semanticPrimitives.store_v'('type.modSem.v'),X30))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X29))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X30)))) ) | $spl17),
  inference(superposition,[],[f228,f53])).
fof(f240,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(superposition,[],[f226,f39])).
fof(f228,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl17),
  inference(superposition,[],[f221,f39])).
fof(f226,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(unit_resulting_resolution,[],[f38,f221,f88])).
fof(f227,plain,(
  p(s(bool,f(s(bool,'F_0')))) | $spl17),
  inference(unit_resulting_resolution,[],[f38,f221,f48])).
fof(f50754,plain,(
  ( ! [X139] : (s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X139)) ) | ($spl12 | $spl70)),
  inference(duplicate_literal_removal,[],[f50560])).
fof(f50560,plain,(
  ( ! [X139] : (s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) ) | ($spl12 | $spl70)),
  inference(superposition,[],[f34243,f12459])).
fof(f50928,plain,(
  ( ! [X112] : (s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f50927,f29557])).
fof(f50927,plain,(
  ( ! [X112] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X112) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f50544,f20705])).
fof(f50544,plain,(
  ( ! [X112] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X112) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X112)) ) | ($spl12 | $spl68 | $spl76)),
  inference(superposition,[],[f20705,f12459])).
fof(f50917,plain,(
  ( ! [X99] : (s(bool,'T_0') = s(bool,X99) | s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f50916,f29557])).
fof(f50916,plain,(
  ( ! [X99] : (s(bool,'T_0') != s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X99) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f50915,f34559])).
fof(f50915,plain,(
  ( ! [X99] : (s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | s(bool,X99) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f50535,f20705])).
fof(f50535,plain,(
  ( ! [X99] : (s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) | s(bool,X99) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X99)) ) | $spl70),
  inference(superposition,[],[f10103,f12459])).
fof(f50905,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') = s(bool,X89) | s(bool,X88) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89)) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f50765,f29637])).
fof(f50871,plain,(
  ( ! [X64,X62,X63] : (s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f50802,f29637])).
fof(f50856,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') = s(bool,X72) | s(bool,X71) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(sK2,sK1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,X72)) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f50821,f29637])).
fof(f50365,plain,(
  ( ! [X70,X68] : (s(bool,'F_0') = s(bool,X68) | s(bool,X70) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X70) = s(bool,g(s(bool,g(s(bool,X68)))))) ) | $spl220),
  inference(cnf_transformation,[],[f50365_D])).
fof(f50365_D,plain,(
  ( ! [X70,X68] : (s(bool,'F_0') = s(bool,X68) | s(bool,X70) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X70) = s(bool,g(s(bool,g(s(bool,X68)))))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f50219,plain,(
  ( ! [X94,X92,X93] : (s(bool,'T_0') = s(bool,X93) | s(bool,X94) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X94) = s(bool,g(s(bool,g(s(bool,X92))))) | s(bool,'F_0') = s(bool,X92)) ) | ($spl12 | $spl24 | $spl31 | $spl64 | $spl66 | $spl70 | $spl138)),
  inference(duplicate_literal_removal,[],[f50162])).
fof(f50162,plain,(
  ( ! [X94,X92,X93] : (s(bool,'T_0') = s(bool,X93) | s(bool,'T_0') = s(bool,X93) | s(bool,X94) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X94) = s(bool,g(s(bool,g(s(bool,X92))))) | s(bool,'F_0') = s(bool,X92)) ) | ($spl12 | $spl24 | $spl31 | $spl64 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f5666,f49317])).
fof(f49317,plain,(
  ( ! [X86] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X86))))) | s(bool,'F_0') = s(bool,X86)) ) | ($spl12 | $spl24 | $spl31 | $spl64 | $spl66 | $spl70 | $spl138)),
  inference(subsumption_resolution,[],[f49266,f20749])).
fof(f49266,plain,(
  ( ! [X86] : (s(bool,X86) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X86) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X86)))))) ) | ($spl12 | $spl31 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f48909,f9692])).
fof(f48909,plain,(
  ( ! [X276] : (s(bool,X276) != s(bool,g(s(bool,X276))) | s(bool,'F_0') = s(bool,X276)) ) | ($spl12 | $spl31 | $spl66 | $spl70 | $spl138)),
  inference(subsumption_resolution,[],[f48166,f6306])).
fof(f48166,plain,(
  ( ! [X276] : (s(bool,X276) != s(bool,g(s(bool,X276))) | s(bool,'F_0') = s(bool,X276) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl31 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f6306,f29722])).
fof(f29722,plain,(
  ( ! [X83,X82] : (s(bool,'F_0') = s(bool,X83) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,g(s(bool,X82)))) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(subsumption_resolution,[],[f29721,f37])).
fof(f29721,plain,(
  ( ! [X83,X82] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X83) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,g(s(bool,X82)))) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(forward_demodulation,[],[f27985,f29557])).
fof(f27985,plain,(
  ( ! [X83,X82] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'F_0') = s(bool,X83) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,g(s(bool,X82)))) ) | ($spl12 | $spl138)),
  inference(superposition,[],[f20742,f9692])).
fof(f50237,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X68) | s(bool,X70) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X70) = s(bool,g(s(bool,g(s(bool,X68)))))) ) | ($spl12 | $spl24 | $spl31 | $spl64 | $spl66 | $spl70 | $spl138)),
  inference(duplicate_literal_removal,[],[f50114])).
fof(f50114,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X70) = s(bool,g(s(bool,g(s(bool,X68)))))) ) | ($spl12 | $spl24 | $spl31 | $spl64 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f49317,f5666])).
fof(f48805,plain,(
  ( ! [X97,X95,X98] : (s(bool,'F_0') = s(bool,X97) | s(bool,X98) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X98) = s(bool,g(s(bool,X95))) | s(bool,X95) = s(bool,X97)) ) | $spl218),
  inference(cnf_transformation,[],[f48805_D])).
fof(f48805_D,plain,(
  ( ! [X97,X95,X98] : (s(bool,'F_0') = s(bool,X97) | s(bool,X98) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X98) = s(bool,g(s(bool,X95))) | s(bool,X95) = s(bool,X97)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f48518,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X139) = s(bool,g(s(bool,X137))) | s(bool,'F_0') = s(bool,X140) | s(bool,X137) = s(bool,X140)) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(duplicate_literal_removal,[],[f48447])).
fof(f48447,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,'T_0') = s(bool,X138) | s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X139) = s(bool,g(s(bool,X137))) | s(bool,'F_0') = s(bool,X140) | s(bool,X137) = s(bool,X140)) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f5666,f29722])).
fof(f48599,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,X96) | s(bool,'F_0') = s(bool,X97) | s(bool,X95) = s(bool,X97) | s(bool,X98) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X98) = s(bool,g(s(bool,X95)))) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(duplicate_literal_removal,[],[f47847])).
fof(f47847,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,X96) | s(bool,'F_0') = s(bool,X97) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X96) | s(bool,X98) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X98) = s(bool,g(s(bool,X95)))) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f29722,f5666])).
fof(f6259,plain,(
  ( ! [X114,X115] : (s(fun(bool,bool),X114) = s(fun(bool,bool),X115)) ) | $spl26),
  inference(cnf_transformation,[],[f6259_D])).
fof(f6259_D,plain,(
  ( ! [X114,X115] : (s(fun(bool,bool),X114) = s(fun(bool,bool),X115)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f47194,plain,(
  ( ! [X480,X479,X481] : (s(bool,'F_0') = s(bool,X481) | s(fun(bool,bool),X479) = s(fun(bool,bool),X480)) ) | ($spl11 | $spl12 | $spl20 | $spl50 | $spl138 | $spl194)),
  inference(subsumption_resolution,[],[f47193,f42976])).
fof(f42976,plain,(
  ( ! [X125,X123,X124] : (s(bool,'F_0') = s(bool,X125) | s(bool,X125) = s(bool,sK6(X123,X124,bool,bool)) | s(fun(bool,bool),X123) = s(fun(bool,bool),X124)) ) | ($spl12 | $spl20 | $spl138)),
  inference(subsumption_resolution,[],[f42892,f37])).
fof(f42892,plain,(
  ( ! [X125,X123,X124] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X125) | s(bool,X125) = s(bool,sK6(X123,X124,bool,bool)) | s(fun(bool,bool),X123) = s(fun(bool,bool),X124)) ) | ($spl12 | $spl20 | $spl138)),
  inference(superposition,[],[f20742,f34247])).
fof(f34247,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl20)),
  inference(condensation,[],[f34246])).
fof(f34246,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl20)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f29254,f28893,f28913,f28890,f284,f6137,f516,f467,f341,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f14977,f13599,f766,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f7939,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12102,f10249,f10132,f9888,f9246,f9245,f3018,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f9640,f19643,f19641,f19637,f19635,f444,f9692,f212,f38,f19324,f19633])).
fof(f19691,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl20)),
  inference(condensation,[],[f19690])).
fof(f19690,plain,(
  ( ! [X146,X145] : (s(bool,'T_0') = s(bool,X146) | s(bool,'T_0') = s(bool,X145) | s(bool,'T_0') = s(bool,f(s(bool,X145)))) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f19689,f56])).
fof(f19689,plain,(
  ( ! [X146,X145] : (s(bool,'T_0') = s(bool,X146) | p(s(bool,X146)) | s(bool,'T_0') = s(bool,X145) | s(bool,'T_0') = s(bool,f(s(bool,X145)))) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f9493,f218])).
fof(f9493,plain,(
  ( ! [X146,X145] : (p(s(bool,X146)) | s(bool,'T_0') = s(bool,X145) | s(bool,X146) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X145)))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f444,f3018])).
fof(f10063,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20)),
  inference(forward_demodulation,[],[f10062,f218])).
fof(f10062,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X0)))) ) | ($spl12 | $spl20)),
  inference(condensation,[],[f10061])).
fof(f10061,plain,(
  ( ! [X146,X145] : (s(bool,'T_0') = s(bool,X145) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X145))) | s(bool,'T_0') = s(bool,X146)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f9419,f56])).
fof(f9419,plain,(
  ( ! [X146,X145] : (p(s(bool,X146)) | s(bool,'T_0') = s(bool,X145) | s(bool,g(s(bool,'F_0'))) = s(bool,f(s(bool,X145))) | s(bool,'T_0') = s(bool,X146)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f444,f3018])).
fof(f47193,plain,(
  ( ! [X480,X479,X481] : (s(bool,X481) != s(bool,sK6(X479,X480,bool,bool)) | s(bool,'F_0') = s(bool,X481) | s(fun(bool,bool),X479) = s(fun(bool,bool),X480)) ) | ($spl11 | $spl50 | $spl194)),
  inference(subsumption_resolution,[],[f46856,f20772])).
fof(f46856,plain,(
  ( ! [X480,X479,X481] : (s(bool,X481) != s(bool,sK6(X479,X480,bool,bool)) | s(bool,'F_0') = s(bool,X481) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X479) = s(fun(bool,bool),X480)) ) | ($spl50 | $spl194)),
  inference(superposition,[],[f41367,f6378])).
fof(f47190,plain,(
  ( ! [X416,X418,X417] : (s(bool,'T_0') = s(bool,X418) | s(fun(bool,bool),X416) = s(fun(bool,bool),X417)) ) | ($spl12 | $spl20 | $spl50)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126,f47127,f47034,f47128,f47014,f47012,f47130,f47006,f47189])).
fof(f47189,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (s(fun(X413,bool),X414) = s(fun(X413,bool),X415) | s(bool,X418) = s(bool,g(s(X413,sK6(X414,X415,bool,X413)))) | s(bool,'T_0') = s(bool,X418) | s(fun(bool,bool),X416) = s(fun(bool,bool),X417)) ) | ($spl12 | $spl20 | $spl50)),
  inference(subsumption_resolution,[],[f47188,f34247])).
fof(f47188,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (s(bool,'T_0') != s(bool,sK6(X416,X417,bool,bool)) | s(fun(X413,bool),X414) = s(fun(X413,bool),X415) | s(bool,X418) = s(bool,g(s(X413,sK6(X414,X415,bool,X413)))) | s(bool,'T_0') = s(bool,X418) | s(fun(bool,bool),X416) = s(fun(bool,bool),X417)) ) | $spl50),
  inference(subsumption_resolution,[],[f46844,f1394])).
fof(f46844,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (s(bool,'T_0') != s(bool,sK6(X416,X417,bool,bool)) | s(fun(X413,bool),X414) = s(fun(X413,bool),X415) | s(bool,X418) = s(bool,g(s(X413,sK6(X414,X415,bool,X413)))) | s(bool,'T_0') = s(bool,X418) | s(bool,'T_0') = s(bool,f(s(X413,sK6(X414,X415,bool,X413)))) | s(fun(bool,bool),X416) = s(fun(bool,bool),X417)) ) | $spl50),
  inference(superposition,[],[f1394,f6378])).
fof(f47012,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | $spl50),
  inference(condensation,[],[f47011])).
fof(f47011,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,sK6(X3,X4,bool,bool))) | s(bool,'T_0') = s(bool,X1) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f47010])).
fof(f47010,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,sK6(X3,X4,bool,bool))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) | $spl50),
  inference(condensation,[],[f46781])).
fof(f46781,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,sK6(X111,X112,bool,bool))) | s(bool,X110) = s(bool,X113) | s(bool,X113) = s(bool,X114) | s(bool,'T_0') = s(bool,X114) | s(bool,'T_0') = s(bool,X110) | s(fun(bool,bool),X111) = s(fun(bool,bool),X112)) ) | $spl50),
  inference(superposition,[],[f1687,f6378])).
fof(f47014,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(bool,sK6(X3,X4,bool,bool)) != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) | $spl50),
  inference(condensation,[],[f47013])).
fof(f47013,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (s(bool,sK6(X105,X106,bool,bool)) != s(bool,f(s(X107,sK6(X108,X109,bool,X107)))) | s(fun(X107,bool),X108) = s(fun(X107,bool),X109) | s(bool,'T_0') = s(bool,X104) | s(bool,'T_0') = s(bool,g(s(X107,sK6(X108,X109,bool,X107)))) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46780])).
fof(f46780,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (s(bool,sK6(X105,X106,bool,bool)) != s(bool,f(s(X107,sK6(X108,X109,bool,X107)))) | s(fun(X107,bool),X108) = s(fun(X107,bool),X109) | s(bool,'T_0') = s(bool,X104) | s(bool,'T_0') = s(bool,g(s(X107,sK6(X108,X109,bool,X107)))) | s(bool,'T_0') = s(bool,X104) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106)) ) | $spl50),
  inference(superposition,[],[f1272,f6378])).
fof(f47034,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,sK6(X32,X33,bool,bool))) | s(bool,'T_0') = s(bool,X31) | s(fun(bool,bool),X32) = s(fun(bool,bool),X33)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46766])).
fof(f46766,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,sK6(X32,X33,bool,bool))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(fun(bool,bool),X32) = s(fun(bool,bool),X33)) ) | $spl50),
  inference(superposition,[],[f56,f6378])).
fof(f47126,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | $spl50),
  inference(condensation,[],[f47125])).
fof(f47125,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,sK6(X12,X13,bool,bool))) | s(bool,X11) = s(bool,X14) | s(bool,'T_0') = s(bool,X11) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13)) ) | $spl50),
  inference(subsumption_resolution,[],[f46761,f88])).
fof(f46761,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,sK6(X12,X13,bool,bool))) | ~p(s(bool,X14)) | s(bool,X11) = s(bool,X14) | s(bool,'T_0') = s(bool,X11) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13)) ) | $spl50),
  inference(superposition,[],[f51,f6378])).
fof(f47073,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,sK6(X3,X4,bool,bool)) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) | $spl50),
  inference(condensation,[],[f47072])).
fof(f47072,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,sK6(X80,X81,bool,bool)) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X77))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X78))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X79))) | s(bool,'T_0') = s(bool,X76) | s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X77),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X78),s('type.semanticPrimitives.store_v'('type.modSem.v'),X79)))) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46682])).
fof(f46682,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,sK6(X80,X81,bool,bool)) = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X77))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X78))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X79))) | s(bool,'T_0') = s(bool,X76) | s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X77),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X78),s('type.semanticPrimitives.store_v'('type.modSem.v'),X79))) | s(bool,'T_0') = s(bool,X76)) ) | $spl50),
  inference(superposition,[],[f6378,f1198])).
fof(f47081,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK6(X2,X3,bool,bool)) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4)) ) | $spl50),
  inference(condensation,[],[f47080])).
fof(f47080,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X59) = s(bool,sK6(X60,X61,bool,bool)) | s(bool,'T_0') = s(bool,X58) | s(fun(bool,bool),X60) = s(fun(bool,bool),X61) | s(bool,X59) = s(bool,X62) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46679])).
fof(f46679,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X59) = s(bool,sK6(X60,X61,bool,bool)) | s(bool,'T_0') = s(bool,X58) | s(fun(bool,bool),X60) = s(fun(bool,bool),X61) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X58) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) ) | $spl50),
  inference(superposition,[],[f6378,f1178])).
fof(f47087,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,sK6(X3,X4,bool,bool)) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4)) ) | $spl50),
  inference(condensation,[],[f47086])).
fof(f47086,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,sK6(X26,X27,bool,bool)) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X23),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X24),s('type.semanticPrimitives.store_v'('type.modSem.v'),X25))) | s(bool,'T_0') = s(bool,X22) | s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X24))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X25)))) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46673])).
fof(f46673,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,sK6(X26,X27,bool,bool)) = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X23),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X24),s('type.semanticPrimitives.store_v'('type.modSem.v'),X25))) | s(bool,'T_0') = s(bool,X22) | s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X23))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X24))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X25))) | s(bool,'T_0') = s(bool,X22)) ) | $spl50),
  inference(superposition,[],[f6378,f1156])).
fof(f42966,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6(X8,X9,bool,bool)) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | ($spl12 | $spl20)),
  inference(subsumption_resolution,[],[f42860,f37])).
fof(f42860,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6(X8,X9,bool,bool)) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9)) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f51,f34247])).
fof(f47184,plain,(
  ( ! [X313,X312,X314] : (s(bool,X312) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X313) = s(fun(bool,bool),X314)) ) | ($spl12 | $spl50 | $spl68 | $spl76 | $spl180 | $spl206)),
  inference(subsumption_resolution,[],[f47183,f33441])).
fof(f47183,plain,(
  ( ! [X313,X312,X314] : (s(bool,'F_0') != s(bool,g(s(bool,sK6(X313,X314,bool,bool)))) | s(bool,X312) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X313) = s(fun(bool,bool),X314)) ) | ($spl12 | $spl50 | $spl68 | $spl76 | $spl206)),
  inference(subsumption_resolution,[],[f46835,f20705])).
fof(f46835,plain,(
  ( ! [X313,X312,X314] : (s(bool,'F_0') != s(bool,g(s(bool,sK6(X313,X314,bool,bool)))) | s(bool,X312) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X312) | s(fun(bool,bool),X313) = s(fun(bool,bool),X314)) ) | ($spl50 | $spl206)),
  inference(superposition,[],[f46428,f6378])).
fof(f47182,plain,(
  ( ! [X310,X309,X311] : (s(bool,'T_0') = s(bool,X309) | s(fun(bool,bool),X310) = s(fun(bool,bool),X311)) ) | ($spl12 | $spl50 | $spl180)),
  inference(subsumption_resolution,[],[f46989,f33441])).
fof(f46989,plain,(
  ( ! [X310,X309,X311] : (s(bool,'F_0') != s(bool,g(s(bool,sK6(X310,X311,bool,bool)))) | s(bool,'T_0') = s(bool,X309) | s(fun(bool,bool),X310) = s(fun(bool,bool),X311)) ) | ($spl12 | $spl50)),
  inference(duplicate_literal_removal,[],[f46834])).
fof(f46834,plain,(
  ( ! [X310,X309,X311] : (s(bool,'F_0') != s(bool,g(s(bool,sK6(X310,X311,bool,bool)))) | s(bool,'T_0') = s(bool,X309) | s(bool,'T_0') = s(bool,X309) | s(fun(bool,bool),X310) = s(fun(bool,bool),X311)) ) | ($spl12 | $spl50)),
  inference(superposition,[],[f46090,f6378])).
fof(f47181,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl3 | $spl12 | $spl20 | $spl24 | $spl50 | $spl64 | $spl76)),
  inference(subsumption_resolution,[],[f47180,f34247])).
fof(f47180,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,sK6(X1,X2,bool,bool)) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl3 | $spl12 | $spl24 | $spl50 | $spl64 | $spl76)),
  inference(condensation,[],[f47179])).
fof(f47179,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,sK6(X297,X298,bool,bool)) | s(bool,X296) = s(bool,X299) | s(bool,'F_0') = s(bool,X299) | s(fun(bool,bool),X297) = s(fun(bool,bool),X298)) ) | ($spl3 | $spl12 | $spl24 | $spl50 | $spl64 | $spl76)),
  inference(subsumption_resolution,[],[f46830,f40412])).
fof(f46830,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,sK6(X297,X298,bool,bool)) | s(bool,X296) = s(bool,X299) | s(bool,'F_0') = s(bool,X299) | s(bool,'T_0') = s(bool,X296) | s(fun(bool,bool),X297) = s(fun(bool,bool),X298)) ) | ($spl3 | $spl12 | $spl24 | $spl50 | $spl64 | $spl76)),
  inference(superposition,[],[f40412,f6378])).
fof(f47178,plain,(
  ( ! [X288,X290,X289] : (s(bool,X288) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X289) = s(fun(bool,bool),X290)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl20 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f47177,f34247])).
fof(f47177,plain,(
  ( ! [X288,X290,X289] : (s(bool,'T_0') != s(bool,sK6(X289,X290,bool,bool)) | s(bool,X288) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X289) = s(fun(bool,bool),X290)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f47176,f34559])).
fof(f47176,plain,(
  ( ! [X288,X290,X289,X291] : (s(bool,f(s(bool,X291))) != s(bool,sK6(X289,X290,bool,bool)) | s(bool,X288) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X289) = s(fun(bool,bool),X290)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f46828,f20705])).
fof(f46828,plain,(
  ( ! [X288,X290,X289,X291] : (s(bool,f(s(bool,X291))) != s(bool,sK6(X289,X290,bool,bool)) | s(bool,X288) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X288) | s(fun(bool,bool),X289) = s(fun(bool,bool),X290)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76 | $spl138)),
  inference(superposition,[],[f38486,f6378])).
fof(f38486,plain,(
  ( ! [X68,X67] : (s(bool,X67) != s(bool,f(s(bool,X68))) | s(bool,X67) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f38485,f20703])).
fof(f38485,plain,(
  ( ! [X68,X67] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X67) != s(bool,f(s(bool,X68))) | s(bool,X67) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f38406,f34559])).
fof(f38406,plain,(
  ( ! [X68,X67] : (s(bool,X67) != s(bool,f(s(bool,X68))) | s(bool,X67) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,f(s(bool,X67)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f10103,f34652])).
fof(f34652,plain,(
  ( ! [X81,X82] : (s(bool,X82) = s(bool,f(s(bool,X81))) | s(bool,'F_0') = s(bool,X82)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl70 | $spl138)),
  inference(global_subsumption,[],[f28872,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6049,f6050,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6325,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6497,f6483,f6484,f5993,f6513,f6586,f6616,f6617,f6462,f218,f7490,f7444,f7446,f7578,f7635,f7687,f7689,f7767,f7769,f8576,f8673,f8799,f8869,f8943,f8965,f9092,f9099,f9959,f9965,f9967,f9884,f9858,f9839,f9983,f9807,f9673,f9672,f10105,f10106,f9521,f9524,f9525,f10133,f9612,f10270,f10195,f10282,f10284,f10305,f10306,f10500,f10492,f10464,f10731,f10565,f10582,f10748,f10770,f10774,f10776,f10782,f10783,f10664,f10901,f10908,f10932,f10933,f10934,f10936,f11145,f11149,f11049,f11419,f11420,f11422,f11775,f12093,f12097,f11792,f11793,f12107,f12109,f12126,f11934,f12223,f12237,f12402,f12404,f12459,f12722,f13039,f13043,f12739,f12740,f12741,f13050,f13056,f13067,f13082,f13088,f13100,f13102,f13110,f13111,f12898,f13114,f13123,f13601,f13607,f13778,f13806,f14399,f14465,f14836,f14979,f15093,f16292,f16300,f16176,f16462,f16474,f16501,f18600,f16503,f18580,f18559,f18558,f18607,f18556,f18609,f18668,f18671,f18395,f18357,f18338,f18707,f18709,f18311,f18711,f18307,f18714,f18293,f16934,f16936,f16939,f16940,f18732,f18751,f18763,f18764,f17102,f18940,f18048,f19018,f19020,f19022,f18029,f18026,f18021,f18020,f19030,f17984,f19079,f19087,f17980,f19094,f19100,f19101,f19102,f19103,f19104,f19105,f19106,f17928,f19218,f19220,f17927,f19250,f19256,f19259,f19262,f19265,f19268,f17913,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f19954,f11310,f11274,f11275,f17104,f17845,f9064,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f10135,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f7986,f8124,f8121,f8128,f8111,f8105,f8132,f19732,f8135,f8137,f19728,f19726,f19721,f8706,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9057,f9142,f9144,f9147,f10005,f10060,f9486,f10109,f19687,f19682,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f12222,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f12388,f13559,f19553,f13571,f13359,f19541,f13380,f8087,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18253,f18252,f17106,f19412,f18807,f19397,f17206,f19394,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f19347,f19329,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f9317,f9098,f9097,f19383,f14199,f20714,f19621,f19623,f6512,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f17508,f19377,f20764,f19340,f20771,f19211,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f6306,f30656,f30657,f30659,f22217,f22337,f20763,f20639,f18976,f18975,f18840,f18750,f18730,f12163,f10249,f10132,f9888,f9246,f9245,f6504,f3018,f19643,f19641,f19637,f19635,f30700,f30773,f30770,f30702,f30481,f30491,f30703,f30701,f9692,f212,f38,f19324,f19633,f9640,f6309,f284,f213,f12151,f17103,f34282,f12178,f34283,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f8756,f19254,f18971,f18779,f18777,f18775,f12102,f18954,f18843,f221,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f14977,f13599,f766,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272])).
fof(f28872,plain,(
  ( ! [X81,X82] : (s(bool,'F_0') = s(bool,X82) | s(bool,X82) = s(bool,f(s(bool,X81))) | s(bool,X81) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(subsumption_resolution,[],[f28680,f37])).
fof(f28680,plain,(
  ( ! [X81,X82] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X82) | s(bool,X82) = s(bool,f(s(bool,X81))) | s(bool,X81) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl70 | $spl138)),
  inference(superposition,[],[f20742,f12618])).
fof(f47173,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,'T_0') = s(bool,X272) | s(bool,'F_0') = s(bool,X275) | s(fun(bool,bool),X273) = s(fun(bool,bool),X274)) ) | ($spl12 | $spl20 | $spl24 | $spl50 | $spl64 | $spl138)),
  inference(subsumption_resolution,[],[f46991,f42976])).
fof(f46991,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,X275) != s(bool,sK6(X273,X274,bool,bool)) | s(bool,'T_0') = s(bool,X272) | s(bool,'F_0') = s(bool,X275) | s(fun(bool,bool),X273) = s(fun(bool,bool),X274)) ) | ($spl12 | $spl24 | $spl50 | $spl64)),
  inference(duplicate_literal_removal,[],[f46824])).
fof(f46824,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,X275) != s(bool,sK6(X273,X274,bool,bool)) | s(bool,'T_0') = s(bool,X272) | s(bool,'F_0') = s(bool,X275) | s(bool,'T_0') = s(bool,X272) | s(fun(bool,bool),X273) = s(fun(bool,bool),X274)) ) | ($spl12 | $spl24 | $spl50 | $spl64)),
  inference(superposition,[],[f36904,f6378])).
fof(f47172,plain,(
  ( ! [X261,X260,X262] : (s(bool,'T_0') = s(bool,X260) | s(fun(bool,bool),X261) = s(fun(bool,bool),X262)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl20 | $spl24 | $spl31 | $spl33 | $spl38 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f47171,f34247])).
fof(f47171,plain,(
  ( ! [X261,X260,X262] : (s(bool,'T_0') != s(bool,sK6(X261,X262,bool,bool)) | s(bool,'T_0') = s(bool,X260) | s(fun(bool,bool),X261) = s(fun(bool,bool),X262)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f46993,f34559])).
fof(f46993,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,f(s(bool,X263))) != s(bool,sK6(X261,X262,bool,bool)) | s(bool,'T_0') = s(bool,X260) | s(fun(bool,bool),X261) = s(fun(bool,bool),X262)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38 | $spl50)),
  inference(duplicate_literal_removal,[],[f46821])).
fof(f46821,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,f(s(bool,X263))) != s(bool,sK6(X261,X262,bool,bool)) | s(bool,'T_0') = s(bool,X260) | s(bool,'T_0') = s(bool,X260) | s(fun(bool,bool),X261) = s(fun(bool,bool),X262)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38 | $spl50)),
  inference(superposition,[],[f35572,f6378])).
fof(f35572,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6049,f6050,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6325,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6497,f6483,f6484,f5993,f6513,f6586,f6616,f6617,f6462,f218,f7490,f7444,f7446,f7578,f7635,f7687,f7689,f7767,f7769,f8528,f8449,f8451,f8576,f8673,f8799,f8869,f8943,f8965,f9092,f9099,f9959,f9965,f9967,f9884,f9858,f9839,f9983,f9807,f10101,f9673,f9672,f10105,f10106,f9521,f9523,f9524,f9525,f10133,f9612,f10270,f10195,f10282,f10284,f10305,f10306,f10500,f10492,f10464,f10731,f10565,f10582,f10748,f10770,f10774,f10776,f10782,f10783,f10664,f10901,f10908,f10932,f10933,f10934,f10936,f11145,f11149,f11049,f11419,f11420,f11422,f11775,f12093,f12097,f11792,f11793,f12107,f12109,f12126,f11934,f12223,f12237,f12402,f12404,f12459,f12722,f13039,f13043,f12739,f12740,f12741,f13050,f13056,f13067,f13082,f13088,f13100,f13102,f13110,f13111,f12898,f13114,f13123,f13601,f13607,f13778,f13806,f14182,f14399,f14465,f14836,f14891,f14979,f15093,f15346,f16292,f16300,f16176,f16462,f16474,f16501,f18600,f16503,f18580,f18559,f18558,f18607,f18556,f18609,f18668,f18671,f18395,f18676,f18357,f18338,f18707,f18709,f18311,f18711,f18307,f18714,f18293,f16934,f16936,f16939,f16940,f18732,f18751,f18763,f18764,f17102,f18940,f18048,f19018,f19020,f19022,f18029,f18026,f18021,f18020,f19030,f19076,f17984,f19079,f19087,f17980,f19094,f17976,f19100,f19101,f19102,f19103,f19104,f19105,f19106,f17928,f19218,f19220,f19222,f17927,f19250,f19256,f19259,f19262,f19265,f19268,f17913,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f19954,f11310,f11274,f11275,f17104,f17845,f9064,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f10135,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f7986,f8124,f8121,f8128,f8111,f8105,f8132,f19732,f8135,f8137,f19728,f19726,f19721,f8706,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9057,f9142,f9144,f9147,f10005,f10060,f9486,f10109,f19687,f19682,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f12222,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f12388,f13559,f19553,f13571,f13359,f19541,f13380,f8087,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18253,f18252,f17106,f19412,f18807,f19397,f17206,f19394,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f19347,f19329,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f9317,f9098,f9097,f19383,f14199,f20714,f19621,f19623,f6512,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f17508,f19377,f20764,f19340,f20771,f19211,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f6306,f30656,f30657,f30659,f22217,f22337,f20639,f18976,f6504,f19643,f19641,f19637,f19635,f30700,f30773,f30770,f30702,f30481,f30491,f30703,f30701,f19324,f19633,f6309,f12151,f17103,f34282,f12178,f34283,f221,f6313,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12163,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f8756,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f35474,f35475,f35477,f35517])).
fof(f18676,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(condensation,[],[f18675])).
fof(f18675,plain,(
  ( ! [X198,X199,X197] : (s(bool,X197) = s(bool,X198) | s(bool,'T_0') = s(bool,X199) | s(bool,X198) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,g(s(bool,X197)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(subsumption_resolution,[],[f16767,f14891])).
fof(f16767,plain,(
  ( ! [X198,X196,X199,X197] : (s(bool,X197) = s(bool,X198) | s(bool,'T_0') = s(bool,X199) | s(bool,X198) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X199) = s(bool,f(s(bool,X196))) | s(bool,'T_0') = s(bool,g(s(bool,X197)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f14836])).
fof(f15346,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(condensation,[],[f15345])).
fof(f15345,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,X47) != s(bool,f(s(bool,X48))) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,X49) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(duplicate_literal_removal,[],[f15164])).
fof(f15164,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,X47) != s(bool,f(s(bool,X48))) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X46) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(superposition,[],[f14891,f1178])).
fof(f14891,plain,(
  ( ! [X189,X188] : (s(bool,X189) != s(bool,f(s(bool,X188))) | s(bool,'T_0') = s(bool,X189)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(subsumption_resolution,[],[f14890,f63])).
fof(f14890,plain,(
  ( ! [X189,X188] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X189) != s(bool,f(s(bool,X188))) | s(bool,'T_0') = s(bool,X189)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(forward_demodulation,[],[f14666,f7578])).
fof(f14666,plain,(
  ( ! [X189,X188] : (s(bool,X189) != s(bool,f(s(bool,X188))) | s(bool,'T_0') = s(bool,X189) | s(bool,'F_0') = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(superposition,[],[f6313,f14465])).
fof(f9523,plain,(
  ( ! [X37,X35,X36] : (s(bool,X36) != s(bool,f(s(bool,X35))) | s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,g(s(bool,'F_0'))) | s(bool,X35) = s(bool,X37)) ) | ($spl12 | $spl38)),
  inference(superposition,[],[f6313,f3018])).
fof(f47170,plain,(
  ( ! [X243,X244,X245] : (s(bool,'T_0') = s(bool,X243) | s(fun(bool,bool),X244) = s(fun(bool,bool),X245)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl20 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f47169,f34247])).
fof(f47169,plain,(
  ( ! [X243,X244,X245] : (s(bool,'T_0') != s(bool,sK6(X244,X245,bool,bool)) | s(bool,'T_0') = s(bool,X243) | s(fun(bool,bool),X244) = s(fun(bool,bool),X245)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f46997,f34559])).
fof(f46997,plain,(
  ( ! [X243,X244,X245] : (s(bool,sK6(X244,X245,bool,bool)) != s(bool,f(s(bool,sK6(X244,X245,bool,bool)))) | s(bool,'T_0') = s(bool,X243) | s(fun(bool,bool),X244) = s(fun(bool,bool),X245)) ) | ($spl12 | $spl50 | $spl70)),
  inference(duplicate_literal_removal,[],[f46816])).
fof(f46816,plain,(
  ( ! [X243,X244,X245] : (s(bool,sK6(X244,X245,bool,bool)) != s(bool,f(s(bool,sK6(X244,X245,bool,bool)))) | s(bool,'T_0') = s(bool,X243) | s(bool,'T_0') = s(bool,X243) | s(fun(bool,bool),X244) = s(fun(bool,bool),X245)) ) | ($spl12 | $spl50 | $spl70)),
  inference(superposition,[],[f34243,f6378])).
fof(f47167,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20 | $spl50 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f47166,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126,f47127,f47034,f47128,f47014,f47012,f47130,f47006])).
fof(f47166,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(condensation,[],[f47165])).
fof(f47165,plain,(
  ( ! [X239,X237,X238,X236] : (~p(s(bool,sK6(X237,X238,bool,bool))) | s(bool,'T_0') = s(bool,X239) | s(bool,'T_0') = s(bool,X236) | s(fun(bool,bool),X237) = s(fun(bool,bool),X238)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f46814,f10195])).
fof(f46814,plain,(
  ( ! [X239,X237,X238,X236] : (~p(s(bool,sK6(X237,X238,bool,bool))) | s(bool,'T_0') = s(bool,X239) | s(bool,X236) = s(bool,g(s(bool,X239))) | s(bool,'T_0') = s(bool,X236) | s(fun(bool,bool),X237) = s(fun(bool,bool),X238)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(superposition,[],[f29758,f6378])).
fof(f47156,plain,(
  ( ! [X2,X1] : (~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | $spl216),
  inference(cnf_transformation,[],[f47156_D])).
fof(f47156_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f18672,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl86),
  inference(cnf_transformation,[],[f18672_D])).
fof(f18672_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f47164,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | ~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(condensation,[],[f47163])).
fof(f47163,plain,(
  ( ! [X235,X233,X234,X232] : (~p(s(bool,sK6(X233,X234,bool,bool))) | s(bool,'T_0') = s(bool,g(s(bool,X235))) | s(bool,'T_0') = s(bool,X232) | s(fun(bool,bool),X233) = s(fun(bool,bool),X234)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f46813,f11934])).
fof(f46813,plain,(
  ( ! [X235,X233,X234,X232] : (~p(s(bool,sK6(X233,X234,bool,bool))) | s(bool,X232) = s(bool,X235) | s(bool,'T_0') = s(bool,g(s(bool,X235))) | s(bool,'T_0') = s(bool,X232) | s(fun(bool,bool),X233) = s(fun(bool,bool),X234)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(superposition,[],[f29750,f6378])).
fof(f47155,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,sK6(X1,X2,bool,bool))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl3 | $spl12 | $spl24 | $spl50 | $spl64 | $spl76 | $spl138)),
  inference(condensation,[],[f47154])).
fof(f47154,plain,(
  ( ! [X206,X204,X205,X203] : (~p(s(bool,sK6(X204,X205,bool,bool))) | s(bool,'F_0') = s(bool,X206) | s(bool,X203) = s(bool,X206) | s(fun(bool,bool),X204) = s(fun(bool,bool),X205)) ) | ($spl3 | $spl12 | $spl24 | $spl50 | $spl64 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f46805,f40412])).
fof(f46805,plain,(
  ( ! [X206,X204,X205,X203] : (~p(s(bool,sK6(X204,X205,bool,bool))) | s(bool,'F_0') = s(bool,X206) | s(bool,X203) = s(bool,X206) | s(bool,'T_0') = s(bool,X203) | s(fun(bool,bool),X204) = s(fun(bool,bool),X205)) ) | ($spl50 | $spl138)),
  inference(superposition,[],[f20742,f6378])).
fof(f47153,plain,(
  ( ! [X202,X200,X201] : (s(bool,X200) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X201) = s(fun(bool,bool),X202)) ) | ($spl12 | $spl20 | $spl50 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f47152,f34247])).
fof(f47152,plain,(
  ( ! [X202,X200,X201] : (s(bool,'T_0') != s(bool,sK6(X201,X202,bool,bool)) | s(bool,X200) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X201) = s(fun(bool,bool),X202)) ) | ($spl12 | $spl50 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f46804,f20705])).
fof(f46804,plain,(
  ( ! [X202,X200,X201] : (s(bool,'T_0') != s(bool,sK6(X201,X202,bool,bool)) | s(bool,X200) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X200) | s(fun(bool,bool),X201) = s(fun(bool,bool),X202)) ) | ($spl12 | $spl50 | $spl68 | $spl76)),
  inference(superposition,[],[f20705,f6378])).
fof(f47151,plain,(
  ( ! [X198,X199,X197] : (s(fun(bool,bool),X198) = s(fun(bool,bool),X199) | s(bool,'T_0') = s(bool,X197)) ) | ($spl12 | $spl20 | $spl50 | $spl76)),
  inference(global_subsumption,[],[f46999,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126,f47127,f47034,f47128,f47014,f47012,f47130,f47006])).
fof(f46999,plain,(
  ( ! [X198,X199,X197] : (s(bool,sK6(X198,X199,bool,bool)) != s(bool,g(s(bool,sK6(X198,X199,bool,bool)))) | s(bool,'T_0') = s(bool,X197) | s(fun(bool,bool),X198) = s(fun(bool,bool),X199)) ) | ($spl12 | $spl50 | $spl76)),
  inference(duplicate_literal_removal,[],[f46803])).
fof(f46803,plain,(
  ( ! [X198,X199,X197] : (s(bool,sK6(X198,X199,bool,bool)) != s(bool,g(s(bool,sK6(X198,X199,bool,bool)))) | s(bool,'T_0') = s(bool,X197) | s(bool,'T_0') = s(bool,X197) | s(fun(bool,bool),X198) = s(fun(bool,bool),X199)) ) | ($spl12 | $spl50 | $spl76)),
  inference(superposition,[],[f19301,f6378])).
fof(f47150,plain,(
  ( ! [X189,X190,X188] : (s(bool,'T_0') = s(bool,X188) | s(fun(bool,bool),X189) = s(fun(bool,bool),X190)) ) | ($spl12 | $spl20 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f47149,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126,f47127,f47034,f47128,f47014,f47012,f47130,f47006])).
fof(f47149,plain,(
  ( ! [X189,X190,X188] : (s(bool,'T_0') = s(bool,X188) | s(bool,sK6(X189,X190,bool,bool)) != s(bool,g(s(bool,sK6(X189,X190,bool,bool)))) | s(fun(bool,bool),X189) = s(fun(bool,bool),X190)) ) | ($spl12 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f47148,f29557])).
fof(f47148,plain,(
  ( ! [X189,X190,X188] : (s(bool,sK6(X189,X190,bool,bool)) != s(bool,g(s(bool,sK6(X189,X190,bool,bool)))) | s(bool,X188) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X189) = s(fun(bool,bool),X190)) ) | ($spl12 | $spl50 | $spl68 | $spl76)),
  inference(subsumption_resolution,[],[f46800,f20705])).
fof(f46800,plain,(
  ( ! [X189,X190,X188] : (s(bool,sK6(X189,X190,bool,bool)) != s(bool,g(s(bool,sK6(X189,X190,bool,bool)))) | s(bool,X188) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X188) | s(fun(bool,bool),X189) = s(fun(bool,bool),X190)) ) | ($spl50 | $spl76)),
  inference(superposition,[],[f10519,f6378])).
fof(f47147,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl20 | $spl50 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f47001,f42978])).
fof(f42978,plain,(
  ( ! [X149,X147,X148] : (s(bool,'T_0') = s(bool,X149) | s(bool,g(s(bool,X149))) = s(bool,sK6(X147,X148,bool,bool)) | s(fun(bool,bool),X147) = s(fun(bool,bool),X148)) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f42901,f37])).
fof(f42901,plain,(
  ( ! [X149,X147,X148] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X149) | s(bool,g(s(bool,X149))) = s(bool,sK6(X147,X148,bool,bool)) | s(fun(bool,bool),X147) = s(fun(bool,bool),X148)) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(superposition,[],[f29758,f34247])).
fof(f47001,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,X0))) != s(bool,sK6(X1,X2,bool,bool)) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl50)),
  inference(condensation,[],[f47000])).
fof(f47000,plain,(
  ( ! [X187,X185,X186,X184] : (s(bool,g(s(bool,X187))) != s(bool,sK6(X185,X186,bool,bool)) | s(bool,'T_0') = s(bool,X184) | s(bool,'T_0') = s(bool,X187) | s(fun(bool,bool),X185) = s(fun(bool,bool),X186)) ) | ($spl12 | $spl50)),
  inference(duplicate_literal_removal,[],[f46799])).
fof(f46799,plain,(
  ( ! [X187,X185,X186,X184] : (s(bool,g(s(bool,X187))) != s(bool,sK6(X185,X186,bool,bool)) | s(bool,'T_0') = s(bool,X184) | s(bool,'T_0') = s(bool,X187) | s(bool,'T_0') = s(bool,X184) | s(fun(bool,bool),X185) = s(fun(bool,bool),X186)) ) | ($spl12 | $spl50)),
  inference(superposition,[],[f10195,f6378])).
fof(f47146,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl17 | $spl33 | $spl50 | $spl192)),
  inference(subsumption_resolution,[],[f47003,f34339])).
fof(f34339,plain,(
  ( ! [X542,X545,X543] : (s(bool,X545) = s(bool,g(s(bool,sK6(X542,X543,bool,bool)))) | s(bool,'T_0') = s(bool,X545) | s(fun(bool,bool),X542) = s(fun(bool,bool),X543)) ) | ($spl12 | $spl17 | $spl33 | $spl192)),
  inference(global_subsumption,[],[f34279,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6325,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6483,f6484,f6616,f6617,f218,f7635,f9092,f9884,f9858,f9839,f9807,f9673,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f18293,f16934,f18751,f17102,f18029,f17984,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17913,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f19954,f11310,f11274,f11275,f17104,f17845,f9064,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f221,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f8121,f8128,f8111,f8105,f19732,f8135,f8137,f19728,f19726,f19721,f9142,f9144,f9147,f10060,f10109,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f12222,f19625,f13559,f19553,f13571,f13380,f8087,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f19412,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19347,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f9317,f9098,f9097,f14199,f20714,f19621,f19623,f6512,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f17508,f19377,f20764,f19340,f20771,f19211,f17855,f75,f17897,f17909,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f22217,f22337,f20763,f20639,f18976,f18975,f18840,f18750,f18730,f10249,f10132,f9888,f9246,f9245,f6504,f3018,f19643,f19641,f19637,f19635,f9692,f212,f38,f19324,f19633,f9640,f6309,f6137,f516,f467,f341,f6663,f284,f213,f12151,f17103,f34282,f12178,f34283,f12150,f18727,f18681,f18648,f18618,f18612,f18610,f14184,f14144,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f19254,f18971,f18779,f18777,f18775,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f13599,f12102,f766,f19225,f18954,f18843,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272])).
fof(f47003,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl50)),
  inference(condensation,[],[f47002])).
fof(f47002,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,X183) != s(bool,g(s(bool,sK6(X181,X182,bool,bool)))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X180) | s(fun(bool,bool),X181) = s(fun(bool,bool),X182)) ) | ($spl12 | $spl50)),
  inference(duplicate_literal_removal,[],[f46798])).
fof(f46798,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,X183) != s(bool,g(s(bool,sK6(X181,X182,bool,bool)))) | s(bool,'T_0') = s(bool,X183) | s(bool,'T_0') = s(bool,X180) | s(bool,'T_0') = s(bool,X180) | s(fun(bool,bool),X181) = s(fun(bool,bool),X182)) ) | ($spl12 | $spl50)),
  inference(superposition,[],[f10195,f6378])).
fof(f47145,plain,(
  ( ! [X177,X178,X179] : (s(bool,X177) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X178) = s(fun(bool,bool),X179)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl20 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f47144,f34247])).
fof(f47144,plain,(
  ( ! [X177,X178,X179] : (s(bool,'T_0') != s(bool,sK6(X178,X179,bool,bool)) | s(bool,X177) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X178) = s(fun(bool,bool),X179)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f47143,f34559])).
fof(f47143,plain,(
  ( ! [X177,X178,X179] : (s(bool,sK6(X178,X179,bool,bool)) != s(bool,f(s(bool,sK6(X178,X179,bool,bool)))) | s(bool,X177) = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X178) = s(fun(bool,bool),X179)) ) | ($spl12 | $spl50 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f46797,f20705])).
fof(f46797,plain,(
  ( ! [X177,X178,X179] : (s(bool,sK6(X178,X179,bool,bool)) != s(bool,f(s(bool,sK6(X178,X179,bool,bool)))) | s(bool,X177) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X177) | s(fun(bool,bool),X178) = s(fun(bool,bool),X179)) ) | ($spl50 | $spl70)),
  inference(superposition,[],[f10103,f6378])).
fof(f47140,plain,(
  ( ! [X169,X170,X168] : (s(bool,'T_0') = s(bool,X168) | s(fun(bool,bool),X169) = s(fun(bool,bool),X170)) ) | ($spl12 | $spl20 | $spl50 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f47139,f34247])).
fof(f47139,plain,(
  ( ! [X169,X170,X168] : (s(bool,'T_0') != s(bool,sK6(X169,X170,bool,bool)) | s(bool,'T_0') = s(bool,X168) | s(fun(bool,bool),X169) = s(fun(bool,bool),X170)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f47004,f29557])).
fof(f47004,plain,(
  ( ! [X169,X170,X168] : (s(bool,g(s(bool,'F_0'))) != s(bool,sK6(X169,X170,bool,bool)) | s(bool,'T_0') = s(bool,X168) | s(fun(bool,bool),X169) = s(fun(bool,bool),X170)) ) | ($spl12 | $spl50)),
  inference(duplicate_literal_removal,[],[f46794])).
fof(f46794,plain,(
  ( ! [X169,X170,X168] : (s(bool,g(s(bool,'F_0'))) != s(bool,sK6(X169,X170,bool,bool)) | s(bool,'T_0') = s(bool,X168) | s(bool,'T_0') = s(bool,X168) | s(fun(bool,bool),X169) = s(fun(bool,bool),X170)) ) | ($spl12 | $spl50)),
  inference(superposition,[],[f9640,f6378])).
fof(f47138,plain,(
  ( ! [X167,X165,X166] : (s(bool,'T_0') = s(bool,X165) | s(fun(bool,bool),X166) = s(fun(bool,bool),X167)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl20 | $spl24 | $spl31 | $spl33 | $spl38 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f47137,f34247])).
fof(f47137,plain,(
  ( ! [X167,X165,X166] : (s(bool,'T_0') != s(bool,sK6(X166,X167,bool,bool)) | s(bool,'T_0') = s(bool,X165) | s(fun(bool,bool),X166) = s(fun(bool,bool),X167)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38 | $spl50 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f47005,f34559])).
fof(f47005,plain,(
  ( ! [X167,X165,X166] : (s(bool,f(s(bool,'T_0'))) != s(bool,sK6(X166,X167,bool,bool)) | s(bool,'T_0') = s(bool,X165) | s(fun(bool,bool),X166) = s(fun(bool,bool),X167)) ) | ($spl38 | $spl50)),
  inference(duplicate_literal_removal,[],[f46793])).
fof(f46793,plain,(
  ( ! [X167,X165,X166] : (s(bool,f(s(bool,'T_0'))) != s(bool,sK6(X166,X167,bool,bool)) | s(bool,'T_0') = s(bool,X165) | s(bool,'T_0') = s(bool,X165) | s(fun(bool,bool),X166) = s(fun(bool,bool),X167)) ) | ($spl38 | $spl50)),
  inference(superposition,[],[f6313,f6378])).
fof(f47099,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,X119) = s(bool,sK6(X120,X121,bool,bool)) | s(bool,X119) = s(bool,X122) | s(bool,X122) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X120) = s(fun(bool,bool),X121)) ) | $spl212),
  inference(cnf_transformation,[],[f47099_D])).
fof(f47099_D,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,X119) = s(bool,sK6(X120,X121,bool,bool)) | s(bool,X119) = s(bool,X122) | s(bool,X122) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X120) = s(fun(bool,bool),X121)) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f47006,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,X154) = s(bool,sK6(X152,X153,bool,bool)) | s(bool,'T_0') = s(bool,X151) | s(bool,X155) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X154) = s(bool,X155) | s(fun(bool,bool),X152) = s(fun(bool,bool),X153)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46790])).
fof(f46790,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,X154) = s(bool,sK6(X152,X153,bool,bool)) | s(bool,'T_0') = s(bool,X151) | s(bool,X155) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X151) | s(fun(bool,bool),X152) = s(fun(bool,bool),X153)) ) | $spl50),
  inference(superposition,[],[f5666,f6378])).
fof(f47130,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl20 | $spl50)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126,f47127,f47034,f47128,f47014,f47012])).
fof(f47128,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') = s(bool,X31) | s(fun(bool,bool),X32) = s(fun(bool,bool),X33)) ) | ($spl12 | $spl20 | $spl50)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126,f47127,f47034])).
fof(f47127,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl20 | $spl50)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f7963,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f13559,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f6378,f11738,f20634,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f7939,f18976,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f10063,f19691,f19551,f19643,f19641,f19637,f19635,f444,f19324,f19633,f34247,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f42966,f46090,f46082,f46076,f46068,f46066,f46060,f46048,f46412,f46406,f46396,f46392,f47093,f47087,f47081,f47073,f47067,f47066,f47061,f47043,f47126])).
fof(f47043,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'T_0') = s(bool,X112) | s(fun(bool,bool),X110) = s(fun(bool,bool),X111) | s(bool,X113) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X113) = s(bool,X114) | s(bool,X114) = s(bool,sK6(X110,X111,bool,bool))) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46743])).
fof(f46743,plain,(
  ( ! [X111,X114,X112,X110,X113] : (s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,X112) | s(fun(bool,bool),X110) = s(fun(bool,bool),X111) | s(bool,X113) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X113) = s(bool,X114) | s(bool,X114) = s(bool,sK6(X110,X111,bool,bool))) ) | $spl50),
  inference(superposition,[],[f6378,f5666])).
fof(f47061,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,X6) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5)) ) | ($spl12 | $spl20 | $spl50)),
  inference(duplicate_literal_removal,[],[f46721])).
fof(f46721,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5)) ) | ($spl12 | $spl20 | $spl50)),
  inference(superposition,[],[f6378,f34247])).
fof(f47102,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,sK6(X129,X130,bool,bool)) = s(bool,sK6(X131,X132,bool,bool)) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132)) ) | $spl214),
  inference(cnf_transformation,[],[f47102_D])).
fof(f47102_D,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,sK6(X129,X130,bool,bool)) = s(bool,sK6(X131,X132,bool,bool)) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132)) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f47066,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(bool,sK6(X129,X130,bool,bool)) = s(bool,sK6(X131,X132,bool,bool)) | s(bool,'T_0') = s(bool,X128) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46693])).
fof(f46693,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(bool,sK6(X129,X130,bool,bool)) = s(bool,sK6(X131,X132,bool,bool)) | s(bool,'T_0') = s(bool,X128) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132) | s(bool,'T_0') = s(bool,X128) | s(fun(bool,bool),X129) = s(fun(bool,bool),X130)) ) | $spl50),
  inference(superposition,[],[f6378,f6378])).
fof(f47067,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,X119) = s(bool,sK6(X120,X121,bool,bool)) | s(bool,'T_0') = s(bool,X118) | s(fun(bool,bool),X120) = s(fun(bool,bool),X121) | s(bool,X122) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,X122)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46691])).
fof(f46691,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,X119) = s(bool,sK6(X120,X121,bool,bool)) | s(bool,'T_0') = s(bool,X118) | s(fun(bool,bool),X120) = s(fun(bool,bool),X121) | s(bool,'T_0') = s(bool,X118) | s(bool,X122) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,X122)) ) | $spl50),
  inference(superposition,[],[f6378,f5666])).
fof(f47094,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,sK6(X1,X2,bool,bool)) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | $spl210),
  inference(cnf_transformation,[],[f47094_D])).
fof(f47094_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,sK6(X1,X2,bool,bool)) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f47098,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6(X1,X2,bool,bool)) | s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f47070,f29637])).
fof(f47070,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6(X1,X2,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | $spl50),
  inference(condensation,[],[f47069])).
fof(f47069,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6(X1,X2,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,X3)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f47068])).
fof(f47068,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6(X1,X2,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl50),
  inference(condensation,[],[f46687])).
fof(f46687,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,sK6(X99,X100,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X98) | s(fun(bool,bool),X99) = s(fun(bool,bool),X100) | s(bool,'T_0') = s(bool,X101) | s(bool,X98) = s(bool,X102) | s(bool,X101) = s(bool,X102)) ) | $spl50),
  inference(superposition,[],[f6378,f5666])).
fof(f47095,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') = s(bool,sK6(X20,X21,bool,bool)) | s(bool,'T_0') = s(bool,X19) | s(fun(bool,bool),X20) = s(fun(bool,bool),X21)) ) | ($spl12 | $spl50 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f47088,f29637])).
fof(f47088,plain,(
  ( ! [X21,X19,X20] : (s(bool,sK6(X20,X21,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X19) | s(fun(bool,bool),X20) = s(fun(bool,bool),X21)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46672])).
fof(f46672,plain,(
  ( ! [X21,X19,X20] : (s(bool,sK6(X20,X21,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X19) | s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,X19)) ) | $spl50),
  inference(superposition,[],[f6378,f146])).
fof(f47093,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6(X1,X2,bool,bool)) | s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f46667])).
fof(f46667,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6(X1,X2,bool,bool)) | s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl50),
  inference(superposition,[],[f6378,f39])).
fof(f46434,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') != s(bool,g(s(bool,X71))) | s(bool,X71) = s(bool,X72) | s(bool,X72) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl208),
  inference(cnf_transformation,[],[f46434_D])).
fof(f46434_D,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') != s(bool,g(s(bool,X71))) | s(bool,X71) = s(bool,X72) | s(bool,X72) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f46392,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') != s(bool,g(s(bool,X71))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,X72)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f46301])).
fof(f46301,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') != s(bool,g(s(bool,X71))) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X71) = s(bool,X72)) ) | $spl12),
  inference(superposition,[],[f46090,f5666])).
fof(f46428,plain,(
  ( ! [X57] : (s(bool,'F_0') != s(bool,g(s(bool,X57))) | s(bool,X57) = s(bool,g(s(bool,'F_0')))) ) | $spl206),
  inference(cnf_transformation,[],[f46428_D])).
fof(f46428_D,plain,(
  ( ! [X57] : (s(bool,'F_0') != s(bool,g(s(bool,X57))) | s(bool,X57) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f46396,plain,(
  ( ! [X57,X56] : (s(bool,'F_0') != s(bool,g(s(bool,X57))) | s(bool,'T_0') = s(bool,X56) | s(bool,X57) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f46296])).
fof(f46296,plain,(
  ( ! [X57,X56] : (s(bool,'F_0') != s(bool,g(s(bool,X57))) | s(bool,'T_0') = s(bool,X56) | s(bool,X57) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X56)) ) | $spl12),
  inference(superposition,[],[f46090,f3018])).
fof(f42036,plain,(
  ( ! [X85,X86,X84] : (s(bool,X84) != s(bool,X85) | s(bool,X84) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,X86)) ) | $spl204),
  inference(cnf_transformation,[],[f42036_D])).
fof(f42036_D,plain,(
  ( ! [X85,X86,X84] : (s(bool,X84) != s(bool,X85) | s(bool,X84) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,X86)) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f42023,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X84) != s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'F_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X87) | s(bool,X84) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(duplicate_literal_removal,[],[f41921])).
fof(f41921,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X84) != s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'F_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X87) | s(bool,X84) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X87)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76)),
  inference(superposition,[],[f40412,f5666])).
fof(f41656,plain,(
  ( ! [X66,X65] : (s(bool,X66) != s(bool,g(s(bool,X65))) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X66)) ) | $spl202),
  inference(cnf_transformation,[],[f41656_D])).
fof(f41656_D,plain,(
  ( ! [X66,X65] : (s(bool,X66) != s(bool,g(s(bool,X65))) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X66)) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f41581,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) != s(bool,g(s(bool,X65))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl198),
  inference(duplicate_literal_removal,[],[f41545])).
fof(f41545,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) != s(bool,g(s(bool,X65))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X67)) ) | $spl198),
  inference(superposition,[],[f41387,f5666])).
fof(f41624,plain,(
  ( ! [X66,X67,X65] : (s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl156 | $spl198)),
  inference(subsumption_resolution,[],[f41581,f23959])).
fof(f41605,plain,(
  ( ! [X2,X1] : (s(bool,X1) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) | $spl200),
  inference(cnf_transformation,[],[f41605_D])).
fof(f41605_D,plain,(
  ( ! [X2,X1] : (s(bool,X1) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f41608,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X48) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,X50)) ) | ($spl194 | $spl198)),
  inference(subsumption_resolution,[],[f41491,f41367])).
fof(f41491,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X48) | s(bool,'T_0') = s(bool,X50) | s(bool,X48) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X49) = s(bool,X50)) ) | $spl198),
  inference(superposition,[],[f41387,f5666])).
fof(f41607,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl198)),
  inference(condensation,[],[f41606])).
fof(f41606,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X15) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14) | s(bool,X14) = s(bool,X16) | s(bool,X15) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl198)),
  inference(subsumption_resolution,[],[f41482,f40412])).
fof(f41482,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X15) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16) | s(bool,X15) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl198),
  inference(superposition,[],[f41387,f1178])).
fof(f41604,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,g(s(bool,'T_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl198)),
  inference(condensation,[],[f41603])).
fof(f41603,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X11) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X10) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X10) = s(bool,X13)) ) | ($spl3 | $spl12 | $spl24 | $spl64 | $spl76 | $spl198)),
  inference(subsumption_resolution,[],[f41481,f40412])).
fof(f41481,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X11) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X10) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl198),
  inference(superposition,[],[f41387,f1178])).
fof(f41387,plain,(
  ( ! [X97] : (s(bool,X97) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X97)) ) | $spl198),
  inference(cnf_transformation,[],[f41387_D])).
fof(f41387_D,plain,(
  ( ! [X97] : (s(bool,X97) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X97)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f41317,plain,(
  ( ! [X97,X96] : (s(bool,X97) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X96) | s(bool,'F_0') = s(bool,X97)) ) | ($spl12 | $spl24 | $spl31 | $spl64)),
  inference(duplicate_literal_removal,[],[f41288])).
fof(f41288,plain,(
  ( ! [X97,X96] : (s(bool,X97) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X96) | s(bool,'F_0') = s(bool,X97) | s(bool,'T_0') = s(bool,X96)) ) | ($spl12 | $spl24 | $spl31 | $spl64)),
  inference(superposition,[],[f36904,f30703])).
fof(f41378,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,X97) | s(bool,'T_0') = s(bool,X96)) ) | ($spl12 | $spl24 | $spl31 | $spl46 | $spl64)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f5993,f6616,f6617,f218,f7444,f7446,f9884,f9858,f9839,f9807,f9521,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f16936,f18751,f17102,f18048,f19018,f18029,f18026,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f10135,f9966,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9142,f9144,f9147,f10005,f9486,f19682,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f13559,f13571,f13359,f19541,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18252,f17106,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19383,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f6318,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f22516,f491,f12142,f12140,f12155,f12115,f510,f29254,f28893,f28913,f28890,f6306,f30656,f30657,f30659,f22712,f18976,f19643,f19641,f19637,f19635,f30700,f30773,f30770,f30702,f30481,f30491,f30703,f30701,f19324,f19633,f12151,f17103,f12178,f12150,f12462,f12460,f766,f19225,f18256,f17992,f17844,f17554,f17105,f12236,f12220,f12218,f12152,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f22711,f22497,f20749,f19254,f18975,f18954,f18843,f18840,f18750,f18730,f12163,f12102,f10249,f10132,f9888,f9692,f9640,f9246,f9245,f3018,f213,f212,f38,f284,f8756,f14144,f18610,f18612,f18618,f18648,f18681,f18727,f18775,f18777,f18779,f18971,f20763,f14184,f14071,f13599,f13519,f13281,f10273,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f6102,f1690,f47,f6041,f2178,f1942,f40,f6031,f6329,f46,f986,f14977,f35890,f35891,f35893,f36098,f36904,f39983,f40038,f40103,f40284,f40408,f40409,f40410,f40411,f40413,f41139,f40561,f40563,f41261,f41334,f41329,f41321,f41318,f41317])).
fof(f36098,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl31),
  inference(condensation,[],[f36097])).
fof(f36097,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,g(s(bool,X65))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl31),
  inference(duplicate_literal_removal,[],[f35909])).
fof(f35909,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,g(s(bool,X65))) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X67)) ) | $spl31),
  inference(superposition,[],[f30703,f5666])).
fof(f35893,plain,(
  ( ! [X14,X15,X16] : (s(bool,X15) = s(bool,g(s(bool,X14))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl31),
  inference(superposition,[],[f30703,f54])).
fof(f35891,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X5) = s(bool,g(s(bool,X4))) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,X4) = s(bool,X6)) ) | $spl31),
  inference(superposition,[],[f30703,f1178])).
fof(f35890,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl31),
  inference(superposition,[],[f30703,f5666])).
fof(f41374,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,X74) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X74)) ) | $spl196),
  inference(cnf_transformation,[],[f41374_D])).
fof(f41374_D,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,X74) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X74)) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f41318,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) != s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,'F_0') = s(bool,X74) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | ($spl12 | $spl24 | $spl64)),
  inference(duplicate_literal_removal,[],[f41280])).
fof(f41280,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) != s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,'F_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f5666])).
fof(f41367,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X15)) ) | $spl194),
  inference(cnf_transformation,[],[f41367_D])).
fof(f41367_D,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X15)) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f41321,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl12 | $spl24 | $spl64)),
  inference(condensation,[],[f41320])).
fof(f41320,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl24 | $spl64)),
  inference(duplicate_literal_removal,[],[f41319])).
fof(f41319,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | ($spl12 | $spl24 | $spl64)),
  inference(condensation,[],[f41276])).
fof(f41276,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,X57) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X58) | s(bool,X56) = s(bool,X59) | s(bool,X58) = s(bool,X59)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f5666])).
fof(f41334,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X15)) ) | ($spl12 | $spl24 | $spl64)),
  inference(duplicate_literal_removal,[],[f41267])).
fof(f41267,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) ) | ($spl12 | $spl24 | $spl64)),
  inference(superposition,[],[f36904,f146])).
fof(f34632,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(subsumption_resolution,[],[f34623,f34631])).
fof(f34631,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6049,f6050,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6325,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6497,f6483,f6484,f5993,f6513,f6586,f6616,f6617,f6462,f218,f7490,f7444,f7446,f7578,f7635,f7687,f7689,f7767,f7769,f8576,f8673,f8799,f8869,f8943,f8965,f9092,f9099,f9959,f9965,f9967,f9884,f9858,f9839,f9983,f9807,f9673,f9672,f10105,f10106,f9521,f9524,f9525,f10133,f9612,f10270,f10195,f10282,f10284,f10305,f10306,f10500,f10492,f10464,f10731,f10565,f10582,f10748,f10770,f10774,f10776,f10782,f10783,f10664,f10901,f10908,f10932,f10933,f10934,f10936,f11145,f11149,f11049,f11419,f11420,f11422,f11775,f12093,f12097,f11792,f11793,f12107,f12109,f12126,f11934,f12223,f12237,f12402,f12404,f12459,f12722,f13039,f13043,f12739,f12740,f12741,f13050,f13056,f13067,f13082,f13088,f13100,f13102,f13110,f13111,f12898,f13114,f13123,f13601,f13607,f13778,f13806,f14399,f14465,f14836,f14893,f14717,f14979,f15093,f16292,f16300,f16176,f16462,f16474,f16501,f18600,f16503,f18580,f18559,f18558,f18607,f18556,f18609,f18668,f18671,f18395,f18357,f18338,f18707,f18709,f18311,f18711,f18307,f18714,f18293,f16934,f16936,f16939,f16940,f18732,f18751,f18763,f18764,f17102,f18940,f18048,f19018,f19020,f19022,f18029,f18026,f18021,f18020,f19030,f17984,f19079,f19085,f19087,f17980,f19090,f19094,f19100,f19101,f19102,f19103,f19104,f19105,f19106,f17928,f19218,f19220,f17927,f19250,f19256,f19259,f19262,f19265,f19268,f17913,f17841,f17858,f17903,f7582,f7580,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f18980,f6618,f6619,f19954,f11310,f11274,f11275,f17104,f17845,f9064,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f10135,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f7986,f8124,f8121,f8128,f8111,f8105,f8132,f19732,f8135,f8137,f19728,f19726,f19721,f8706,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9057,f9142,f9144,f9147,f10005,f10060,f9486,f10109,f19687,f19682,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f12222,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f12388,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f19553,f13571,f13359,f19541,f13380,f8087,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18253,f18252,f17106,f19412,f18807,f19397,f17206,f19394,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f19347,f19329,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f9317,f9098,f9097,f19301,f19383,f19389,f20701,f19392,f20702,f19404,f20703,f20704,f15583,f15574,f20708,f14199,f20714,f12539,f20717,f19621,f19623,f20720,f20722,f20724,f20725,f6512,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f18964,f18967,f19144,f19145,f19146,f20761,f20762,f18680,f18385,f18258,f17052,f17508,f19377,f20764,f19359,f20765,f20766,f20767,f20768,f20769,f20770,f19340,f20771,f19211,f17855,f75,f17897,f17909,f20772,f21019,f21020,f22984,f491,f12142,f12140,f12155,f12115,f510,f28377,f28764,f28768,f28396,f28588,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29563,f28586,f29586,f29630,f28392,f29852,f29918,f6306,f30656,f30657,f30659,f19559,f22217,f22337,f30882,f29564,f22874,f20763,f20723,f20721,f20719,f20716,f20705,f20639,f18976,f18975,f18840,f18750,f18730,f15631,f12604,f12163,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f6504,f3018,f31875,f31869,f31843,f31579,f31576,f31567,f31555,f33543,f31551,f33552,f33555,f31504,f31503,f31071,f31054,f29654,f29652,f29609,f28536,f33645,f33647,f29560,f33701,f33706,f33711,f33713,f28590,f28813,f28809,f28804,f28803,f28508,f28461,f33749,f33756,f33758,f33760,f33767,f33772,f33778,f33780,f28400,f28740,f28736,f28732,f28731,f28340,f28221,f28287,f28283,f28277,f28276,f19344,f19575,f12616,f19643,f19641,f19637,f19635,f33937,f33939,f33943,f33947,f12508,f31823,f30777,f30700,f30773,f30770,f30702,f30481,f30482,f30767,f30486,f30491,f30764,f30495,f30762,f30498,f30761,f30501,f30760,f30509,f30759,f30515,f30758,f30519,f30757,f30522,f30756,f30525,f30755,f30533,f30754,f30539,f30753,f30543,f30752,f30749,f30553,f30748,f30565,f30566,f30567,f30740,f30739,f30738,f30582,f30737,f30588,f30736,f30598,f30735,f30603,f30734,f30614,f30728,f30624,f30726,f30627,f30725,f30630,f30724,f30642,f30723,f30722,f30721,f30720,f30719,f30766,f30703,f30701,f29637,f29557,f12618,f9692,f212,f38,f12556,f34243,f19324,f34245,f19633,f33932,f33928,f9640,f19409,f19523,f19596,f19598,f19216,f28733,f28737,f33776,f33774,f33751,f33744,f28806,f28810,f33715,f33709,f28855,f29561,f29650,f33547,f31560,f6309,f284,f213,f34272,f33888,f12151,f33878,f33870,f33862,f33854,f34277,f17103,f34282,f12178,f34283,f33688,f33680,f33672,f34293,f34294,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f8756,f19254,f18971,f18779,f18777,f18775,f12102,f18954,f18843,f221,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f12595,f29610,f29582,f29584,f29603,f29570,f34559,f34570,f34624,f34630])).
fof(f34630,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(duplicate_literal_removal,[],[f34629])).
fof(f34629,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(forward_demodulation,[],[f34581,f34570])).
fof(f34581,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(backward_demodulation,[],[f34570,f40])).
fof(f34624,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(subsumption_resolution,[],[f34575,f34570])).
fof(f34575,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(backward_demodulation,[],[f34570,f19499])).
fof(f34570,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(subsumption_resolution,[],[f34569,f20703])).
fof(f34569,plain,(
  ( ! [X46] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(forward_demodulation,[],[f30882,f34559])).
fof(f34272,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f34271,f29650])).
fof(f34271,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f33958,f29637])).
fof(f33958,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl12 | $spl76)),
  inference(condensation,[],[f33957])).
fof(f33957,plain,(
  ( ! [X393,X395,X396,X392,X394] : (s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,bool),X392) = s(fun(bool,bool),X393) | s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') = s(bool,X395) | s(bool,X396) = s(bool,sK6(X392,X393,bool,bool)) | s(bool,X395) = s(bool,X396)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17202,f20722])).
fof(f17202,plain,(
  ( ! [X393,X395,X396,X392,X394] : (s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,bool),X392) = s(fun(bool,bool),X393) | s(bool,X394) = s(bool,g(s(bool,sK6(X392,X393,bool,bool)))) | s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') = s(bool,X395) | s(bool,X396) = s(bool,sK6(X392,X393,bool,bool)) | s(bool,X395) = s(bool,X396)) )),
  inference(superposition,[],[f1394,f5666])).
fof(f33715,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,X13) | s(bool,'T_0') = s(bool,f(s(bool,X13)))) ) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28594,f20703])).
fof(f28594,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,X13) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s(bool,X13)))) ) | ($spl12 | $spl66 | $spl70 | $spl76)),
  inference(superposition,[],[f19301,f12618])).
fof(f30766,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30487,f29637])).
fof(f30487,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f54])).
fof(f30719,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30652,f29637])).
fof(f30720,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30649,f29637])).
fof(f30649,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f6306,f6306,f5666])).
fof(f30721,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30648,f29637])).
fof(f30648,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f6306,f5666])).
fof(f30722,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f30647,f29637])).
fof(f30647,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f6306,f5666])).
fof(f30723,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30643,f29637])).
fof(f30643,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f37,f20772,f6306,f1687])).
fof(f30642,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f37,f20703,f6306,f1687])).
fof(f30724,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30631,f29637])).
fof(f30631,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30630,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30725,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30628,f29637])).
fof(f30628,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f20772,f6306,f1178])).
fof(f30627,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20772,f20772,f6306,f1178])).
fof(f30726,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f30625,f29637])).
fof(f30625,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20772,f20703,f20703,f6306,f1178])).
fof(f30624,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f20703,f6306,f1178])).
fof(f30728,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30615,f29637])).
fof(f30615,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f6306,f5666])).
fof(f30614,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20772,f6306,f5666])).
fof(f30734,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30604,f29637])).
fof(f30604,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30603,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30735,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30601,f29637])).
fof(f30601,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f20772,f6306,f6306,f1178])).
fof(f30598,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f20703,f6306,f6306,f1178])).
fof(f30736,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30589,f29637])).
fof(f30589,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30588,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30737,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30586,f29637])).
fof(f30586,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f20772,f6306,f6306,f1178])).
fof(f30582,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f20703,f6306,f6306,f1178])).
fof(f30738,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30570,f29637])).
fof(f30570,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f6306,f20772,f6306,f1178])).
fof(f30739,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30569,f29637])).
fof(f30569,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f20772,f6306,f1178])).
fof(f30740,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f30568,f29637])).
fof(f30568,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f20772,f6306,f1178])).
fof(f30567,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f6306,f20703,f6306,f1178])).
fof(f30566,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f20703,f6306,f1178])).
fof(f30565,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f20703,f6306,f1178])).
fof(f30748,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30554,f29637])).
fof(f30554,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f6306,f5666])).
fof(f30553,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20772,f6306,f5666])).
fof(f30749,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30552,f29637])).
fof(f30552,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f6306,f6306,f5666])).
fof(f30752,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30544,f29637])).
fof(f30544,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f37,f20772,f6306,f1687])).
fof(f30543,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f37,f20703,f6306,f1687])).
fof(f30753,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30540,f29637])).
fof(f30540,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30539,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30754,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30537,f29637])).
fof(f30537,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f20772,f6306,f6306,f1178])).
fof(f30533,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f20703,f6306,f6306,f1178])).
fof(f30755,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30526,f29637])).
fof(f30526,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30525,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30756,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30523,f29637])).
fof(f30523,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f20772,f6306,f1178])).
fof(f30522,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20772,f20772,f6306,f1178])).
fof(f30757,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f30520,f29637])).
fof(f30520,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20772,f20703,f20703,f6306,f1178])).
fof(f30519,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f20703,f6306,f1178])).
fof(f30758,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30516,f29637])).
fof(f30516,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30515,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30759,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30513,f29637])).
fof(f30513,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f20772,f6306,f6306,f1178])).
fof(f30509,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f6306,f20703,f6306,f6306,f1178])).
fof(f30760,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30502,f29637])).
fof(f30502,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f6306,f6306,f1178])).
fof(f30501,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f6306,f6306,f1178])).
fof(f30761,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30499,f29637])).
fof(f30499,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f20772,f20772,f6306,f1178])).
fof(f30498,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20772,f20772,f6306,f1178])).
fof(f30762,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f30496,f29637])).
fof(f30496,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20772,f20703,f20703,f6306,f1178])).
fof(f30495,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f20703,f20703,f6306,f1178])).
fof(f30764,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30493,f29637])).
fof(f30493,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl31),
  inference(unit_resulting_resolution,[],[f6306,f146])).
fof(f30486,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f54])).
fof(f30767,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30483,f29637])).
fof(f30483,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl31)),
  inference(unit_resulting_resolution,[],[f20772,f6306,f54])).
fof(f30482,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl3 | $spl12 | $spl31 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f6306,f54])).
fof(f30777,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f30776,f29637])).
fof(f30776,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl31),
  inference(condensation,[],[f30775])).
fof(f30775,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') = s(bool,X31) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X30) = s(bool,X31)) ) | $spl31),
  inference(subsumption_resolution,[],[f30695,f54])).
fof(f30695,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') != s(bool,X30) | s(bool,'T_0') = s(bool,X31) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X30) = s(bool,X31)) ) | $spl31),
  inference(superposition,[],[f6306,f5666])).
fof(f31823,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl24 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f31749,f29637])).
fof(f31749,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl12 | $spl24 | $spl31 | $spl66 | $spl70)),
  inference(unit_resulting_resolution,[],[f6306,f29637,f5993])).
fof(f33947,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f33946])).
fof(f33946,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X1))) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f33945])).
fof(f33945,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f12492,f20723])).
fof(f12492,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f33943,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f33942])).
fof(f33942,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f33941])).
fof(f33941,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) != s(bool,f(s(bool,X27))) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f12490,f20723])).
fof(f12490,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) != s(bool,f(s(bool,X27))) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f28283,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f28282])).
fof(f28282,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f28281])).
fof(f28281,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) != s(bool,f(s(bool,X27))) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28200,f20723])).
fof(f28200,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) != s(bool,f(s(bool,X27))) | s(bool,X26) = s(bool,g(s(bool,'F_0'))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f28287,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f28286])).
fof(f28286,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,X1))) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f28285])).
fof(f28285,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28202,f20723])).
fof(f28202,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) != s(bool,f(s(bool,X35))) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | $spl70),
  inference(superposition,[],[f10103,f1178])).
fof(f28736,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f28735])).
fof(f28735,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(condensation,[],[f28734])).
fof(f28734,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28351,f20723])).
fof(f28351,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X31) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X30))) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f28740,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f28739])).
fof(f28739,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(condensation,[],[f28738])).
fof(f28738,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X38))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28353,f20723])).
fof(f28353,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X39) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X38))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f28809,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(duplicate_literal_removal,[],[f28808])).
fof(f28808,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(condensation,[],[f28807])).
fof(f28807,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X41) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28526,f20723])).
fof(f28526,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,f(s(bool,X41)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f28813,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(condensation,[],[f28812])).
fof(f28812,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X2)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(condensation,[],[f28811])).
fof(f28811,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,X50) = s(bool,g(s(bool,'F_0'))) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,f(s(bool,X49)))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28528,f20723])).
fof(f28528,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,X50) = s(bool,g(s(bool,'F_0'))) | s(bool,X50) = s(bool,X51) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,f(s(bool,X49)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f33647,plain,(
  ( ! [X93] : (s(bool,'F_0') != s(bool,X93) | s(bool,'T_0') = s(bool,f(s(bool,X93)))) ) | ($spl12 | $spl24 | $spl31 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f29563,f6306])).
fof(f33645,plain,(
  ( ! [X88,X87] : (s(bool,'F_0') != s(bool,X87) | s(bool,X88) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X87)))) ) | ($spl12 | $spl24 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28622,f20705])).
fof(f28622,plain,(
  ( ! [X88,X87] : (s(bool,'F_0') != s(bool,X87) | s(bool,'T_0') = s(bool,X88) | s(bool,X88) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X87)))) ) | ($spl12 | $spl24 | $spl66 | $spl70)),
  inference(superposition,[],[f5993,f12618])).
fof(f28536,plain,(
  ( ! [X74,X75] : (s(bool,'F_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X75) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,f(s(bool,X74)))) ) | ($spl12 | $spl24 | $spl66 | $spl70)),
  inference(superposition,[],[f5993,f12618])).
fof(f31843,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f31842,f29637])).
fof(f31842,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31841,f20703])).
fof(f31841,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f31773,f29557])).
fof(f31773,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f29637,f12618])).
fof(f31869,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f31868,f29637])).
fof(f31868,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f31867,f20703])).
fof(f31867,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f31810,f29557])).
fof(f31810,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f29637])).
fof(f20716,plain,(
  ( ! [X47,X48] : (s(bool,X47) != s(bool,X48) | s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f12346,f20703])).
fof(f20719,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f11791,f20703])).
fof(f20721,plain,(
  ( ! [X47,X48] : (s(bool,X48) != s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,X47) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f10211,f20703])).
fof(f20723,plain,(
  ( ! [X134,X135,X133] : (s(bool,X133) != s(bool,X134) | s(bool,'T_0') = s(bool,X135) | s(bool,X134) = s(bool,X135) | s(bool,X133) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f9486,f20703])).
fof(f29564,plain,(
  ( ! [X93] : (s(bool,'F_0') != s(bool,X93) | s(bool,'T_0') = s(bool,f(s(bool,X93)))) ) | ($spl3 | $spl12 | $spl17 | $spl24 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f29563,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f63,f85,f88,f89,f31,f146,f151,f176,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6049,f6050,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6325,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6497,f6483,f6484,f5993,f6513,f6586,f6616,f6617,f6462,f218,f8576,f8673,f8799,f8869,f8943,f8965,f9092,f9099,f9959,f9967,f9884,f9858,f9839,f9807,f9673,f9672,f10105,f10106,f10133,f9612,f9640,f10270,f10195,f10282,f10284,f10305,f10306,f10500,f10492,f10464,f11775,f12093,f12097,f11792,f12107,f12126,f11934,f12402,f12404,f12459,f12722,f13039,f13043,f12739,f12740,f13050,f13056,f13067,f13082,f13088,f13100,f13102,f13110,f13111,f12898,f13114,f13123,f13601,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18609,f18395,f18357,f18338,f18711,f18714,f18293,f16934,f18732,f18751,f17102,f18048,f19018,f18029,f19030,f17984,f19079,f19087,f17980,f19100,f19101,f19102,f19103,f19104,f19105,f19106,f19250,f19256,f19259,f19262,f19265,f19268,f17913,f17841,f17858,f17903,f6618,f6619,f19954,f11310,f11274,f11275,f12151,f17104,f17845,f9064,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f10135,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f221,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f8121,f8128,f8111,f8105,f19732,f8135,f8137,f19728,f19726,f19721,f8727,f8729,f8783,f8780,f8769,f8765,f19706,f19703,f8753,f9057,f9142,f9144,f9147,f10005,f10060,f9486,f10109,f19682,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f11851,f19652,f12222,f19625,f12341,f12343,f12346,f19615,f19612,f12355,f12356,f12415,f12362,f12418,f19604,f12377,f12388,f13559,f19553,f13571,f13359,f19541,f13380,f8087,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f17005,f17024,f19428,f17053,f17054,f18766,f17059,f18768,f17087,f18252,f17106,f19412,f18807,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17637,f17639,f17641,f17644,f19347,f17696,f19304,f19178,f19180,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f9317,f9098,f9097,f19383,f14199,f20714,f19621,f19623,f6512,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f12403,f14144,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f17508,f19377,f20764,f19340,f20771,f19211,f17855,f75,f17897,f17909,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f1942,f2178,f6041,f46,f40,f6031,f6329,f986,f491,f12142,f14977,f12140,f13599,f12155,f12115,f766,f510,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f20639,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f12163,f12102,f10249,f10132,f9888,f9692,f9246,f9245,f8756,f6504,f3018,f284,f213,f212,f38,f29254,f22217,f22337,f28893,f28913,f28890])).
fof(f29630,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl17 | $spl66 | $spl70)),
  inference(condensation,[],[f29629])).
fof(f29629,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl17 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28429,f20639])).
fof(f28429,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f39])).
fof(f29586,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl17 | $spl66 | $spl70)),
  inference(condensation,[],[f29585])).
fof(f29585,plain,(
  ( ! [X124] : (s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl17 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28575,f20639])).
fof(f28575,plain,(
  ( ! [X124] : (s(bool,X124) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f146,f12618])).
fof(f29563,plain,(
  ( ! [X93] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') != s(bool,X93) | s(bool,'T_0') = s(bool,f(s(bool,X93)))) ) | ($spl12 | $spl24 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f28626,f29557])).
fof(f28626,plain,(
  ( ! [X93] : (s(bool,'F_0') != s(bool,X93) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,f(s(bool,X93)))) ) | ($spl12 | $spl24 | $spl66 | $spl70)),
  inference(superposition,[],[f12163,f12618])).
fof(f28588,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,f(s(bool,X4)))) ) | ($spl12 | $spl17 | $spl66 | $spl70)),
  inference(superposition,[],[f20639,f12618])).
fof(f28768,plain,(
  ( ! [X54,X52,X53] : (s(bool,X53) = s(bool,g(s(bool,X52))) | s(bool,'T_0') = s(bool,f(s(bool,X53))) | s(bool,X54) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X52) = s(bool,X54)) ) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28394,f20703])).
fof(f28394,plain,(
  ( ! [X54,X52,X53] : (s(bool,X53) = s(bool,g(s(bool,X52))) | s(bool,'T_0') = s(bool,f(s(bool,X53))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X54) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X52) = s(bool,X54)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f5666])).
fof(f28764,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,f(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl3 | $spl12 | $spl66 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28388,f20703])).
fof(f28388,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,f(s(bool,X32))) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f21020,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') = s(bool,f(s(bool,X35))) | s(bool,X36) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X35) = s(bool,X36)) ) | ($spl3 | $spl12 | $spl17 | $spl76)),
  inference(subsumption_resolution,[],[f20947,f20703])).
fof(f20947,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') = s(bool,f(s(bool,X35))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X36) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X35) = s(bool,X36)) ) | $spl17),
  inference(superposition,[],[f6512,f5666])).
fof(f21019,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,f(s(bool,X20))) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | ($spl3 | $spl12 | $spl17 | $spl76)),
  inference(subsumption_resolution,[],[f20941,f20703])).
fof(f20941,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,f(s(bool,X20))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl17),
  inference(superposition,[],[f6512,f1178])).
fof(f20770,plain,(
  ( ! [X318,X320,X319] : (s(bool,X318) != s(bool,X319) | s(bool,'T_0') = s(bool,g(s(bool,X319))) | s(bool,X320) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X318) = s(bool,X320)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f17644,f20703])).
fof(f20769,plain,(
  ( ! [X310,X309,X311] : (s(bool,X310) = s(bool,g(s(bool,X309))) | s(bool,'T_0') = s(bool,g(s(bool,X310))) | s(bool,X311) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X309) = s(bool,X311)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17641,f20703])).
fof(f20768,plain,(
  ( ! [X304,X303,X305] : (s(bool,X304) != s(bool,g(s(bool,X303))) | s(bool,'T_0') = s(bool,X304) | s(bool,X305) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X303) = s(bool,X305)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17639,f20703])).
fof(f20767,plain,(
  ( ! [X300,X298,X297,X299] : (s(bool,X297) != s(bool,X298) | s(bool,'T_0') = s(bool,X299) | s(bool,X298) = s(bool,X299) | s(bool,X300) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X297) = s(bool,X300)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f17637,f20703])).
fof(f20766,plain,(
  ( ! [X294,X296,X293,X295] : (s(bool,X294) = s(bool,g(s(bool,X293))) | s(bool,X294) = s(bool,X295) | s(bool,'T_0') = s(bool,X295) | s(bool,X296) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X293) = s(bool,X296)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17636,f20703])).
fof(f20765,plain,(
  ( ! [X288,X290,X287,X289,X286] : (s(X287,f(s(bool,X286))) != s(X287,g(s(bool,X286))) | s(fun(bool,X287),X288) = s(fun(bool,X287),X289) | s(bool,'T_0') = s(bool,sK6(X288,X289,X287,bool)) | s(bool,X290) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X286) = s(bool,X290)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17634,f20703])).
fof(f20762,plain,(
  ( ! [X184,X183] : (s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X183) = s(bool,X184) | s(bool,X184) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f16567,f20703])).
fof(f20725,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X52) != s(bool,X53) | s(bool,'T_0') = s(bool,X54) | s(bool,X53) = s(bool,X54) | s(bool,X52) = s(bool,X55) | s(bool,X55) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f8729,f20703])).
fof(f20724,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X53) = s(bool,g(s(bool,X52))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54) | s(bool,X52) = s(bool,X55) | s(bool,X55) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f9144,f20703])).
fof(f20722,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) != s(bool,g(s(bool,X39))) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f10208,f20703])).
fof(f20720,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) = s(bool,g(s(bool,X39))) | s(bool,'T_0') = s(bool,g(s(bool,X40))) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f11788,f20703])).
fof(f20717,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X39) != s(bool,X40) | s(bool,'T_0') = s(bool,g(s(bool,X40))) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f12343,f20703])).
fof(f20708,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(X69,f(s(bool,X68))) != s(X69,g(s(bool,X68))) | s(fun(bool,X69),X70) = s(fun(bool,X69),X71) | s(bool,'T_0') = s(bool,sK6(X70,X71,X69,bool)) | s(bool,X68) = s(bool,X72) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15428,f20703])).
fof(f20704,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | ($spl12 | $spl17 | $spl70)),
  inference(global_subsumption,[],[f19409,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f227,f226,f228,f240,f283,f301,f321,f336,f355,f409,f442,f445,f449,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6464,f6483,f6484,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f17984,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f221,f6442,f6440,f6426,f6425,f6475,f6477,f6491,f6479,f6499,f6501,f6482,f6485,f6486,f6508,f6512,f8121,f8128,f8111,f8105,f19732,f8135,f8137,f19728,f19726,f19721,f19625,f19623,f19621,f19553,f13571,f13380,f8087,f14199,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19412,f17508,f19377,f18017,f18011,f17634,f19347,f19340,f17696,f19211,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f6504,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220])).
fof(f14717,plain,(
  ( ! [X12,X13] : (s(bool,X12) != s(bool,X13) | s(bool,X12) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X13)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl70)),
  inference(superposition,[],[f10103,f14465])).
fof(f14893,plain,(
  ( ! [X196,X195] : (s(bool,X195) != s(bool,f(s(bool,X196))) | s(bool,X195) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl70)),
  inference(subsumption_resolution,[],[f14892,f63])).
fof(f14892,plain,(
  ( ! [X196,X195] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X195) != s(bool,f(s(bool,X196))) | s(bool,X195) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl70)),
  inference(forward_demodulation,[],[f14670,f13778])).
fof(f14670,plain,(
  ( ! [X196,X195] : (s(bool,X195) != s(bool,f(s(bool,X196))) | s(bool,X195) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,f(s(bool,X195)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl70)),
  inference(superposition,[],[f10103,f14465])).
fof(f34623,plain,(
  p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(condensation,[],[f34582])).
fof(f34582,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0))))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl66 | $spl68 | $spl70 | $spl76 | $spl174)),
  inference(backward_demodulation,[],[f34570,f1942])).
fof(f34557,plain,(
  $false | ($spl12 | $spl20 | $spl29 | $spl68 | $spl70 | $spl76 | $spl184)),
  inference(subsumption_resolution,[],[f6261,f34533])).
fof(f34533,plain,(
  ( ! [X60] : (s(bool,X60) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl20 | $spl68 | $spl70 | $spl76 | $spl184)),
  inference(subsumption_resolution,[],[f34388,f34340])).
fof(f34340,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl20 | $spl70 | $spl184)),
  inference(subsumption_resolution,[],[f34248,f34250])).
fof(f34250,plain,(
  ( ! [X355] : (s(bool,'T_0') = s(bool,f(s(bool,X355))) | s(bool,'T_0') = s(bool,X355)) ) | ($spl12 | $spl20 | $spl70)),
  inference(global_subsumption,[],[f19523,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7963,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7949,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f7956,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f21694,f6663,f213,f29254,f28913,f28890,f284,f6137,f516,f467,f341,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f7939,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33507,f31699,f31695,f33515,f33518,f31631,f33804,f24845,f24841,f33812,f33815,f24784,f33824,f21705,f21701,f33832,f33835,f21646,f19753,f19751,f19748,f19745,f7967,f7971,f19551,f444,f212,f38])).
fof(f34388,plain,(
  ( ! [X60] : (s(bool,X60) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X60)) ) | ($spl12 | $spl20 | $spl68 | $spl70 | $spl76 | $spl184)),
  inference(backward_demodulation,[],[f34340,f20705])).
fof(f34529,plain,(
  $false | ($spl12 | $spl20 | $spl33 | $spl70 | $spl184)),
  inference(subsumption_resolution,[],[f34346,f34340])).
fof(f34346,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl12 | $spl20 | $spl33 | $spl70 | $spl184)),
  inference(backward_demodulation,[],[f34340,f6309])).
fof(f34528,plain,(
  $false | ($spl12 | $spl20 | $spl70 | $spl184)),
  inference(subsumption_resolution,[],[f34341,f37])).
fof(f34341,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl20 | $spl70 | $spl184)),
  inference(backward_demodulation,[],[f34340,f38])).
fof(f6313,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl38),
  inference(cnf_transformation,[],[f6313_D])).
fof(f6313_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f34294,plain,(
  ( ! [X103,X105,X104] : (s(bool,X105) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X103) = s(fun(bool,bool),X104) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X103,X104,bool,bool))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f29247,f29557])).
fof(f29247,plain,(
  ( ! [X103,X105,X104] : (s(bool,X105) != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X103) = s(fun(bool,bool),X104) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X103,X104,bool,bool))))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f29204])).
fof(f29204,plain,(
  ( ! [X103,X105,X104] : (s(bool,X105) != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X103) = s(fun(bool,bool),X104) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X103,X104,bool,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X103,X104,bool,bool))))) ) | $spl12),
  inference(superposition,[],[f1272,f9692])).
fof(f6661,plain,(
  ( ! [X26,X24,X25] : (s(bool,X25) != s(bool,f(s(bool,X24))) | s(bool,'T_0') = s(bool,X26) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl62),
  inference(cnf_transformation,[],[f6661_D])).
fof(f6661_D,plain,(
  ( ! [X26,X24,X25] : (s(bool,X25) != s(bool,f(s(bool,X24))) | s(bool,'T_0') = s(bool,X26) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f34293,plain,(
  ( ! [X87,X85,X83,X86,X84] : (s(bool,X86) != s(bool,f(s(bool,X85))) | s(fun(bool,bool),X83) = s(fun(bool,bool),X84) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X83,X84,bool,bool)))) | s(bool,'T_0') = s(bool,X87) | s(bool,X85) = s(bool,X87)) ) | ($spl12 | $spl24 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f34292,f12163])).
fof(f34292,plain,(
  ( ! [X87,X85,X83,X86,X84] : (s(bool,'F_0') = s(bool,sK6(X83,X84,bool,bool)) | s(bool,X86) != s(bool,f(s(bool,X85))) | s(fun(bool,bool),X83) = s(fun(bool,bool),X84) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X83,X84,bool,bool)))) | s(bool,'T_0') = s(bool,X87) | s(bool,X85) = s(bool,X87)) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f29200,f29637])).
fof(f29200,plain,(
  ( ! [X87,X85,X83,X86,X84] : (s(bool,X86) != s(bool,f(s(bool,X85))) | s(fun(bool,bool),X83) = s(fun(bool,bool),X84) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X83,X84,bool,bool)))) | s(bool,'T_0') = s(bool,X87) | s(bool,sK6(X83,X84,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X85) = s(bool,X87)) )),
  inference(superposition,[],[f1272,f5666])).
fof(f33672,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X2,X3,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33671])).
fof(f33671,plain,(
  ( ! [X80,X78,X81,X79,X82] : (s(bool,X80) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X78) = s(fun(bool,bool),X79) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X78,X79,bool,bool)))) | s(bool,X81) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X81) = s(bool,X82)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f29199,f20770])).
fof(f29199,plain,(
  ( ! [X80,X78,X81,X79,X82] : (s(bool,X80) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X78) = s(fun(bool,bool),X79) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X78,X79,bool,bool)))) | s(bool,X81) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X81) = s(bool,X82) | s(bool,X82) = s(bool,sK6(X78,X79,bool,bool))) )),
  inference(superposition,[],[f1272,f5666])).
fof(f33680,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33679])).
fof(f33679,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(duplicate_literal_removal,[],[f33678])).
fof(f33678,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33677])).
fof(f33677,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X45) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X43,X44,bool,bool)))) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f29193,f20717])).
fof(f29193,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X45) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X43,X44,bool,bool)))) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,X46) = s(bool,sK6(X43,X44,bool,bool))) )),
  inference(superposition,[],[f1272,f1178])).
fof(f33688,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33687])).
fof(f33687,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(duplicate_literal_removal,[],[f33686])).
fof(f33686,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33685])).
fof(f33685,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X39) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X37,X38,bool,bool)))) | s(bool,X40) = s(bool,X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f29192,f20717])).
fof(f29192,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X39) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X37,X38,bool,bool)))) | s(bool,X40) = s(bool,X41) | s(bool,X41) = s(bool,sK6(X37,X38,bool,bool)) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f1272,f1178])).
fof(f34278,plain,(
  ( ! [X546,X544] : (s(bool,'T_0') != s(bool,f(s(bool,X544))) | s(bool,X544) = s(bool,X546) | s(bool,'T_0') = s(bool,X546)) ) | $spl190),
  inference(cnf_transformation,[],[f34278_D])).
fof(f34278_D,plain,(
  ( ! [X546,X544] : (s(bool,'T_0') != s(bool,f(s(bool,X544))) | s(bool,X544) = s(bool,X546) | s(bool,'T_0') = s(bool,X546)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f34277,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,'F_0') = s(bool,sK6(X542,X543,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X544))) | s(fun(bool,bool),X542) = s(fun(bool,bool),X543) | s(bool,X545) = s(bool,g(s(bool,sK6(X542,X543,bool,bool)))) | s(bool,'T_0') = s(bool,X545) | s(bool,'T_0') = s(bool,X546) | s(bool,X544) = s(bool,X546)) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f17407,f29637])).
fof(f17407,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,'T_0') != s(bool,f(s(bool,X544))) | s(fun(bool,bool),X542) = s(fun(bool,bool),X543) | s(bool,X545) = s(bool,g(s(bool,sK6(X542,X543,bool,bool)))) | s(bool,'T_0') = s(bool,X545) | s(bool,'T_0') = s(bool,X546) | s(bool,sK6(X542,X543,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X544) = s(bool,X546)) )),
  inference(superposition,[],[f1394,f5666])).
fof(f33854,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33853])).
fof(f33853,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(duplicate_literal_removal,[],[f33852])).
fof(f33852,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33851])).
fof(f33851,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,X36) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X34,X35,bool,bool)))) | s(bool,X37) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f6618,f20717])).
fof(f33862,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33861])).
fof(f33861,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(duplicate_literal_removal,[],[f33860])).
fof(f33860,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33859])).
fof(f33859,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,X42) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X40,X41,bool,bool)))) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f6619,f20717])).
fof(f33870,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33869])).
fof(f33869,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(duplicate_literal_removal,[],[f33868])).
fof(f33868,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool)))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33867])).
fof(f33867,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X39) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X37,X38,bool,bool)))) | s(bool,X40) = s(bool,X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f11274,f20717])).
fof(f33878,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33877])).
fof(f33877,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(duplicate_literal_removal,[],[f33876])).
fof(f33876,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33875])).
fof(f33875,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,X45) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X43,X44,bool,bool)))) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f11275,f20717])).
fof(f12151,plain,(
  ( ! [X142,X140,X141] : (s(bool,X142) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X140) = s(fun(bool,bool),X141) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X140,X141,bool,bool))))) ) | $spl12),
  inference(forward_demodulation,[],[f11983,f218])).
fof(f11983,plain,(
  ( ! [X142,X140,X141] : (s(bool,X142) != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X140) = s(fun(bool,bool),X141) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X140,X141,bool,bool))))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f11931])).
fof(f11931,plain,(
  ( ! [X142,X140,X141] : (s(bool,X142) != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X140) = s(fun(bool,bool),X141) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X140,X141,bool,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X140,X141,bool,bool))))) ) | $spl12),
  inference(superposition,[],[f1272,f9692])).
fof(f33888,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X2,X3,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(condensation,[],[f33887])).
fof(f33887,plain,(
  ( ! [X499,X500,X496,X498,X497] : (s(bool,X498) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X496) = s(fun(bool,bool),X497) | s(bool,'T_0') = s(bool,X498) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X496,X497,bool,bool)))) | s(bool,X499) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X499) = s(bool,X500)) ) | ($spl3 | $spl12 | $spl24 | $spl76)),
  inference(subsumption_resolution,[],[f17104,f20770])).
fof(f34254,plain,(
  $false | ($spl11 | $spl12 | $spl28 | $spl31 | $spl33 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f34253,f6309])).
fof(f34253,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl11 | $spl12 | $spl28 | $spl31 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f6260,f30766])).
fof(f6260,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) | $spl28),
  inference(cnf_transformation,[],[f6260_D])).
fof(f6260_D,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f34251,plain,(
  ( ! [X28,X26,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X28)) ) | $spl188),
  inference(cnf_transformation,[],[f34251_D])).
fof(f34251_D,plain,(
  ( ! [X28,X26,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29) | s(bool,X26) = s(bool,X28)) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f28855,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X40) = s(bool,X41) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,f(s(bool,X40)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28609,f20705])).
fof(f28609,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X40) = s(bool,X41) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X42) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,f(s(bool,X40)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f33709,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X36) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X36)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28608,f20705])).
fof(f28608,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X36) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,f(s(bool,X36)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f28810,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,X45) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,f(s(bool,X45)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28527,f20705])).
fof(f28527,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X46) = s(bool,g(s(bool,'F_0'))) | s(bool,X45) = s(bool,X47) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,f(s(bool,X45)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f28806,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X37) = s(bool,X39) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,f(s(bool,X37)))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28525,f20705])).
fof(f28525,plain,(
  ( ! [X39,X37,X38,X40] : (s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,f(s(bool,X37)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1178,f12618])).
fof(f33744,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28442,f20705])).
fof(f28442,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X38) = s(bool,g(s(bool,'F_0'))) | s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f33751,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,f(s(bool,X31))) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28440,f20705])).
fof(f28440,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,f(s(bool,X31))) | s(bool,X30) = s(bool,g(s(bool,'F_0'))) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f33774,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,X27) = s(bool,g(s(bool,'F_0'))) | s(bool,X25) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28410,f20705])).
fof(f28410,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,X27) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X27) | s(bool,X25) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f33776,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,f(s(bool,X22))) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28409,f20705])).
fof(f28409,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,f(s(bool,X22))) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X24)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f28737,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X34))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28352,f20705])).
fof(f28352,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X35) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X34))) | s(bool,X34) = s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X35)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f28733,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,X26) = s(bool,X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28350,f20705])).
fof(f28350,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X26))) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f1178])).
fof(f221,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl17),
  inference(cnf_transformation,[],[f221_D])).
fof(f221_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f19598,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12480,f9640])).
fof(f12480,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl70),
  inference(superposition,[],[f10103,f39])).
fof(f19596,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f19595,f75])).
fof(f19595,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f12485,f9640])).
fof(f12485,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl70),
  inference(superposition,[],[f10103,f146])).
fof(f19409,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f19408,f75])).
fof(f19408,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl70)),
  inference(duplicate_literal_removal,[],[f19407])).
fof(f19407,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19406])).
fof(f19406,plain,(
  ( ! [X171,X172,X170] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X171) | s(bool,X170) = s(bool,X172) | s(bool,X171) = s(bool,X172)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f17148,f10249])).
fof(f17148,plain,(
  ( ! [X171,X172,X170] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X170) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X171) | s(bool,X170) = s(bool,X172) | s(bool,X171) = s(bool,X172)) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f34249,plain,(
  ( ! [X4,X2,X0,X3] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X4) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X4) = s(bool,sK6(X2,X3,bool,bool))) ) | $spl186),
  inference(cnf_transformation,[],[f34249_D])).
fof(f34249_D,plain,(
  ( ! [X4,X2,X0,X3] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X4) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X4) = s(bool,sK6(X2,X3,bool,bool))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f34248,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl184),
  inference(cnf_transformation,[],[f34248_D])).
fof(f34248_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f33928,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | ($spl3 | $spl12 | $spl76)),
  inference(condensation,[],[f33927])).
fof(f33927,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,'T_0') != s(bool,f(s(bool,X51))) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK6(X49,X50,bool,bool)) | s(bool,'T_0') = s(bool,X51) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f12179,f20722])).
fof(f12179,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,'T_0') != s(bool,f(s(bool,X51))) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50) | s(bool,X52) = s(bool,g(s(bool,sK6(X49,X50,bool,bool)))) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK6(X49,X50,bool,bool)) | s(bool,'T_0') = s(bool,X51) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f1394,f1178])).
fof(f33932,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X4) = s(bool,sK6(X2,X3,bool,bool)) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X1)) ) | ($spl3 | $spl12 | $spl76)),
  inference(condensation,[],[f33931])).
fof(f33931,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s(bool,'T_0') != s(bool,f(s(bool,X63))) | s(fun(bool,bool),X61) = s(fun(bool,bool),X62) | s(bool,'T_0') = s(bool,X64) | s(bool,X65) = s(bool,sK6(X61,X62,bool,bool)) | s(bool,X65) = s(bool,X66) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X63)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f12181,f20722])).
fof(f12181,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s(bool,'T_0') != s(bool,f(s(bool,X63))) | s(fun(bool,bool),X61) = s(fun(bool,bool),X62) | s(bool,X64) = s(bool,g(s(bool,sK6(X61,X62,bool,bool)))) | s(bool,'T_0') = s(bool,X64) | s(bool,X65) = s(bool,sK6(X61,X62,bool,bool)) | s(bool,X65) = s(bool,X66) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f1394,f1178])).
fof(f34245,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,sK6(X1,X2,bool,bool))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f34244])).
fof(f34244,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X3) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,X2) = s(bool,X3)) ) | ($spl12 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f17696,f19304,f19178,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f29254,f28893,f28913,f28890,f284,f6137,f516,f467,f341,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f14977,f13599,f766,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9888,f9246,f9245,f3018,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f12508,f9692,f212,f38,f12556,f34243,f19324])).
fof(f34242,plain,(
  $false | ($spl16 | $spl31 | $spl176)),
  inference(global_subsumption,[],[f220,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34223,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl31 | $spl176)),
  inference(forward_demodulation,[],[f30621,f33241])).
fof(f34218,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl31 | $spl176)),
  inference(forward_demodulation,[],[f30613,f33241])).
fof(f34216,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl31 | $spl176)),
  inference(forward_demodulation,[],[f30609,f33241])).
fof(f34196,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl31 | $spl176)),
  inference(forward_demodulation,[],[f30563,f33241])).
fof(f34189,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl31 | $spl176)),
  inference(forward_demodulation,[],[f30549,f33241])).
fof(f34161,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl31 | $spl176)),
  inference(forward_demodulation,[],[f30490,f33241])).
fof(f34129,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) ) | $spl176),
  inference(subsumption_resolution,[],[f34128,f33241])).
fof(f34128,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) ) | $spl176),
  inference(forward_demodulation,[],[f213,f33241])).
fof(f34124,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl176),
  inference(condensation,[],[f34123])).
fof(f34123,plain,(
  ( ! [X140,X138,X141,X139] : (s(fun(X138,bool),X139) = s(fun(X138,bool),X140) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,g(s(X138,sK6(X139,X140,bool,X138))))) ) | $spl176),
  inference(subsumption_resolution,[],[f33316,f33241])).
fof(f33316,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,X141) != s(bool,f(s(bool,'T_0'))) | s(fun(X138,bool),X139) = s(fun(X138,bool),X140) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,g(s(X138,sK6(X139,X140,bool,X138))))) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f1272])).
fof(f34121,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(bool,X0) = s(bool,X4)) ) | $spl176),
  inference(condensation,[],[f34120])).
fof(f34120,plain,(
  ( ! [X430,X432,X434,X431,X433,X435] : (s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X434) = s(bool,g(s(X430,sK6(X431,X432,bool,X430)))) | s(bool,'T_0') = s(bool,X433) | s(bool,X434) = s(bool,X435) | s(bool,'T_0') = s(bool,X435)) ) | $spl176),
  inference(subsumption_resolution,[],[f33319,f33241])).
fof(f33319,plain,(
  ( ! [X430,X432,X434,X431,X433,X435] : (s(bool,X433) != s(bool,f(s(bool,'T_0'))) | s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X434) = s(bool,g(s(X430,sK6(X431,X432,bool,X430)))) | s(bool,'T_0') = s(bool,X433) | s(bool,X434) = s(bool,X435) | s(bool,'T_0') = s(bool,X435)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f4081])).
fof(f34118,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl176),
  inference(condensation,[],[f34117])).
fof(f34117,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,g(s(X4,sK6(X5,X6,bool,X4)))) | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,X7)) ) | $spl176),
  inference(duplicate_literal_removal,[],[f34116])).
fof(f34116,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,g(s(X4,sK6(X5,X6,bool,X4)))) | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl176),
  inference(condensation,[],[f34115])).
fof(f34115,plain,(
  ( ! [X428,X430,X432,X429,X431,X427] : (s(fun(X427,bool),X428) = s(fun(X427,bool),X429) | s(bool,X430) = s(bool,X431) | s(bool,'T_0') = s(bool,g(s(X427,sK6(X428,X429,bool,X427)))) | s(bool,X431) = s(bool,X432) | s(bool,'T_0') = s(bool,X432)) ) | $spl176),
  inference(subsumption_resolution,[],[f33320,f33241])).
fof(f33320,plain,(
  ( ! [X428,X430,X432,X429,X431,X427] : (s(bool,X430) != s(bool,f(s(bool,'T_0'))) | s(fun(X427,bool),X428) = s(fun(X427,bool),X429) | s(bool,X430) = s(bool,X431) | s(bool,'T_0') = s(bool,g(s(X427,sK6(X428,X429,bool,X427)))) | s(bool,X431) = s(bool,X432) | s(bool,'T_0') = s(bool,X432)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f4179])).
fof(f34113,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (s(fun(X399,bool),X400) = s(fun(X399,bool),X401) | s(bool,X402) = s(bool,X403) | s(bool,X403) = s(bool,g(s(X399,sK6(X400,X401,bool,X399)))) | s(bool,X402) = s(bool,X404) | s(bool,'T_0') = s(bool,X404)) ) | $spl176),
  inference(subsumption_resolution,[],[f33321,f33241])).
fof(f33321,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X399,bool),X400) = s(fun(X399,bool),X401) | s(bool,X402) = s(bool,X403) | s(bool,X403) = s(bool,g(s(X399,sK6(X400,X401,bool,X399)))) | s(bool,X402) = s(bool,X404) | s(bool,'T_0') = s(bool,X404)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f4301])).
fof(f34108,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) ) | $spl176),
  inference(subsumption_resolution,[],[f33328,f33241])).
fof(f33328,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,f(s(bool,'T_0'))) != s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5)))) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f14071])).
fof(f34106,plain,(
  ( ! [X505,X502,X504,X501,X503] : (s(fun(X501,bool),X502) = s(fun(X501,bool),X503) | s(bool,X504) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X504) = s(bool,X505) | s(bool,X505) = s(bool,g(s(X501,sK6(X502,X503,bool,X501))))) ) | $spl176),
  inference(subsumption_resolution,[],[f33329,f33241])).
fof(f33329,plain,(
  ( ! [X505,X502,X504,X501,X503] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X501,bool),X502) = s(fun(X501,bool),X503) | s(bool,X504) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X504) = s(bool,X505) | s(bool,X505) = s(bool,g(s(X501,sK6(X502,X503,bool,X501))))) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f17105])).
fof(f34104,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X555) | s(bool,X556) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552))))) ) | $spl176),
  inference(subsumption_resolution,[],[f33331,f33241])).
fof(f33331,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,X555) != s(bool,f(s(bool,'T_0'))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X555) | s(bool,X556) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552))))) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f17844])).
fof(f34102,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3)) ) | $spl176),
  inference(condensation,[],[f34101])).
fof(f34101,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) ) | $spl176),
  inference(subsumption_resolution,[],[f33332,f33241])).
fof(f33332,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X3) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f17992])).
fof(f34099,plain,(
  ( ! [X405,X403,X404,X406,X402] : (s(fun(X402,bool),X403) = s(fun(X402,bool),X404) | s(bool,'T_0') = s(bool,X405) | s(bool,X406) = s(bool,g(s(X402,sK6(X403,X404,bool,X402)))) | s(bool,X405) = s(bool,X406)) ) | $spl176),
  inference(subsumption_resolution,[],[f33334,f33241])).
fof(f33334,plain,(
  ( ! [X405,X403,X404,X406,X402] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X402,bool),X403) = s(fun(X402,bool),X404) | s(bool,'T_0') = s(bool,X405) | s(bool,X406) = s(bool,g(s(X402,sK6(X403,X404,bool,X402)))) | s(bool,X405) = s(bool,X406)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f18843])).
fof(f34087,plain,(
  p(s(bool,f(s(bool,'T_0')))) | $spl176),
  inference(duplicate_literal_removal,[],[f34086])).
fof(f34086,plain,(
  p(s(bool,f(s(bool,'T_0')))) | p(s(bool,f(s(bool,'T_0')))) | $spl176),
  inference(forward_demodulation,[],[f33360,f33241])).
fof(f33360,plain,(
  ( ! [X0,X1] : (p(s(bool,f(s(bool,'T_0')))) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f1942])).
fof(f33430,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X0) = s(bool,g(s(X1,sK6(X2,X3,bool,X1))))) ) | $spl176),
  inference(condensation,[],[f33429])).
fof(f33429,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(bool,'T_0') = s(bool,X4)) ) | $spl176),
  inference(condensation,[],[f33428])).
fof(f33428,plain,(
  ( ! [X430,X432,X434,X431,X433,X435] : (s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X433) = s(bool,X434) | s(bool,'T_0') = s(bool,X434) | s(bool,X435) = s(bool,g(s(X430,sK6(X431,X432,bool,X430)))) | s(bool,'T_0') = s(bool,X435)) ) | $spl176),
  inference(subsumption_resolution,[],[f33318,f33241])).
fof(f33318,plain,(
  ( ! [X430,X432,X434,X431,X433,X435] : (s(bool,X433) != s(bool,f(s(bool,'T_0'))) | s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X433) = s(bool,X434) | s(bool,'T_0') = s(bool,X434) | s(bool,X435) = s(bool,g(s(X430,sK6(X431,X432,bool,X430)))) | s(bool,'T_0') = s(bool,X435)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f3885])).
fof(f34241,plain,(
  $false | ($spl33 | $spl176)),
  inference(subsumption_resolution,[],[f6309,f33241])).
fof(f34240,plain,(
  $false | ($spl31 | $spl98 | $spl176)),
  inference(global_subsumption,[],[f19028,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34239,plain,(
  $false | ($spl31 | $spl176 | $spl180)),
  inference(global_subsumption,[],[f33441,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34238,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138 | $spl176)),
  inference(global_subsumption,[],[f34237,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34237,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl31 | $spl76 | $spl138 | $spl176)),
  inference(forward_demodulation,[],[f30655,f33241])).
fof(f34236,plain,(
  $false | ($spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30719,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34235,plain,(
  $false | ($spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30720,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34234,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30721,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34233,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30722,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34232,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30723,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34231,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30642,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34230,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30724,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34229,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30630,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34228,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30725,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34227,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30627,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34226,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30726,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34225,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30624,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34224,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218,f34223])).
fof(f34222,plain,(
  $false | ($spl31 | $spl138 | $spl176)),
  inference(global_subsumption,[],[f30620,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218])).
fof(f30620,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl31 | $spl138)),
  inference(unit_resulting_resolution,[],[f37,f6306,f20742])).
fof(f34221,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30728,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218])).
fof(f34220,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30614,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218])).
fof(f34219,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216,f34218])).
fof(f34217,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196,f34216])).
fof(f34215,plain,(
  $false | ($spl11 | $spl31 | $spl176)),
  inference(global_subsumption,[],[f34214,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34214,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl31 | $spl176)),
  inference(forward_demodulation,[],[f30608,f33241])).
fof(f34213,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f34212,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34212,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f30607,f33241])).
fof(f34211,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30734,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34210,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30603,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34209,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30735,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34208,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30598,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34207,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30736,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34206,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30588,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34205,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30737,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34204,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30582,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34203,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30738,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34202,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30739,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34201,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30740,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34200,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30567,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34199,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30566,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34198,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30565,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34197,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189,f34196])).
fof(f34195,plain,(
  $false | ($spl12 | $spl31 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f34194,f33241])).
fof(f34194,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | ($spl12 | $spl31 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f30560,f33241])).
fof(f34193,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30748,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189])).
fof(f34192,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30553,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189])).
fof(f34191,plain,(
  $false | ($spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30749,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189])).
fof(f34190,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491,f34189])).
fof(f34188,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30752,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34187,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30543,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34186,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30753,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34185,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30539,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34184,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30754,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34183,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30533,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34182,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30755,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34181,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30525,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34180,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30756,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34179,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30522,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34178,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30757,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34177,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30519,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34176,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30758,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34175,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30515,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34174,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30759,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34173,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30509,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34172,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30760,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34171,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30501,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34170,plain,(
  $false | ($spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30761,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34169,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30498,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34168,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl31 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30762,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34167,plain,(
  $false | ($spl3 | $spl12 | $spl31 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f30495,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34166,plain,(
  $false | ($spl12 | $spl31 | $spl176)),
  inference(global_subsumption,[],[f34165,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34165,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | ($spl12 | $spl31 | $spl176)),
  inference(forward_demodulation,[],[f30494,f33241])).
fof(f30494,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f450])).
fof(f34164,plain,(
  $false | ($spl12 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f30764,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34163,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161,f30491])).
fof(f34162,plain,(
  $false | ($spl31 | $spl176)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f7444,f7446,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f16936,f17102,f18029,f18026,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f6663,f213,f29254,f28913,f28890,f6306,f284,f6137,f516,f467,f341,f30656,f30657,f30659,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f33241,f33430,f33440,f34087,f34099,f34102,f34104,f34106,f34108,f34113,f34118,f34121,f34124,f38,f212,f34129,f30700,f30701,f30773,f30770,f30702,f30703,f30481,f34161])).
fof(f34160,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30766,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f5048,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,X0))))))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f5047])).
fof(f5047,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,X139))))))) | s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,X140) | s(bool,X140) = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f4114])).
fof(f4114,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,X139))))))) | s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,X140) | s(bool,'T_0') = s(bool,X138) | s(bool,X140) = s(bool,X141) | s(bool,'T_0') = s(bool,X141)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f1898,f1178])).
fof(f5064,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X0))))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f5063])).
fof(f5063,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X109))))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,X110) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f4107])).
fof(f4107,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X109))))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,X110) | s(bool,'T_0') = s(bool,X108) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f925,f1178])).
fof(f3020,plain,(
  ( ! [X76,X77,X75] : (s(bool,X76) = s(bool,g(s(bool,f(s(bool,f(s(bool,X75))))))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X75)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f2982,f37])).
fof(f2982,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,'T_0')) | s(bool,X76) = s(bool,g(s(bool,f(s(bool,f(s(bool,X75))))))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X75)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f1687,f1898])).
fof(f3019,plain,(
  ( ! [X74,X72,X73] : (s(bool,X73) = s(bool,g(s(bool,f(s(bool,X72))))) | s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X72)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f2981,f37])).
fof(f2981,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,'T_0')) | s(bool,X73) = s(bool,g(s(bool,f(s(bool,X72))))) | s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X72)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f1687,f925])).
fof(f2934,plain,(
  ( ! [X24,X23] : (s(bool,g(s(bool,X24))) = s(bool,g(s(bool,f(s(bool,f(s(bool,X23))))))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X23)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f2828,f37])).
fof(f2828,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X24))) = s(bool,g(s(bool,f(s(bool,f(s(bool,X23))))))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X23)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f510,f1898])).
fof(f2933,plain,(
  ( ! [X8,X7] : (~p(s(bool,X8)) | s(bool,X8) = s(bool,g(s(bool,f(s(bool,f(s(bool,X7))))))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f2818,f37])).
fof(f2818,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | s(bool,X8) = s(bool,g(s(bool,f(s(bool,f(s(bool,X7))))))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f51,f1898])).
fof(f2776,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X29),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31))))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X29))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X30))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X31)))) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f1898,f53])).
fof(f2861,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,f(s(bool,X0))))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f2860])).
fof(f2860,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f2756])).
fof(f2756,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,f(s(bool,X12))))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f1898,f546])).
fof(f1938,plain,(
  ( ! [X23,X22] : (s(bool,g(s(bool,X23))) = s(bool,g(s(bool,f(s(bool,X22))))) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X22)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f1875,f37])).
fof(f1875,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(bool,g(s(bool,X23))) = s(bool,g(s(bool,f(s(bool,X22))))) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X22)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f510,f925])).
fof(f1937,plain,(
  ( ! [X6,X7] : (~p(s(bool,X7)) | s(bool,X7) = s(bool,g(s(bool,f(s(bool,X6))))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f1865,f37])).
fof(f1865,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,g(s(bool,f(s(bool,X6))))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f51,f925])).
fof(f1841,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X25),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X26))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X27)))) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f925,f53])).
fof(f1898,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,X0))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f1897])).
fof(f1897,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,X12))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f1826])).
fof(f1826,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,f(s(bool,X12))))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f925,f546])).
fof(f925,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f924])).
fof(f924,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X21))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X21)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f860])).
fof(f860,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,X21))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X21)) ) | ($spl12 | $spl16)),
  inference(superposition,[],[f450,f546])).
fof(f34159,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f30486,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34158,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30767,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34157,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f30482,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34156,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30481,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34155,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30703,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34154,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30702,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34153,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30770,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34152,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30773,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34151,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30701,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34150,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30700,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34148,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f30777,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34146,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl31 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34145,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34145,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl20 | $spl31 | $spl176)),
  inference(forward_demodulation,[],[f31583,f33241])).
fof(f31583,plain,(
  p(s(bool,f(s(bool,g(s(bool,'T_0')))))) | ($spl20 | $spl31)),
  inference(unit_resulting_resolution,[],[f6306,f444])).
fof(f34144,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f31823,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34135,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f444,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34134,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557,f29637])).
fof(f34133,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618,f29557])).
fof(f34132,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692,f12618])).
fof(f34131,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212,f9692])).
fof(f34130,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34129,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212])).
fof(f34127,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38,f212])).
fof(f34126,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556,f38])).
fof(f34125,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34124,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34122,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34121,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34119,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34118,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34114,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34113,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34112,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34111,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34111,plain,(
  ( ! [X144,X145,X143] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(X143,bool),X144) = s(fun(X143,bool),X145)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f34110,f33241])).
fof(f34110,plain,(
  ( ! [X144,X145,X143] : (s(fun(X143,bool),X144) = s(fun(X143,bool),X145) | s(bool,'T_0') = s(bool,g(s(bool,g(s(X143,sK6(X144,X145,bool,X143))))))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f33324,f33241])).
fof(f33324,plain,(
  ( ! [X144,X145,X143] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X143,bool),X144) = s(fun(X143,bool),X145) | s(bool,'T_0') = s(bool,g(s(bool,g(s(X143,sK6(X144,X145,bool,X143))))))) ) | ($spl12 | $spl176)),
  inference(backward_demodulation,[],[f33241,f12152])).
fof(f34109,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34108,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34107,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34106,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34105,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34104,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34103,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34102,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34100,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34099,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34098,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34097,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34097,plain,(
  ( ! [X125,X126,X124] : (s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,'F_0') = s(bool,g(s(X124,sK6(X125,X126,bool,X124))))) ) | ($spl12 | $spl24 | $spl64 | $spl176)),
  inference(subsumption_resolution,[],[f33338,f33241])).
fof(f33338,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,'F_0') = s(bool,g(s(X124,sK6(X125,X126,bool,X124))))) ) | ($spl12 | $spl24 | $spl64 | $spl176)),
  inference(backward_demodulation,[],[f33241,f22712])).
fof(f34096,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34095,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34095,plain,(
  ( ! [X161,X159,X160] : (s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | s(fun(X159,bool),X160) = s(fun(X159,bool),X161)) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f34094,f33241])).
fof(f34094,plain,(
  ( ! [X161,X159,X160] : (s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,f(s(bool,g(s(X159,sK6(X160,X161,bool,X159))))))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(subsumption_resolution,[],[f33339,f33241])).
fof(f33339,plain,(
  ( ! [X161,X159,X160] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,f(s(bool,g(s(X159,sK6(X160,X161,bool,X159))))))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(backward_demodulation,[],[f33241,f29573])).
fof(f34088,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34087,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34061,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33419,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f33419,plain,(
  ( ! [X138,X139,X137] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(X139,f(s(bool,'T_0'))) != s(X139,g(s(bool,'T_0'))) | s(fun(bool,X139),X137) = s(fun(bool,X139),X138)) ) | ($spl12 | $spl176)),
  inference(backward_demodulation,[],[f33241,f12150])).
fof(f34060,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33420,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f33420,plain,(
  ( ! [X158,X156,X157] : (s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | s(X158,f(s(bool,'T_0'))) != s(X158,g(s(bool,'T_0'))) | s(fun(bool,X158),X156) = s(fun(bool,X158),X157)) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(backward_demodulation,[],[f33241,f29574])).
fof(f34059,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34058,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34058,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34057,f33241])).
fof(f34057,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f6324,f33241])).
fof(f34056,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34055,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34055,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34054,f33241])).
fof(f34054,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f34053,f33241])).
fof(f34053,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f34052])).
fof(f34052,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f34051])).
fof(f34051,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f34050])).
fof(f34050,plain,(
  ( ! [X408,X405,X407,X409,X406] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X405) = s(fun(bool,bool),X406) | s(bool,'T_0') = s(bool,sK6(X405,X406,bool,bool)) | s(bool,X407) = s(bool,X408) | s(bool,X407) = s(bool,X409) | s(bool,'T_0') = s(bool,X409)) ) | $spl12),
  inference(subsumption_resolution,[],[f4302,f10249])).
fof(f4302,plain,(
  ( ! [X408,X405,X407,X409,X406] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X405) = s(fun(bool,bool),X406) | s(bool,'T_0') = s(bool,sK6(X405,X406,bool,bool)) | s(bool,X407) = s(bool,X408) | s(bool,X408) = s(bool,g(s(bool,'F_0'))) | s(bool,X407) = s(bool,X409) | s(bool,'T_0') = s(bool,X409)) )),
  inference(superposition,[],[f212,f1178])).
fof(f34029,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34028,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34028,plain,(
  ( ! [X4,X5] : (s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK6(X4,X5,bool,bool))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34027,f33241])).
fof(f34027,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK6(X4,X5,bool,bool))) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f460,f33241])).
fof(f460,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK6(X4,X5,bool,bool))) ) | $spl12),
  inference(superposition,[],[f212,f218])).
fof(f34026,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508,f12556])).
fof(f34025,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324,f12508])).
fof(f34022,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34021,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f34021,plain,(
  ( ! [X4,X5,X3] : (s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X3)))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34020,f33241])).
fof(f34020,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X3)))) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15433,f33241])).
fof(f15433,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,X3)))) ) | $spl12),
  inference(superposition,[],[f212,f9692])).
fof(f34019,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34018,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f34018,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(duplicate_literal_removal,[],[f34017])).
fof(f34017,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool))) ) | ($spl12 | $spl176)),
  inference(condensation,[],[f34016])).
fof(f34016,plain,(
  ( ! [X12,X10,X11,X9] : (s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK6(X10,X11,bool,bool)) | s(bool,X9) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34015,f33241])).
fof(f34015,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK6(X10,X11,bool,bool)) | s(bool,X9) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15435,f33241])).
fof(f15435,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK6(X10,X11,bool,bool)) | s(bool,X9) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl12),
  inference(superposition,[],[f212,f3018])).
fof(f34014,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34013,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f34013,plain,(
  ( ! [X14,X13] : (s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,sK6(X13,X14,bool,bool))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34012,f33241])).
fof(f34012,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,sK6(X13,X14,bool,bool))) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15436,f33241])).
fof(f15436,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,sK6(X13,X14,bool,bool))) ) | $spl12),
  inference(superposition,[],[f212,f218])).
fof(f34008,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34007,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f34007,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34006,f33241])).
fof(f34006,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15472,f33241])).
fof(f15472,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f15471])).
fof(f15471,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK6(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X23)) ) | $spl12),
  inference(subsumption_resolution,[],[f15440,f9640])).
fof(f15440,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK6(X21,X22,bool,bool)) | s(bool,X23) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f212,f54])).
fof(f34005,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f34004,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f34004,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f34003,f33241])).
fof(f34003,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15474,f33241])).
fof(f15474,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f15473])).
fof(f15473,plain,(
  ( ! [X30,X31,X32] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,'T_0') = s(bool,sK6(X30,X31,bool,bool)) | s(bool,'T_0') = s(bool,X32)) ) | $spl12),
  inference(subsumption_resolution,[],[f15443,f9640])).
fof(f15443,plain,(
  ( ! [X30,X31,X32] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,'T_0') = s(bool,sK6(X30,X31,bool,bool)) | s(bool,X32) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f212,f54])).
fof(f33990,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33989,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f33989,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f33988,f33241])).
fof(f33988,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15488,f33241])).
fof(f15488,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f15487])).
fof(f15487,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f15486])).
fof(f15486,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f15485])).
fof(f15485,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X46) = s(fun(bool,bool),X47) | s(bool,'T_0') = s(bool,sK6(X46,X47,bool,bool)) | s(bool,X48) = s(bool,X49) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl12),
  inference(subsumption_resolution,[],[f15446,f10249])).
fof(f15446,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X46) = s(fun(bool,bool),X47) | s(bool,'T_0') = s(bool,sK6(X46,X47,bool,bool)) | s(bool,X48) = s(bool,X49) | s(bool,X49) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f212,f1178])).
fof(f33987,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33986,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f33986,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f33985,f33241])).
fof(f33985,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f15492,f33241])).
fof(f15492,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f15491])).
fof(f15491,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f15490])).
fof(f15490,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl12),
  inference(condensation,[],[f15489])).
fof(f15489,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52) | s(bool,'T_0') = s(bool,sK6(X51,X52,bool,bool)) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) ) | $spl12),
  inference(subsumption_resolution,[],[f15447,f10249])).
fof(f15447,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52) | s(bool,'T_0') = s(bool,sK6(X51,X52,bool,bool)) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,X53) = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f212,f1178])).
fof(f33969,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33968,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f33968,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f33967,f33241])).
fof(f33967,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f19061,f33241])).
fof(f19061,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,X2) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(condensation,[],[f19060])).
fof(f19060,plain,(
  ( ! [X565,X563,X564,X562] : (s(bool,X562) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X563) = s(fun(bool,bool),X564) | s(bool,'T_0') = s(bool,sK6(X563,X564,bool,bool)) | s(bool,'T_0') = s(bool,X565) | s(bool,X562) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f17556,f9640])).
fof(f17556,plain,(
  ( ! [X565,X563,X564,X562] : (s(bool,X562) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X563) = s(fun(bool,bool),X564) | s(bool,'T_0') = s(bool,sK6(X563,X564,bool,bool)) | s(bool,'T_0') = s(bool,X565) | s(bool,X562) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X565) = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f212,f5666])).
fof(f33961,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633,f19324])).
fof(f33960,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33959,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33959,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,sK6(X1,X2,bool,bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl3 | $spl12 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33958,f33241])).
fof(f33956,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33955,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33955,plain,(
  ( ! [X17,X18] : (s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,sK6(X17,X18,bool,bool))) ) | ($spl3 | $spl12 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33954,f33241])).
fof(f33954,plain,(
  ( ! [X17,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,sK6(X17,X18,bool,bool))) ) | ($spl3 | $spl12 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33953,f33241])).
fof(f33953,plain,(
  ( ! [X17,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,sK6(X17,X18,bool,bool))) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f15438,f20703])).
fof(f15438,plain,(
  ( ! [X17,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,sK6(X17,X18,bool,bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f212,f450])).
fof(f33951,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33950,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33950,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl12 | $spl70 | $spl176)),
  inference(subsumption_resolution,[],[f33949,f33241])).
fof(f33949,plain,(
  ( ! [X2,X0,X1] : (s(bool,f(s(bool,'T_0'))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl12 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f19527,f33241])).
fof(f19527,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) != s(bool,f(s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | ($spl12 | $spl70)),
  inference(forward_demodulation,[],[f19526,f53])).
fof(f19526,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) != s(bool,f(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))))) ) | ($spl12 | $spl70)),
  inference(condensation,[],[f19525])).
fof(f19525,plain,(
  ( ! [X208,X206,X209,X207] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X207))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))) != s(bool,f(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X207))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X207),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))) | s(bool,'T_0') = s(bool,X206)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f13943,f9640])).
fof(f13943,plain,(
  ( ! [X208,X206,X209,X207] : (s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X207))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))) != s(bool,f(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X207))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))))) | s(bool,X206) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X207),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X208),s('type.semanticPrimitives.store_v'('type.modSem.v'),X209))) | s(bool,'T_0') = s(bool,X206)) ) | $spl70),
  inference(superposition,[],[f10103,f1198])).
fof(f33948,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33947,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33944,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33943,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33940,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33939,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33938,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33937,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33935,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635,f19633])).
fof(f33934,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637,f19635])).
fof(f33933,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33932,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637])).
fof(f33930,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641,f19637])).
fof(f33929,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33928,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641])).
fof(f33926,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33925,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641])).
fof(f33925,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f19639,f33241])).
fof(f19639,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f19638])).
fof(f19638,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,sK6(X22,X23,bool,bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f12174,f10195])).
fof(f12174,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,X24) = s(bool,g(s(bool,sK6(X22,X23,bool,bool)))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,sK6(X22,X23,bool,bool))) )),
  inference(superposition,[],[f1394,f146])).
fof(f33924,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643,f19641])).
fof(f33923,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640,f19643])).
fof(f33922,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33921,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640])).
fof(f33921,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f33920,f33241])).
fof(f33920,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f19645,f33241])).
fof(f19645,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl12),
  inference(condensation,[],[f19644])).
fof(f19644,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,sK6(X3,X4,bool,bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f12169,f10195])).
fof(f12169,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,g(s(bool,sK6(X3,X4,bool,bool)))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,sK6(X3,X4,bool,bool))) )),
  inference(superposition,[],[f1394,f39])).
fof(f33918,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33917,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640])).
fof(f33917,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,sK6(X14,X15,bool,bool))) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f503,f33241])).
fof(f33916,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33915,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640])).
fof(f33915,plain,(
  ( ! [X12,X13] : (s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK6(X12,X13,bool,bool))) ) | ($spl3 | $spl12 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33914,f33241])).
fof(f33914,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK6(X12,X13,bool,bool))) ) | ($spl3 | $spl12 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33913,f33241])).
fof(f33913,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK6(X12,X13,bool,bool))) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f502,f20703])).
fof(f502,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK6(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl12),
  inference(superposition,[],[f212,f450])).
fof(f33912,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409,f9640])).
fof(f33911,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523,f19409])).
fof(f33910,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616,f19523])).
fof(f33909,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f19551,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616])).
fof(f33908,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575,f12616])).
fof(f33907,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596,f19575])).
fof(f33906,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598,f19596])).
fof(f33905,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216,f19598])).
fof(f33904,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f19691,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33903,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f10063,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33902,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f7971,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33901,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f7967,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33900,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f19745,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33899,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f19748,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33898,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f19751,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33897,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f19753,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33896,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33895,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33895,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f7956,f33241])).
fof(f33894,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33893,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33893,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f7949,f33241])).
fof(f33886,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33885,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33885,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f33884,f33241])).
fof(f33884,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(condensation,[],[f33883])).
fof(f33883,plain,(
  ( ! [X142,X140,X141] : (s(fun(bool,bool),X140) = s(fun(bool,bool),X141) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X140,X141,bool,bool))))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f12151,f33241])).
fof(f33882,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33881,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33881,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33880,f33241])).
fof(f33880,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(condensation,[],[f33879])).
fof(f33879,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33878,f33241])).
fof(f33874,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33873,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33873,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33872,f33241])).
fof(f33872,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(condensation,[],[f33871])).
fof(f33871,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33870,f33241])).
fof(f33866,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33865,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33865,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33864,f33241])).
fof(f33864,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(condensation,[],[f33863])).
fof(f33863,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33862,f33241])).
fof(f33858,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33857,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33857,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33856,f33241])).
fof(f33856,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(condensation,[],[f33855])).
fof(f33855,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33854,f33241])).
fof(f33850,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344,f19216])).
fof(f33849,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221,f19344])).
fof(f33848,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl90)),
  inference(global_subsumption,[],[f18729,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33847,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33846,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33846,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl20 | $spl176)),
  inference(forward_demodulation,[],[f20777,f33241])).
fof(f20777,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl20)),
  inference(subsumption_resolution,[],[f7997,f20772])).
fof(f7997,plain,(
  p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl20),
  inference(superposition,[],[f444,f75])).
fof(f33845,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33844,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33844,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl20 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f21607,f33241])).
fof(f21607,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl3 | $spl12 | $spl20 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f444])).
fof(f33843,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33842,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33842,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f21687,f33241])).
fof(f21687,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f21608])).
fof(f21608,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f33841,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33840,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33840,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f21690,f33241])).
fof(f21690,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(forward_demodulation,[],[f21682,f75])).
fof(f21682,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f21613])).
fof(f21613,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f33839,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33838,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33838,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f21692,f33241])).
fof(f21692,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(forward_demodulation,[],[f21669,f75])).
fof(f21669,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))))) ) | $spl20),
  inference(condensation,[],[f21668])).
fof(f21668,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f21667])).
fof(f21667,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(condensation,[],[f21622])).
fof(f21622,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f33837,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21646,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33836,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33835,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33833,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33832,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33830,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33829,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33829,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f21651,f33241])).
fof(f21651,plain,(
  ( ! [X9] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,f(s(bool,X9)))) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f33828,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21701,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33827,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21705,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33825,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33824,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33822,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33821,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33821,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl20 | $spl176)),
  inference(forward_demodulation,[],[f21779,f33241])).
fof(f21779,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl20)),
  inference(subsumption_resolution,[],[f21740,f20772])).
fof(f21740,plain,(
  p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl20),
  inference(superposition,[],[f444,f75])).
fof(f33820,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33819,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33819,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl20 | $spl176)),
  inference(forward_demodulation,[],[f21988,f33241])).
fof(f21988,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl20)),
  inference(forward_demodulation,[],[f21854,f75])).
fof(f21854,plain,(
  p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | ($spl11 | $spl20)),
  inference(unit_resulting_resolution,[],[f20772,f444])).
fof(f33818,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl64 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f22820,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f22820,plain,(
  ( ! [X62] : (s(bool,X62) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X62) | s(bool,'F_0') = s(bool,g(s(bool,X62)))) ) | ($spl12 | $spl24 | $spl64 | $spl76)),
  inference(superposition,[],[f19301,f20749])).
fof(f33817,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f24784,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33816,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33815,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33813,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33812,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33810,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33809,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33809,plain,(
  ( ! [X10] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,f(s(bool,X10)))) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f24789,f33241])).
fof(f24789,plain,(
  ( ! [X10] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,f(s(bool,X10)))) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f33808,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f24841,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33807,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f24845,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33805,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33804,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33800,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28276,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33799,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28277,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33798,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28283,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33797,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28287,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33795,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340,f28221])).
fof(f33793,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400,f28340])).
fof(f33792,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28731,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33791,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28732,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33789,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28733,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33788,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28736,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33787,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28737,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33786,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28740,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33782,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772,f28400])).
fof(f33781,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33780,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772])).
fof(f33779,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33778,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772])).
fof(f33777,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33776,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772])).
fof(f33775,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33774,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772])).
fof(f33773,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767,f33772])).
fof(f33768,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756,f33767])).
fof(f33761,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33760,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756])).
fof(f33759,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33758,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756])).
fof(f33757,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749,f33756])).
fof(f33752,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33751,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749])).
fof(f33750,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461,f33749])).
fof(f33745,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33744,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461])).
fof(f33742,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508,f28461])).
fof(f33739,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590,f28508])).
fof(f33738,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28803,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33737,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28804,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33736,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33735,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33735,plain,(
  ( ! [X15] : (~p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,f(s(bool,X15)))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f28516,f33241])).
fof(f28516,plain,(
  ( ! [X15] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,f(s(bool,X15)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f56,f12618])).
fof(f33733,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33732,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33732,plain,(
  ( ! [X19] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,f(s(bool,X19)))) ) | ($spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f28519,f33241])).
fof(f28519,plain,(
  ( ! [X19] : (p(s(bool,f(s(bool,g(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,f(s(bool,X19)))) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(superposition,[],[f444,f12618])).
fof(f33731,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33730,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33730,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,f(s(bool,X20)))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f28520,f33241])).
fof(f28520,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,f(s(bool,X20)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f450,f12618])).
fof(f33729,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28806,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33728,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28809,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33727,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28810,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33726,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28813,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33725,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33724,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33724,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,f(s(bool,'T_0')))) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,f(s(bool,X53)))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f28529,f33241])).
fof(f28529,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,f(s(bool,X53)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1687,f12618])).
fof(f33720,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33719,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33719,plain,(
  ( ! [X81] : (s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,f(s(bool,X81)))) ) | ($spl12 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33718,f33241])).
fof(f33718,plain,(
  ( ! [X81] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,f(s(bool,X81)))) ) | ($spl12 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f28541,f33241])).
fof(f28541,plain,(
  ( ! [X81] : (s(bool,g(s(bool,'F_0'))) != s(bool,g(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,f(s(bool,X81)))) ) | ($spl12 | $spl66 | $spl70 | $spl76)),
  inference(superposition,[],[f19301,f12618])).
fof(f33717,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706,f28590])).
fof(f33716,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33715,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706])).
fof(f33714,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33713,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706])).
fof(f33712,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33711,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706])).
fof(f33710,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33709,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706])).
fof(f33708,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f28855,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706])).
fof(f33707,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701,f33706])).
fof(f33702,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560,f33701])).
fof(f33695,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33694,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560])).
fof(f33694,plain,(
  ( ! [X127,X125,X126,X124] : (s(fun(X125,bool),X126) = s(fun(X125,bool),X127) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X125,sK6(X126,X127,bool,X125)))) | s(bool,'T_0') = s(bool,f(s(bool,X124)))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(subsumption_resolution,[],[f33693,f33241])).
fof(f33693,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(fun(X125,bool),X126) = s(fun(X125,bool),X127) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X125,sK6(X126,X127,bool,X125)))) | s(bool,'T_0') = s(bool,f(s(bool,X124)))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f29165,f33241])).
fof(f29165,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X125,sK6(X126,X127,bool,X125)))) | s(fun(X125,bool),X126) = s(fun(X125,bool),X127) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X125,sK6(X126,X127,bool,X125)))) | s(bool,'T_0') = s(bool,f(s(bool,X124)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1272,f12618])).
fof(f33692,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33691,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560])).
fof(f33691,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33690,f33241])).
fof(f33690,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(condensation,[],[f33689])).
fof(f33689,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33688,f33241])).
fof(f33684,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33683,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560])).
fof(f33683,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33682,f33241])).
fof(f33682,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(condensation,[],[f33681])).
fof(f33681,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X1,X2,bool,bool))))) ) | ($spl3 | $spl12 | $spl24 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33680,f33241])).
fof(f33668,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33667,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560])).
fof(f33667,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f33666,f33241])).
fof(f33666,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK6(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl12 | $spl176)),
  inference(condensation,[],[f33665])).
fof(f33665,plain,(
  ( ! [X103,X105,X104] : (s(fun(bool,bool),X103) = s(fun(bool,bool),X104) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X103,X104,bool,bool))))) ) | ($spl12 | $spl176)),
  inference(subsumption_resolution,[],[f33664,f33241])).
fof(f33664,plain,(
  ( ! [X103,X105,X104] : (s(bool,X105) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X103) = s(fun(bool,bool),X104) | s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X103,X104,bool,bool))))) ) | ($spl12 | $spl176)),
  inference(forward_demodulation,[],[f29247,f33241])).
fof(f33650,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561,f29560])).
fof(f33649,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609,f29561])).
fof(f33648,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl31 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f33647,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33646,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33645,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33638,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33637,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33637,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f29590,f33241])).
fof(f29590,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29589])).
fof(f29589,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f29588])).
fof(f29588,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29587])).
fof(f29587,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,X122) | s(bool,X121) = s(bool,X123) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28574,f10249])).
fof(f28574,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X122) | s(bool,X121) = s(bool,X123) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f5666,f12618])).
fof(f33636,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33635,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33635,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | ($spl11 | $spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f33634,f33241])).
fof(f33634,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl12 | $spl66 | $spl70 | $spl176)),
  inference(subsumption_resolution,[],[f33633,f33241])).
fof(f33633,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f28573,f33241])).
fof(f28573,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl11 | $spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f20772,f12618])).
fof(f33632,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33631,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33631,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | ($spl12 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(condensation,[],[f33630])).
fof(f33630,plain,(
  ( ! [X112] : (s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X112)) ) | ($spl12 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33629,f33241])).
fof(f33629,plain,(
  ( ! [X112] : (s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,f(s(bool,g(s(bool,X112)))))) ) | ($spl12 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33628,f33241])).
fof(f33628,plain,(
  ( ! [X112] : (s(bool,X112) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,f(s(bool,g(s(bool,X112)))))) ) | ($spl12 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f28564,f33241])).
fof(f28564,plain,(
  ( ! [X112] : (s(bool,X112) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,f(s(bool,g(s(bool,X112)))))) ) | ($spl12 | $spl66 | $spl70 | $spl76)),
  inference(superposition,[],[f19301,f12618])).
fof(f33627,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f28536,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33626,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33625,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33625,plain,(
  ( ! [X17,X16] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,f(s(bool,X16)))) ) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f28517,f33241])).
fof(f28517,plain,(
  ( ! [X17,X16] : (p(s(bool,g(s(bool,'F_0')))) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,f(s(bool,X16)))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f88,f12618])).
fof(f33624,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650,f29609])).
fof(f33621,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl176)),
  inference(global_subsumption,[],[f33620,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650])).
fof(f33620,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,'T_0'))))) | ($spl12 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f29622,f33241])).
fof(f29622,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f29621])).
fof(f29621,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29620])).
fof(f29620,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(condensation,[],[f29619])).
fof(f29619,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | ($spl12 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f28443,f10249])).
fof(f28443,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f12618,f5666])).
fof(f33608,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19392,f20702,f19409,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f12604,f12102,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29650])).
fof(f33607,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f20763,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31071,f31054,f29654,f29652])).
fof(f33606,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054,f29654])).
fof(f33605,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl24 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33604,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33604,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33603,f33241])).
fof(f33603,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f29662,f33241])).
fof(f29662,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl66 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f28290,f29637])).
fof(f28290,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X1) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(condensation,[],[f28289])).
fof(f28289,plain,(
  ( ! [X43,X44,X42] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,X43) = s(bool,X44)) ) | ($spl3 | $spl12 | $spl24 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28204,f20723])).
fof(f28204,plain,(
  ( ! [X43,X44,X42] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X42) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f33602,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33601,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33601,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33600,f33241])).
fof(f33600,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X9) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f29664,f33241])).
fof(f29664,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,X9) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(forward_demodulation,[],[f28278,f29637])).
fof(f28278,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28195,f20705])).
fof(f28195,plain,(
  ( ! [X9] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,X9) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl70),
  inference(superposition,[],[f10103,f146])).
fof(f33599,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33598,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33598,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33597,f33241])).
fof(f33597,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f28274,f33241])).
fof(f28274,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl68 | $spl70 | $spl76)),
  inference(subsumption_resolution,[],[f28190,f20705])).
fof(f28190,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl70),
  inference(superposition,[],[f10103,f39])).
fof(f33592,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33591,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33591,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | ($spl12 | $spl76 | $spl176)),
  inference(condensation,[],[f33590])).
fof(f33590,plain,(
  ( ! [X107] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X107)) ) | ($spl12 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f33589,f33241])).
fof(f33589,plain,(
  ( ! [X107] : (s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X107)))))) ) | ($spl12 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33588,f33241])).
fof(f33588,plain,(
  ( ! [X107] : (s(bool,X107) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X107)))))) ) | ($spl12 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f28002,f33241])).
fof(f28002,plain,(
  ( ! [X107] : (s(bool,X107) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X107)))))) ) | ($spl12 | $spl76)),
  inference(superposition,[],[f19301,f9692])).
fof(f33582,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33581,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33581,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f29891,f33241])).
fof(f29891,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f24808,f29637])).
fof(f24808,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))))) ) | $spl20),
  inference(condensation,[],[f24807])).
fof(f24807,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f24806])).
fof(f24806,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(condensation,[],[f24758])).
fof(f24758,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f33580,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33579,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33579,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f29893,f33241])).
fof(f29893,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f24821,f29637])).
fof(f24821,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f24749])).
fof(f24749,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f33578,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33577,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33577,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f24826,f33241])).
fof(f24826,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f24744])).
fof(f24744,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f33576,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33575,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33575,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl20 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f24742,f33241])).
fof(f24742,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl3 | $spl12 | $spl20 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f444])).
fof(f33574,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33573,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33573,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f29897,f33241])).
fof(f29897,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl12 | $spl20 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f24743,f29637])).
fof(f24743,plain,(
  p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | ($spl11 | $spl20)),
  inference(unit_resulting_resolution,[],[f20772,f444])).
fof(f33563,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071,f31054])).
fof(f33561,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503,f31071])).
fof(f33560,plain,(
  $false | ($spl6 | $spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76 | $spl92 | $spl176)),
  inference(global_subsumption,[],[f33559,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503])).
fof(f33559,plain,(
  ( ! [X61] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X61) | s(bool,'T_0') = s(bool,f(s(bool,X61)))) ) | ($spl6 | $spl12 | $spl66 | $spl70 | $spl92 | $spl176)),
  inference(forward_demodulation,[],[f31339,f33241])).
fof(f31339,plain,(
  ( ! [X61] : (p(s(bool,g(s(bool,'F_0')))) | s(bool,'F_0') = s(bool,X61) | s(bool,'T_0') = s(bool,f(s(bool,X61)))) ) | ($spl6 | $spl12 | $spl66 | $spl70 | $spl92)),
  inference(superposition,[],[f29639,f12618])).
fof(f29639,plain,(
  ( ! [X70] : (p(s(bool,X70)) | s(bool,'F_0') = s(bool,X70)) ) | ($spl6 | $spl12 | $spl66 | $spl70 | $spl92)),
  inference(backward_demodulation,[],[f29637,f29556])).
fof(f29556,plain,(
  ( ! [X70] : (p(s(bool,X70)) | s(bool,X70) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl6 | $spl92)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f19867,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f19321,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f87,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f14144,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f13519,f13281,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f1942,f2178,f6041,f46,f40,f6031,f6329,f986,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12220,f12218,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18998,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f284,f213,f212,f38,f29254,f28913,f28890])).
fof(f19321,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X35) | s(bool,X36) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X34) = s(bool,X36)) ) | $spl6),
  inference(subsumption_resolution,[],[f17711,f56])).
fof(f17711,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | s(bool,'F_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X35) | s(bool,X36) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X34) = s(bool,X36)) ) | $spl6),
  inference(superposition,[],[f87,f5666])).
fof(f19867,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X1))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X2)))) ) | $spl6),
  inference(condensation,[],[f19866])).
fof(f19866,plain,(
  ( ! [X54,X52,X55,X53] : (s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X52))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X53))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X54))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X52),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X53),s('type.semanticPrimitives.store_v'('type.modSem.v'),X54))) | s(bool,'T_0') = s(bool,X55)) ) | $spl6),
  inference(subsumption_resolution,[],[f13990,f56])).
fof(f13990,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,X55)) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X52))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X53))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X54))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X52),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X53),s('type.semanticPrimitives.store_v'('type.modSem.v'),X54))) | s(bool,'T_0') = s(bool,X55)) ) | $spl6),
  inference(superposition,[],[f87,f1198])).
fof(f33558,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504,f31503])).
fof(f33557,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555,f31504])).
fof(f33556,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552,f33555])).
fof(f33553,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547,f33552])).
fof(f33550,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33549,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547])).
fof(f33549,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f31509,f33241])).
fof(f31509,plain,(
  ( ! [X9] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f146])).
fof(f33548,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551,f33547])).
fof(f33545,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543,f31551])).
fof(f33544,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555,f33543])).
fof(f33541,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560,f31555])).
fof(f33540,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33539,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560])).
fof(f33539,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f31518,f33241])).
fof(f31518,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | ($spl12 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(superposition,[],[f29570,f5666])).
fof(f33536,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567,f31560])).
fof(f33535,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576,f31567])).
fof(f33534,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579,f31576])).
fof(f33533,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875,f31579])).
fof(f33532,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33531,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33531,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f31678,f33241])).
fof(f31678,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl12 | $spl20 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f31582,f29637])).
fof(f31582,plain,(
  p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | ($spl11 | $spl20)),
  inference(unit_resulting_resolution,[],[f20772,f444])).
fof(f33530,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33529,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33529,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl12 | $spl20 | $spl76 | $spl176)),
  inference(forward_demodulation,[],[f31581,f33241])).
fof(f31581,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl3 | $spl12 | $spl20 | $spl76)),
  inference(unit_resulting_resolution,[],[f20703,f444])).
fof(f33528,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33527,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33527,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f31675,f33241])).
fof(f31675,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f31584])).
fof(f31584,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(superposition,[],[f444,f39])).
fof(f33526,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33525,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33525,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f31682,f33241])).
fof(f31682,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f31670,f29637])).
fof(f31670,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f31589])).
fof(f31589,plain,(
  ( ! [X9] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f33524,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33523,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33523,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f31684,f33241])).
fof(f31684,plain,(
  ( ! [X0] : (p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f31657,f29637])).
fof(f31657,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))))) ) | $spl20),
  inference(condensation,[],[f31656])).
fof(f31656,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f31655])).
fof(f31655,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(condensation,[],[f31598])).
fof(f31598,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X43) = s(bool,X44)) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f33522,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33521,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33521,plain,(
  ( ! [X61] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,f(s(bool,X61)))) ) | ($spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f31605,f33241])).
fof(f31605,plain,(
  ( ! [X61] : (p(s(bool,f(s(bool,g(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,f(s(bool,X61)))) ) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(superposition,[],[f444,f12618])).
fof(f33520,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f31631,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33519,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33518,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33516,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33515,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33513,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33512,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33512,plain,(
  ( ! [X11] : (p(s(bool,f(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,f(s(bool,X11)))) ) | ($spl20 | $spl176)),
  inference(forward_demodulation,[],[f31636,f33241])).
fof(f31636,plain,(
  ( ! [X11] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,f(s(bool,X11)))) ) | $spl20),
  inference(superposition,[],[f444,f146])).
fof(f33511,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f31695,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33510,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f31699,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33508,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f33507,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33505,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f31843,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33504,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl20 | $spl66 | $spl68 | $spl70 | $spl76 | $spl176)),
  inference(global_subsumption,[],[f33503,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33503,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl11 | $spl12 | $spl20 | $spl66 | $spl70 | $spl176)),
  inference(forward_demodulation,[],[f31848,f33241])).
fof(f31848,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl12 | $spl20 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f31786,f20772])).
fof(f31786,plain,(
  p(s(bool,f(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl12 | $spl20 | $spl66 | $spl70)),
  inference(superposition,[],[f444,f29637])).
fof(f33498,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f31869,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33497,plain,(
  $false | ($spl11 | $spl12 | $spl16 | $spl66 | $spl68 | $spl70 | $spl76)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f220,f450,f468,f480,f503,f528,f544,f546,f622,f635,f648,f727,f772,f827,f944,f842,f968,f925,f923,f917,f886,f887,f1022,f1084,f1178,f1687,f1688,f1393,f1898,f1841,f1937,f1938,f2003,f1968,f2260,f2330,f2447,f2362,f2861,f2776,f2933,f2934,f3019,f3020,f3021,f3112,f3053,f5884,f5680,f5666,f5664,f5662,f3627,f3884,f5992,f6027,f6029,f4080,f5084,f5082,f5074,f5072,f5070,f5066,f5064,f5062,f5060,f5058,f5048,f5046,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f218,f9884,f9858,f9839,f9807,f9612,f9640,f10195,f11775,f11792,f11934,f12459,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f18714,f16934,f18751,f17102,f18029,f19079,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f19910,f9806,f9700,f19902,f19900,f19898,f9649,f9589,f11789,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f7986,f9142,f9144,f9147,f19687,f9641,f9635,f9631,f10102,f10262,f10264,f10266,f10185,f10272,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19598,f19596,f19593,f19590,f12532,f12533,f12600,f12602,f12536,f19575,f12538,f12540,f12541,f12608,f12612,f12547,f12616,f13559,f19556,f13571,f13380,f19523,f14200,f14030,f15426,f15428,f19509,f19506,f19503,f19496,f19491,f19488,f19483,f19480,f15594,f19473,f19467,f19464,f15619,f19461,f15593,f15567,f15570,f15573,f15575,f15576,f15625,f16567,f18553,f18511,f19445,f18478,f18444,f18401,f18380,f18362,f18337,f19435,f19428,f17053,f17054,f17059,f17087,f18253,f18252,f17106,f18807,f19397,f17206,f19379,f19374,f19049,f19369,f18017,f18011,f18010,f19083,f19357,f17634,f17635,f17636,f17639,f17641,f19344,f19329,f17696,f19304,f19178,f19216,f17842,f17843,f17912,f19289,f19286,f17905,f17904,f17898,f17891,f20365,f11738,f20634,f12177,f19301,f19389,f20701,f19392,f20702,f19404,f19409,f15583,f15574,f12539,f19621,f19623,f4701,f19248,f19071,f19068,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18680,f18385,f18258,f17052,f19377,f20764,f19359,f19340,f20771,f17855,f75,f17897,f17909,f20772,f22984,f491,f12142,f12140,f12155,f12115,f510,f6663,f12618,f9692,f213,f212,f38,f28377,f28396,f29254,f28894,f28893,f28913,f28890,f28692,f28672,f29557,f28586,f28392,f29637,f29852,f29918,f284,f6137,f516,f467,f341,f29574,f12150,f14184,f13519,f13281,f10273,f3668,f3626,f3587,f3509,f1198,f1156,f14136,f14122,f53,f14970,f14967,f12462,f12460,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f47,f45,f44,f43,f42,f41,f6041,f2178,f1942,f46,f40,f6031,f6329,f986,f29819,f19499,f29706,f14977,f29708,f29758,f29750,f29686,f13599,f766,f29573,f19225,f18256,f17992,f17844,f17554,f17105,f14071,f12236,f12220,f12218,f12152,f6674,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f19559,f29582,f29584,f29603,f29570,f22874,f20763,f20705,f19254,f18976,f18975,f18971,f18954,f18843,f18840,f18779,f18777,f18775,f18750,f18730,f18727,f18681,f18648,f18618,f18612,f18610,f15631,f14144,f12604,f12102,f10519,f10249,f10132,f10103,f9968,f9888,f9246,f9245,f3018,f31875])).
fof(f33496,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | $spl182),
  inference(cnf_transformation,[],[f33496_D])).
fof(f33496_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f33494,plain,(
  ( ! [X547,X548] : (s(bool,'T_0') = s(bool,g(s(bool,f(s(bool,'T_0'))))) | s(fun(bool,bool),X547) = s(fun(bool,bool),X548)) ) | ($spl128 | $spl176)),
  inference(forward_demodulation,[],[f20700,f33241])).
fof(f33455,plain,(
  $false | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92 | $spl176)),
  inference(subsumption_resolution,[],[f33454,f33274])).
fof(f33274,plain,(
  ~p(s(bool,'F_0')) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(global_subsumption,[],[f33273,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f29254,f28913,f28890,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f284,f14136,f14122,f53,f18971,f18779,f18775,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f18777,f6102,f1690,f47,f1942,f2178,f6041,f40,f6031,f6329,f46,f986])).
fof(f33273,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,'F_0')) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X119),X121),s('type.modSem.state'(X119),X120)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),sK5(X120,X121,X119)),s('type.semanticPrimitives.state'(X119),X121))),s('type.modSem.state'(X119),X120)))) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f32814,f33245])).
fof(f33245,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(global_subsumption,[],[f33244,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f12459,f16501,f16503,f18580,f18559,f18558,f18556,f18395,f18357,f18338,f16934,f17102,f18029,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f19286,f17905,f17904,f17898,f17891,f20365,f12177,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18898,f18726,f18964,f18967,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f19377,f20764,f19340,f20771,f17855,f75,f17897,f17909,f12462,f12460,f19225,f18256,f17992,f17844,f17554,f17105,f12220,f12218,f6674,f6663,f4301,f4179,f4081,f3885,f1394,f1272,f20763,f19254,f18976,f18975,f18954,f18843,f18840,f18750,f18730,f213,f212,f38,f29254,f28913,f28890,f6308,f18727,f18681,f18648,f18618,f18612,f18610,f14144,f14071,f13519,f13281,f6609,f3668,f3626,f3587,f3509,f1198,f1156,f284,f14136,f14122,f53,f18971,f18779,f18775,f14970,f14967,f6137,f6101,f6039,f6037,f6035,f6033,f1689,f516,f467,f341,f45,f44,f43,f42,f41,f18777,f6102,f1690,f47,f1942,f2178,f6041,f40,f6031,f6329,f46,f986,f30783,f30784,f30786,f30864])).
fof(f30786,plain,(
  ( ! [X12,X11] : (s(bool,'F_0') = s(bool,f(s(bool,X11))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl32),
  inference(superposition,[],[f6308,f54])).
fof(f30784,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'F_0') = s(bool,f(s(bool,X3))) | s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X3) = s(bool,X4)) ) | $spl32),
  inference(superposition,[],[f6308,f1178])).
fof(f30783,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl32),
  inference(superposition,[],[f6308,f5666])).
fof(f6308,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl32),
  inference(cnf_transformation,[],[f6308_D])).
fof(f6308_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f33244,plain,(
  ( ! [X99] : (s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X99)) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(subsumption_resolution,[],[f32868,f56])).
fof(f32868,plain,(
  ( ! [X99] : (p(s(bool,X99)) | s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X99)) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(superposition,[],[f29639,f30883])).
fof(f30883,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(subsumption_resolution,[],[f30807,f20703])).
fof(f30807,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl32),
  inference(superposition,[],[f6308,f54])).
fof(f32814,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X119),X121),s('type.modSem.state'(X119),X120)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X119),bool),happ(s(fun('type.semanticPrimitives.state'(X119),fun('type.modSem.state'(X119),bool)),sK5(X120,X121,X119)),s('type.semanticPrimitives.state'(X119),X121))),s('type.modSem.state'(X119),X120)))) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(superposition,[],[f47,f30883])).
fof(f33454,plain,(
  p(s(bool,'F_0')) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92 | $spl176)),
  inference(forward_demodulation,[],[f33453,f33245])).
fof(f33453,plain,(
  p(s(bool,f(s(bool,'T_0')))) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92 | $spl176)),
  inference(forward_demodulation,[],[f33452,f33241])).
fof(f33452,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92 | $spl176)),
  inference(subsumption_resolution,[],[f33451,f33274])).
fof(f33451,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92 | $spl176)),
  inference(forward_demodulation,[],[f33360,f33245])).
fof(f33441,plain,(
  ( ! [X2,X3,X1] : (s(bool,'F_0') = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3)) ) | $spl180),
  inference(cnf_transformation,[],[f33441_D])).
fof(f33441_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,'F_0') = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3)) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f33440,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3)) ) | $spl176),
  inference(condensation,[],[f33439])).
fof(f33439,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,'F_0') = s(bool,g(s(X552,sK6(X553,X554,bool,X552)))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X556) | s(bool,X555) = s(bool,X556)) ) | $spl176),
  inference(subsumption_resolution,[],[f33336,f33241])).
fof(f33336,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(bool,X555) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(X552,sK6(X553,X554,bool,X552)))) | s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X556) | s(bool,X555) = s(bool,X556)) ) | $spl176),
  inference(backward_demodulation,[],[f33241,f18976])).
fof(f33438,plain,(
  ( ! [X553,X556,X552,X554] : (s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552)))) | s(bool,X556) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl178),
  inference(cnf_transformation,[],[f33438_D])).
fof(f33438_D,plain,(
  ( ! [X553,X556,X552,X554] : (s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552)))) | s(bool,X556) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f33437,plain,(
  ( ! [X553,X555,X556,X552,X554] : (s(fun(X552,bool),X553) = s(fun(X552,bool),X554) | s(bool,'T_0') = s(bool,X555) | s(bool,X556) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X556) = s(bool,g(s(X552,sK6(X553,X554,bool,X552))))) ) | ($spl3 | $spl12 | $spl32 | $spl76 | $spl176)),
  inference(subsumption_resolution,[],[f33331,f30883])).
fof(f18604,plain,(
  ( ! [X138,X139] : (s(bool,X138) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X139) | s(bool,X138) = s(bool,X139)) ) | $spl80),
  inference(cnf_transformation,[],[f18604_D])).
fof(f18604_D,plain,(
  ( ! [X138,X139] : (s(bool,X138) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X139) | s(bool,X138) = s(bool,X139)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f33310,plain,(
  ( ! [X47,X48,X46] : (s(bool,'F_0') = s(bool,X48) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X47) = s(bool,X48)) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f32933,f33245])).
fof(f32933,plain,(
  ( ! [X47,X48,X46] : (s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X47) = s(bool,X48) | s(bool,X48) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(duplicate_literal_removal,[],[f32737])).
fof(f32737,plain,(
  ( ! [X47,X48,X46] : (s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X47) = s(bool,X48) | s(bool,X48) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(superposition,[],[f30883,f5666])).
fof(f33297,plain,(
  ( ! [X74,X72,X73] : (s(bool,'F_0') = s(bool,X73) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X74)) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f32900,f33245])).
fof(f32900,plain,(
  ( ! [X74,X72,X73] : (s(bool,X73) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X74)) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(duplicate_literal_removal,[],[f32770])).
fof(f32770,plain,(
  ( ! [X74,X72,X73] : (s(bool,X73) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X72)) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(superposition,[],[f5666,f30883])).
fof(f33276,plain,(
  $false | ($spl3 | $spl11 | $spl12 | $spl32 | $spl76 | $spl98)),
  inference(subsumption_resolution,[],[f33275,f20772])).
fof(f33275,plain,(
  s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl32 | $spl76 | $spl98)),
  inference(subsumption_resolution,[],[f32811,f19028])).
fof(f32811,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl3 | $spl11 | $spl12 | $spl32 | $spl76)),
  inference(superposition,[],[f20772,f30883])).
fof(f33255,plain,(
  ( ! [X68,X69,X67] : (s(bool,'F_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X68) = s(bool,X69)) ) | ($spl3 | $spl6 | $spl12 | $spl32 | $spl66 | $spl70 | $spl76 | $spl92)),
  inference(forward_demodulation,[],[f32874,f33245])).
fof(f32874,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(duplicate_literal_removal,[],[f32852])).
fof(f32852,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X68) = s(bool,X69) | s(bool,X69) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(superposition,[],[f5666,f30883])).
fof(f33241,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0')))) ) | $spl176),
  inference(cnf_transformation,[],[f33241_D])).
fof(f33241_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0')))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f6312,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl37),
  inference(cnf_transformation,[],[f6312_D])).
fof(f6312_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f32870,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,f(s(bool,'T_0')))) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(equality_factoring,[],[f30883])).
fof(f33201,plain,(
  $false | ($spl3 | $spl12 | $spl32 | $spl62 | $spl76)),
  inference(subsumption_resolution,[],[f33005,f37])).
fof(f33005,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12 | $spl32 | $spl62 | $spl76)),
  inference(backward_demodulation,[],[f33004,f38])).
fof(f33004,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl32 | $spl62 | $spl76)),
  inference(duplicate_literal_removal,[],[f33003])).
fof(f33003,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl3 | $spl12 | $spl32 | $spl62 | $spl76)),
  inference(condensation,[],[f33002])).
fof(f33002,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl3 | $spl12 | $spl32 | $spl62 | $spl76)),
  inference(subsumption_resolution,[],[f32701,f6661])).
fof(f32701,plain,(
  ( ! [X14,X15,X16] : (s(bool,X15) = s(bool,f(s(bool,X14))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl3 | $spl12 | $spl32 | $spl76)),
  inference(superposition,[],[f30883,f54])).
fof(f30924,plain,(
  $false | ($spl3 | $spl12 | $spl32 | $spl48 | $spl76)),
  inference(subsumption_resolution,[],[f30923,f20703])).
fof(f30923,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl32 | $spl48)),
  inference(condensation,[],[f30922])).
fof(f30922,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl32 | $spl48)),
  inference(duplicate_literal_removal,[],[f30921])).
fof(f30921,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl32 | $spl48)),
  inference(condensation,[],[f30920])).
fof(f30920,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X17) = s(bool,X18) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | ($spl32 | $spl48)),
  inference(subsumption_resolution,[],[f30841,f6319])).
fof(f30841,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X17) = s(bool,X18) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,X17) = s(bool,f(s(bool,'T_0')))) ) | $spl32),
  inference(superposition,[],[f1178,f6308])).
fof(f30919,plain,(
  $false | ($spl3 | $spl12 | $spl32 | $spl48 | $spl76)),
  inference(subsumption_resolution,[],[f30918,f20703])).
fof(f30918,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl32 | $spl48)),
  inference(condensation,[],[f30917])).
fof(f30917,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl48)),
  inference(duplicate_literal_removal,[],[f30916])).
fof(f30916,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl48)),
  inference(condensation,[],[f30915])).
fof(f30915,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X14) = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl32 | $spl48)),
  inference(subsumption_resolution,[],[f30840,f6319])).
fof(f30840,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X14) = s(bool,X15) | s(bool,X15) = s(bool,f(s(bool,'T_0'))) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl32),
  inference(superposition,[],[f1178,f6308])).
fof(f30899,plain,(
  $false | ($spl3 | $spl12 | $spl32 | $spl48 | $spl76)),
  inference(subsumption_resolution,[],[f30898,f20703])).
fof(f30898,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl32 | $spl48)),
  inference(condensation,[],[f30897])).
fof(f30897,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl32 | $spl48)),
  inference(duplicate_literal_removal,[],[f30896])).
fof(f30896,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl32 | $spl48)),
  inference(condensation,[],[f30895])).
fof(f30895,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | ($spl32 | $spl48)),
  inference(subsumption_resolution,[],[f30814,f6319])).
fof(f30814,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X13) = s(bool,f(s(bool,'T_0')))) ) | $spl32),
  inference(superposition,[],[f6308,f1178])).
fof(f30894,plain,(
  $false | ($spl3 | $spl12 | $spl32 | $spl48 | $spl76)),
  inference(subsumption_resolution,[],[f30893,f20703])).
fof(f30893,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl32 | $spl48)),
  inference(condensation,[],[f30892])).
fof(f30892,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl48)),
  inference(duplicate_literal_removal,[],[f30891])).
fof(f30891,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl48)),
  inference(condensation,[],[f30890])).
fof(f30890,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl32 | $spl48)),
  inference(subsumption_resolution,[],[f30813,f6319])).
fof(f30813,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,f(s(bool,'T_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl32),
  inference(superposition,[],[f6308,f1178])).
fof(f30882,plain,(
  ( ! [X46] : (s(bool,'F_0') = s(bool,f(s(bool,X46))) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl174),
  inference(cnf_transformation,[],[f30882_D])).
fof(f30882_D,plain,(
  ( ! [X46] : (s(bool,'F_0') = s(bool,f(s(bool,X46))) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f30864,plain,(
  ( ! [X47,X46] : (s(bool,'F_0') = s(bool,f(s(bool,X46))) | s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl32),
  inference(duplicate_literal_removal,[],[f30802])).
fof(f30802,plain,(
  ( ! [X47,X46] : (s(bool,'F_0') = s(bool,f(s(bool,X46))) | s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X47)) ) | $spl32),
  inference(superposition,[],[f6308,f5666])).
fof(f30387,plain,(
  $false | ($spl3 | $spl12 | $spl28 | $spl32 | $spl66 | $spl70 | $spl76 | $spl160)),
  inference(subsumption_resolution,[],[f30374,f30384])).
fof(f30384,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl66 | $spl70 | $spl76 | $spl160)),
  inference(subsumption_resolution,[],[f30383,f38])).
fof(f30383,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl66 | $spl70 | $spl76 | $spl160)),
  inference(forward_demodulation,[],[f30382,f29637])).
fof(f30382,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl66 | $spl70 | $spl76 | $spl160)),
  inference(forward_demodulation,[],[f30381,f30295])).
fof(f30295,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl76 | $spl160)),
  inference(subsumption_resolution,[],[f30294,f20703])).
fof(f30294,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl28 | $spl32 | $spl160)),
  inference(condensation,[],[f30293])).
fof(f30293,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X28) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X28) = s(bool,X29)) ) | ($spl28 | $spl32 | $spl160)),
  inference(subsumption_resolution,[],[f30223,f27683])).
fof(f30223,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X28) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,g(s(bool,'T_0')))) ) | ($spl28 | $spl32)),
  inference(superposition,[],[f30028,f5666])).
fof(f30028,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl28 | $spl32)),
  inference(backward_demodulation,[],[f6308,f6260])).
fof(f30381,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl66 | $spl70 | $spl76 | $spl160)),
  inference(subsumption_resolution,[],[f30380,f38])).
fof(f30380,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl66 | $spl70 | $spl76 | $spl160)),
  inference(forward_demodulation,[],[f30312,f29637])).
fof(f30312,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl76 | $spl160)),
  inference(backward_demodulation,[],[f30295,f40])).
fof(f30374,plain,(
  p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl76 | $spl160)),
  inference(condensation,[],[f30315])).
fof(f30315,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0))))) ) | ($spl3 | $spl12 | $spl28 | $spl32 | $spl76 | $spl160)),
  inference(backward_demodulation,[],[f30295,f1942])).
fof(f30118,plain,(
  $false | ($spl12 | $spl66 | $spl70 | $spl94 | $spl158)),
  inference(subsumption_resolution,[],[f30106,f30115])).
fof(f30115,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl158)),
  inference(subsumption_resolution,[],[f30114,f38])).
fof(f30114,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl158)),
  inference(forward_demodulation,[],[f30113,f29637])).
fof(f30113,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl158)),
  inference(forward_demodulation,[],[f30112,f30029])).
fof(f30029,plain,(
  ( ! [X275] : (s(bool,X275) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl94 | $spl158)),
  inference(subsumption_resolution,[],[f19026,f25687])).
fof(f30112,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl158)),
  inference(subsumption_resolution,[],[f30111,f38])).
fof(f30111,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl158)),
  inference(forward_demodulation,[],[f30043,f29637])).
fof(f30043,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl94 | $spl158)),
  inference(backward_demodulation,[],[f30029,f40])).
fof(f30106,plain,(
  p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl94 | $spl158)),
  inference(condensation,[],[f30048])).
fof(f30048,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0))))) ) | ($spl94 | $spl158)),
  inference(backward_demodulation,[],[f30029,f1942])).
fof(f30014,plain,(
  $false | ($spl12 | $spl66 | $spl70 | $spl94 | $spl150)),
  inference(subsumption_resolution,[],[f30001,f30011])).
fof(f30011,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl150)),
  inference(subsumption_resolution,[],[f30010,f38])).
fof(f30010,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl150)),
  inference(forward_demodulation,[],[f30009,f29637])).
fof(f30009,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl150)),
  inference(forward_demodulation,[],[f30008,f29924])).
fof(f29924,plain,(
  ( ! [X275] : (s(bool,X275) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl94 | $spl150)),
  inference(subsumption_resolution,[],[f19026,f21336])).
fof(f30008,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl150)),
  inference(subsumption_resolution,[],[f30007,f38])).
fof(f30007,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl12 | $spl66 | $spl70 | $spl94 | $spl150)),
  inference(forward_demodulation,[],[f29939,f29637])).
fof(f29939,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | ($spl94 | $spl150)),
  inference(backward_demodulation,[],[f29924,f40])).
fof(f30001,plain,(
  p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ($spl94 | $spl150)),
  inference(condensation,[],[f29943])).
fof(f29943,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X1),s('type.modSem.state'(sK0),X0))))) ) | ($spl94 | $spl150)),
  inference(backward_demodulation,[],[f29924,f1942])).
fof(f29918,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f24550,f29637])).
fof(f29852,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f26814,f29637])).
fof(f29555,plain,(
  ( ! [X76,X79,X77] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X77),s('type.modSem.state'(sK0),X76)))) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X76,X77,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X79) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl172),
  inference(cnf_transformation,[],[f29555_D])).
fof(f29555_D,plain,(
  ( ! [X76,X79,X77] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X77),s('type.modSem.state'(sK0),X76)))) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X76,X77,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | s(bool,X79) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f28913,plain,(
  ( ! [X78,X76,X79,X77] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X77),s('type.modSem.state'(sK0),X76)))) | s(bool,'T_0') = s(bool,X78) | s(bool,X79) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X76,X77,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(subsumption_resolution,[],[f28892,f56])).
fof(f28892,plain,(
  ( ! [X78,X76,X79,X77] : (p(s(bool,X78)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X77),s('type.modSem.state'(sK0),X76)))) | s(bool,'T_0') = s(bool,X78) | s(bool,X79) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X79) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X76,X77,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f1942,f5666])).
fof(f29554,plain,(
  ( ! [X80,X81] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X81),s('type.modSem.state'(sK0),X80)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X80,X81,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))))) ) | $spl170),
  inference(cnf_transformation,[],[f29554_D])).
fof(f29554_D,plain,(
  ( ! [X80,X81] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X81),s('type.modSem.state'(sK0),X80)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X80,X81,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f29553,plain,(
  p(s(bool,g(s(bool,'F_0')))) | $spl168),
  inference(cnf_transformation,[],[f29553_D])).
fof(f29553_D,plain,(
  p(s(bool,g(s(bool,'F_0')))) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f28893,plain,(
  ( ! [X80,X81] : (p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X81),s('type.modSem.state'(sK0),X80)))) | s(bool,'T_0') = s(bool,g(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X80,X81,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))))) ) | $spl12),
  inference(superposition,[],[f1942,f9692])).
fof(f29551,plain,(
  ( ! [X83,X82] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X83),s('type.modSem.state'(sK0),X82)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X82,X83,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))))) ) | $spl166),
  inference(cnf_transformation,[],[f29551_D])).
fof(f29551_D,plain,(
  ( ! [X83,X82] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X83),s('type.modSem.state'(sK0),X82)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X82,X83,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f28894,plain,(
  ( ! [X83,X82] : (p(s(bool,g(s(bool,'F_0')))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X83),s('type.modSem.state'(sK0),X82)))) | s(bool,'T_0') = s(bool,f(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X82,X83,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))))) ) | ($spl12 | $spl66 | $spl70)),
  inference(superposition,[],[f1942,f12618])).
fof(f18669,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl84),
  inference(cnf_transformation,[],[f18669_D])).
fof(f18669_D,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f29455,plain,(
  ( ! [X74,X75,X73] : (s(bool,'T_0') = s(bool,X74) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X75) = s(bool,f(s(bool,X73)))) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(duplicate_literal_removal,[],[f29427])).
fof(f29427,plain,(
  ( ! [X74,X75,X73] : (s(bool,'T_0') = s(bool,X74) | s(bool,'T_0') = s(bool,X74) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X75) = s(bool,f(s(bool,X73)))) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(superposition,[],[f5666,f29095])).
fof(f29095,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f29094,f20703])).
fof(f29094,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(condensation,[],[f29093])).
fof(f29093,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f29019,f23476])).
fof(f23476,plain,(
  ( ! [X14,X15,X16] : (s(bool,X15) = s(bool,f(s(bool,X14))) | s(bool,'F_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl28 | $spl30 | $spl138)),
  inference(superposition,[],[f23084,f54])).
fof(f23084,plain,(
  ( ! [X105] : (s(bool,X105) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X105)) ) | ($spl28 | $spl30 | $spl138)),
  inference(subsumption_resolution,[],[f23048,f37])).
fof(f23048,plain,(
  ( ! [X105] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X105) | s(bool,X105) = s(bool,f(s(bool,'T_0')))) ) | ($spl28 | $spl30 | $spl138)),
  inference(superposition,[],[f20742,f20752])).
fof(f20752,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl28 | $spl30)),
  inference(backward_demodulation,[],[f6307,f6260])).
fof(f29019,plain,(
  ( ! [X6,X5] : (s(bool,X5) != s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(superposition,[],[f28859,f54])).
fof(f28859,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(condensation,[],[f28858])).
fof(f28858,plain,(
  ( ! [X88,X87] : (s(bool,'F_0') != s(bool,X87) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,f(s(bool,X87)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f28622,f27453])).
fof(f27453,plain,(
  ( ! [X171,X172] : (s(bool,X171) != s(bool,g(s(bool,X172))) | s(bool,'T_0') = s(bool,X171)) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f27452,f20703])).
fof(f27452,plain,(
  ( ! [X171,X172] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X171) != s(bool,g(s(bool,X172))) | s(bool,'T_0') = s(bool,X171)) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(forward_demodulation,[],[f27266,f25474])).
fof(f25474,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f25473,f20703])).
fof(f25473,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl24 | $spl30 | $spl138)),
  inference(condensation,[],[f25472])).
fof(f25472,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,g(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl24 | $spl30 | $spl138)),
  inference(subsumption_resolution,[],[f25414,f23768])).
fof(f23768,plain,(
  ( ! [X14,X15,X16] : (s(bool,X15) = s(bool,g(s(bool,X14))) | s(bool,'F_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl30 | $spl138)),
  inference(superposition,[],[f23086,f54])).
fof(f23086,plain,(
  ( ! [X110] : (s(bool,X110) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X110)) ) | ($spl30 | $spl138)),
  inference(subsumption_resolution,[],[f23051,f37])).
fof(f23051,plain,(
  ( ! [X110] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X110) | s(bool,X110) = s(bool,g(s(bool,'T_0')))) ) | ($spl30 | $spl138)),
  inference(superposition,[],[f20742,f6307])).
fof(f25414,plain,(
  ( ! [X6,X5] : (s(bool,X5) != s(bool,X6) | s(bool,'T_0') = s(bool,g(s(bool,X6))) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f54])).
fof(f27266,plain,(
  ( ! [X171,X172] : (s(bool,X171) != s(bool,g(s(bool,X172))) | s(bool,'T_0') = s(bool,X171) | s(bool,'F_0') = s(bool,g(s(bool,X171)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(superposition,[],[f19301,f27063])).
fof(f27063,plain,(
  ( ! [X118,X119] : (s(bool,X119) = s(bool,g(s(bool,X118))) | s(bool,'F_0') = s(bool,X119)) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(subsumption_resolution,[],[f27028,f37])).
fof(f27028,plain,(
  ( ! [X118,X119] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X119) | s(bool,X119) = s(bool,g(s(bool,X118)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(superposition,[],[f20742,f25474])).
fof(f29472,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X54) = s(bool,f(s(bool,X52)))) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(duplicate_literal_removal,[],[f29392])).
fof(f29392,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X54) = s(bool,f(s(bool,X52)))) ) | ($spl3 | $spl12 | $spl24 | $spl28 | $spl30 | $spl66 | $spl70 | $spl76 | $spl138)),
  inference(superposition,[],[f29095,f5666])).
fof(f29283,plain,(
  ( ! [X125,X126] : (s(fun(fun(bool,bool),bool),X125) = s(fun(fun(bool,bool),bool),X126) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK6(X125,X126,bool,fun(bool,bool)))))) ) | $spl162),
  inference(cnf_transformation,[],[f29283_D])).
fof(f29283_D,plain,(
  ( ! [X125,X126] : (s(fun(fun(bool,bool),bool),X125) = s(fun(fun(bool,bool),bool),X126) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK6(X125,X126,bool,fun(bool,bool)))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f29284,plain,(
  ( ! [X127,X128] : (s(bool,X128) != s(bool,f(s(fun(bool,bool),X127))) | s(bool,'T_0') = s(bool,X128)) ) | $spl164),
  inference(cnf_transformation,[],[f29284_D])).
fof(f29284_D,plain,(
  ( ! [X127,X128] : (s(bool,X128) != s(bool,f(s(fun(bool,bool),X127))) | s(bool,'T_0') = s(bool,X128)) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f29212,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,X132) != s(bool,f(s(fun(bool,bool),X131))) | s(fun(fun(bool,bool),bool),X129) = s(fun(fun(bool,bool),bool),X130) | s(bool,'T_0') = s(bool,X132) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK6(X129,X130,bool,fun(bool,bool)))))) ) | ($spl12 | $spl17 | $spl28)),
  inference(superposition,[],[f1272,f20750])).
fof(f20750,plain,(
  ( ! [X90,X89] : (s(fun(bool,bool),X89) = s(fun(bool,bool),X90)) ) | ($spl12 | $spl17 | $spl28)),
  inference(subsumption_resolution,[],[f9064,f6260])).
fof(f29211,plain,(
  ( ! [X127,X125,X128,X126] : (s(bool,X128) != s(bool,f(s(fun(bool,bool),X127))) | s(fun(fun(bool,bool),bool),X125) = s(fun(fun(bool,bool),bool),X126) | s(bool,'T_0') = s(bool,X128) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK6(X125,X126,bool,fun(bool,bool)))))) ) | ($spl12 | $spl17 | $spl28)),
  inference(superposition,[],[f1272,f20750])).
fof(f27683,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,g(s(bool,X74))) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl160),
  inference(cnf_transformation,[],[f27683_D])).
fof(f27683_D,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,g(s(bool,X74))) | s(bool,X73) = s(bool,X75) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f27650,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) != s(bool,g(s(bool,X74))) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(duplicate_literal_removal,[],[f27508])).
fof(f27508,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) != s(bool,g(s(bool,X74))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X73) = s(bool,X75)) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(superposition,[],[f27453,f5666])).
fof(f25687,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X51) = s(bool,g(s(bool,X49)))) ) | $spl158),
  inference(cnf_transformation,[],[f25687_D])).
fof(f25687_D,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X51) = s(bool,g(s(bool,X49)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f25610,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X66) = s(bool,g(s(bool,X64)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(duplicate_literal_removal,[],[f25599])).
fof(f25599,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X66) = s(bool,g(s(bool,X64)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(superposition,[],[f5666,f25474])).
fof(f25628,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X51) = s(bool,g(s(bool,X49)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(duplicate_literal_removal,[],[f25573])).
fof(f25573,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X51) = s(bool,g(s(bool,X49)))) ) | ($spl3 | $spl12 | $spl24 | $spl30 | $spl76 | $spl138)),
  inference(superposition,[],[f25474,f5666])).
fof(f24252,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X69) | s(bool,X67) = s(bool,X68) | s(bool,X68) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X67)) ) | ($spl30 | $spl138)),
  inference(duplicate_literal_removal,[],[f24251])).
fof(f24251,plain,(
  ( ! [X68,X69,X67] : (s(bool,'T_0') = s(bool,X69) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X67)) ) | ($spl30 | $spl138)),
  inference(forward_demodulation,[],[f23905,f6307])).
fof(f23905,plain,(
  ( ! [X68,X69,X67] : (s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X69) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X67)) ) | ($spl30 | $spl138)),
  inference(superposition,[],[f5666,f23086])).
fof(f24184,plain,(
  $false | ($spl24 | $spl30 | $spl44 | $spl138)),
  inference(subsumption_resolution,[],[f23993,f37])).
fof(f23993,plain,(
  ~p(s(bool,'T_0')) | ($spl24 | $spl30 | $spl44 | $spl138)),
  inference(backward_demodulation,[],[f23992,f38])).
fof(f23992,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl24 | $spl30 | $spl44 | $spl138)),
  inference(condensation,[],[f23991])).
fof(f23991,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') = s(bool,X76) | s(bool,X75) = s(bool,X76)) ) | ($spl24 | $spl30 | $spl44 | $spl138)),
  inference(subsumption_resolution,[],[f23990,f5993])).
fof(f23990,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') = s(bool,X76) | s(bool,X75) = s(bool,X76) | s(bool,'F_0') = s(bool,X75)) ) | ($spl24 | $spl30 | $spl44 | $spl138)),
  inference(subsumption_resolution,[],[f23840,f6317])).
fof(f23840,plain,(
  ( ! [X76,X75] : (s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X76) | s(bool,X75) = s(bool,X76) | s(bool,'F_0') = s(bool,X75)) ) | ($spl24 | $spl30 | $spl138)),
  inference(superposition,[],[f5993,f23086])).
fof(f23959,plain,(
  ( ! [X66,X65] : (s(bool,X66) = s(bool,g(s(bool,X65))) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X66)) ) | $spl156),
  inference(cnf_transformation,[],[f23959_D])).
fof(f23959_D,plain,(
  ( ! [X66,X65] : (s(bool,X66) = s(bool,g(s(bool,X65))) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X66)) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f23927,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,g(s(bool,X65))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl30 | $spl138)),
  inference(duplicate_literal_removal,[],[f23784])).
fof(f23784,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,g(s(bool,X65))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl30 | $spl138)),
  inference(superposition,[],[f23086,f5666])).
fof(f23663,plain,(
  ( ! [X66,X65] : (s(bool,X66) = s(bool,f(s(bool,X65))) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X66)) ) | $spl154),
  inference(cnf_transformation,[],[f23663_D])).
fof(f23663_D,plain,(
  ( ! [X66,X65] : (s(bool,X66) = s(bool,f(s(bool,X65))) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'F_0') = s(bool,X66)) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f23633,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,f(s(bool,X65))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl28 | $spl30 | $spl138)),
  inference(duplicate_literal_removal,[],[f23492])).
fof(f23492,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,f(s(bool,X65))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X65) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl28 | $spl30 | $spl138)),
  inference(superposition,[],[f23084,f5666])).
fof(f21695,plain,(
  ( ! [X56,X55] : (s(bool,'F_0') = s(bool,X56) | p(s(bool,f(s(bool,X55)))) | s(bool,X55) = s(bool,X56)) ) | $spl152),
  inference(cnf_transformation,[],[f21695_D])).
fof(f21695_D,plain,(
  ( ! [X56,X55] : (s(bool,'F_0') = s(bool,X56) | p(s(bool,f(s(bool,X55)))) | s(bool,X55) = s(bool,X56)) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f21694,plain,(
  ( ! [X54,X56,X55] : (s(bool,'F_0') = s(bool,X56) | p(s(bool,f(s(bool,X55)))) | s(bool,'T_0') = s(bool,X54) | s(bool,X55) = s(bool,X56)) ) | $spl20),
  inference(forward_demodulation,[],[f21666,f75])).
fof(f21666,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,f(s(bool,X55)))) | s(bool,'T_0') = s(bool,X54) | s(bool,X56) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X55) = s(bool,X56)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f21626])).
fof(f21626,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,f(s(bool,X55)))) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X54) | s(bool,X56) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X55) = s(bool,X56)) ) | $spl20),
  inference(superposition,[],[f444,f5666])).
fof(f21336,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,g(s(bool,X46))) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl150),
  inference(cnf_transformation,[],[f21336_D])).
fof(f21336_D,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,g(s(bool,X46))) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f21318,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,g(s(bool,X46))) | s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl30),
  inference(duplicate_literal_removal,[],[f21244])).
fof(f21244,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,g(s(bool,X46))) | s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X47)) ) | $spl30),
  inference(superposition,[],[f6307,f5666])).
fof(f20780,plain,(
  $false | ($spl3 | $spl12 | $spl28 | $spl30 | $spl32 | $spl76)),
  inference(subsumption_resolution,[],[f20779,f20703])).
fof(f20779,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl28 | $spl30 | $spl32)),
  inference(backward_demodulation,[],[f20752,f6308])).
fof(f19077,plain,(
  ( ! [X146,X147] : (s(bool,'T_0') != s(bool,X146) | s(bool,X146) = s(bool,X147) | s(bool,X147) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl100),
  inference(cnf_transformation,[],[f19077_D])).
fof(f19077_D,plain,(
  ( ! [X146,X147] : (s(bool,'T_0') != s(bool,X146) | s(bool,X146) = s(bool,X147) | s(bool,X147) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f17855,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f5666])).
fof(f20771,plain,(
  ( ! [X374,X373,X375] : (s(bool,'T_0') = s(bool,X374) | s(bool,'T_0') != s(bool,X373) | s(bool,X375) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X373) = s(bool,X375)) )),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18380,f18362,f18337,f19428,f17087,f18252,f17106,f18017,f18011,f17634,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18954,f18898,f18726,f14144,f18727,f18964,f18967,f18971,f19144,f19145,f19146,f20761,f18385,f18258,f17052,f20763,f19377,f20764,f19340])).
fof(f19078,plain,(
  ( ! [X149,X150] : (s(bool,X149) != s(bool,f(s(bool,X149))) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl102),
  inference(cnf_transformation,[],[f19078_D])).
fof(f19078_D,plain,(
  ( ! [X149,X150] : (s(bool,X149) != s(bool,f(s(bool,X149))) | s(bool,X149) = s(bool,X150) | s(bool,X150) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f19359,plain,(
  ( ! [X173,X174,X172] : (s(bool,X173) != s(bool,f(s(bool,X173))) | s(bool,'T_0') = s(bool,X172) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X173) = s(bool,X174)) ) | ($spl12 | $spl70)),
  inference(subsumption_resolution,[],[f17598,f9640])).
fof(f17598,plain,(
  ( ! [X173,X174,X172] : (s(bool,X173) != s(bool,f(s(bool,X173))) | s(bool,X172) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X172) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X173) = s(bool,X174)) ) | $spl70),
  inference(superposition,[],[f10103,f5666])).
fof(f18258,plain,(
  ( ! [X273,X275,X274] : (s(bool,'T_0') = s(bool,X273) | s(bool,X274) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X274) = s(bool,X275) | s(bool,'F_0') = s(bool,X275)) )),
  inference(duplicate_literal_removal,[],[f17050])).
fof(f17050,plain,(
  ( ! [X273,X275,X274] : (s(bool,'T_0') = s(bool,X273) | s(bool,'T_0') = s(bool,X273) | s(bool,X274) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X274) = s(bool,X275) | s(bool,'F_0') = s(bool,X275)) )),
  inference(superposition,[],[f39,f5666])).
fof(f18385,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f16791])).
fof(f16791,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f5666,f39])).
fof(f20742,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) | $spl138),
  inference(cnf_transformation,[],[f20742_D])).
fof(f20742_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X2)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f20761,plain,(
  ( ! [X488,X487,X489] : (s(bool,'T_0') = s(bool,X488) | s(bool,X487) = s(bool,X489) | ~p(s(bool,X487)) | s(bool,'F_0') = s(bool,X489)) )),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14145,f14097,f14170,f18614,f18647,f18728,f18794,f18972,f17700,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f19625,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f6663,f6674,f12218,f12220,f19621,f19623,f4701,f19248,f19071,f19065,f19064,f18954,f18898,f18726,f14144,f18727,f18964,f18967,f18971,f19144,f19145,f19146])).
fof(f20760,plain,(
  ( ! [X451,X452,X450] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X450),X452),s('type.modSem.state'(X450),X451)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X450),bool),happ(s(fun('type.semanticPrimitives.state'(X450),fun('type.modSem.state'(X450),bool)),sK5(X451,X452,X450)),s('type.semanticPrimitives.state'(X450),X452))),s('type.modSem.state'(X450),X451)))) ) | $spl148),
  inference(cnf_transformation,[],[f20760_D])).
fof(f20760_D,plain,(
  ( ! [X451,X452,X450] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X450),X452),s('type.modSem.state'(X450),X451)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X450),bool),happ(s(fun('type.semanticPrimitives.state'(X450),fun('type.modSem.state'(X450),bool)),sK5(X451,X452,X450)),s('type.semanticPrimitives.state'(X450),X452))),s('type.modSem.state'(X450),X451)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f19145,plain,(
  ( ! [X453,X451,X452,X454,X450] : (s(bool,'F_0') = s(bool,X454) | ~p(s(bool,X453)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X450),X452),s('type.modSem.state'(X450),X451)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X450),bool),happ(s(fun('type.semanticPrimitives.state'(X450),fun('type.modSem.state'(X450),bool)),sK5(X451,X452,X450)),s('type.semanticPrimitives.state'(X450),X452))),s('type.modSem.state'(X450),X451))) | s(bool,X453) = s(bool,X454)) )),
  inference(forward_demodulation,[],[f17684,f75])).
fof(f17684,plain,(
  ( ! [X453,X451,X452,X454,X450] : (~p(s(bool,X453)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X450),X452),s('type.modSem.state'(X450),X451)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.modSem.state'(X450),bool),happ(s(fun('type.semanticPrimitives.state'(X450),fun('type.modSem.state'(X450),bool)),sK5(X451,X452,X450)),s('type.semanticPrimitives.state'(X450),X452))),s('type.modSem.state'(X450),X451))) | s(bool,X454) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X453) = s(bool,X454)) )),
  inference(superposition,[],[f47,f5666])).
fof(f20759,plain,(
  ( ! [X445,X444,X446,X448] : (~p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),sK3(X448,X446,X445,X444)))),s('type.modSem.state'(X444),sK4(X448,X446,X445,X444))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X444),X445),s('type.modSem.state'(X444),X446))) | p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),X445))),s('type.modSem.state'(X444),X446))))) ) | $spl146),
  inference(cnf_transformation,[],[f20759_D])).
fof(f20759_D,plain,(
  ( ! [X445,X444,X446,X448] : (~p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),sK3(X448,X446,X445,X444)))),s('type.modSem.state'(X444),sK4(X448,X446,X445,X444))))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X444),X445),s('type.modSem.state'(X444),X446))) | p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),X445))),s('type.modSem.state'(X444),X446))))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f19144,plain,(
  ( ! [X445,X447,X449,X444,X446,X448] : (s(bool,'F_0') = s(bool,X449) | ~p(s(bool,X447)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),sK3(X448,X446,X445,X444)))),s('type.modSem.state'(X444),sK4(X448,X446,X445,X444))))) | p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),X445))),s('type.modSem.state'(X444),X446)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X444),X445),s('type.modSem.state'(X444),X446))) | s(bool,X447) = s(bool,X449)) )),
  inference(forward_demodulation,[],[f17683,f75])).
fof(f17683,plain,(
  ( ! [X445,X447,X449,X444,X446,X448] : (~p(s(bool,X447)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),sK3(X448,X446,X445,X444)))),s('type.modSem.state'(X444),sK4(X448,X446,X445,X444))))) | p(s(bool,happ(s(fun('type.modSem.state'(X444),bool),happ(s(fun('type.semanticPrimitives.state'(X444),fun('type.modSem.state'(X444),bool)),X448),s('type.semanticPrimitives.state'(X444),X445))),s('type.modSem.state'(X444),X446)))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X444),X445),s('type.modSem.state'(X444),X446))) | s(bool,X449) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X447) = s(bool,X449)) )),
  inference(superposition,[],[f45,f5666])).
fof(f18967,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3))))) )),
  inference(forward_demodulation,[],[f18966,f75])).
fof(f18966,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X2),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f18965])).
fof(f18965,plain,(
  ( ! [X466,X465,X467,X468,X464] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X464),X466),s('type.modSem.state'(X464),X465)))) | s(bool,'T_0') = s(bool,X468) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X464),bool),happ(s(fun('type.semanticPrimitives.state'(X464),fun('type.modSem.state'(X464),bool)),sK5(X465,X466,X464)),s('type.semanticPrimitives.state'(X464),X466))),s('type.modSem.state'(X464),X465))) | s(bool,X467) = s(bool,X468)) )),
  inference(subsumption_resolution,[],[f17394,f88])).
fof(f17394,plain,(
  ( ! [X466,X465,X467,X468,X464] : (~p(s(bool,X467)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X464),X466),s('type.modSem.state'(X464),X465)))) | s(bool,'T_0') = s(bool,X468) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,happ(s(fun('type.modSem.state'(X464),bool),happ(s(fun('type.semanticPrimitives.state'(X464),fun('type.modSem.state'(X464),bool)),sK5(X465,X466,X464)),s('type.semanticPrimitives.state'(X464),X466))),s('type.modSem.state'(X464),X465))) | s(bool,X467) = s(bool,X468)) )),
  inference(superposition,[],[f47,f5666])).
fof(f18964,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3))))) )),
  inference(forward_demodulation,[],[f18963,f75])).
fof(f18963,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),sK3(X2,X3,X4,X1)))),s('type.modSem.state'(X1),sK4(X2,X3,X4,X1))))) | p(s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),X2),s('type.semanticPrimitives.state'(X1),X4))),s('type.modSem.state'(X1),X3)))) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X1),X4),s('type.modSem.state'(X1),X3)))) )),
  inference(condensation,[],[f18962])).
fof(f18962,plain,(
  ( ! [X461,X463,X459,X460,X462,X458] : (~p(s(bool,happ(s(fun('type.modSem.state'(X458),bool),happ(s(fun('type.semanticPrimitives.state'(X458),fun('type.modSem.state'(X458),bool)),X462),s('type.semanticPrimitives.state'(X458),sK3(X462,X460,X459,X458)))),s('type.modSem.state'(X458),sK4(X462,X460,X459,X458))))) | p(s(bool,happ(s(fun('type.modSem.state'(X458),bool),happ(s(fun('type.semanticPrimitives.state'(X458),fun('type.modSem.state'(X458),bool)),X462),s('type.semanticPrimitives.state'(X458),X459))),s('type.modSem.state'(X458),X460)))) | s(bool,'T_0') = s(bool,X463) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X458),X459),s('type.modSem.state'(X458),X460))) | s(bool,X461) = s(bool,X463)) )),
  inference(subsumption_resolution,[],[f17393,f88])).
fof(f17393,plain,(
  ( ! [X461,X463,X459,X460,X462,X458] : (~p(s(bool,X461)) | ~p(s(bool,happ(s(fun('type.modSem.state'(X458),bool),happ(s(fun('type.semanticPrimitives.state'(X458),fun('type.modSem.state'(X458),bool)),X462),s('type.semanticPrimitives.state'(X458),sK3(X462,X460,X459,X458)))),s('type.modSem.state'(X458),sK4(X462,X460,X459,X458))))) | p(s(bool,happ(s(fun('type.modSem.state'(X458),bool),happ(s(fun('type.semanticPrimitives.state'(X458),fun('type.modSem.state'(X458),bool)),X462),s('type.semanticPrimitives.state'(X458),X459))),s('type.modSem.state'(X458),X460)))) | s(bool,'T_0') = s(bool,X463) | s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X458),X459),s('type.modSem.state'(X458),X460))) | s(bool,X461) = s(bool,X463)) )),
  inference(superposition,[],[f45,f5666])).
fof(f20753,plain,(
  $false | ($spl28 | $spl30 | $spl37)),
  inference(subsumption_resolution,[],[f20752,f20635])).
fof(f20635,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl37),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6312,f6618,f6619,f11274,f11275,f17104,f17845,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f12177])).
fof(f6932,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,f(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl37),
  inference(superposition,[],[f6312,f54])).
fof(f6930,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl37),
  inference(superposition,[],[f6312,f1178])).
fof(f20735,plain,(
  ( ! [X438] : (s(bool,'F_0') = s(bool,X438) | s(bool,X438) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) ) | $spl136),
  inference(cnf_transformation,[],[f20735_D])).
fof(f20735_D,plain,(
  ( ! [X438] : (s(bool,'F_0') = s(bool,X438) | s(bool,X438) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f18726,plain,(
  ( ! [X243,X244] : (s(bool,'F_0') = s(bool,X244) | s(bool,'T_0') = s(bool,X243) | s(bool,X244) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) )),
  inference(forward_demodulation,[],[f18299,f75])).
fof(f18299,plain,(
  ( ! [X243,X244] : (s(bool,'T_0') = s(bool,X243) | s(bool,X244) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X244) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) )),
  inference(duplicate_literal_removal,[],[f16920])).
fof(f16920,plain,(
  ( ! [X243,X244] : (s(bool,'T_0') = s(bool,X243) | s(bool,'T_0') = s(bool,X243) | s(bool,X244) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X244) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) )),
  inference(superposition,[],[f5666,f151])).
fof(f18898,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2)) )),
  inference(forward_demodulation,[],[f18897,f75])).
fof(f18897,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18896])).
fof(f18896,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,X13)) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X14) | s(bool,X11) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X12) = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f17270,f88])).
fof(f17270,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X14) | s(bool,X11) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X12) = s(bool,X14)) )),
  inference(superposition,[],[f51,f5666])).
fof(f20745,plain,(
  ( ! [X2,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3)))) ) | $spl140),
  inference(cnf_transformation,[],[f20745_D])).
fof(f20745_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f20744,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.modSem.state'(X1),bool),happ(s(fun('type.semanticPrimitives.state'(X1),fun('type.modSem.state'(X1),bool)),sK5(X3,X2,X1)),s('type.semanticPrimitives.state'(X1),X2))),s('type.modSem.state'(X1),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(subsumption_resolution,[],[f18967,f20673])).
fof(f20673,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | $spl8),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6609,f284,f75,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f16934,f18256,f18775,f18777,f18779,f17102,f17105,f18029,f17554,f17992,f19225,f19250,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f11274,f11275,f17104,f17845,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365,f189,f12177,f38,f212,f213,f18730,f18750,f18840,f18843,f18975,f18976,f19254,f1272,f1394,f3885,f4081,f4179,f4301,f20650,f6663,f6674,f12218,f12220,f20672])).
fof(f20672,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f20671])).
fof(f20671,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | $spl8),
  inference(forward_demodulation,[],[f20670,f189])).
fof(f20670,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | p(s(bool,happ(s(fun('type.modSem.state'(X0),bool),happ(s(fun('type.semanticPrimitives.state'(X0),fun('type.modSem.state'(X0),bool)),X6),s('type.semanticPrimitives.state'(X0),X1))),s('type.modSem.state'(X0),X2)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X0),X1),s('type.modSem.state'(X0),X2))))) ) | $spl8),
  inference(forward_demodulation,[],[f40,f189])).
fof(f19064,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2)) )),
  inference(forward_demodulation,[],[f19063,f75])).
fof(f19063,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(condensation,[],[f19062])).
fof(f19062,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,X12)) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X11) | s(bool,X14) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X12) = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f17560,f88])).
fof(f17560,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X11) | s(bool,X14) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X12) = s(bool,X14)) )),
  inference(superposition,[],[f51,f5666])).
fof(f19065,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,X33) | ~p(s(bool,X32)) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33)) )),
  inference(forward_demodulation,[],[f18012,f75])).
fof(f18012,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X32)) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X32) = s(bool,X33)) )),
  inference(duplicate_literal_removal,[],[f17565])).
fof(f17565,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X32)) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X32) = s(bool,X33)) )),
  inference(superposition,[],[f56,f5666])).
fof(f19068,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2)) ) | $spl12),
  inference(forward_demodulation,[],[f19067,f75])).
fof(f19067,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) ) | $spl12),
  inference(condensation,[],[f19066])).
fof(f19066,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X48)) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X47) | s(bool,X50) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X48) = s(bool,X50)) ) | $spl12),
  inference(subsumption_resolution,[],[f17570,f10195])).
fof(f17570,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X48)) | s(bool,X47) = s(bool,g(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X47) | s(bool,X50) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X48) = s(bool,X50)) ) | $spl12),
  inference(superposition,[],[f510,f5666])).
fof(f19071,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2)) )),
  inference(forward_demodulation,[],[f17990,f75])).
fof(f17990,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(condensation,[],[f17989])).
fof(f17989,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,X3)) | s(bool,'T_0') = s(bool,X1) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(duplicate_literal_removal,[],[f17988])).
fof(f17988,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,X3)) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,X4) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X3) = s(bool,X4)) )),
  inference(condensation,[],[f17582])).
fof(f17582,plain,(
  ( ! [X121,X118,X120,X119,X117] : (~p(s(bool,X118)) | s(bool,X117) = s(bool,X119) | s(bool,X119) = s(bool,X120) | s(bool,'T_0') = s(bool,X120) | s(bool,'T_0') = s(bool,X117) | s(bool,X121) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X118) = s(bool,X121)) )),
  inference(superposition,[],[f1687,f5666])).
fof(f19248,plain,(
  ( ! [X438,X437] : (s(bool,'F_0') = s(bool,X438) | s(bool,'T_0') = s(bool,X437) | s(bool,X438) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) )),
  inference(forward_demodulation,[],[f17919,f75])).
fof(f17919,plain,(
  ( ! [X438,X437] : (s(bool,'T_0') = s(bool,X437) | s(bool,X438) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X438) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) )),
  inference(duplicate_literal_removal,[],[f17822])).
fof(f17822,plain,(
  ( ! [X438,X437] : (s(bool,'T_0') = s(bool,X437) | s(bool,'T_0') = s(bool,X437) | s(bool,X438) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X438) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(sK0),sK1))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),sK2)))))) )),
  inference(superposition,[],[f151,f5666])).
fof(f20718,plain,(
  ( ! [X85,X83,X86] : (s(bool,'T_0') != s(bool,X83) | s(bool,'T_0') = s(bool,X86) | s(bool,X85) = s(bool,X86) | s(bool,X83) = s(bool,X85)) ) | $spl134),
  inference(cnf_transformation,[],[f20718_D])).
fof(f20718_D,plain,(
  ( ! [X85,X83,X86] : (s(bool,'T_0') != s(bool,X83) | s(bool,'T_0') = s(bool,X86) | s(bool,X85) = s(bool,X86) | s(bool,X83) = s(bool,X85)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f19623,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'T_0') != s(bool,X69) | s(fun(X66,bool),X67) = s(fun(X66,bool),X68) | s(bool,X70) = s(bool,g(s(X66,sK6(X67,X68,bool,X66)))) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,X71) | s(bool,X71) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f12204,f1394])).
fof(f12204,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'T_0') != s(bool,X69) | s(fun(X66,bool),X67) = s(fun(X66,bool),X68) | s(bool,X70) = s(bool,g(s(X66,sK6(X67,X68,bool,X66)))) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,X71) | s(bool,'T_0') = s(bool,f(s(X66,sK6(X67,X68,bool,X66)))) | s(bool,X71) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f1394,f1178])).
fof(f19621,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,'T_0') != s(bool,X83) | s(fun(X80,bool),X81) = s(fun(X80,bool),X82) | s(bool,X84) = s(bool,g(s(X80,sK6(X81,X82,bool,X80)))) | s(bool,'T_0') = s(bool,X84) | s(bool,X83) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f12206,f1394])).
fof(f12206,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,'T_0') != s(bool,X83) | s(fun(X80,bool),X81) = s(fun(X80,bool),X82) | s(bool,X84) = s(bool,g(s(X80,sK6(X81,X82,bool,X80)))) | s(bool,'T_0') = s(bool,X84) | s(bool,X83) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,f(s(X80,sK6(X81,X82,bool,X80))))) )),
  inference(superposition,[],[f1394,f1178])).
fof(f20712,plain,(
  ( ! [X372,X370,X371] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372)))) ) | $spl130),
  inference(cnf_transformation,[],[f20712_D])).
fof(f20712_D,plain,(
  ( ! [X372,X370,X371] : (s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f20711,plain,(
  ( ! [X372,X368,X370,X367,X373,X369,X371] : (s(fun(X367,bool),X368) = s(fun(X367,bool),X369) | s(bool,X373) = s(bool,g(s(X367,sK6(X368,X369,bool,X367)))) | s(bool,'T_0') = s(bool,X373) | s(bool,'T_0') = s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X370),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X371),s('type.semanticPrimitives.store_v'('type.modSem.v'),X372)))) ) | ($spl8 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f14200,f20707])).
fof(f20707,plain,(
  ( ! [X105,X106,X104] : (s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X104))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106)))) ) | ($spl8 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f20706,f189])).
fof(f20706,plain,(
  ( ! [X105,X106,X104] : (s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) != s(bool,'const.source_to_modProof.sv_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X104),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X104))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X105))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X106)))) ) | ($spl8 | $spl12 | $spl76)),
  inference(forward_demodulation,[],[f15619,f189])).
fof(f19383,plain,(
  ( ! [X549,X551,X547,X548,X550] : (s(bool,X550) != s(bool,f(s(bool,X549))) | s(fun(bool,bool),X547) = s(fun(bool,bool),X548) | s(bool,'T_0') = s(bool,X550) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X547,X548,bool,bool)))) | s(bool,'T_0') = s(bool,X551) | s(bool,X549) = s(bool,X551)) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f19382,f12163])).
fof(f19382,plain,(
  ( ! [X549,X551,X547,X548,X550] : (s(bool,'F_0') = s(bool,sK6(X547,X548,bool,bool)) | s(bool,X550) != s(bool,f(s(bool,X549))) | s(fun(bool,bool),X547) = s(fun(bool,bool),X548) | s(bool,'T_0') = s(bool,X550) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X547,X548,bool,bool)))) | s(bool,'T_0') = s(bool,X551) | s(bool,X549) = s(bool,X551)) )),
  inference(forward_demodulation,[],[f17408,f75])).
fof(f17408,plain,(
  ( ! [X549,X551,X547,X548,X550] : (s(bool,X550) != s(bool,f(s(bool,X549))) | s(fun(bool,bool),X547) = s(fun(bool,bool),X548) | s(bool,'T_0') = s(bool,X550) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X547,X548,bool,bool)))) | s(bool,'T_0') = s(bool,X551) | s(bool,sK6(X547,X548,bool,bool)) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X549) = s(bool,X551)) )),
  inference(superposition,[],[f1272,f5666])).
fof(f20697,plain,(
  ( ! [X511,X512,X513] : (s(X513,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) != s(X513,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,sK6(X511,X512,X513,bool)) | s(fun(bool,X513),X511) = s(fun(bool,X513),X512)) ) | $spl126),
  inference(cnf_transformation,[],[f20697_D])).
fof(f20697_D,plain,(
  ( ! [X511,X512,X513] : (s(X513,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) != s(X513,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(bool,'T_0') = s(bool,sK6(X511,X512,X513,bool)) | s(fun(bool,X513),X511) = s(fun(bool,X513),X512)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f20696,plain,(
  ( ! [X511,X516,X512,X514,X513,X515] : (s(X513,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) != s(X513,g(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))))) | s(fun(bool,X513),X511) = s(fun(bool,X513),X512) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X514))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X515))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X516))) | s(bool,'T_0') = s(bool,sK6(X511,X512,X513,bool))) ) | $spl8),
  inference(forward_demodulation,[],[f13281,f189])).
fof(f20678,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f20677,f20673])).
fof(f20677,plain,(
  p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) | $spl8),
  inference(forward_demodulation,[],[f20676,f189])).
fof(f20676,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X0,X1,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))))) ) | $spl8),
  inference(subsumption_resolution,[],[f1942,f20673])).
fof(f20650,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(fun(X127,bool),X128) = s(fun(X127,bool),X129) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X124))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X125))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X126))) | s(bool,'T_0') = s(bool,g(s(X127,sK6(X128,X129,bool,X127))))) ) | $spl8),
  inference(subsumption_resolution,[],[f20649,f189])).
fof(f20649,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (s(bool,f(s(X127,sK6(X128,X129,bool,X127)))) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X127,bool),X128) = s(fun(X127,bool),X129) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X124))),s('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),X125))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X126))) | s(bool,'T_0') = s(bool,g(s(X127,sK6(X128,X129,bool,X127))))) ) | $spl8),
  inference(forward_demodulation,[],[f6609,f189])).
fof(f9966,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1)) ) | $spl64),
  inference(cnf_transformation,[],[f9966_D])).
fof(f9966_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f20633,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X44) | s(bool,X44) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl28)),
  inference(global_subsumption,[],[f20632,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f766,f510,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f3018,f284,f218,f213,f212,f75,f38,f9888,f9884,f9858,f9839,f9245,f9246,f9807,f9692,f10132,f9612,f9640,f10249,f10195,f11775,f11792,f12102,f12115,f12140,f12142,f12150,f12152,f11934,f12155,f12220,f12218,f12236,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f18730,f16934,f18750,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19079,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f13559,f13571,f13380,f14184,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19377,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19340,f17696,f19304,f19178,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365])).
fof(f20632,plain,(
  ( ! [X43,X44] : (s(bool,X43) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | ($spl12 | $spl28)),
  inference(forward_demodulation,[],[f10209,f6260])).
fof(f20631,plain,(
  $false | ($spl0 | $spl2 | $spl8 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f20630,f37])).
fof(f20630,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2 | $spl8 | $spl12 | $spl24)),
  inference(forward_demodulation,[],[f38,f20573])).
fof(f20573,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl2 | $spl8 | $spl12 | $spl24)),
  inference(global_subsumption,[],[f20572,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f766,f510,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f3018,f284,f218,f213,f212,f75,f38,f9888,f9884,f9858,f9839,f9245,f9246,f9807,f9692,f10132,f9612,f9640,f10249,f10195,f11775,f11792,f12102,f12115,f12140,f12142,f12150,f12152,f11934,f12155,f12220,f12218,f12236,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f18730,f16934,f18750,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19079,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f62,f6618,f6619,f19954,f11274,f11275,f12151,f17104,f17845,f9145,f9806,f9700,f19900,f19898,f9649,f9589,f11789,f14144,f14145,f14097,f14170,f18614,f18647,f18726,f18727,f18728,f18794,f18898,f18954,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f13559,f13571,f13380,f14184,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f17059,f17087,f18252,f17106,f18807,f19377,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19340,f17696,f19304,f19178,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365])).
fof(f62,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl2),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f20572,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl8 | $spl24)),
  inference(duplicate_literal_removal,[],[f20571])).
fof(f20571,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,g(s(X1,sK6(X2,X3,bool,X1)))) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl8 | $spl24)),
  inference(condensation,[],[f20570])).
fof(f20570,plain,(
  ( ! [X263,X265,X267,X262,X264,X266] : (s(fun(X262,bool),X263) = s(fun(X262,bool),X264) | s(bool,X265) = s(bool,g(s(X262,sK6(X263,X264,bool,X262)))) | s(bool,'T_0') = s(bool,X265) | s(bool,'T_0') = s(bool,X266) | s(bool,X266) = s(bool,X267)) ) | ($spl0 | $spl8 | $spl24)),
  inference(subsumption_resolution,[],[f20569,f5993])).
fof(f20569,plain,(
  ( ! [X263,X265,X267,X262,X264,X266] : (s(bool,'F_0') = s(bool,X267) | s(fun(X262,bool),X263) = s(fun(X262,bool),X264) | s(bool,X265) = s(bool,g(s(X262,sK6(X263,X264,bool,X262)))) | s(bool,'T_0') = s(bool,X265) | s(bool,'T_0') = s(bool,X266) | s(bool,X266) = s(bool,X267)) ) | ($spl0 | $spl8)),
  inference(forward_demodulation,[],[f20568,f61])).
fof(f20568,plain,(
  ( ! [X263,X265,X267,X262,X264,X266] : (s(fun(X262,bool),X263) = s(fun(X262,bool),X264) | s(bool,X265) = s(bool,g(s(X262,sK6(X263,X264,bool,X262)))) | s(bool,'T_0') = s(bool,X265) | s(bool,'T_0') = s(bool,X266) | s(bool,X267) = s(bool,f(s(X262,sK6(X263,X264,bool,X262)))) | s(bool,X266) = s(bool,X267)) ) | $spl8),
  inference(subsumption_resolution,[],[f17175,f189])).
fof(f17175,plain,(
  ( ! [X263,X265,X267,X262,X264,X266] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(X262,bool),X263) = s(fun(X262,bool),X264) | s(bool,X265) = s(bool,g(s(X262,sK6(X263,X264,bool,X262)))) | s(bool,'T_0') = s(bool,X265) | s(bool,'T_0') = s(bool,X266) | s(bool,X267) = s(bool,f(s(X262,sK6(X263,X264,bool,X262)))) | s(bool,X266) = s(bool,X267)) )),
  inference(superposition,[],[f1394,f5666])).
fof(f20577,plain,(
  $false | ($spl0 | $spl17)),
  inference(subsumption_resolution,[],[f221,f61])).
fof(f20574,plain,(
  $false | ($spl0 | $spl2 | $spl8 | $spl12 | $spl24 | $spl37)),
  inference(subsumption_resolution,[],[f6312,f20573])).
fof(f20555,plain,(
  $false | ($spl12 | $spl30 | $spl34 | $spl37)),
  inference(subsumption_resolution,[],[f6312,f20367])).
fof(f20367,plain,(
  ( ! [X560] : (s(bool,'T_0') = s(bool,X560)) ) | ($spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f450,f503,f1178,f1687,f1688,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f5084,f6097,f6098,f4300,f4742,f4659,f4719,f6324,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f491,f766,f510,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f3018,f284,f218,f213,f212,f75,f38,f6731,f8170,f8172,f9888,f9884,f9858,f9839,f9245,f9246,f9807,f9692,f9522,f10132,f9612,f9640,f10249,f10195,f11775,f11792,f12102,f12115,f12140,f12142,f12150,f12152,f11934,f12155,f12220,f12218,f12236,f12459,f12460,f12462,f13519,f13281,f13599,f14136,f14122,f14071,f14967,f14970,f14977,f16501,f18600,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18714,f18730,f16934,f16937,f18750,f18751,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19079,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6307,f6618,f6619,f8268,f19954,f11274,f11275,f12151,f17104,f17845,f8362,f8364,f8169,f8312,f8367,f8307,f8370,f8304,f8290,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f19919,f8891,f9145,f9838,f9806,f9804,f9700,f9675,f19900,f19898,f9649,f9589,f9647,f10269,f10283,f11312,f12039,f11789,f19882,f12317,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19068,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f9142,f9144,f9147,f9641,f9635,f9631,f10264,f10266,f10185,f10273,f10206,f10208,f10211,f12021,f12015,f11786,f11788,f11791,f11999,f11993,f19656,f19625,f19623,f19621,f13559,f13571,f13380,f14184,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18680,f18385,f18380,f18362,f18337,f19435,f19428,f18258,f17052,f17053,f17054,f18767,f17059,f17087,f18252,f17106,f18807,f19377,f19049,f19369,f18017,f18011,f18010,f19083,f17634,f17635,f17636,f17639,f17641,f19340,f17696,f19304,f19178,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365])).
fof(f6760,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl30),
  inference(condensation,[],[f6759])).
fof(f6759,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,g(s(bool,'T_0'))) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl30),
  inference(duplicate_literal_removal,[],[f6709])).
fof(f6709,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl30),
  inference(superposition,[],[f6307,f1178])).
fof(f6690,plain,(
  ( ! [X8,X9] : (s(bool,X8) = s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl30),
  inference(superposition,[],[f6307,f54])).
fof(f6688,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl30),
  inference(superposition,[],[f6307,f1178])).
fof(f20548,plain,(
  $false | ($spl12 | $spl29 | $spl30 | $spl34 | $spl70)),
  inference(subsumption_resolution,[],[f6261,f20507])).
fof(f20507,plain,(
  ( ! [X91] : (s(bool,X91) = s(bool,g(s(bool,'T_0')))) ) | ($spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f20386,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8362,f8364,f8169,f8312,f8367,f8307,f8370,f8290,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f4123,f4178,f4441,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18252,f17106,f19377,f18017,f18011,f17634,f19340,f17696,f17842,f17843,f17912,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365])).
fof(f20386,plain,(
  ( ! [X91] : (s(bool,X91) = s(bool,g(s(bool,'T_0'))) | s(bool,X91) != s(bool,f(s(bool,X91)))) ) | ($spl12 | $spl30 | $spl34 | $spl70)),
  inference(backward_demodulation,[],[f20367,f10103])).
fof(f20544,plain,(
  $false | ($spl12 | $spl17 | $spl30 | $spl34)),
  inference(subsumption_resolution,[],[f20543,f20367])).
fof(f20543,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl12 | $spl17 | $spl30 | $spl34)),
  inference(forward_demodulation,[],[f221,f20367])).
fof(f20504,plain,(
  $false | ($spl12 | $spl30 | $spl34)),
  inference(subsumption_resolution,[],[f20368,f37])).
fof(f20368,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl30 | $spl34)),
  inference(backward_demodulation,[],[f20367,f38])).
fof(f20366,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286,f17905,f17904,f17898,f17897,f17891,f20365])).
fof(f19928,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f8234,f191])).
fof(f8234,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl34)),
  inference(superposition,[],[f191,f6310])).
fof(f19930,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f8233,f191])).
fof(f8233,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl34),
  inference(superposition,[],[f75,f6310])).
fof(f19941,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f8167,f191])).
fof(f8167,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl34),
  inference(superposition,[],[f6310,f75])).
fof(f8363,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl11 | $spl34)),
  inference(forward_demodulation,[],[f8143,f75])).
fof(f8143,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl34)),
  inference(unit_resulting_resolution,[],[f191,f6310])).
fof(f20364,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286,f17905,f17904,f17898,f17897,f17891])).
fof(f20363,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286,f17905,f17904,f17898,f17897])).
fof(f20362,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286,f17905,f17904,f17898])).
fof(f20361,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286,f17905,f17904])).
fof(f20360,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286,f17905])).
fof(f20359,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855,f19286])).
fof(f20358,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289,f17855])).
fof(f20357,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912,f19289])).
fof(f20356,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843,f17912])).
fof(f20355,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842,f17843])).
fof(f20354,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696,f17842])).
fof(f20353,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19216,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20352,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19211,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20351,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19180,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20350,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19178,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20349,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19301,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20348,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19304,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20347,plain,(
  $false | ($spl6 | $spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19321,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20346,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329,f17696])).
fof(f20345,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340,f19329])).
fof(f20344,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634,f19340])).
fof(f20343,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19344,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20342,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19347,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20341,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17644,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20340,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17641,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20339,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17639,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20338,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17637,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20337,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17636,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20336,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17635,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20335,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011,f17634])).
fof(f20334,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19357,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011])).
fof(f20333,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19359,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011])).
fof(f20332,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19083,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011])).
fof(f20331,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f18010,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011])).
fof(f20330,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017,f18011])).
fof(f20329,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377,f18017])).
fof(f20328,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19369,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377])).
fof(f20327,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19049,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377])).
fof(f20326,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19374,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377])).
fof(f20325,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206,f19377])).
fof(f20324,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19379,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20323,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17508,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20322,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19383,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20321,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19389,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20320,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19392,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20319,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19394,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20318,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106,f17206])).
fof(f20317,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19397,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106])).
fof(f20316,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19404,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106])).
fof(f20315,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19409,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106])).
fof(f20314,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f18807,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106])).
fof(f20313,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19412,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106])).
fof(f20312,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252,f17106])).
fof(f20311,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253,f18252])).
fof(f20310,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087,f18253])).
fof(f20309,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052,f17087])).
fof(f20308,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f18768,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20307,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17059,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20306,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f18767,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20305,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f18766,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20304,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17054,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20303,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17053,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20302,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258,f17052])).
fof(f20301,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428,f18258])).
fof(f20300,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337,f19428])).
fof(f20299,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17024,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337])).
fof(f20298,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f17005,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337])).
fof(f20297,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19435,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337])).
fof(f20296,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362,f18337])).
fof(f20295,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380,f18362])).
fof(f20294,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385,f18380])).
fof(f20293,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401,f18385])).
fof(f20292,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f18680,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401])).
fof(f20291,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444,f18401])).
fof(f20290,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478,f18444])).
fof(f20289,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511,f18478])).
fof(f20288,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19445,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511])).
fof(f20287,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553,f18511])).
fof(f20286,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567,f18553])).
fof(f20285,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428,f16567])).
fof(f20284,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15583,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20283,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15631,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20282,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15625,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20281,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15576,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20280,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15575,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20279,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15574,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20278,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15573,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20277,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15570,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20276,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15567,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20275,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15593,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20274,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19461,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20273,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15619,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20272,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19464,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20271,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19467,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20270,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19471,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f19471,plain,(
  ( ! [X94] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X94) != s(bool,g(s(bool,X94))) | s(bool,'T_0') = s(bool,X94)) ) | ($spl12 | $spl34 | $spl76)),
  inference(forward_demodulation,[],[f15547,f218])).
fof(f15547,plain,(
  ( ! [X94] : (s(bool,X94) != s(bool,g(s(bool,X94))) | s(bool,g(s(bool,'T_0'))) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X94)) ) | ($spl34 | $spl76)),
  inference(superposition,[],[f10519,f6310])).
fof(f20269,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19473,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20268,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19475,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f19475,plain,(
  ( ! [X58] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl12 | $spl34 | $spl76)),
  inference(subsumption_resolution,[],[f15519,f9640])).
fof(f15519,plain,(
  ( ! [X58] : (s(bool,g(s(bool,'T_0'))) != s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,X58) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl34 | $spl76)),
  inference(superposition,[],[f10519,f6310])).
fof(f20267,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f15594,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20266,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19480,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20265,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19483,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20264,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19488,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20263,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19491,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20262,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19496,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20261,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19499,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20260,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19503,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20259,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19506,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20258,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl76)),
  inference(global_subsumption,[],[f19509,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20257,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426,f15428])).
fof(f20256,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030,f15426])).
fof(f20255,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200,f14030])).
fof(f20254,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380,f14200])).
fof(f20253,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f14199,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20252,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19523,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20251,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f14184,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20250,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8087,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20249,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f7939,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20248,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f444,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20247,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571,f13380])).
fof(f20246,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19541,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571])).
fof(f20245,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f13359,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571])).
fof(f20244,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621,f13571])).
fof(f20243,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19551,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20242,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19553,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20241,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19556,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20240,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19559,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20239,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f13559,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20238,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12550,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f12550,plain,(
  ( ! [X53] : (s(bool,X53) != s(bool,g(s(bool,'T_0'))) | s(bool,X53) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,f(s(bool,X53)))) ) | ($spl34 | $spl70)),
  inference(superposition,[],[f10103,f6310])).
fof(f20237,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f12618,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20236,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12616,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20235,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12547,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20234,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12612,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20233,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12608,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20232,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12541,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20231,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12540,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20230,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12539,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20229,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12538,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20228,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19575,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20227,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12536,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20226,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12602,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20225,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12600,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20224,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12533,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20223,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f12532,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20222,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19587,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f19587,plain,(
  ( ! [X50] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl12 | $spl34 | $spl70)),
  inference(subsumption_resolution,[],[f12498,f9640])).
fof(f12498,plain,(
  ( ! [X50] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(bool,g(s(bool,'T_0'))))) | s(bool,X50) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X50)) ) | ($spl34 | $spl70)),
  inference(superposition,[],[f10103,f6310])).
fof(f20221,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19590,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20220,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19593,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20219,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19596,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20218,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34 | $spl70)),
  inference(global_subsumption,[],[f19598,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20217,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12388,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20216,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12377,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20215,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19604,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20214,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12418,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20213,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12362,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20212,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12415,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20211,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12356,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20210,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12355,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20209,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19612,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20208,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19615,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20207,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12346,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20206,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12343,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20205,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12341,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20204,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623,f19621])).
fof(f20203,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625,f19623])).
fof(f20202,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986,f19625])).
fof(f20201,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12222,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20200,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19652,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20199,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11851,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20198,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19656,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20197,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11993,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20196,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11999,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20195,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11791,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20194,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11788,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20193,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11786,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20192,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12015,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20191,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12021,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20190,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10211,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20189,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10208,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20188,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10206,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20187,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10273,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20186,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10272,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20185,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10185,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20184,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10266,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20183,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10264,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20182,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10262,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20181,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl68)),
  inference(global_subsumption,[],[f10102,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20180,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9631,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20179,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9635,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20178,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9641,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20177,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19682,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20176,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19687,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20175,plain,(
  $false | ($spl11 | $spl12 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19691,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20174,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10109,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20173,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9486,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20172,plain,(
  $false | ($spl11 | $spl12 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10063,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20171,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10060,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20170,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10005,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20169,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9147,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20168,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9144,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20167,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9142,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20166,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9057,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20165,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8753,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20164,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19703,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20163,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19706,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20162,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8765,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20161,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8769,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20160,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8780,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20159,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8783,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20158,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8729,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20157,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8727,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20156,plain,(
  $false | ($spl11 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8706,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20155,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8227,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f8227,plain,(
  ( ! [X58] : (p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,f(s(bool,X58)))) ) | ($spl20 | $spl34)),
  inference(superposition,[],[f444,f6310])).
fof(f20154,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19716,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f19716,plain,(
  ( ! [X57] : (s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,f(s(bool,X57)))) ) | ($spl17 | $spl34)),
  inference(subsumption_resolution,[],[f8226,f6310])).
fof(f8226,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,f(s(bool,X57)))) ) | ($spl17 | $spl34)),
  inference(superposition,[],[f6464,f6310])).
fof(f20153,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19721,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20152,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19726,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20151,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19728,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20150,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8137,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20149,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8135,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20148,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19732,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20147,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8132,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20146,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8105,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20145,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8111,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20144,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8128,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20143,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8121,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20142,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8124,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20141,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8018,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f8018,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl20)),
  inference(subsumption_resolution,[],[f7997,f191])).
fof(f20140,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701,f7986])).
fof(f20139,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f7971,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20138,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f7967,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20137,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19745,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20136,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19748,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20135,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19751,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20134,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19753,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20133,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f7956,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20132,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f7949,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20131,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f7952,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f7952,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl11 | $spl20)),
  inference(forward_demodulation,[],[f7887,f75])).
fof(f7887,plain,(
  p(s(bool,f(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))))) | ($spl11 | $spl20)),
  inference(unit_resulting_resolution,[],[f191,f444])).
fof(f20130,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6512,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20129,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6508,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20128,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6486,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20127,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6485,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20126,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6482,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20125,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6501,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20124,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6499,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20123,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6479,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20122,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6491,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20121,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6477,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20120,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6475,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20119,plain,(
  $false | ($spl6 | $spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6424,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f6424,plain,(
  p(s(bool,f(s(bool,'F_0')))) | ($spl6 | $spl17)),
  inference(unit_resulting_resolution,[],[f221,f87])).
fof(f20118,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6425,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20117,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6426,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20116,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6440,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20115,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6442,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20114,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f221,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20113,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703,f4701])).
fof(f20112,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709,f4703])).
fof(f20111,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720,f4709])).
fof(f20110,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722,f4720])).
fof(f20109,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729,f4722])).
fof(f20108,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737,f4729])).
fof(f20107,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743,f4737])).
fof(f20106,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496,f4743])).
fof(f20105,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810,f4496])).
fof(f20104,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441,f19810])).
fof(f20103,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178,f4441])).
fof(f20102,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814,f4178])).
fof(f20101,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123,f19814])).
fof(f20100,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817,f4123])).
fof(f20099,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202,f19817])).
fof(f20098,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271,f202])).
fof(f20097,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270,f19271])).
fof(f20096,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248,f19270])).
fof(f20095,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700,f19248])).
fof(f20094,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146,f17700])).
fof(f20093,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145,f19146])).
fof(f20092,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144,f19145])).
fof(f20091,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986,f19144])).
fof(f20090,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071,f17986])).
fof(f20089,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065,f19071])).
fof(f20088,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19068,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065])).
fof(f20087,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064,f19065])).
fof(f20086,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972,f19064])).
fof(f20085,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971,f18972])).
fof(f20084,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967,f18971])).
fof(f20083,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964,f18967])).
fof(f20082,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955,f18964])).
fof(f20081,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954,f18955])).
fof(f20080,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898,f18954])).
fof(f20079,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802,f18898])).
fof(f20078,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794,f18802])).
fof(f20077,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255,f18794])).
fof(f20076,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728,f18255])).
fof(f20075,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727,f18728])).
fof(f20074,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726,f18727])).
fof(f20073,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356,f18726])).
fof(f20072,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647,f18356])).
fof(f20071,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643,f18647])).
fof(f20070,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617,f18643])).
fof(f20069,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614,f18617])).
fof(f20068,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557,f18614])).
fof(f20067,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960,f18557])).
fof(f20066,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063,f14960])).
fof(f20065,plain,(
  $false | ($spl6 | $spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19867,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063])).
fof(f20064,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170,f14063])).
fof(f20063,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097,f14170])).
fof(f20062,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118,f14097])).
fof(f20061,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145,f14118])).
fof(f20060,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144,f14145])).
fof(f20059,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432,f14144])).
fof(f20058,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503,f13432])).
fof(f20057,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882,f13503])).
fof(f20056,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12426,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882])).
fof(f12426,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | ($spl12 | $spl24 | $spl34)),
  inference(condensation,[],[f12425])).
fof(f12425,plain,(
  ( ! [X70] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X70)) ) | ($spl12 | $spl24 | $spl34)),
  inference(subsumption_resolution,[],[f12382,f39])).
fof(f12382,plain,(
  ( ! [X70] : (s(bool,'F_0') != s(bool,X70) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X70)) ) | ($spl12 | $spl24 | $spl34)),
  inference(superposition,[],[f12163,f6310])).
fof(f20055,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12403,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882])).
fof(f20054,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12317,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882])).
fof(f20053,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312,f19882])).
fof(f20052,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11789,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312])).
fof(f20051,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12039,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312])).
fof(f20050,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891,f11312])).
fof(f20049,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10283,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20048,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10269,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20047,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl64)),
  inference(global_subsumption,[],[f9966,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20046,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9647,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20045,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f10135,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20044,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9589,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20043,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9649,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20042,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19898,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20041,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19900,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20040,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19902,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20039,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9675,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20038,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9700,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20037,plain,(
  $false | ($spl6 | $spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19906,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f19906,plain,(
  ( ! [X26,X25] : (s(bool,'F_0') = s(bool,X25) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl6 | $spl12)),
  inference(subsumption_resolution,[],[f9376,f56])).
fof(f9376,plain,(
  ( ! [X26,X25] : (p(s(bool,X26)) | s(bool,'F_0') = s(bool,X25) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl6 | $spl12)),
  inference(superposition,[],[f87,f3018])).
fof(f20036,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9804,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20035,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9806,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20034,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19910,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20033,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9838,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20032,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9145,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20031,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f9064,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20030,plain,(
  $false | ($spl6 | $spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19915,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f19915,plain,(
  ( ! [X58] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl6 | $spl34)),
  inference(subsumption_resolution,[],[f8998,f56])).
fof(f8998,plain,(
  ( ! [X58] : (p(s(bool,X58)) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl6 | $spl34)),
  inference(superposition,[],[f87,f6310])).
fof(f20029,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269,f8891])).
fof(f20028,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19919,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269])).
fof(f20027,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383,f8269])).
fof(f20026,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381,f8383])).
fof(f20025,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241,f8381])).
fof(f20024,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240,f8241])).
fof(f20023,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239,f8240])).
fof(f20022,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236,f8239])).
fof(f20021,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928,f8236])).
fof(f20020,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930,f19928])).
fof(f20019,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290,f19930])).
fof(f20018,plain,(
  $false | ($spl11 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8287,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290])).
fof(f8287,plain,(
  ( ! [X56] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X56)) ) | ($spl17 | $spl34)),
  inference(duplicate_literal_removal,[],[f8225])).
fof(f8225,plain,(
  ( ! [X56] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(bool,g(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) ) | ($spl17 | $spl34)),
  inference(superposition,[],[f6464,f6310])).
fof(f20017,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370,f8290])).
fof(f20016,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8304,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370])).
fof(f20015,plain,(
  $false | ($spl11 | $spl20 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f8305,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370])).
fof(f8305,plain,(
  ( ! [X19] : (p(s(bool,f(s(bool,g(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl20 | $spl34)),
  inference(duplicate_literal_removal,[],[f8214])).
fof(f8214,plain,(
  ( ! [X19] : (p(s(bool,f(s(bool,g(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | ($spl20 | $spl34)),
  inference(superposition,[],[f444,f6310])).
fof(f20014,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307,f8370])).
fof(f20013,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367,f8307])).
fof(f20012,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312,f8367])).
fof(f20011,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169,f8312])).
fof(f20010,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941,f8169])).
fof(f20009,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364,f19941])).
fof(f20008,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362,f8364])).
fof(f20007,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363,f8362])).
fof(f20006,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845,f8363])).
fof(f20005,plain,(
  $false | ($spl11 | $spl29 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f6261,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845])).
fof(f20004,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f6307,f6618,f6619,f8268,f11274,f11275,f17104,f17845])).
fof(f20003,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f6307,f6618,f6619,f8268,f11274,f11275,f17104])).
fof(f20002,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f12151,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f6307,f6618,f6619,f8268,f11274,f11275])).
fof(f20001,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f6307,f6618,f6619,f8268,f11274,f11275])).
fof(f20000,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f6307,f6618,f6619,f8268,f11274])).
fof(f19999,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f11310,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f6307,f6618,f6619,f8268])).
fof(f19998,plain,(
  $false | ($spl11 | $spl12 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f19954,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f6307,f6618,f6619,f8268])).
fof(f19997,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f6307,f6618,f6619,f8268])).
fof(f19996,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6307,f6618,f6619])).
fof(f19995,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6307,f6618])).
fof(f19994,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl118)),
  inference(global_subsumption,[],[f19269,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19993,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl116)),
  inference(global_subsumption,[],[f19266,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19992,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl114)),
  inference(global_subsumption,[],[f19263,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19991,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl112)),
  inference(global_subsumption,[],[f19260,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19990,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl110)),
  inference(global_subsumption,[],[f19257,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19989,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl108)),
  inference(global_subsumption,[],[f19251,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19988,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl102)),
  inference(global_subsumption,[],[f19078,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19987,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl100)),
  inference(global_subsumption,[],[f19077,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19986,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl92)),
  inference(global_subsumption,[],[f18998,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19985,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl90)),
  inference(global_subsumption,[],[f18729,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19984,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl82)),
  inference(global_subsumption,[],[f18608,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19983,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl80)),
  inference(global_subsumption,[],[f18604,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19982,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl78)),
  inference(global_subsumption,[],[f18601,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19981,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl46)),
  inference(global_subsumption,[],[f6318,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19980,plain,(
  $false | ($spl11 | $spl30 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f6312,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19979,plain,(
  $false | ($spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19978,plain,(
  $false | ($spl2 | $spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f62,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19977,plain,(
  $false | ($spl0 | $spl11 | $spl30 | $spl34)),
  inference(global_subsumption,[],[f61,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6310,f6616,f6617,f6688,f6690,f6760,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6731,f8170,f8172,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f16937,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f18025,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f13380,f13571,f19621,f19623,f19625,f7986,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f19810,f4441,f4178,f19814,f4123,f19817,f202,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f17986,f19071,f19065,f19064,f18972,f18971,f18967,f18964,f18955,f18954,f18898,f18802,f18794,f18255,f18728,f18727,f18726,f18356,f18647,f18643,f18617,f18614,f18557,f14960,f14063,f14170,f14097,f14118,f14145,f14144,f13432,f13503,f19882,f11312,f8891,f8269,f8383,f8381,f8241,f8240,f8239,f8236,f19928,f19930,f8290,f8370,f8307,f8367,f8312,f8169,f19941,f8364,f8362,f8363,f17845,f17104,f11275,f11274,f8268,f6619,f6618,f6307])).
fof(f19976,plain,(
  $false | ($spl0 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f61,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618,f6312])).
fof(f19975,plain,(
  $false | ($spl2 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f62,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618,f6312])).
fof(f19974,plain,(
  $false | ($spl30 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6307,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618,f6312])).
fof(f19973,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618,f6312])).
fof(f19972,plain,(
  $false | ($spl33 | $spl37 | $spl46)),
  inference(global_subsumption,[],[f6318,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19971,plain,(
  $false | ($spl33 | $spl37 | $spl78)),
  inference(global_subsumption,[],[f18601,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19970,plain,(
  $false | ($spl33 | $spl37 | $spl80)),
  inference(global_subsumption,[],[f18604,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19969,plain,(
  $false | ($spl33 | $spl37 | $spl82)),
  inference(global_subsumption,[],[f18608,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19968,plain,(
  $false | ($spl33 | $spl37 | $spl90)),
  inference(global_subsumption,[],[f18729,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19967,plain,(
  $false | ($spl33 | $spl37 | $spl92)),
  inference(global_subsumption,[],[f18998,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19966,plain,(
  $false | ($spl33 | $spl37 | $spl100)),
  inference(global_subsumption,[],[f19077,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19965,plain,(
  $false | ($spl33 | $spl37 | $spl102)),
  inference(global_subsumption,[],[f19078,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19964,plain,(
  $false | ($spl33 | $spl37 | $spl108)),
  inference(global_subsumption,[],[f19251,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19963,plain,(
  $false | ($spl33 | $spl37 | $spl110)),
  inference(global_subsumption,[],[f19257,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19962,plain,(
  $false | ($spl33 | $spl37 | $spl112)),
  inference(global_subsumption,[],[f19260,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19961,plain,(
  $false | ($spl33 | $spl37 | $spl114)),
  inference(global_subsumption,[],[f19263,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19960,plain,(
  $false | ($spl33 | $spl37 | $spl116)),
  inference(global_subsumption,[],[f19266,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19959,plain,(
  $false | ($spl33 | $spl37 | $spl118)),
  inference(global_subsumption,[],[f19269,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19958,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619,f6618])).
fof(f19957,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274,f6619])).
fof(f19956,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8268,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274])).
fof(f19955,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19954,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274])).
fof(f19953,plain,(
  $false | ($spl12 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11310,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274])).
fof(f19952,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275,f11274])).
fof(f19951,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104,f11275])).
fof(f19949,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12151,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104])).
fof(f19948,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845,f17104])).
fof(f19947,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144,f17845])).
fof(f19946,plain,(
  $false | ($spl29 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6261,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19945,plain,(
  $false | ($spl11 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8363,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19944,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8362,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19943,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8364,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19942,plain,(
  $false | ($spl11 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19941,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19940,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8169,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19939,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8312,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19938,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8367,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19937,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8307,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19936,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8370,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19935,plain,(
  $false | ($spl20 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8305,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19934,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8304,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19933,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8290,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19932,plain,(
  $false | ($spl17 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8287,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19931,plain,(
  $false | ($spl11 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19930,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19929,plain,(
  $false | ($spl11 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19928,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19927,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8236,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19926,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8239,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19925,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8240,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19924,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8241,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19923,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8381,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19922,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8383,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19921,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8269,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19920,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19919,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19917,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8891,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19916,plain,(
  $false | ($spl6 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19915,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19914,plain,(
  $false | ($spl12 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9064,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19913,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9145,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19912,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f9838,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19911,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19910,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19909,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9806,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19908,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f9804,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19907,plain,(
  $false | ($spl6 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19906,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19905,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9700,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19904,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f9675,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19903,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19902,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19901,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19900,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19899,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19898,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19897,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9649,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19896,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9589,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19895,plain,(
  $false | ($spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10135,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19894,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f9647,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19893,plain,(
  $false | ($spl33 | $spl37 | $spl64)),
  inference(global_subsumption,[],[f9966,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19892,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f10269,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19891,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f10283,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19890,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f11312,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19889,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f12039,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19884,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11789,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19883,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19882,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19880,plain,(
  $false | ($spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f12317,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19879,plain,(
  $false | ($spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12403,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19878,plain,(
  $false | ($spl12 | $spl24 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f12426,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19877,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f13503,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19876,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f13432,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19874,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145,f14144])).
fof(f19873,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097,f14145])).
fof(f19872,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f14118,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097])).
fof(f19871,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170,f14097])).
fof(f19870,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614,f14170])).
fof(f19869,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f14063,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614])).
fof(f19868,plain,(
  $false | ($spl6 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19867,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614])).
fof(f19865,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f14960,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614])).
fof(f19858,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18557,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614])).
fof(f19857,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647,f18614])).
fof(f19856,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18617,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647])).
fof(f19855,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18643,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647])).
fof(f19854,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726,f18647])).
fof(f19853,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18356,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726])).
fof(f19852,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727,f18726])).
fof(f19851,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728,f18727])).
fof(f19850,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794,f18728])).
fof(f19846,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18255,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794])).
fof(f19845,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898,f18794])).
fof(f19844,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18802,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898])).
fof(f19843,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954,f18898])).
fof(f19841,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964,f18954])).
fof(f19840,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18955,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964])).
fof(f19839,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967,f18964])).
fof(f19838,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971,f18967])).
fof(f19837,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972,f18971])).
fof(f19836,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980,f18972])).
fof(f19835,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064,f18980])).
fof(f19831,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065,f19064])).
fof(f19830,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071,f19065])).
fof(f19829,plain,(
  $false | ($spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19068,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071])).
fof(f19828,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144,f19071])).
fof(f19827,plain,(
  $false | ($spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f17986,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144])).
fof(f19826,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145,f19144])).
fof(f19825,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146,f19145])).
fof(f19824,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700,f19146])).
fof(f19823,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248,f17700])).
fof(f19822,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270,f19248])).
fof(f19821,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271,f19270])).
fof(f19820,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123,f19271])).
fof(f19819,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f202,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123])).
fof(f19818,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19817,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123])).
fof(f19816,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178,f4123])).
fof(f19815,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19814,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178])).
fof(f19813,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441,f4178])).
fof(f19812,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496,f4441])).
fof(f19811,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19810,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496])).
fof(f19809,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743,f4496])).
fof(f19808,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737,f4743])).
fof(f19807,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729,f4737])).
fof(f19806,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722,f4729])).
fof(f19803,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720,f4722])).
fof(f19802,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709,f4720])).
fof(f19801,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703,f4709])).
fof(f19800,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701,f4703])).
fof(f19799,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309,f4701])).
fof(f19798,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f221,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19797,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6442,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19796,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6440,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19795,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6426,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19794,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6425,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19793,plain,(
  $false | ($spl6 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6424,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19792,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6475,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19791,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6477,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19790,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6491,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19789,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6479,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19788,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6499,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19787,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6501,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19786,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6482,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19785,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6485,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19784,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6486,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19783,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6508,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19782,plain,(
  $false | ($spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f6512,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19781,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553,f6309])).
fof(f19780,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551,f7553])).
fof(f19779,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534,f7551])).
fof(f19778,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533,f7534])).
fof(f19777,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621,f7533])).
fof(f19776,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620,f7621])).
fof(f19775,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615,f7620])).
fof(f19774,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612,f7615])).
fof(f19773,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609,f7612])).
fof(f19772,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597,f7609])).
fof(f19771,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631,f7597])).
fof(f19770,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633,f7631])).
fof(f19769,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600,f7633])).
fof(f19768,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639,f7600])).
fof(f19767,plain,(
  $false | ($spl33 | $spl37 | $spl48)),
  inference(global_subsumption,[],[f19766,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639])).
fof(f19766,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl33 | $spl48)),
  inference(condensation,[],[f19765])).
fof(f19765,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl33 | $spl48)),
  inference(condensation,[],[f19764])).
fof(f19764,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl33 | $spl48)),
  inference(subsumption_resolution,[],[f7603,f6319])).
fof(f7603,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,f(s(bool,'T_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f19763,plain,(
  $false | ($spl33 | $spl37 | $spl48)),
  inference(global_subsumption,[],[f19762,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639])).
fof(f19762,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'F_0')) ) | ($spl33 | $spl48)),
  inference(condensation,[],[f19761])).
fof(f19761,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl33 | $spl48)),
  inference(condensation,[],[f19760])).
fof(f19760,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | ($spl33 | $spl48)),
  inference(subsumption_resolution,[],[f7604,f6319])).
fof(f7604,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,X13) = s(bool,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X13) = s(bool,f(s(bool,'T_0')))) ) | $spl33),
  inference(superposition,[],[f6309,f1178])).
fof(f19759,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643,f7639])).
fof(f19758,plain,(
  $false | ($spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f17912,f17843,f17842,f17696,f19340,f17634,f18011,f18017,f19377,f17106,f18252,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7643])).
fof(f19757,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f7952,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f6975,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl11 | $spl37)),
  inference(forward_demodulation,[],[f6926,f75])).
fof(f6926,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | ($spl11 | $spl37)),
  inference(unit_resulting_resolution,[],[f37,f191,f6312,f1687])).
fof(f19756,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f7949,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19755,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f7956,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19754,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19753,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19752,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19751,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19749,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19748,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19746,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19745,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19743,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f7967,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19742,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f7971,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19741,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625,f7986])).
fof(f19740,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8018,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19739,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8124,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19738,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8121,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19737,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8128,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19736,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8111,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19735,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8105,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19734,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8132,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19733,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19732,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19731,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8135,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19730,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8137,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19729,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19728,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19727,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19726,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19722,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19721,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19717,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f19716,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19715,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f8227,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19714,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8706,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19713,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8727,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19712,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8729,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19711,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8783,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19710,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8780,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19709,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8769,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19708,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8765,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19707,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19706,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19704,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19703,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19702,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8753,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19701,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9057,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19700,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9142,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19699,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9144,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19698,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9147,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19697,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10005,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19696,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10060,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19695,plain,(
  $false | ($spl11 | $spl12 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10063,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19694,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9486,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19693,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10109,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19692,plain,(
  $false | ($spl11 | $spl12 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19691,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19688,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19687,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19683,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19682,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19678,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9641,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19677,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9635,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19676,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f9631,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19675,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl68)),
  inference(global_subsumption,[],[f10102,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19674,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10262,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19673,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10264,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19672,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10266,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19671,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10185,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19670,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10272,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19669,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10273,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19668,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10206,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19667,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10208,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19666,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f10211,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19665,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12021,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19664,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12015,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19662,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11786,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19661,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11788,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19660,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11791,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19659,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11999,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19658,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11993,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19657,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19656,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19655,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f11851,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19653,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19652,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19646,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12222,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19626,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623,f19625])).
fof(f19624,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621,f19623])).
fof(f19622,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571,f19621])).
fof(f19619,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12341,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19618,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12343,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19617,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12346,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19616,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19615,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19613,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19612,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19610,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12355,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19609,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12356,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19608,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12415,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19607,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12362,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19606,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12418,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19605,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19604,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19603,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12377,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19600,plain,(
  $false | ($spl11 | $spl12 | $spl17 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f12388,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19599,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19598,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19597,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19596,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19594,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19593,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19591,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19590,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19588,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl34 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19587,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19581,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12532,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19580,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12533,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19579,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12600,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19578,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12602,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19577,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12536,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19576,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19575,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19573,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12538,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19572,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12539,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19571,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12540,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19570,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12541,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19569,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12608,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19568,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12612,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19567,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12547,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19566,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12616,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19565,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f12618,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19564,plain,(
  $false | ($spl11 | $spl33 | $spl34 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f12550,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19561,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f13559,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19560,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19559,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19557,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19556,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19554,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19553,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19552,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19551,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19549,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380,f13571])).
fof(f19544,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f13359,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380])).
fof(f19542,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19541,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380])).
fof(f19538,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580,f13380])).
fof(f19537,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f444,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580])).
fof(f19536,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582,f7580])).
fof(f19535,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200,f7582])).
fof(f19534,plain,(
  $false | ($spl11 | $spl20 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f7939,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200])).
fof(f19533,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f8087,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200])).
fof(f19528,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f14184,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200])).
fof(f19524,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19523,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200])).
fof(f19521,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f14199,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200])).
fof(f19520,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030,f14200])).
fof(f19514,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426,f14030])).
fof(f19513,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428,f15426])).
fof(f19512,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567,f15428])).
fof(f19510,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19509,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19507,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19506,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19504,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19503,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19500,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19499,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19497,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19496,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19492,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19491,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19489,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19488,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19484,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19483,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19481,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19480,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19477,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15594,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19476,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl34 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19475,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19474,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19473,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19472,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl34 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19471,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19468,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19467,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19465,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19464,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19463,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15619,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19462,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19461,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19460,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15593,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19458,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15567,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19457,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15570,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19456,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15573,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19455,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15574,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19454,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15575,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19453,plain,(
  $false | ($spl11 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15576,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19452,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15625,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19451,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15631,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19450,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f15583,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19449,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553,f16567])).
fof(f19448,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511,f18553])).
fof(f19447,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478,f18511])).
fof(f19446,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19445,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478])).
fof(f19444,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444,f18478])).
fof(f19443,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401,f18444])).
fof(f19442,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385,f18401])).
fof(f19441,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f18680,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385])).
fof(f19440,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380,f18385])).
fof(f19439,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362,f18380])).
fof(f19438,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337,f18362])).
fof(f19437,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428,f18337])).
fof(f19436,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19435,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428])).
fof(f19432,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17005,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428])).
fof(f19430,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17024,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428])).
fof(f19429,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258,f19428])).
fof(f19427,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052,f18258])).
fof(f19426,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087,f17052])).
fof(f19425,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17053,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19424,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17054,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19423,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f18766,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19422,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl34 | $spl37)),
  inference(global_subsumption,[],[f18767,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19421,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17059,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19420,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f18768,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19417,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253,f17087])).
fof(f19416,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252,f18253])).
fof(f19415,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106,f18252])).
fof(f19414,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206,f17106])).
fof(f19413,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19412,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206])).
fof(f19411,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f18807,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206])).
fof(f19410,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19409,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206])).
fof(f19405,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19404,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206])).
fof(f19398,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19397,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206])).
fof(f19396,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377,f17206])).
fof(f19395,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19394,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19393,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19392,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19390,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19389,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19384,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19383,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19381,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17508,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19380,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19379,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19378,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017,f19377])).
fof(f19375,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19374,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017])).
fof(f19371,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19049,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017])).
fof(f19370,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19369,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017])).
fof(f19364,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011,f18017])).
fof(f19363,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634,f18011])).
fof(f19362,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f18010,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634])).
fof(f19361,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19083,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634])).
fof(f19360,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19359,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634])).
fof(f19358,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19357,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634])).
fof(f19355,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340,f17634])).
fof(f19354,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17635,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19353,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17636,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19352,plain,(
  $false | ($spl11 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17637,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19351,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17639,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19350,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17641,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19349,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f17644,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19348,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19347,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19345,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19344,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19341,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329,f19340])).
fof(f19330,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696,f19329])).
fof(f19325,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842,f17696])).
fof(f19322,plain,(
  $false | ($spl6 | $spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19321,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19305,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19304,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19302,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl76)),
  inference(global_subsumption,[],[f19301,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19297,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19178,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19296,plain,(
  $false | ($spl11 | $spl12 | $spl24 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19180,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19295,plain,(
  $false | ($spl11 | $spl17 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f19211,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19294,plain,(
  $false | ($spl11 | $spl12 | $spl33 | $spl37 | $spl70)),
  inference(global_subsumption,[],[f19216,f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19293,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843,f17842])).
fof(f19292,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912,f17843])).
fof(f19291,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289,f17912])).
fof(f19290,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855,f19289])).
fof(f19288,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286,f17855])).
fof(f19287,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905,f19286])).
fof(f19285,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904,f17905])).
fof(f19284,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898,f17904])).
fof(f19283,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897,f17898])).
fof(f19282,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891,f17897])).
fof(f19281,plain,(
  $false | ($spl11 | $spl33 | $spl37)),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f31,f146,f151,f176,f191,f214,f216,f1178,f1687,f1393,f3021,f5884,f5680,f5666,f3627,f3884,f6029,f4080,f6097,f4300,f4742,f4659,f4719,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6349,f6348,f6347,f6312,f6616,f6617,f6975,f6930,f6932,f3668,f3626,f3587,f3509,f1198,f1156,f53,f1942,f2178,f6041,f6137,f6102,f6101,f6039,f6037,f6035,f6033,f1690,f1689,f516,f467,f341,f47,f45,f44,f43,f42,f41,f986,f46,f40,f6031,f6329,f6674,f6663,f6609,f4301,f4179,f4081,f3885,f1394,f1272,f284,f213,f212,f75,f38,f6309,f7580,f7582,f7635,f12220,f12218,f12459,f12460,f12462,f13519,f13281,f14136,f14122,f14071,f14967,f14970,f16501,f16503,f18580,f18559,f18558,f18556,f18610,f18612,f18618,f18648,f18395,f18681,f18357,f18338,f18730,f16934,f18750,f18256,f18775,f18777,f18779,f17102,f17105,f18840,f18843,f18975,f18976,f18029,f17554,f17992,f19225,f19250,f19254,f19256,f19259,f19262,f19265,f19268,f17841,f17844,f17858,f17903,f17891])).
fof(f19274,plain,(
  ( ! [X2,X1] : (s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl120),
  inference(cnf_transformation,[],[f19274_D])).
fof(f19274_D,plain,(
  ( ! [X2,X1] : (s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f17858,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f5666])).
fof(f18729,plain,(
  ( ! [X279,X281,X278] : (s(bool,X281) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X278) = s(fun(bool,bool),X279) | s(bool,X281) = s(bool,sK6(X278,X279,bool,bool))) ) | $spl90),
  inference(cnf_transformation,[],[f18729_D])).
fof(f18729_D,plain,(
  ( ! [X279,X281,X278] : (s(bool,X281) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(fun(bool,bool),X278) = s(fun(bool,bool),X279) | s(bool,X281) = s(bool,sK6(X278,X279,bool,bool))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f17913,plain,(
  ( ! [X528,X530,X529,X527] : (s(bool,'T_0') = s(bool,X529) | s(fun(bool,bool),X527) = s(fun(bool,bool),X528) | s(bool,X530) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X530) = s(bool,sK6(X527,X528,bool,bool))) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f17840])).
fof(f17840,plain,(
  ( ! [X528,X530,X529,X527] : (s(bool,'T_0') = s(bool,X529) | s(fun(bool,bool),X527) = s(fun(bool,bool),X528) | s(bool,'T_0') = s(bool,X529) | s(bool,X530) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X530) = s(bool,sK6(X527,X528,bool,bool))) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f6325,f5666])).
fof(f19269,plain,(
  ( ! [X494,X496,X493] : (s(bool,'F_0') = s(bool,X496) | s(bool,X496) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X493,X494,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X494),s('type.modSem.state'(sK0),X493))))) ) | $spl118),
  inference(cnf_transformation,[],[f19269_D])).
fof(f19269_D,plain,(
  ( ! [X494,X496,X493] : (s(bool,'F_0') = s(bool,X496) | s(bool,X496) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X493,X494,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2))) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X494),s('type.modSem.state'(sK0),X493))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f19268,plain,(
  ( ! [X494,X496,X493,X495] : (s(bool,'F_0') = s(bool,X496) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X494),s('type.modSem.state'(sK0),X493)))) | s(bool,'T_0') = s(bool,X495) | s(bool,X496) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X493,X494,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(forward_demodulation,[],[f19267,f75])).
fof(f19267,plain,(
  ( ! [X494,X496,X493,X495] : (p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X494),s('type.modSem.state'(sK0),X493)))) | s(bool,'T_0') = s(bool,X495) | s(bool,X496) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X496) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X493,X494,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(subsumption_resolution,[],[f17834,f56])).
fof(f17834,plain,(
  ( ! [X494,X496,X493,X495] : (p(s(bool,X495)) | p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),X494),s('type.modSem.state'(sK0),X493)))) | s(bool,'T_0') = s(bool,X495) | s(bool,X496) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X496) = s(bool,happ(s(fun('type.modSem.state'(sK0),bool),happ(s(fun('type.semanticPrimitives.state'(sK0),fun('type.modSem.state'(sK0),bool)),sK5(X493,X494,sK0)),s('type.semanticPrimitives.state'(sK0),sK1))),s('type.modSem.state'(sK0),sK2)))) )),
  inference(superposition,[],[f1942,f5666])).
fof(f19265,plain,(
  ( ! [X492,X488,X490,X487,X489,X491] : (s(bool,'F_0') = s(bool,X492) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X487),sK3(X488,X490,X489,X487)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X487),sK4(X488,X490,X489,X487)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X487),X489),s('type.modSem.state'(X487),X490)))) | s(bool,'T_0') = s(bool,X491) | s(bool,X492) = s(bool,happ(s(fun('type.modSem.state'(X487),bool),happ(s(fun('type.semanticPrimitives.state'(X487),fun('type.modSem.state'(X487),bool)),X488),s('type.semanticPrimitives.state'(X487),X489))),s('type.modSem.state'(X487),X490)))) )),
  inference(forward_demodulation,[],[f19264,f75])).
fof(f19264,plain,(
  ( ! [X492,X488,X490,X487,X489,X491] : (s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X487),sK3(X488,X490,X489,X487)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X487),sK4(X488,X490,X489,X487)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X487),X489),s('type.modSem.state'(X487),X490)))) | s(bool,'T_0') = s(bool,X491) | s(bool,X492) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X492) = s(bool,happ(s(fun('type.modSem.state'(X487),bool),happ(s(fun('type.semanticPrimitives.state'(X487),fun('type.modSem.state'(X487),bool)),X488),s('type.semanticPrimitives.state'(X487),X489))),s('type.modSem.state'(X487),X490)))) )),
  inference(subsumption_resolution,[],[f17833,f56])).
fof(f17833,plain,(
  ( ! [X492,X488,X490,X487,X489,X491] : (p(s(bool,X491)) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X487),sK3(X488,X490,X489,X487)))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X487),sK4(X488,X490,X489,X487)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X487),X489),s('type.modSem.state'(X487),X490)))) | s(bool,'T_0') = s(bool,X491) | s(bool,X492) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X492) = s(bool,happ(s(fun('type.modSem.state'(X487),bool),happ(s(fun('type.semanticPrimitives.state'(X487),fun('type.modSem.state'(X487),bool)),X488),s('type.semanticPrimitives.state'(X487),X489))),s('type.modSem.state'(X487),X490)))) )),
  inference(superposition,[],[f43,f5666])).
fof(f19262,plain,(
  ( ! [X484,X486,X482,X485,X481,X483] : (s(bool,'F_0') = s(bool,X486) | s('type.ffi.ffi_state'(X481),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X481),sK3(X482,X484,X483,X481)))) = s('type.ffi.ffi_state'(X481),'const.modSem.state_ffi_1'(s('type.modSem.state'(X481),sK4(X482,X484,X483,X481)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X481),X483),s('type.modSem.state'(X481),X484)))) | s(bool,'T_0') = s(bool,X485) | s(bool,X486) = s(bool,happ(s(fun('type.modSem.state'(X481),bool),happ(s(fun('type.semanticPrimitives.state'(X481),fun('type.modSem.state'(X481),bool)),X482),s('type.semanticPrimitives.state'(X481),X483))),s('type.modSem.state'(X481),X484)))) )),
  inference(forward_demodulation,[],[f19261,f75])).
fof(f19261,plain,(
  ( ! [X484,X486,X482,X485,X481,X483] : (s('type.ffi.ffi_state'(X481),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X481),sK3(X482,X484,X483,X481)))) = s('type.ffi.ffi_state'(X481),'const.modSem.state_ffi_1'(s('type.modSem.state'(X481),sK4(X482,X484,X483,X481)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X481),X483),s('type.modSem.state'(X481),X484)))) | s(bool,'T_0') = s(bool,X485) | s(bool,X486) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X486) = s(bool,happ(s(fun('type.modSem.state'(X481),bool),happ(s(fun('type.semanticPrimitives.state'(X481),fun('type.modSem.state'(X481),bool)),X482),s('type.semanticPrimitives.state'(X481),X483))),s('type.modSem.state'(X481),X484)))) )),
  inference(subsumption_resolution,[],[f17832,f56])).
fof(f17832,plain,(
  ( ! [X484,X486,X482,X485,X481,X483] : (p(s(bool,X485)) | s('type.ffi.ffi_state'(X481),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X481),sK3(X482,X484,X483,X481)))) = s('type.ffi.ffi_state'(X481),'const.modSem.state_ffi_1'(s('type.modSem.state'(X481),sK4(X482,X484,X483,X481)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X481),X483),s('type.modSem.state'(X481),X484)))) | s(bool,'T_0') = s(bool,X485) | s(bool,X486) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X486) = s(bool,happ(s(fun('type.modSem.state'(X481),bool),happ(s(fun('type.semanticPrimitives.state'(X481),fun('type.modSem.state'(X481),bool)),X482),s('type.semanticPrimitives.state'(X481),X483))),s('type.modSem.state'(X481),X484)))) )),
  inference(superposition,[],[f44,f5666])).
fof(f19259,plain,(
  ( ! [X476,X478,X480,X475,X477,X479] : (s(bool,'F_0') = s(bool,X480) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X475),sK3(X476,X478,X477,X475)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X475),sK4(X476,X478,X477,X475)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X475),X477),s('type.modSem.state'(X475),X478)))) | s(bool,'T_0') = s(bool,X479) | s(bool,X480) = s(bool,happ(s(fun('type.modSem.state'(X475),bool),happ(s(fun('type.semanticPrimitives.state'(X475),fun('type.modSem.state'(X475),bool)),X476),s('type.semanticPrimitives.state'(X475),X477))),s('type.modSem.state'(X475),X478)))) )),
  inference(forward_demodulation,[],[f19258,f75])).
fof(f19258,plain,(
  ( ! [X476,X478,X480,X475,X477,X479] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X475),sK3(X476,X478,X477,X475)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X475),sK4(X476,X478,X477,X475)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X475),X477),s('type.modSem.state'(X475),X478)))) | s(bool,'T_0') = s(bool,X479) | s(bool,X480) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X480) = s(bool,happ(s(fun('type.modSem.state'(X475),bool),happ(s(fun('type.semanticPrimitives.state'(X475),fun('type.modSem.state'(X475),bool)),X476),s('type.semanticPrimitives.state'(X475),X477))),s('type.modSem.state'(X475),X478)))) )),
  inference(subsumption_resolution,[],[f17831,f56])).
fof(f17831,plain,(
  ( ! [X476,X478,X480,X475,X477,X479] : (p(s(bool,X479)) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.semanticPrimitives.state_defined_types_1'(s('type.semanticPrimitives.state'(X475),sK3(X476,X478,X477,X475)))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X475),sK4(X476,X478,X477,X475)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X475),X477),s('type.modSem.state'(X475),X478)))) | s(bool,'T_0') = s(bool,X479) | s(bool,X480) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X480) = s(bool,happ(s(fun('type.modSem.state'(X475),bool),happ(s(fun('type.semanticPrimitives.state'(X475),fun('type.modSem.state'(X475),bool)),X476),s('type.semanticPrimitives.state'(X475),X477))),s('type.modSem.state'(X475),X478)))) )),
  inference(superposition,[],[f41,f5666])).
fof(f19256,plain,(
  ( ! [X472,X474,X469,X471,X473,X470] : (s(bool,'F_0') = s(bool,X474) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X469),sK3(X470,X472,X471,X469)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X469),sK4(X470,X472,X471,X469)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X469),X471),s('type.modSem.state'(X469),X472)))) | s(bool,'T_0') = s(bool,X473) | s(bool,X474) = s(bool,happ(s(fun('type.modSem.state'(X469),bool),happ(s(fun('type.semanticPrimitives.state'(X469),fun('type.modSem.state'(X469),bool)),X470),s('type.semanticPrimitives.state'(X469),X471))),s('type.modSem.state'(X469),X472)))) )),
  inference(forward_demodulation,[],[f19255,f75])).
fof(f19255,plain,(
  ( ! [X472,X474,X469,X471,X473,X470] : (s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X469),sK3(X470,X472,X471,X469)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X469),sK4(X470,X472,X471,X469)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X469),X471),s('type.modSem.state'(X469),X472)))) | s(bool,'T_0') = s(bool,X473) | s(bool,X474) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X474) = s(bool,happ(s(fun('type.modSem.state'(X469),bool),happ(s(fun('type.semanticPrimitives.state'(X469),fun('type.modSem.state'(X469),bool)),X470),s('type.semanticPrimitives.state'(X469),X471))),s('type.modSem.state'(X469),X472)))) )),
  inference(subsumption_resolution,[],[f17830,f56])).
fof(f17830,plain,(
  ( ! [X472,X474,X469,X471,X473,X470] : (p(s(bool,X473)) | s(fun('type.list.list'('type.string.char'),bool),'const.semanticPrimitives.state_defined_mods_1'(s('type.semanticPrimitives.state'(X469),sK3(X470,X472,X471,X469)))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X469),sK4(X470,X472,X471,X469)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X469),X471),s('type.modSem.state'(X469),X472)))) | s(bool,'T_0') = s(bool,X473) | s(bool,X474) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X474) = s(bool,happ(s(fun('type.modSem.state'(X469),bool),happ(s(fun('type.semanticPrimitives.state'(X469),fun('type.modSem.state'(X469),bool)),X470),s('type.semanticPrimitives.state'(X469),X471))),s('type.modSem.state'(X469),X472)))) )),
  inference(superposition,[],[f42,f5666])).
fof(f19250,plain,(
  ( ! [X441,X443,X444,X440,X442,X439] : (s(bool,'F_0') = s(bool,X444) | p(s(bool,happ(s(fun('type.modSem.state'(X439),bool),happ(s(fun('type.semanticPrimitives.state'(X439),fun('type.modSem.state'(X439),bool)),X440),s('type.semanticPrimitives.state'(X439),X442))),s('type.modSem.state'(X439),X441)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X439),X442),s('type.modSem.state'(X439),X441)))) | s(bool,'T_0') = s(bool,X443) | s(bool,X444) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X439),sK3(X440,X441,X442,X439)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439))))))) )),
  inference(forward_demodulation,[],[f19249,f75])).
fof(f19249,plain,(
  ( ! [X441,X443,X444,X440,X442,X439] : (p(s(bool,happ(s(fun('type.modSem.state'(X439),bool),happ(s(fun('type.semanticPrimitives.state'(X439),fun('type.modSem.state'(X439),bool)),X440),s('type.semanticPrimitives.state'(X439),X442))),s('type.modSem.state'(X439),X441)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X439),X442),s('type.modSem.state'(X439),X441)))) | s(bool,'T_0') = s(bool,X443) | s(bool,X444) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X444) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X439),sK3(X440,X441,X442,X439)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439))))))) )),
  inference(subsumption_resolution,[],[f17823,f56])).
fof(f17823,plain,(
  ( ! [X441,X443,X444,X440,X442,X439] : (p(s(bool,X443)) | p(s(bool,happ(s(fun('type.modSem.state'(X439),bool),happ(s(fun('type.semanticPrimitives.state'(X439),fun('type.modSem.state'(X439),bool)),X440),s('type.semanticPrimitives.state'(X439),X442))),s('type.modSem.state'(X439),X441)))) | ~p(s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(X439),X442),s('type.modSem.state'(X439),X441)))) | s(bool,'T_0') = s(bool,X443) | s(bool,X444) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X444) = s(bool,'const.list.LIST_REL_3'(s(fun('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'),fun('type.semanticPrimitives.store_v'('type.modSem.v'),bool)),'const.source_to_modProof.sv_rel_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439)))))),s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.state_refs_1'(s('type.semanticPrimitives.state'(X439),sK3(X440,X441,X442,X439)))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X439),sK4(X440,X441,X442,X439))))))) )),
  inference(superposition,[],[f40,f5666])).
fof(f18712,plain,(
  ( ! [X216,X215,X213] : (s(bool,X215) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X213) = s(bool,f(s(bool,X216))) | s(bool,X215) = s(bool,g(s(bool,X213)))) ) | $spl88),
  inference(cnf_transformation,[],[f18712_D])).
fof(f18712_D,plain,(
  ( ! [X216,X215,X213] : (s(bool,X215) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X213) = s(bool,f(s(bool,X216))) | s(bool,X215) = s(bool,g(s(bool,X213)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f17927,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,'T_0') = s(bool,X397) | s(bool,X396) = s(bool,f(s(bool,X398))) | s(bool,X399) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X399) = s(bool,g(s(bool,X396)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f17808])).
fof(f17808,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,'T_0') = s(bool,X397) | s(bool,X396) = s(bool,f(s(bool,X398))) | s(bool,'T_0') = s(bool,X397) | s(bool,X399) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X399) = s(bool,g(s(bool,X396)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f5666])).
fof(f19222,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(condensation,[],[f19221])).
fof(f19221,plain,(
  ( ! [X383,X380,X382,X381] : (s(bool,'T_0') = s(bool,X382) | s(bool,'T_0') = s(bool,X381) | s(bool,X383) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X383) = s(bool,f(s(bool,X380)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(subsumption_resolution,[],[f17805,f54])).
fof(f17805,plain,(
  ( ! [X383,X380,X382,X381] : (s(bool,X381) != s(bool,X382) | s(bool,'T_0') = s(bool,X382) | s(bool,'T_0') = s(bool,X381) | s(bool,X383) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X383) = s(bool,f(s(bool,X380)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(superposition,[],[f14891,f5666])).
fof(f19220,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f19219])).
fof(f19219,plain,(
  ( ! [X377,X379,X376,X378] : (s(bool,'T_0') = s(bool,g(s(bool,X378))) | s(bool,'T_0') = s(bool,X377) | s(bool,X379) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X379) = s(bool,f(s(bool,X376)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f17804,f11934])).
fof(f17804,plain,(
  ( ! [X377,X379,X376,X378] : (s(bool,X377) = s(bool,X378) | s(bool,'T_0') = s(bool,g(s(bool,X378))) | s(bool,'T_0') = s(bool,X377) | s(bool,X379) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X379) = s(bool,f(s(bool,X376)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f5666])).
fof(f19218,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f19217])).
fof(f19217,plain,(
  ( ! [X372,X374,X373,X375] : (s(bool,X373) = s(bool,X374) | s(bool,'T_0') = s(bool,X373) | s(bool,X375) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X375) = s(bool,f(s(bool,X372)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f17803,f5993])).
fof(f17803,plain,(
  ( ! [X372,X374,X373,X375] : (s(bool,X373) = s(bool,X374) | s(bool,'F_0') = s(bool,X374) | s(bool,'T_0') = s(bool,X373) | s(bool,X375) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X375) = s(bool,f(s(bool,X372)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14465,f5666])).
fof(f17928,plain,(
  ( ! [X370,X369,X371] : (s(bool,'T_0') = s(bool,X370) | s(bool,X371) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X371) = s(bool,f(s(bool,X369)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f17802])).
fof(f17802,plain,(
  ( ! [X370,X369,X371] : (s(bool,'T_0') = s(bool,X370) | s(bool,'T_0') = s(bool,X370) | s(bool,X371) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X371) = s(bool,f(s(bool,X369)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f13778,f5666])).
fof(f19097,plain,(
  ( ! [X231,X230,X232] : (s(bool,X230) != s(bool,f(s(bool,X231))) | s(bool,X230) = s(bool,X232) | s(bool,X232) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl106),
  inference(cnf_transformation,[],[f19097_D])).
fof(f19097_D,plain,(
  ( ! [X231,X230,X232] : (s(bool,X230) != s(bool,f(s(bool,X231))) | s(bool,X230) = s(bool,X232) | s(bool,X232) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f17976,plain,(
  ( ! [X231,X229,X230,X232] : (s(bool,X230) != s(bool,f(s(bool,X231))) | s(bool,'T_0') = s(bool,X229) | s(bool,X232) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X230) = s(bool,X232)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(duplicate_literal_removal,[],[f17615])).
fof(f17615,plain,(
  ( ! [X231,X229,X230,X232] : (s(bool,X230) != s(bool,f(s(bool,X231))) | s(bool,'T_0') = s(bool,X229) | s(bool,'T_0') = s(bool,X229) | s(bool,X232) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X230) = s(bool,X232)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33 | $spl38)),
  inference(superposition,[],[f14891,f5666])).
fof(f19094,plain,(
  ( ! [X208,X206,X207] : (s(bool,'T_0') != s(bool,X207) | s(bool,'T_0') = s(bool,X206) | s(bool,X208) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X207) = s(bool,X208)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(forward_demodulation,[],[f17978,f6462])).
fof(f17978,plain,(
  ( ! [X208,X206,X207] : (s(bool,X207) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X206) | s(bool,X208) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X207) = s(bool,X208)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f17609])).
fof(f17609,plain,(
  ( ! [X208,X206,X207] : (s(bool,X207) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X206) | s(bool,'T_0') = s(bool,X206) | s(bool,X208) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X207) = s(bool,X208)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f13806,f5666])).
fof(f19088,plain,(
  ( ! [X180,X179] : (s(bool,X179) != s(bool,g(s(bool,X179))) | s(bool,X179) = s(bool,X180) | s(bool,X180) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl104),
  inference(cnf_transformation,[],[f19088_D])).
fof(f19088_D,plain,(
  ( ! [X180,X179] : (s(bool,X179) != s(bool,g(s(bool,X179))) | s(bool,X179) = s(bool,X180) | s(bool,X180) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f19090,plain,(
  ( ! [X182,X183,X181] : (s(bool,'T_0') = s(bool,X181) | s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X182) = s(bool,X183)) ) | ($spl3 | $spl12 | $spl76)),
  inference(forward_demodulation,[],[f19089,f218])).
fof(f19089,plain,(
  ( ! [X182,X183,X181] : (s(bool,X182) != s(bool,g(s(bool,X182))) | s(bool,X181) = s(bool,g(s(bool,'F_0'))) | s(bool,X183) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X182) = s(bool,X183)) ) | ($spl3 | $spl12 | $spl76)),
  inference(subsumption_resolution,[],[f17601,f10105])).
fof(f17980,plain,(
  ( ! [X180,X178,X179] : (s(bool,X179) != s(bool,g(s(bool,X179))) | s(bool,'T_0') = s(bool,X178) | s(bool,X180) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X179) = s(bool,X180)) ) | ($spl3 | $spl12)),
  inference(duplicate_literal_removal,[],[f17600])).
fof(f17600,plain,(
  ( ! [X180,X178,X179] : (s(bool,X179) != s(bool,g(s(bool,X179))) | s(bool,'T_0') = s(bool,X178) | s(bool,'T_0') = s(bool,X178) | s(bool,X180) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X179) = s(bool,X180)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10270,f5666])).
fof(f19087,plain,(
  ( ! [X177,X175,X176] : (s(bool,'T_0') = s(bool,X175) | s(bool,'T_0') != s(bool,X176) | s(bool,X177) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X176) = s(bool,X177)) ) | ($spl3 | $spl12)),
  inference(forward_demodulation,[],[f19086,f218])).
fof(f19086,plain,(
  ( ! [X177,X175,X176] : (s(bool,'T_0') != s(bool,X176) | s(bool,X175) = s(bool,g(s(bool,'F_0'))) | s(bool,X177) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X176) = s(bool,X177)) ) | ($spl3 | $spl12)),
  inference(subsumption_resolution,[],[f17599,f10105])).
fof(f17599,plain,(
  ( ! [X177,X175,X176] : (s(bool,'T_0') != s(bool,X176) | s(bool,X175) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X175) | s(bool,X177) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X176) = s(bool,X177)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10105,f5666])).
fof(f19085,plain,(
  ( ! [X173,X174,X172] : (s(bool,'T_0') = s(bool,X172) | s(bool,X173) != s(bool,f(s(bool,X173))) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X173) = s(bool,X174)) ) | ($spl3 | $spl12 | $spl70)),
  inference(forward_demodulation,[],[f19084,f218])).
fof(f19084,plain,(
  ( ! [X173,X174,X172] : (s(bool,X173) != s(bool,f(s(bool,X173))) | s(bool,X172) = s(bool,g(s(bool,'F_0'))) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X173) = s(bool,X174)) ) | ($spl3 | $spl12 | $spl70)),
  inference(subsumption_resolution,[],[f17598,f10105])).
fof(f19079,plain,(
  ( ! [X156,X154,X155] : (s(bool,'T_0') != s(bool,X155) | s(bool,'T_0') = s(bool,X154) | s(bool,X156) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X155) = s(bool,X156)) ) | $spl12),
  inference(forward_demodulation,[],[f17981,f218])).
fof(f17981,plain,(
  ( ! [X156,X154,X155] : (s(bool,X155) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X154) | s(bool,X156) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X155) = s(bool,X156)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f17592])).
fof(f17592,plain,(
  ( ! [X156,X154,X155] : (s(bool,X155) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X154) | s(bool,'T_0') = s(bool,X154) | s(bool,X156) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X155) = s(bool,X156)) ) | $spl12),
  inference(superposition,[],[f9640,f5666])).
fof(f17984,plain,(
  ( ! [X149,X150,X148] : (s(bool,X149) != s(bool,f(s(bool,X149))) | s(bool,'T_0') = s(bool,X148) | s(bool,X150) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X149) = s(bool,X150)) ) | $spl17),
  inference(duplicate_literal_removal,[],[f17590])).
fof(f17590,plain,(
  ( ! [X149,X150,X148] : (s(bool,X149) != s(bool,f(s(bool,X149))) | s(bool,'T_0') = s(bool,X148) | s(bool,'T_0') = s(bool,X148) | s(bool,X150) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X149) = s(bool,X150)) ) | $spl17),
  inference(superposition,[],[f6464,f5666])).
fof(f19076,plain,(
  ( ! [X146,X147,X145] : (s(bool,'T_0') != s(bool,X146) | s(bool,'T_0') = s(bool,X145) | s(bool,X147) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X146) = s(bool,X147)) ) | ($spl3 | $spl33 | $spl38)),
  inference(forward_demodulation,[],[f17985,f7578])).
fof(f17985,plain,(
  ( ! [X146,X147,X145] : (s(bool,X146) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X145) | s(bool,X147) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X146) = s(bool,X147)) ) | $spl38),
  inference(duplicate_literal_removal,[],[f17589])).
fof(f17589,plain,(
  ( ! [X146,X147,X145] : (s(bool,X146) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X145) | s(bool,'T_0') = s(bool,X145) | s(bool,X147) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X146) = s(bool,X147)) ) | $spl38),
  inference(superposition,[],[f6313,f5666])).
fof(f19028,plain,(
  ( ! [X285] : (s(bool,X285) = s(bool,f(s(bool,X285))) | s(bool,X285) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl98),
  inference(cnf_transformation,[],[f19028_D])).
fof(f19028_D,plain,(
  ( ! [X285] : (s(bool,X285) = s(bool,f(s(bool,X285))) | s(bool,X285) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f18020,plain,(
  ( ! [X285,X286] : (s(bool,X285) = s(bool,f(s(bool,X285))) | s(bool,'T_0') = s(bool,X286) | s(bool,X285) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl33)),
  inference(duplicate_literal_removal,[],[f17483])).
fof(f17483,plain,(
  ( ! [X285,X286] : (s(bool,X285) = s(bool,f(s(bool,X285))) | s(bool,'T_0') = s(bool,X286) | s(bool,X285) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X286)) ) | ($spl3 | $spl33)),
  inference(superposition,[],[f7578,f5666])).
fof(f19027,plain,(
  ( ! [X283] : (s(bool,'F_0') = s(bool,g(s(bool,X283))) | s(bool,X283) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl96),
  inference(cnf_transformation,[],[f19027_D])).
fof(f19027_D,plain,(
  ( ! [X283] : (s(bool,'F_0') = s(bool,g(s(bool,X283))) | s(bool,X283) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f18021,plain,(
  ( ! [X283,X284] : (s(bool,'F_0') = s(bool,g(s(bool,X283))) | s(bool,'T_0') = s(bool,X284) | s(bool,X283) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl11 | $spl31)),
  inference(duplicate_literal_removal,[],[f17482])).
fof(f17482,plain,(
  ( ! [X283,X284] : (s(bool,'F_0') = s(bool,g(s(bool,X283))) | s(bool,'T_0') = s(bool,X284) | s(bool,X283) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X284)) ) | ($spl11 | $spl31)),
  inference(superposition,[],[f7490,f5666])).
fof(f19026,plain,(
  ( ! [X275] : (s(bool,X275) != s(bool,g(s(bool,X275))) | s(bool,X275) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl94),
  inference(cnf_transformation,[],[f19026_D])).
fof(f19026_D,plain,(
  ( ! [X275] : (s(bool,X275) != s(bool,g(s(bool,X275))) | s(bool,X275) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f18026,plain,(
  ( ! [X275,X276] : (s(bool,X275) != s(bool,g(s(bool,X275))) | s(bool,'T_0') = s(bool,X276) | s(bool,X275) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl31),
  inference(duplicate_literal_removal,[],[f17479])).
fof(f17479,plain,(
  ( ! [X275,X276] : (s(bool,X275) != s(bool,g(s(bool,X275))) | s(bool,'T_0') = s(bool,X276) | s(bool,X275) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X276)) ) | $spl31),
  inference(superposition,[],[f6306,f5666])).
fof(f19022,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f19021])).
fof(f19021,plain,(
  ( ! [X227,X225,X228,X226] : (s(bool,X226) = s(bool,f(s(bool,X227))) | s(bool,'T_0') = s(bool,g(s(bool,X225))) | s(bool,'T_0') = s(bool,X228) | s(bool,X226) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f17469,f11934])).
fof(f17469,plain,(
  ( ! [X227,X225,X228,X226] : (s(bool,X226) = s(bool,f(s(bool,X227))) | s(bool,'T_0') = s(bool,g(s(bool,X225))) | s(bool,'T_0') = s(bool,X228) | s(bool,X226) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X225) = s(bool,X228)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f5666])).
fof(f19020,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f19019])).
fof(f19019,plain,(
  ( ! [X212,X210,X211,X209] : (s(bool,X210) = s(bool,f(s(bool,X211))) | s(bool,'T_0') = s(bool,X212) | s(bool,X210) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X209) = s(bool,X212)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f17465,f5993])).
fof(f17465,plain,(
  ( ! [X212,X210,X211,X209] : (s(bool,X210) = s(bool,f(s(bool,X211))) | s(bool,'F_0') = s(bool,X209) | s(bool,'T_0') = s(bool,X212) | s(bool,X210) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X209) = s(bool,X212)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14465,f5666])).
fof(f18998,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl92),
  inference(cnf_transformation,[],[f18998_D])).
fof(f18998_D,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f19018,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl24)),
  inference(condensation,[],[f19017])).
fof(f19017,plain,(
  ( ! [X198,X199,X197] : (s(bool,'F_0') != s(bool,X198) | s(bool,'T_0') = s(bool,g(s(bool,X197))) | s(bool,'T_0') = s(bool,X199) | s(bool,X198) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl12 | $spl24)),
  inference(subsumption_resolution,[],[f17461,f11934])).
fof(f17461,plain,(
  ( ! [X198,X199,X197] : (s(bool,'F_0') != s(bool,X198) | s(bool,'T_0') = s(bool,g(s(bool,X197))) | s(bool,'T_0') = s(bool,X199) | s(bool,X198) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X197) = s(bool,X199)) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f12163,f5666])).
fof(f18048,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl24),
  inference(condensation,[],[f18047])).
fof(f18047,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | $spl24),
  inference(duplicate_literal_removal,[],[f18046])).
fof(f18046,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl24),
  inference(condensation,[],[f17442])).
fof(f17442,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,'F_0') != s(bool,X139) | s(bool,'T_0') = s(bool,X140) | s(bool,X138) = s(bool,X140) | s(bool,'T_0') = s(bool,X141) | s(bool,X139) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X138) = s(bool,X141)) ) | $spl24),
  inference(superposition,[],[f5993,f5666])).
fof(f18940,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f18939])).
fof(f18939,plain,(
  ( ! [X218,X220,X219,X217] : (s(bool,'T_0') = s(bool,g(s(bool,X218))) | s(bool,X217) = s(bool,f(s(bool,X219))) | s(bool,'T_0') = s(bool,X220) | s(bool,X217) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f17322,f11934])).
fof(f17322,plain,(
  ( ! [X218,X220,X219,X217] : (s(bool,'T_0') = s(bool,g(s(bool,X218))) | s(bool,X217) = s(bool,f(s(bool,X219))) | s(bool,'T_0') = s(bool,X220) | s(bool,X217) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X218) = s(bool,X220)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f14836,f5666])).
fof(f18293,plain,(
  ( ! [X280,X279,X281,X278] : (s(bool,'T_0') = s(bool,X280) | s(bool,X281) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X281) = s(bool,sK6(X278,X279,bool,bool)) | s(fun(bool,bool),X278) = s(fun(bool,bool),X279)) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f16928])).
fof(f16928,plain,(
  ( ! [X280,X279,X281,X278] : (s(bool,'T_0') = s(bool,X280) | s(bool,'T_0') = s(bool,X280) | s(bool,X281) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X281) = s(bool,sK6(X278,X279,bool,bool)) | s(fun(bool,bool),X278) = s(fun(bool,bool),X279)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f5666,f6325])).
fof(f18307,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,'T_0') = s(bool,X214) | s(bool,X215) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X215) = s(bool,g(s(bool,X213))) | s(bool,X213) = s(bool,f(s(bool,X216)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f16910])).
fof(f16910,plain,(
  ( ! [X216,X215,X213,X214] : (s(bool,'T_0') = s(bool,X214) | s(bool,'T_0') = s(bool,X214) | s(bool,X215) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X215) = s(bool,g(s(bool,X213))) | s(bool,X213) = s(bool,f(s(bool,X216)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f14836])).
fof(f18311,plain,(
  ( ! [X206,X204,X205] : (s(bool,'T_0') = s(bool,X205) | s(bool,X206) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X206) = s(bool,f(s(bool,X204)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(duplicate_literal_removal,[],[f16907])).
fof(f16907,plain,(
  ( ! [X206,X204,X205] : (s(bool,'T_0') = s(bool,X205) | s(bool,'T_0') = s(bool,X205) | s(bool,X206) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X206) = s(bool,f(s(bool,X204)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f13778])).
fof(f18709,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f18708])).
fof(f18708,plain,(
  ( ! [X202,X200,X203,X201] : (s(bool,X201) = s(bool,X202) | s(bool,'T_0') = s(bool,X202) | s(bool,X203) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X203) = s(bool,f(s(bool,X200)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f16906,f5993])).
fof(f16906,plain,(
  ( ! [X202,X200,X203,X201] : (s(bool,X201) = s(bool,X202) | s(bool,'T_0') = s(bool,X202) | s(bool,X203) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X203) = s(bool,f(s(bool,X200))) | s(bool,'F_0') = s(bool,X201)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f14465])).
fof(f18707,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,f(s(bool,X2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f18706])).
fof(f18706,plain,(
  ( ! [X198,X196,X199,X197] : (s(bool,'T_0') = s(bool,X198) | s(bool,X199) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X199) = s(bool,f(s(bool,X196))) | s(bool,'T_0') = s(bool,g(s(bool,X197)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f16905,f11934])).
fof(f16905,plain,(
  ( ! [X198,X196,X199,X197] : (s(bool,X197) = s(bool,X198) | s(bool,'T_0') = s(bool,X198) | s(bool,X199) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X199) = s(bool,f(s(bool,X196))) | s(bool,'T_0') = s(bool,g(s(bool,X197)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f14836])).
fof(f18601,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,X126) = s(bool,X127) | s(bool,X126) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X127) = s(bool,X129) | s(bool,X128) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X128) = s(bool,X129)) ) | $spl78),
  inference(cnf_transformation,[],[f18601_D])).
fof(f18601_D,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,X126) = s(bool,X127) | s(bool,X126) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X127) = s(bool,X129) | s(bool,X128) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X128) = s(bool,X129)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f18338,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X103) = s(bool,X105) | s(bool,X106) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107)) )),
  inference(duplicate_literal_removal,[],[f16881])).
fof(f16881,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,'T_0') = s(bool,X104) | s(bool,'T_0') = s(bool,X104) | s(bool,X105) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X103) = s(bool,X105) | s(bool,X106) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X106) = s(bool,X107) | s(bool,X103) = s(bool,X107)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18357,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,X119) = s(bool,X120) | s(bool,'T_0') = s(bool,X118) | s(bool,X121) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X120) = s(bool,X121) | s(bool,X122) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,X122)) )),
  inference(duplicate_literal_removal,[],[f16815])).
fof(f16815,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(bool,X119) = s(bool,X120) | s(bool,'T_0') = s(bool,X118) | s(bool,X121) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X120) = s(bool,X121) | s(bool,'T_0') = s(bool,X118) | s(bool,X122) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X119) = s(bool,X122)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18395,plain,(
  ( ! [X158,X156,X154,X157,X155] : (s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X156) | s(bool,X155) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X157) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X157) = s(bool,X158) | s(bool,X154) = s(bool,X158)) )),
  inference(duplicate_literal_removal,[],[f16756])).
fof(f16756,plain,(
  ( ! [X158,X156,X154,X157,X155] : (s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X156) | s(bool,X155) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X156) | s(bool,X157) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X157) = s(bool,X158) | s(bool,X154) = s(bool,X158)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18671,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f18670])).
fof(f18670,plain,(
  ( ! [X152,X151,X153,X150] : (s(bool,X152) = s(bool,f(s(bool,X151))) | s(bool,'T_0') = s(bool,X153) | s(bool,X152) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,g(s(bool,X150)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f16755,f11934])).
fof(f16755,plain,(
  ( ! [X152,X151,X153,X150] : (s(bool,X152) = s(bool,f(s(bool,X151))) | s(bool,'T_0') = s(bool,X153) | s(bool,X152) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X150) = s(bool,X153) | s(bool,'T_0') = s(bool,g(s(bool,X150)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f14836])).
fof(f18668,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X2))) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(condensation,[],[f18667])).
fof(f18667,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,X148) = s(bool,f(s(bool,X147))) | s(bool,'T_0') = s(bool,X149) | s(bool,X148) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X146) = s(bool,X149)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(subsumption_resolution,[],[f16754,f5993])).
fof(f16754,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,X148) = s(bool,f(s(bool,X147))) | s(bool,'T_0') = s(bool,X149) | s(bool,X148) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X146) = s(bool,X149) | s(bool,'F_0') = s(bool,X146)) ) | ($spl3 | $spl11 | $spl12 | $spl17 | $spl24 | $spl31 | $spl33)),
  inference(superposition,[],[f5666,f14465])).
fof(f18608,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) ) | $spl82),
  inference(cnf_transformation,[],[f18608_D])).
fof(f18608_D,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f18556,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(condensation,[],[f18555])).
fof(f18555,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f18554])).
fof(f18554,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f16566])).
fof(f16566,plain,(
  ( ! [X182,X180,X178,X181,X179] : (s(bool,'T_0') = s(bool,X178) | s(bool,X179) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X179) = s(bool,X180) | s(bool,X180) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X181) | s(bool,X178) = s(bool,X182) | s(bool,X181) = s(bool,X182)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18605,plain,(
  ( ! [X175,X173,X174] : (s(bool,'F_0') = s(bool,X175) | s(bool,'T_0') = s(bool,X173) | s(bool,X174) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X174) = s(bool,X175)) ) | ($spl11 | $spl31 | $spl34)),
  inference(forward_demodulation,[],[f18557,f7490])).
fof(f18558,plain,(
  ( ! [X138,X139,X137] : (s(bool,'T_0') = s(bool,X137) | s(bool,X138) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X138) = s(bool,X139) | s(bool,'F_0') = s(bool,X139)) )),
  inference(duplicate_literal_removal,[],[f16555])).
fof(f16555,plain,(
  ( ! [X138,X139,X137] : (s(bool,'T_0') = s(bool,X137) | s(bool,X138) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X138) = s(bool,X139) | s(bool,'F_0') = s(bool,X139) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f5666,f39])).
fof(f18559,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X102) = s(bool,X103) | s(bool,X100) = s(bool,X103) | s(bool,X104) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X100) = s(bool,X104)) )),
  inference(duplicate_literal_removal,[],[f16546])).
fof(f16546,plain,(
  ( ! [X103,X101,X102,X100,X104] : (s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X102) = s(bool,X103) | s(bool,X100) = s(bool,X103) | s(bool,'T_0') = s(bool,X101) | s(bool,X104) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X100) = s(bool,X104)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f18580,plain,(
  ( ! [X127,X130,X128,X126,X129] : (s(bool,X126) = s(bool,X127) | s(bool,X128) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X128) = s(bool,X129) | s(bool,X127) = s(bool,X129) | s(bool,'T_0') = s(bool,X130) | s(bool,X126) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(duplicate_literal_removal,[],[f16524])).
fof(f16524,plain,(
  ( ! [X127,X130,X128,X126,X129] : (s(bool,X126) = s(bool,X127) | s(bool,X128) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X128) = s(bool,X129) | s(bool,X127) = s(bool,X129) | s(bool,'T_0') = s(bool,X130) | s(bool,X126) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f5666,f5666])).
fof(f10519,plain,(
  ( ! [X49] : (s(bool,X49) != s(bool,g(s(bool,X49))) | s(bool,X49) = s(bool,g(s(bool,'F_0')))) ) | $spl76),
  inference(cnf_transformation,[],[f10519_D])).
fof(f10519_D,plain,(
  ( ! [X49] : (s(bool,X49) != s(bool,g(s(bool,X49))) | s(bool,X49) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f10492,plain,(
  ( ! [X48,X49] : (s(bool,X49) != s(bool,g(s(bool,X49))) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12)),
  inference(duplicate_literal_removal,[],[f10445])).
fof(f10445,plain,(
  ( ! [X48,X49] : (s(bool,X49) != s(bool,g(s(bool,X49))) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X48)) ) | ($spl3 | $spl12)),
  inference(superposition,[],[f10270,f3018])).
fof(f10155,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl74),
  inference(cnf_transformation,[],[f10155_D])).
fof(f10155_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f9612,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,g(s(bool,'F_0'))) | s(bool,X0) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl12),
  inference(equality_factoring,[],[f3018])).
fof(f10103,plain,(
  ( ! [X91] : (s(bool,X91) != s(bool,f(s(bool,X91))) | s(bool,X91) = s(bool,g(s(bool,'F_0')))) ) | $spl70),
  inference(cnf_transformation,[],[f10103_D])).
fof(f10103_D,plain,(
  ( ! [X91] : (s(bool,X91) != s(bool,f(s(bool,X91))) | s(bool,X91) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f9673,plain,(
  ( ! [X90,X91] : (s(bool,X91) != s(bool,f(s(bool,X91))) | s(bool,'T_0') = s(bool,X90) | s(bool,X91) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl17)),
  inference(duplicate_literal_removal,[],[f9468])).
fof(f9468,plain,(
  ( ! [X90,X91] : (s(bool,X91) != s(bool,f(s(bool,X91))) | s(bool,'T_0') = s(bool,X90) | s(bool,X91) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X90)) ) | ($spl12 | $spl17)),
  inference(superposition,[],[f6464,f3018])).
fof(f10102,plain,(
  ( ! [X89] : (s(bool,'T_0') != s(bool,X89) | s(bool,X89) = s(bool,g(s(bool,'F_0')))) ) | $spl68),
  inference(cnf_transformation,[],[f10102_D])).
fof(f10102_D,plain,(
  ( ! [X89] : (s(bool,'T_0') != s(bool,X89) | s(bool,X89) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f10101,plain,(
  ( ! [X88,X89] : (s(bool,'T_0') != s(bool,X89) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,g(s(bool,'F_0')))) ) | ($spl3 | $spl12 | $spl33 | $spl38)),
  inference(forward_demodulation,[],[f9674,f7578])).
fof(f9674,plain,(
  ( ! [X88,X89] : (s(bool,X89) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,g(s(bool,'F_0')))) ) | ($spl12 | $spl38)),
  inference(duplicate_literal_removal,[],[f9467])).
fof(f9467,plain,(
  ( ! [X88,X89] : (s(bool,X89) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X88)) ) | ($spl12 | $spl38)),
  inference(superposition,[],[f6313,f3018])).
fof(f9968,plain,(
  ( ! [X61,X59] : (s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,X59) = s(bool,X61) | s(bool,X61) = s(bool,g(s(bool,'F_0')))) ) | $spl66),
  inference(cnf_transformation,[],[f9968_D])).
fof(f9968_D,plain,(
  ( ! [X61,X59] : (s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,X59) = s(bool,X61) | s(bool,X61) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f9807,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,X50) | s(bool,X48) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9276])).
fof(f9276,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,g(s(bool,'F_0'))) | s(bool,X48) = s(bool,X50) | s(bool,X48) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X49)) ) | $spl12),
  inference(superposition,[],[f3018,f3018])).
fof(f9982,plain,(
  ( ! [X68,X69] : (s(bool,'F_0') = s(bool,X69) | s(bool,X69) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl11 | $spl12 | $spl31 | $spl34)),
  inference(forward_demodulation,[],[f9838,f7490])).
fof(f9839,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,X67) | s(bool,X67) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,g(s(bool,'F_0')))) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9224])).
fof(f9224,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,X67) | s(bool,X67) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X65)) ) | $spl12),
  inference(superposition,[],[f3018,f3018])).
fof(f9858,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9207])).
fof(f9207,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f3018,f39])).
fof(f9884,plain,(
  ( ! [X61,X59,X60] : (s(bool,'T_0') = s(bool,X60) | s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,X61) = s(bool,g(s(bool,'F_0'))) | s(bool,X59) = s(bool,X61)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f9184])).
fof(f9184,plain,(
  ( ! [X61,X59,X60] : (s(bool,'T_0') = s(bool,X60) | s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,g(s(bool,'F_0'))) | s(bool,X59) = s(bool,X61)) ) | $spl12),
  inference(superposition,[],[f3018,f3018])).
fof(f9965,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl11 | $spl12 | $spl24 | $spl31)),
  inference(condensation,[],[f9964])).
fof(f9964,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X59)) ) | ($spl11 | $spl12 | $spl24 | $spl31)),
  inference(subsumption_resolution,[],[f9963,f5993])).
fof(f9963,plain,(
  ( ! [X59,X57,X58] : (s(bool,'F_0') = s(bool,X57) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X59)) ) | ($spl11 | $spl12 | $spl31)),
  inference(forward_demodulation,[],[f9145,f7490])).
fof(f6731,plain,(
  ( ! [X30,X31,X32] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,X32) = s(bool,sK6(X30,X31,bool,bool)) | s(bool,'T_0') = s(bool,X32)) ) | $spl30),
  inference(superposition,[],[f1393,f6307])).
fof(f7082,plain,(
  $false | ($spl37 | $spl38)),
  inference(subsumption_resolution,[],[f7013,f37])).
fof(f7013,plain,(
  ~p(s(bool,'T_0')) | ($spl37 | $spl38)),
  inference(backward_demodulation,[],[f7012,f38])).
fof(f7012,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl37 | $spl38)),
  inference(subsumption_resolution,[],[f6962,f6313])).
fof(f6962,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl37),
  inference(trivial_inequality_removal,[],[f6947])).
fof(f6947,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl37),
  inference(superposition,[],[f6312,f54])).
fof(f6660,plain,(
  ( ! [X23,X27,X22] : (s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,X27) | s(bool,X27) = s(bool,sK6(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X22,X23,bool,bool))))) ) | $spl60),
  inference(cnf_transformation,[],[f6660_D])).
fof(f6660_D,plain,(
  ( ! [X23,X27,X22] : (s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,X27) | s(bool,X27) = s(bool,sK6(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X22,X23,bool,bool))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f6617,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,X31) != s(bool,f(s(bool,X30))) | s(fun(bool,bool),X28) = s(fun(bool,bool),X29) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X28,X29,bool,bool)))) | s(bool,X32) = s(bool,sK6(X28,X29,bool,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,X30) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f1272,f1178])).
fof(f6616,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X25) != s(bool,f(s(bool,X24))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,g(s(bool,sK6(X22,X23,bool,bool)))) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,sK6(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f1272,f1178])).
fof(f6502,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl58),
  inference(cnf_transformation,[],[f6502_D])).
fof(f6502_D,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f6484,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') != s(bool,X7) | s(bool,X8) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6483,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') != s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl17),
  inference(superposition,[],[f221,f1178])).
fof(f6307,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl30),
  inference(cnf_transformation,[],[f6307_D])).
fof(f6307_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f6309,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl33),
  inference(cnf_transformation,[],[f6309_D])).
fof(f6309_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f6422,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl29),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f53,f47,f45,f44,f43,f42,f41,f40,f46,f31,f38,f75,f146,f151,f176,f212,f213,f214,f216,f284,f341,f467,f516,f986,f1156,f1178,f1198,f1272,f1687,f1689,f1690,f1393,f1394,f1942,f2178,f3021,f5884,f3509,f3587,f5680,f5666,f3626,f3627,f3668,f3884,f3885,f6029,f6031,f6033,f6035,f6037,f6039,f6041,f4080,f4081,f4179,f6097,f6101,f6102,f4300,f4301,f4742,f4659,f4719,f6261,f6262,f6264,f6279,f6280,f6281,f6282,f6283,f6286,f6287,f6288,f6289,f6290,f6291,f6292,f6293,f6137,f6329,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6420,f6349,f6421,f6348,f6347])).
fof(f6264,plain,(
  ( ! [X8,X9] : (s(bool,f(s(bool,X8))) != s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl29),
  inference(superposition,[],[f6261,f54])).
fof(f6262,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,f(s(bool,X0))) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6310,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(cnf_transformation,[],[f6310_D])).
fof(f6310_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f6348,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,X8) = s(bool,sK6(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f1393,f54])).
fof(f6421,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,X10) | s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl29),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f53,f47,f45,f44,f43,f42,f41,f40,f46,f31,f38,f75,f146,f151,f176,f212,f213,f214,f216,f284,f341,f467,f516,f986,f1156,f1178,f1198,f1272,f1687,f1689,f1690,f1393,f1394,f1942,f2178,f3021,f5884,f3509,f3587,f5680,f5666,f3626,f3627,f3668,f3884,f3885,f6029,f6031,f6033,f6035,f6037,f6039,f6041,f4080,f4081,f4179,f6097,f6101,f6102,f4300,f4301,f4742,f4659,f4719,f6261,f6262,f6264,f6279,f6280,f6281,f6282,f6283,f6286,f6287,f6288,f6289,f6290,f6291,f6292,f6293,f6137,f6329,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350,f6420,f6349])).
fof(f6420,plain,(
  ( ! [X14] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X14)) ) | $spl29),
  inference(global_subsumption,[],[f36,f35,f34,f33,f32,f37,f39,f51,f48,f52,f54,f56,f60,f85,f88,f89,f53,f47,f45,f44,f43,f42,f41,f40,f46,f31,f38,f75,f146,f151,f176,f212,f213,f214,f216,f284,f341,f467,f516,f986,f1156,f1178,f1198,f1272,f1687,f1689,f1690,f1393,f1394,f1942,f2178,f3021,f5884,f3509,f3587,f5680,f5666,f3626,f3627,f3668,f3884,f3885,f6029,f6031,f6033,f6035,f6037,f6039,f6041,f4080,f4081,f4179,f6097,f6101,f6102,f4300,f4301,f4742,f4659,f4719,f6261,f6262,f6264,f6279,f6280,f6281,f6282,f6283,f6286,f6287,f6288,f6289,f6290,f6291,f6292,f6293,f6137,f6329,f6330,f6359,f6358,f6357,f6356,f6355,f6354,f6353,f6352,f6351,f6350])).
fof(f6351,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,X20) = s(bool,sK6(X18,X19,bool,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f1393,f54])).
fof(f6316,plain,(
  ( ! [X6,X5] : (s(bool,X5) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6) | s(bool,X5) = s(bool,X6)) ) | $spl42),
  inference(cnf_transformation,[],[f6316_D])).
fof(f6316_D,plain,(
  ( ! [X6,X5] : (s(bool,X5) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6) | s(bool,X5) = s(bool,X6)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f6352,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X22) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,X25) = s(bool,sK6(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(bool,X22) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6353,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,X28) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,X31) = s(bool,sK6(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X32) | s(bool,X28) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6317,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X13) | s(bool,X11) = s(bool,X13) | s(bool,X12) = s(bool,g(s(bool,'T_0')))) ) | $spl44),
  inference(cnf_transformation,[],[f6317_D])).
fof(f6317_D,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X13) | s(bool,X11) = s(bool,X13) | s(bool,X12) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f6354,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,X36) = s(bool,sK6(X34,X35,bool,bool)) | s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,X38) | s(bool,X38) = s(bool,g(s(bool,'T_0'))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6355,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,X42) = s(bool,sK6(X40,X41,bool,bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6318,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X19) | s(bool,X18) = s(bool,X19)) ) | $spl46),
  inference(cnf_transformation,[],[f6318_D])).
fof(f6318_D,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X19) | s(bool,X18) = s(bool,X19)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f6356,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s(bool,X46) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,X49) = s(bool,sK6(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X46) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6319,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22) | s(bool,X20) = s(bool,X21)) ) | $spl48),
  inference(cnf_transformation,[],[f6319_D])).
fof(f6319_D,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22) | s(bool,X20) = s(bool,X21)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f6357,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s(bool,X52) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X53) = s(fun(bool,bool),X54) | s(bool,X55) = s(bool,sK6(X53,X54,bool,bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,X52) = s(bool,X56) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6358,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X58) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,X61) = s(bool,sK6(X59,X60,bool,bool)) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,g(s(bool,'T_0'))) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6359,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,X64) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,X67) = s(bool,sK6(X65,X66,bool,bool)) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f1393,f1178])).
fof(f6311,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl36),
  inference(cnf_transformation,[],[f6311_D])).
fof(f6311_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f6419,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(condensation,[],[f6418])).
fof(f6418,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,X6) = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f6417])).
fof(f6417,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,X6) = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(condensation,[],[f6416])).
fof(f6416,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,X67) = s(bool,sK6(X65,X66,bool,bool)) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) ) | $spl28),
  inference(subsumption_resolution,[],[f6415,f1178])).
fof(f6415,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X64) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,X67) = s(bool,sK6(X65,X66,bool,bool)) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) ) | $spl28),
  inference(forward_demodulation,[],[f6359,f6260])).
fof(f6406,plain,(
  ( ! [X4,X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,X1) = s(bool,X4)) ) | $spl56),
  inference(cnf_transformation,[],[f6406_D])).
fof(f6406_D,plain,(
  ( ! [X4,X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,X1) = s(bool,X4)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f6414,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,sK6(X2,X3,bool,bool)) | s(bool,X1) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f6413])).
fof(f6413,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X62) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,X61) = s(bool,sK6(X59,X60,bool,bool)) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X58)) ) | $spl28),
  inference(subsumption_resolution,[],[f6412,f1178])).
fof(f6412,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X62) = s(bool,f(s(bool,'T_0'))) | s(bool,X58) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,X61) = s(bool,sK6(X59,X60,bool,bool)) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X58)) ) | $spl28),
  inference(forward_demodulation,[],[f6358,f6260])).
fof(f6411,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(condensation,[],[f6410])).
fof(f6410,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,X6) = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f6409])).
fof(f6409,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,X6) = s(bool,sK6(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(condensation,[],[f6408])).
fof(f6408,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X53) = s(fun(bool,bool),X54) | s(bool,X55) = s(bool,sK6(X53,X54,bool,bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,X52) = s(bool,X56) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) ) | $spl28),
  inference(subsumption_resolution,[],[f6407,f1178])).
fof(f6407,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X52) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X53) = s(fun(bool,bool),X54) | s(bool,X55) = s(bool,sK6(X53,X54,bool,bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,X52) = s(bool,X56) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) ) | $spl28),
  inference(forward_demodulation,[],[f6357,f6260])).
fof(f6405,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,sK6(X2,X3,bool,bool)) | s(bool,X1) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f6404])).
fof(f6404,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s(bool,X50) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,X49) = s(bool,sK6(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X46) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) ) | $spl28),
  inference(subsumption_resolution,[],[f6403,f1178])).
fof(f6403,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s(bool,X50) = s(bool,f(s(bool,'T_0'))) | s(bool,X46) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,X49) = s(bool,sK6(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X46) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) ) | $spl28),
  inference(forward_demodulation,[],[f6356,f6260])).
fof(f6400,plain,(
  ( ! [X39,X37,X38] : (s(bool,X38) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X39) | s(bool,X37) = s(bool,X39) | s(bool,X37) = s(bool,X38)) ) | $spl54),
  inference(cnf_transformation,[],[f6400_D])).
fof(f6400_D,plain,(
  ( ! [X39,X37,X38] : (s(bool,X38) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X39) | s(bool,X37) = s(bool,X39) | s(bool,X37) = s(bool,X38)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f6402,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,X43) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,X42) = s(bool,sK6(X40,X41,bool,bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl28),
  inference(subsumption_resolution,[],[f6401,f1178])).
fof(f6401,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,X43) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,X42) = s(bool,sK6(X40,X41,bool,bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl28),
  inference(forward_demodulation,[],[f6355,f6260])).
fof(f6399,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,X38) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,X36) = s(bool,sK6(X34,X35,bool,bool)) | s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl28),
  inference(subsumption_resolution,[],[f6398,f1178])).
fof(f6398,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,X38) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,X36) = s(bool,sK6(X34,X35,bool,bool)) | s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,X38) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl28),
  inference(forward_demodulation,[],[f6354,f6260])).
fof(f6381,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl52),
  inference(cnf_transformation,[],[f6381_D])).
fof(f6381_D,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f6397,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,X7) = s(bool,sK6(X5,X6,bool,bool)) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f6396])).
fof(f6396,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,X7) = s(bool,sK6(X5,X6,bool,bool)) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f6395])).
fof(f6395,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,X32) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,X31) = s(bool,sK6(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X32) | s(bool,X28) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl28),
  inference(subsumption_resolution,[],[f6394,f1178])).
fof(f6394,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,X32) = s(bool,f(s(bool,'T_0'))) | s(bool,X28) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,X31) = s(bool,sK6(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X32) | s(bool,X28) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl28),
  inference(forward_demodulation,[],[f6353,f6260])).
fof(f6393,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,X7) = s(bool,sK6(X5,X6,bool,bool)) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f6392])).
fof(f6392,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,X7) = s(bool,sK6(X5,X6,bool,bool)) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f6391])).
fof(f6391,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X27) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,X25) = s(bool,sK6(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(bool,X22) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X27)) ) | $spl28),
  inference(subsumption_resolution,[],[f6390,f1178])).
fof(f6390,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X27) = s(bool,f(s(bool,'T_0'))) | s(bool,X22) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,X25) = s(bool,sK6(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(bool,X22) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X27)) ) | $spl28),
  inference(forward_demodulation,[],[f6352,f6260])).
fof(f6389,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X21) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,X20) = s(bool,sK6(X18,X19,bool,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X21)) ) | $spl28),
  inference(subsumption_resolution,[],[f6388,f54])).
fof(f6388,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X21) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,X20) = s(bool,sK6(X18,X19,bool,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X21)) ) | $spl28),
  inference(forward_demodulation,[],[f6351,f6260])).
fof(f6387,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(condensation,[],[f6386])).
fof(f6386,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK6(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X14)) ) | $spl28),
  inference(subsumption_resolution,[],[f6385,f54])).
fof(f6385,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK6(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X14)) ) | $spl28),
  inference(forward_demodulation,[],[f6350,f6260])).
fof(f6384,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl28),
  inference(condensation,[],[f6383])).
fof(f6383,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,X13) = s(bool,sK6(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X10)) ) | $spl28),
  inference(subsumption_resolution,[],[f6382,f54])).
fof(f6382,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,X13) = s(bool,sK6(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X10)) ) | $spl28),
  inference(forward_demodulation,[],[f6349,f6260])).
fof(f6380,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,X9) = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,X8) = s(bool,sK6(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl28),
  inference(subsumption_resolution,[],[f6379,f54])).
fof(f6379,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,X9) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,X8) = s(bool,sK6(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl28),
  inference(forward_demodulation,[],[f6348,f6260])).
fof(f6377,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(subsumption_resolution,[],[f6376,f39])).
fof(f6376,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK6(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(forward_demodulation,[],[f6347,f6260])).
fof(f6293,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(bool,X26) = s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6292,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,f(s(bool,'T_0'))) | s(bool,X24) = s(bool,g(s(bool,'T_0'))) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X23)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6291,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6290,plain,(
  ( ! [X19,X17,X18] : (s(bool,X17) != s(bool,f(s(bool,'T_0'))) | s(bool,X18) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6289,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X14) = s(bool,X15) | s(bool,X15) = s(bool,X16) | s(bool,'T_0') = s(bool,X16) | s(bool,X14) = s(bool,g(s(bool,'T_0')))) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6288,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,g(s(bool,'T_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6287,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'T_0'))) | s(bool,X9) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6286,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'T_0'))) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl29),
  inference(superposition,[],[f6261,f1178])).
fof(f6315,plain,(
  ( ! [X4] : (s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | $spl40),
  inference(cnf_transformation,[],[f6315_D])).
fof(f6315_D,plain,(
  ( ! [X4] : (s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f6285,plain,(
  ( ! [X4] : (s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl16 | $spl29)),
  inference(superposition,[],[f6261,f546])).
fof(f6314,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl16 | $spl29)),
  inference(forward_demodulation,[],[f6284,f220])).
fof(f6284,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl16 | $spl29)),
  inference(superposition,[],[f6261,f480])).
fof(f6283,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl29),
  inference(superposition,[],[f6261,f54])).
fof(f6282,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl29),
  inference(superposition,[],[f6261,f54])).
fof(f6281,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl29),
  inference(superposition,[],[f6261,f54])).
fof(f6280,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl29),
  inference(superposition,[],[f6261,f54])).
fof(f6279,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl29),
  inference(superposition,[],[f6261,f39])).
fof(f6261,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | $spl29),
  inference(cnf_transformation,[],[f6261_D])).
fof(f6261_D,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f6220,plain,(
  ( ! [X114,X115] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X114) = s(fun(bool,bool),X115)) ) | $spl14),
  inference(duplicate_literal_removal,[],[f6219])).
fof(f6219,plain,(
  ( ! [X114,X115] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X114) = s(fun(bool,bool),X115) | s(fun(bool,bool),X114) = s(fun(bool,bool),X115)) ) | $spl14),
  inference(superposition,[],[f52,f219])).
fof(f6027,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'F_0') != s(bool,X2) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f6026])).
fof(f6026,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,'T_0') = s(bool,X439) | s(bool,'F_0') != s(bool,X436) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X436) = s(bool,X440) | s(bool,'T_0') = s(bool,X440)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f6025])).
fof(f6025,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,'T_0') = s(bool,X439) | s(bool,'F_0') != s(bool,X436) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,'T_0') = s(bool,X439) | s(bool,X436) = s(bool,X440) | s(bool,'T_0') = s(bool,X440)) ) | ($spl12 | $spl16)),
  inference(forward_demodulation,[],[f6024,f218])).
fof(f6024,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,'F_0') != s(bool,X436) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X439) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X439) | s(bool,X436) = s(bool,X440) | s(bool,'T_0') = s(bool,X440)) ) | $spl16),
  inference(forward_demodulation,[],[f3984,f220])).
fof(f3984,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,X436) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X439) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X439) | s(bool,X436) = s(bool,X440) | s(bool,'T_0') = s(bool,X440)) )),
  inference(superposition,[],[f212,f1178])).
fof(f5992,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'F_0') != s(bool,X2) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl12 | $spl16)),
  inference(condensation,[],[f5991])).
fof(f5991,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,'T_0') = s(bool,X440) | s(bool,'F_0') != s(bool,X436) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X436) = s(bool,X439) | s(bool,'T_0') = s(bool,X439)) ) | ($spl12 | $spl16)),
  inference(duplicate_literal_removal,[],[f5990])).
fof(f5990,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,'T_0') = s(bool,X440) | s(bool,'F_0') != s(bool,X436) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X436) = s(bool,X439) | s(bool,'T_0') = s(bool,X439) | s(bool,'T_0') = s(bool,X440)) ) | ($spl12 | $spl16)),
  inference(forward_demodulation,[],[f5989,f218])).
fof(f5989,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,'F_0') != s(bool,X436) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X436) = s(bool,X439) | s(bool,'T_0') = s(bool,X439) | s(bool,X440) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X440)) ) | $spl16),
  inference(forward_demodulation,[],[f3886,f220])).
fof(f3886,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,X436) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X437) = s(fun(bool,bool),X438) | s(bool,'T_0') = s(bool,sK6(X437,X438,bool,bool)) | s(bool,X436) = s(bool,X439) | s(bool,'T_0') = s(bool,X439) | s(bool,X440) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X440)) )),
  inference(superposition,[],[f212,f1178])).
fof(f446,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,f(s(bool,X18))) | s(bool,'T_0') = s(bool,X18)) ) | $spl22),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,f(s(bool,X18))) | s(bool,'T_0') = s(bool,X18)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f444,plain,(
  ( ! [X8] : (p(s(bool,f(s(bool,X8)))) | s(bool,'T_0') = s(bool,X8)) ) | $spl20),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  ( ! [X8] : (p(s(bool,f(s(bool,X8)))) | s(bool,'T_0') = s(bool,X8)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f386,plain,(
  ( ! [X19,X18] : (p(s(bool,f(s(bool,X19)))) | s(bool,'F_0') = s(bool,f(s(bool,X18))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) ) | ($spl6 | $spl17)),
  inference(superposition,[],[f87,f336])).
fof(f443,plain,(
  ( ! [X7,X9] : (s(bool,X9) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl18),
  inference(cnf_transformation,[],[f443_D])).
fof(f443_D,plain,(
  ( ! [X7,X9] : (s(bool,X9) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f445,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,f(s(bool,X11)))) | s(bool,X12) = s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10)) ) | $spl17),
  inference(subsumption_resolution,[],[f383,f321])).
fof(f383,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,f(s(bool,X11)))) | p(s(bool,X12)) | s(bool,X12) = s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10)) ) | $spl17),
  inference(superposition,[],[f48,f336])).
fof(f442,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,f(s(bool,X8)))) | s(bool,X9) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl17),
  inference(subsumption_resolution,[],[f382,f321])).
fof(f382,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,f(s(bool,X8)))) | p(s(bool,X9)) | s(bool,X9) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl17),
  inference(superposition,[],[f48,f336])).
fof(f218,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl12),
  inference(cnf_transformation,[],[f218_D])).
fof(f218_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f216,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f212,f39])).
fof(f191,plain,(
  s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | $spl11),
  inference(cnf_transformation,[],[f191_D])).
fof(f191_D,plain,(
  s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f176,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2))) | s(bool,X0) = s(bool,'const.source_to_modProof.s_rel_2'(s('type.semanticPrimitives.state'(sK0),sK1),s('type.modSem.state'(sK0),sK2)))) )),
  inference(equality_factoring,[],[f146])).
fof(f102,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f91,f37])).
fof(f91,plain,(
  ~p(s(bool,'T_0')) | $spl4),
  inference(backward_demodulation,[],[f86,f38])).
fof(f87,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) | $spl6),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f89,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f82,f56])).
fof(f82,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f48,f39])).
fof(f85,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f80,f56])).
fof(f80,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f48,f39])).
fof(f63,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f60,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f39])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 284
% Passive clauses: 2710
% Generated clauses: 65239
% Final active clauses: 23
% Final passive clauses: 69
% Input formulas: 8
% Initial clauses: 23
% 
% Duplicate literals: 4426
% Trivial inequalities: 405
% Fw subsumption resolutions: 5001
% Fw demodulations: 5694
% Bw demodulations: 1898
% Condensations: 8649
% Global subsumptions: 1208
% 
% Simple tautologies: 674
% Equational tautologies: 642
% Forward subsumptions: 34397
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 151
% 
% Unit resulting resolution: 1367
% Factoring: 1
% Forward superposition: 13355
% Backward superposition: 10376
% Self superposition: 448
% Equality factoring: 291
% Equality resolution: 39
% 
% Split clauses: 352
% Split components: 719
% SAT solver clauses: 5851
% SAT solver unit clauses: 41
% SAT solver binary clauses: 315
% 
% Sat splits: 352
% Sat splitting refutations: 1227
% 
% Memory used [KB]: 28912
% Time elapsed: 5.491 s
% ------------------------------
% ------------------------------
% Success in time 6.81 s
