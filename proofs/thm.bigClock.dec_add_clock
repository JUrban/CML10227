Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bigClock
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bigClock
% SZS output start Proof for thm.bigClock
fof(f2783,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2751,f223,f225,f182,f87,f141,f205,f150,f153,f151,f160,f137,f143,f86,f139])).
fof(f139,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f86,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bigClock.dec_add_clock',aHL_TRUTH)).
fof(f143,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f139,f137])).
fof(f137,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl0),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f160,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | ($spl5 | $spl8)),
  inference(superposition,[],[f141,f151])).
fof(f151,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f153,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f150,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f88])).
fof(f88,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bigClock.dec_add_clock',aHL_BOOL_CASES)).
fof(f205,plain,(
  $false | ($spl11 | $spl12)),
  inference(trivial_inequality_removal,[],[f202])).
fof(f202,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl11 | $spl12)),
  inference(superposition,[],[f153,f182])).
fof(f141,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f87,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bigClock.dec_add_clock',aHL_FALSITY)).
fof(f182,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f182_D])).
fof(f182_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f225,plain,(
  s(bool,'F_0') = s(bool,sK1) | $spl18),
  inference(cnf_transformation,[],[f225_D])).
fof(f225_D,plain,(
  s(bool,'F_0') = s(bool,sK1) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f223,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK1) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f221,f146])).
fof(f146,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f141,f88])).
fof(f221,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,sK1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f171,f88])).
fof(f171,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,sK1) = s(bool,X1)) )),
  inference(resolution,[],[f129,f84])).
fof(f84,plain,(
  ~p(s(bool,sK1))),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,sK1),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),sK4),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),sK6)))) & (s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),sK6) = s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK0),sK7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),sK8))) & ~p(s(bool,sK1)) & ! [X9] : ~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(sK0),sK4))),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(sK0),sK7))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),sK8)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,X1),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6)))) & ? [X7,X8] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))) & ~p(s(bool,X1)) & ! [X9] : ~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(X0),X4))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X7))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,X1),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6)))) & ? [X7,X8] : ((s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))) & ~p(s(bool,X1))) & ! [X9] : ~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(X0),X4))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X7))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,X1),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6)))) => ! [X7,X8] : ((s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))) & ~p(s(bool,X1))) => ? [X9] : p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(X0),X4))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X7))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,X1),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6)))) => ! [X7,X8] : ((s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))) & ~p(s(bool,X1))) => ? [X9] : p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(X0),X4))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X7))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X8))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,X7),s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X6),X10),s('type.ast.dec',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X12)))) => ! [X13,X14] : ((s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X12) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X13),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14))) & ~p(s(bool,X7))) => ? [X15] : p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.semanticPrimitives.state'(X6),X10))),s('type.ast.dec',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X6),X13))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,X7),s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X6),X10),s('type.ast.dec',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X12)))) => ! [X13,X14] : ((s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),X12) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X13),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14))) & ~p(s(bool,X7))) => ? [X15] : p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.semanticPrimitives.state'(X6),X10))),s('type.ast.dec',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X6),X13))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14))))))))),
  file('thm.bigClock.dec_add_clock','thm.bigClock.dec_add_clock')).
fof(f129,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X27,X28] : ((p(s(bool,X27)) => p(s(bool,X28))) => ((p(s(bool,X28)) => p(s(bool,X27))) => s(bool,X27) = s(bool,X28)))),
  file('thm.bigClock.dec_add_clock','thm.bool.IMP_ANTISYM_AX')).
fof(f2751,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f2750,f596])).
fof(f596,plain,(
  p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),sK4),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),sK6)))) | $spl18),
  inference(forward_demodulation,[],[f82,f225])).
fof(f82,plain,(
  p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,sK1),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),sK4),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),sK6))))),
  inference(cnf_transformation,[],[f52])).
fof(f2750,plain,(
  ~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),sK4),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),sK6))))),
  inference(forward_demodulation,[],[f2700,f83])).
fof(f83,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),sK6) = s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK0),sK7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),sK8)))),
  inference(cnf_transformation,[],[f52])).
fof(f2700,plain,(
  ~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),sK4),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK0),sK7),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),sK8))))))),
  inference(resolution,[],[f125,f85])).
fof(f85,plain,(
  ( ! [X9] : (~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),sK2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK3),s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(sK0),sK4))),s('type.ast.dec',sK5),s('type.pair.prod'('type.semanticPrimitives.state'(sK0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(sK0),sK7))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),sK8))))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f125,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9(X6,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | ~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6))))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK9(X6,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) & s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) = s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))))) & (! [X7] : (~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4)))) | p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | ? [X8] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) & s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) = s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))))) & (! [X7] : (~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4)))) | p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6))))))))),
  inference(rectify,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | ? [X7] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) & s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) = s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4))))) & (! [X7] : (~p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) | s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) != s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4)))) | p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6))))))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) <=> ? [X7] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) & s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) != s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) = s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) <=> ? [X7] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.semanticPrimitives.state'(X0),X3))),s('type.ast.dec',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X0),X4))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6)))))) & ~s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X6) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X3))) = s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X0),X4)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X16] : ! [X8,X9,X17,X18,X11,X14] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'F_0'),s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X16),X17),s('type.ast.dec',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X16),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X16),X18),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14)))))) <=> ? [X15] : (p(s(bool,'const.bigStep.evaluate_dec_6'(s(bool,'T_0'),s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X16),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X15))),s('type.semanticPrimitives.state'(X16),X17))),s('type.ast.dec',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X16),'type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X16),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'(X16),X18))),s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14)))))) & ~s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),X14) = s('type.semanticPrimitives.result'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X16),X17))) = s('type.num.num','const.semanticPrimitives.state_clock_1'(s('type.semanticPrimitives.state'(X16),X18)))))),
  file('thm.bigClock.dec_add_clock','thm.bigClock.dec_clocked_unclocked_equiv')).
% SZS output end Proof for thm.bigClock
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 459
% Generated clauses: 2578
% Final active clauses: 34
% Final passive clauses: 365
% Input formulas: 21
% Initial clauses: 53
% 
% Duplicate literals: 222
% Trivial inequalities: 34
% Fw subsumption resolutions: 304
% Fw demodulations: 242
% Bw demodulations: 5
% 
% Simple tautologies: 110
% Equational tautologies: 47
% Forward subsumptions: 1061
% 
% Binary resolution: 66
% Factoring: 1
% Forward superposition: 746
% Backward superposition: 675
% Self superposition: 102
% Equality factoring: 96
% Equality resolution: 7
% 
% Split clauses: 52
% Split components: 104
% SAT solver clauses: 148
% SAT solver unit clauses: 3
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 52
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 144
% TWLsolver calls for satisfiability: 48
% 
% Memory used [KB]: 2302
% Time elapsed: 0.103 s
% ------------------------------
% ------------------------------
% Success in time 0.117 s
