Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.inferProps
% (134987)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 104
% Passive clauses: 2770
% Generated clauses: 15147
% Final active clauses: 98
% Final passive clauses: 2495
% Input formulas: 44
% Initial clauses: 80
% 
% Duplicate literals: 342
% Trivial inequalities: 114
% Fw subsumption resolutions: 1534
% Fw demodulations: 1988
% Bw demodulations: 4
% 
% Simple tautologies: 164
% Equational tautologies: 55
% Forward subsumptions: 8040
% 
% Binary resolution: 18
% Forward superposition: 6062
% Backward superposition: 4520
% Self superposition: 259
% Equality factoring: 152
% Equality resolution: 24
% 
% Split clauses: 145
% Split components: 296
% SAT solver clauses: 308
% SAT solver unit clauses: 1
% SAT solver binary clauses: 30
% 
% Sat splits: 145
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 308
% TWLsolver calls for satisfiability: 73
% 
% Memory used [KB]: 13048
% Time elapsed: 0.626 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.inferProps
% (135014)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 92
% Passive clauses: 708
% Generated clauses: 6383
% Final active clauses: 91
% Final passive clauses: 607
% Input formulas: 44
% Initial clauses: 80
% 
% Duplicate literals: 86
% Trivial inequalities: 10
% Fw subsumption resolutions: 69
% Fw demodulations: 465
% Bw demodulations: 10
% Condensations: 292
% Global subsumptions: 7
% 
% Simple tautologies: 33
% Equational tautologies: 16
% Forward subsumptions: 3714
% 
% Binary resolution: 5
% Forward superposition: 3600
% Backward superposition: 1227
% Self superposition: 88
% Equality factoring: 30
% Equality resolution: 5
% 
% Split clauses: 16
% Split components: 38
% SAT solver clauses: 1098
% SAT solver unit clauses: 123
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 14
% SAT solver learnt literals: 10
% 
% Sat splits: 16
% 
% TWLsolver clauses: 1070
% TWLsolver calls for satisfiability: 627
% 
% Memory used [KB]: 14711
% Time elapsed: 0.712 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.inferProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.inferProps
% SZS output start Proof for thm.inferProps
fof(f57996,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f161,f244,f242,f240,f160,f243,f159,f241,f239,f272,f275,f273,f978,f979,f995,f980,f981,f996,f982,f997,f994,f11016,f11020,f11018,f11017,f36005,f36006,f36213,f36007,f36008,f36215,f36009,f36216,f39252,f39257,f39301,f45861,f45862,f45906,f45905,f45672,f45915,f45671,f45670,f45916,f45669,f45668,f45917,f36212,f47190,f48313,f48343,f50527,f36214,f50530,f57969,f57974,f57975])).
fof(f57975,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f57967,f241])).
fof(f57967,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | ($spl1 | $spl4)),
  inference(unit_resulting_resolution,[],[f48342,f240,f245])).
fof(f245,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.infer.infer_st'(X1),X5) != s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | s('type.list.list'('type.infer_t.infer_t'),X4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f193,f174])).
fof(f174,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X38,X39] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num',X38))),s('type.num.num',X39)))),
  file('thm.inferProps.success_eqns|split|6','ARITY_1_2_const.arithmetic.+')).
fof(f193,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | s('type.infer.infer_st'(X1),X5) != s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))) | s('type.list.list'('type.infer_t.infer_t'),X4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))))) & (s('type.list.list'('type.infer_t.infer_t'),X4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) | s('type.infer.infer_st'(X1),X5) != s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5)))))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))))) & ((s('type.list.list'('type.infer_t.infer_t'),X4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) | s('type.infer.infer_st'(X1),X5) != s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5)))))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) <=> (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) <=> (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X7] : ! [X8,X15,X12,X17] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'type.infer.infer_st'(X7)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X8),s('type.infer.infer_st'(X7),X15))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'type.infer.infer_st'(X7)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X12))),s('type.infer.infer_st'(X7),X17))) <=> (s('type.list.list'('type.infer_t.infer_t'),X12) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X7),X15))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X8))))) & s('type.infer.infer_st'(X7),X17) = s('type.infer.infer_st'(X7),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X7),X15))))),s('type.num.num',X8))))),s('type.infer.infer_st'(X7),X15)))))),
  file('thm.inferProps.success_eqns|split|6','thm.inferProps.inferProps_27_prove_ltb')).
fof(f48342,plain,(
  s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | $spl4),
  inference(forward_demodulation,[],[f243,f174])).
fof(f57974,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f57968,f48342])).
fof(f57968,plain,(
  s('type.infer.infer_st'(sK1),sK5) != s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f241,f240,f245])).
fof(f57969,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f48342,f241,f240,f245])).
fof(f50530,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X1)))) ) | $spl42),
  inference(cnf_transformation,[],[f50530_D])).
fof(f50530_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X1)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f36214,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X6)))) ) | $spl26),
  inference(cnf_transformation,[],[f36214_D])).
fof(f36214_D,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X6)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f50527,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X0))) | s(bool,'T_0') != s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X1)))) ) | $spl22),
  inference(condensation,[],[f50516])).
fof(f50516,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X6))) | s(bool,X7) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X5))) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X5)))) ) | $spl22),
  inference(superposition,[],[f48554,f36212])).
fof(f48554,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X1))) | s(bool,X0) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X1)))) ) | $spl22),
  inference(equality_factoring,[],[f36212])).
fof(f48343,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f242,f47188])).
fof(f47188,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | $spl0),
  inference(unit_resulting_resolution,[],[f239,f191])).
fof(f191,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f48313,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f47189,f45918])).
fof(f45918,plain,(
  s('type.infer.infer_st'(sK1),sK5) != s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | $spl5),
  inference(forward_demodulation,[],[f244,f174])).
fof(f47189,plain,(
  s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | $spl0),
  inference(unit_resulting_resolution,[],[f239,f246])).
fof(f246,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))) )),
  inference(forward_demodulation,[],[f192,f174])).
fof(f192,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5)))) )),
  inference(cnf_transformation,[],[f134])).
fof(f47190,plain,(
  $false | ($spl0 | $spl5)),
  inference(unit_resulting_resolution,[],[f45918,f239,f246])).
fof(f36212,plain,(
  ( ! [X2,X0] : (s(bool,X2) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X0))) | s(bool,'T_0') = s(bool,X2)) ) | $spl22),
  inference(cnf_transformation,[],[f36212_D])).
fof(f36212_D,plain,(
  ( ! [X2,X0] : (s(bool,X2) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X0))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f45917,plain,(
  ( ! [X12,X10,X11] : (s('type.pair.prod'('type.infer.exc'(bool,X10),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X10),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X10,X11),s('type.infer.infer_st'(sK1),X12)))) ) | $spl40),
  inference(cnf_transformation,[],[f45917_D])).
fof(f45917_D,plain,(
  ( ! [X12,X10,X11] : (s('type.pair.prod'('type.infer.exc'(bool,X10),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X10),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X10,X11),s('type.infer.infer_st'(sK1),X12)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f45668,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.pair.prod'('type.infer.exc'(bool,X5),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X5),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X5,X6),s('type.infer.infer_st'(sK1),X7))) | s(bool,X8) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X4))) | s(bool,'T_0') = s(bool,X8)) ) | $spl4),
  inference(superposition,[],[f36047,f267])).
fof(f267,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f166,f166])).
fof(f166,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.inferProps.success_eqns|split|6',aHL_BOOL_CASES)).
fof(f36047,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.pair.prod'('type.infer.exc'(X10,X11),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X11,X13),s('type.infer.infer_st'(sK1),X14))) != s('type.pair.prod'('type.infer.exc'(X10,X11),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(X10,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X10),X12))),s('type.infer.infer_st'(sK1),sK5)))) ) | $spl4),
  inference(superposition,[],[f248,f7379])).
fof(f7379,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'(X0,X1),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X2))),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(X0,X1),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(X0,X1),'const.infer.Success_1'(s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X2))))),s('type.infer.infer_st'(sK1),sK5)))) ) | $spl4),
  inference(forward_demodulation,[],[f7378,f167])).
fof(f167,plain,(
  ( ! [X0,X1] : (s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X1))) = s(X0,happ(s(fun('type.infer.infer_st'(X0),X0),'const.infer.infer_st_subst_0'),s('type.infer.infer_st'(X0),X1)))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X1))) = s(X0,happ(s(fun('type.infer.infer_st'(X0),X0),'const.infer.infer_st_subst_0'),s('type.infer.infer_st'(X0),X1)))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1] : s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X1))) = s(X0,happ(s(fun('type.infer.infer_st'(X0),X0),'const.infer.infer_st_subst_0'),s('type.infer.infer_st'(X0),X1)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X7] : ! [X38] : s(X7,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X7),X38))) = s(X7,happ(s(fun('type.infer.infer_st'(X7),X7),'const.infer.infer_st_subst_0'),s('type.infer.infer_st'(X7),X38)))),
  file('thm.inferProps.success_eqns|split|6','ARITY_0_1_const.infer.infer_st_subst')).
fof(f7378,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'(X0,X1),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(X0,X1),'const.infer.Success_1'(s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X2))))),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(X0,X1),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(X0,happ(s(fun('type.infer.infer_st'(X0),X0),'const.infer.infer_st_subst_0'),s('type.infer.infer_st'(X0),X2))),s('type.infer.infer_st'(sK1),sK5)))) ) | $spl4),
  inference(forward_demodulation,[],[f6185,f252])).
fof(f252,plain,(
  s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | $spl4),
  inference(forward_demodulation,[],[f243,f174])).
fof(f6185,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'(X0,X1),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(X0,X1),'const.infer.Success_1'(s(X0,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(X0),X2))))),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(X0,X1),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(X0,happ(s(fun('type.infer.infer_st'(X0),X0),'const.infer.infer_st_subst_0'),s('type.infer.infer_st'(X0),X2))),s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f167,f252,f211])).
fof(f211,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X1,X3) != s(X1,X5) | s(X2,X4) != s(X2,X6) | s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6)))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) != s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) | (s(X1,X3) = s(X1,X5) & s(X2,X4) = s(X2,X6))) & (s(X1,X3) != s(X1,X5) | s(X2,X4) != s(X2,X6) | s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6)))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) != s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) | (s(X1,X3) = s(X1,X5) & s(X2,X4) = s(X2,X6))) & ((s(X1,X3) != s(X1,X5) | s(X2,X4) != s(X2,X6)) | s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6)))))),
  inference(nnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) <=> (s(X1,X3) = s(X1,X5) & s(X2,X4) = s(X2,X6)))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5,X6] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) <=> (s(X1,X3) = s(X1,X5) & s(X2,X4) = s(X2,X6)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X13,X7,X6] : ! [X14,X15,X16,X17] : (s('type.pair.prod'('type.infer.exc'(X7,X13),X6),'const.infer.st_ex_return_2'(s(X7,X14),s(X6,X15))) = s('type.pair.prod'('type.infer.exc'(X7,X13),X6),'const.pair.,_2'(s('type.infer.exc'(X7,X13),'const.infer.Success_1'(s(X7,X16))),s(X6,X17))) <=> (s(X7,X14) = s(X7,X16) & s(X6,X15) = s(X6,X17)))),
  file('thm.inferProps.success_eqns|split|6','thm.inferProps.inferProps_24_prove_ltb')).
fof(f248,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.failwith_2'(s(X0,X3),s(X2,X4))) != s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6)))) )),
  inference(subsumption_resolution,[],[f207,f163])).
fof(f163,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.inferProps.success_eqns|split|6',aHL_FALSITY)).
fof(f207,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.failwith_2'(s(X0,X3),s(X2,X4))) != s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.failwith_2'(s(X0,X3),s(X2,X4))) != s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.failwith_2'(s(X0,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6)))))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.failwith_2'(s(X0,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) <=> p(s(bool,'F_0')))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5,X6] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.failwith_2'(s(X0,X3),s(X2,X4))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) <=> p(s(bool,'F_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X13,X6] : ! [X31,X15,X14,X17] : (s('type.pair.prod'('type.infer.exc'(X13,X7),X6),'const.infer.failwith_2'(s(X7,X31),s(X6,X15))) = s('type.pair.prod'('type.infer.exc'(X13,X7),X6),'const.pair.,_2'(s('type.infer.exc'(X13,X7),'const.infer.Success_1'(s(X13,X14))),s(X6,X17))) <=> p(s(bool,'F_0')))),
  file('thm.inferProps.success_eqns|split|6','thm.inferProps.inferProps_3|49|_prove_ltb')).
fof(f45669,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.pair.prod'('type.infer.exc'(bool,X10),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X10),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X10,X11),s('type.infer.infer_st'(sK1),X12))) | s(bool,X13) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X9))) | s(bool,'T_0') = s(bool,X13)) ) | $spl4),
  inference(superposition,[],[f36047,f267])).
fof(f45916,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.pair.prod'('type.infer.exc'(bool,X21),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X20),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X21),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X21,X22),s('type.infer.infer_st'(sK1),X23))) | s(bool,'T_0') = s(bool,X20)) ) | $spl38),
  inference(cnf_transformation,[],[f45916_D])).
fof(f45916_D,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.pair.prod'('type.infer.exc'(bool,X21),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X20),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X21),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X21,X22),s('type.infer.infer_st'(sK1),X23))) | s(bool,'T_0') = s(bool,X20)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f45670,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.pair.prod'('type.infer.exc'(bool,X16),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X15),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X16),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X16,X17),s('type.infer.infer_st'(sK1),X18))) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X14))) | s(bool,'T_0') = s(bool,X15)) ) | $spl4),
  inference(superposition,[],[f36047,f267])).
fof(f45671,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.pair.prod'('type.infer.exc'(bool,X21),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X20),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X21),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X21,X22),s('type.infer.infer_st'(sK1),X23))) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X19)))) ) | $spl4),
  inference(superposition,[],[f36047,f267])).
fof(f45915,plain,(
  ( ! [X26,X27,X25] : (s('type.pair.prod'('type.infer.exc'(bool,X25),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'F_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X25),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X25,X26),s('type.infer.infer_st'(sK1),X27)))) ) | $spl36),
  inference(cnf_transformation,[],[f45915_D])).
fof(f45915_D,plain,(
  ( ! [X26,X27,X25] : (s('type.pair.prod'('type.infer.exc'(bool,X25),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'F_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X25),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X25,X26),s('type.infer.infer_st'(sK1),X27)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f45672,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.pair.prod'('type.infer.exc'(bool,X25),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'F_0'),s('type.infer.infer_st'(sK1),sK5))) != s('type.pair.prod'('type.infer.exc'(bool,X25),'type.infer.infer_st'(sK1)),'const.infer.failwith_2'(s(X25,X26),s('type.infer.infer_st'(sK1),X27))) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X24)))) ) | $spl4),
  inference(superposition,[],[f36047,f166])).
fof(f45905,plain,(
  ( ! [X4,X0,X3] : (s(bool,X0) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X0) = s(bool,X4)) ) | $spl32),
  inference(cnf_transformation,[],[f45905_D])).
fof(f45905_D,plain,(
  ( ! [X4,X0,X3] : (s(bool,X0) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X0) = s(bool,X4)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f45906,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.infer.exc'(bool,X1),bool),'const.infer.read_1'(s(bool,'T_0'))) != s('type.pair.prod'('type.infer.exc'(bool,X1),bool),'const.infer.st_ex_return_2'(s(bool,'T_0'),s(bool,X2)))) ) | $spl34),
  inference(cnf_transformation,[],[f45906_D])).
fof(f45906_D,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.infer.exc'(bool,X1),bool),'const.infer.read_1'(s(bool,'T_0'))) != s('type.pair.prod'('type.infer.exc'(bool,X1),bool),'const.infer.st_ex_return_2'(s(bool,'T_0'),s(bool,X2)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f45862,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.pair.prod'('type.infer.exc'(bool,X6),bool),'const.infer.read_1'(s(bool,'T_0'))) != s('type.pair.prod'('type.infer.exc'(bool,X6),bool),'const.infer.st_ex_return_2'(s(bool,'T_0'),s(bool,X7))) | s(bool,X5) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X8))) | s(bool,X5) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl26),
  inference(superposition,[],[f36832,f267])).
fof(f36832,plain,(
  ( ! [X422,X424,X421,X423] : (s('type.pair.prod'('type.infer.exc'(bool,X422),bool),'const.infer.read_1'(s(bool,X423))) != s('type.pair.prod'('type.infer.exc'(bool,X422),bool),'const.infer.st_ex_return_2'(s(bool,'T_0'),s(bool,X424))) | s(bool,X423) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X421)))) ) | $spl26),
  inference(superposition,[],[f1363,f36214])).
fof(f1363,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.infer.exc'(X0,X1),X0),'const.infer.read_1'(s(X0,X2))) != s('type.pair.prod'('type.infer.exc'(X0,X1),X0),'const.infer.st_ex_return_2'(s(X0,X3),s(X0,X4))) | s(X0,X2) = s(X0,X3)) )),
  inference(superposition,[],[f209,f176])).
fof(f176,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X1),'const.infer.read_1'(s(X1,X2))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X1),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X2))),s(X1,X2)))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.infer.exc'(X1,X0),X1),'const.infer.read_1'(s(X1,X2))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X1),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X2))),s(X1,X2)))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'('type.infer.exc'(X1,X0),X1),'const.infer.read_1'(s(X1,X2))) = s('type.pair.prod'('type.infer.exc'(X1,X0),X1),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X2))),s(X1,X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X5] : s('type.pair.prod'('type.infer.exc'(X7,X6),X7),'const.infer.read_1'(s(X7,X5))) = s('type.pair.prod'('type.infer.exc'(X7,X6),X7),'const.pair.,_2'(s('type.infer.exc'(X7,X6),'const.infer.Success_1'(s(X7,X5))),s(X7,X5)))),
  file('thm.inferProps.success_eqns|split|6','thm.infer.read_def')).
fof(f209,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.infer.st_ex_return_2'(s(X1,X3),s(X2,X4))) != s('type.pair.prod'('type.infer.exc'(X1,X0),X2),'const.pair.,_2'(s('type.infer.exc'(X1,X0),'const.infer.Success_1'(s(X1,X5))),s(X2,X6))) | s(X1,X3) = s(X1,X5)) )),
  inference(cnf_transformation,[],[f141])).
fof(f45861,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.infer.exc'(bool,X1),bool),'const.infer.read_1'(s(bool,'T_0'))) != s('type.pair.prod'('type.infer.exc'(bool,X1),bool),'const.infer.st_ex_return_2'(s(bool,'T_0'),s(bool,X2))) | s(bool,X0) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl26),
  inference(superposition,[],[f36832,f267])).
fof(f39301,plain,(
  $false | ($spl22 | $spl26)),
  inference(subsumption_resolution,[],[f39263,f162])).
fof(f162,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.inferProps.success_eqns|split|6',aHL_TRUTH)).
fof(f39263,plain,(
  ~p(s(bool,'T_0')) | ($spl22 | $spl26)),
  inference(backward_demodulation,[],[f39243,f163])).
fof(f39243,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,X4)) ) | ($spl22 | $spl26)),
  inference(duplicate_literal_removal,[],[f38989])).
fof(f38989,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | ($spl22 | $spl26)),
  inference(superposition,[],[f36212,f36214])).
fof(f39257,plain,(
  $false | ($spl9 | $spl22 | $spl26)),
  inference(subsumption_resolution,[],[f39256,f275])).
fof(f39256,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl22 | $spl26)),
  inference(condensation,[],[f39255])).
fof(f39255,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X15)) ) | ($spl22 | $spl26)),
  inference(forward_demodulation,[],[f39245,f36214])).
fof(f39245,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X16))) | s(bool,'T_0') = s(bool,X15)) ) | $spl22),
  inference(duplicate_literal_removal,[],[f38972])).
fof(f38972,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X16))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl22),
  inference(superposition,[],[f36212,f166])).
fof(f39252,plain,(
  $false | ($spl9 | $spl22 | $spl26)),
  inference(subsumption_resolution,[],[f39251,f275])).
fof(f39251,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl9 | $spl22 | $spl26)),
  inference(forward_demodulation,[],[f38966,f36214])).
fof(f38966,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X0)))) ) | ($spl9 | $spl22)),
  inference(unit_resulting_resolution,[],[f275,f36212])).
fof(f36216,plain,(
  ( ! [X13] : (s('type.pair.prod'('type.infer.exc'(bool,X13),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'F_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X13),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X13),'const.infer.Success_1'(s(bool,'F_0'))),s('type.infer.infer_st'(sK1),sK5)))) ) | $spl30),
  inference(cnf_transformation,[],[f36216_D])).
fof(f36216_D,plain,(
  ( ! [X13] : (s('type.pair.prod'('type.infer.exc'(bool,X13),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'F_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X13),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X13),'const.infer.Success_1'(s(bool,'F_0'))),s('type.infer.infer_st'(sK1),sK5)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f36009,plain,(
  ( ! [X12,X13] : (s('type.pair.prod'('type.infer.exc'(bool,X13),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'F_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X13),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X13),'const.infer.Success_1'(s(bool,'F_0'))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X12)))) ) | $spl4),
  inference(superposition,[],[f7379,f166])).
fof(f36215,plain,(
  ( ! [X8,X7] : (s('type.pair.prod'('type.infer.exc'(bool,X8),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X7),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X8),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X8),'const.infer.Success_1'(s(bool,X7))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(cnf_transformation,[],[f36215_D])).
fof(f36215_D,plain,(
  ( ! [X8,X7] : (s('type.pair.prod'('type.infer.exc'(bool,X8),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X7),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X8),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X8),'const.infer.Success_1'(s(bool,X7))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,'T_0') = s(bool,X7)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f36008,plain,(
  ( ! [X10,X11,X9] : (s('type.pair.prod'('type.infer.exc'(bool,X11),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X10),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X11),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X11),'const.infer.Success_1'(s(bool,X10))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X9)))) ) | $spl4),
  inference(superposition,[],[f7379,f267])).
fof(f36007,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.infer.exc'(bool,X8),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,X7),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X8),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X8),'const.infer.Success_1'(s(bool,X7))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,'T_0') = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X6))) | s(bool,'T_0') = s(bool,X7)) ) | $spl4),
  inference(superposition,[],[f7379,f267])).
fof(f36213,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'(bool,X1),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X1),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X1),'const.infer.Success_1'(s(bool,'T_0'))),s('type.infer.infer_st'(sK1),sK5)))) ) | $spl24),
  inference(cnf_transformation,[],[f36213_D])).
fof(f36213_D,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'(bool,X1),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X1),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X1),'const.infer.Success_1'(s(bool,'T_0'))),s('type.infer.infer_st'(sK1),sK5)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f36006,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.infer.exc'(bool,X4),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X4),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X4),'const.infer.Success_1'(s(bool,'T_0'))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,X5) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X3))) | s(bool,'T_0') = s(bool,X5)) ) | $spl4),
  inference(superposition,[],[f7379,f267])).
fof(f36005,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'(bool,X1),'type.infer.infer_st'(sK1)),'const.infer.st_ex_return_2'(s(bool,'T_0'),s('type.infer.infer_st'(sK1),sK5))) = s('type.pair.prod'('type.infer.exc'(bool,X1),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'(bool,X1),'const.infer.Success_1'(s(bool,'T_0'))),s('type.infer.infer_st'(sK1),sK5))) | s(bool,X2) = s(bool,'const.infer.infer_st_subst_1'(s('type.infer.infer_st'(bool),X0))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(superposition,[],[f7379,f267])).
fof(f11017,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s(X1,X2) != s(X1,X3) | s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.infer.guard_3'(s(bool,'T_0'),s(X4,X5),s(X1,X2))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X4),'const.infer.Success_1'(s('type.one.one',X6))),s(X1,X3)))) ) | $spl18),
  inference(cnf_transformation,[],[f11017_D])).
fof(f11017_D,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s(X1,X2) != s(X1,X3) | s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.infer.guard_3'(s(bool,'T_0'),s(X4,X5),s(X1,X2))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X4),'const.infer.Success_1'(s('type.one.one',X6))),s(X1,X3)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f11018,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f11018_D])).
fof(f11018_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f11020,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(X1,X2) != s(X1,X3) | s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.infer.guard_3'(s(bool,'T_0'),s(X4,X5),s(X1,X2))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X4),'const.infer.Success_1'(s('type.one.one',X6))),s(X1,X3)))) )),
  inference(condensation,[],[f11019])).
fof(f11019,plain,(
  ( ! [X47,X54,X52,X50,X48,X53,X51,X49] : (s(X48,X49) != s(X48,X50) | s('type.pair.prod'('type.infer.exc'('type.one.one',X51),X48),'const.infer.guard_3'(s(bool,'T_0'),s(X51,X52),s(X48,X49))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X51),X48),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X51),'const.infer.Success_1'(s('type.one.one',X53))),s(X48,X50))) | s(bool,X47) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f10980,f355])).
fof(f355,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f162,f267])).
fof(f10980,plain,(
  ( ! [X47,X54,X52,X50,X48,X53,X51,X49] : (~p(s(bool,X47)) | s(X48,X49) != s(X48,X50) | s('type.pair.prod'('type.infer.exc'('type.one.one',X51),X48),'const.infer.guard_3'(s(bool,'T_0'),s(X51,X52),s(X48,X49))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X51),X48),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X51),'const.infer.Success_1'(s('type.one.one',X53))),s(X48,X50))) | s(bool,X47) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f247,f267])).
fof(f247,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,X2)) | s(X1,X4) != s(X1,X6) | s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6)))) )),
  inference(subsumption_resolution,[],[f197,f164])).
fof(f164,plain,(
  ( ! [X0] : (s('type.one.one','const.one.one_0') = s('type.one.one',X0)) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : s('type.one.one','const.one.one_0') = s('type.one.one',X0)),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X14] : s('type.one.one','const.one.one_0') = s('type.one.one',X14)),
  file('thm.inferProps.success_eqns|split|6','thm.one.one')).
fof(f197,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6))) | s(X1,X4) != s(X1,X6) | s('type.one.one','const.one.one_0') != s('type.one.one',X5) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) != s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6))) | (p(s(bool,X2)) & s('type.one.one','const.one.one_0') = s('type.one.one',X5) & s(X1,X4) = s(X1,X6))) & (~p(s(bool,X2)) | s('type.one.one','const.one.one_0') != s('type.one.one',X5) | s(X1,X4) != s(X1,X6) | s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6)))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) != s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6))) | (p(s(bool,X2)) & s('type.one.one','const.one.one_0') = s('type.one.one',X5) & s(X1,X4) = s(X1,X6))) & ((~p(s(bool,X2)) | s('type.one.one','const.one.one_0') != s('type.one.one',X5) | s(X1,X4) != s(X1,X6)) | s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6)))))),
  inference(nnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6))) <=> (p(s(bool,X2)) & s('type.one.one','const.one.one_0') = s('type.one.one',X5) & s(X1,X4) = s(X1,X6)))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.infer.guard_3'(s(bool,X2),s(X0,X3),s(X1,X4))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X0),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X0),'const.infer.Success_1'(s('type.one.one',X5))),s(X1,X6))) <=> (p(s(bool,X2)) & s('type.one.one','const.one.one_0') = s('type.one.one',X5) & s(X1,X4) = s(X1,X6)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X7,X6] : ! [X35,X31,X15,X14,X17] : (s('type.pair.prod'('type.infer.exc'('type.one.one',X7),X6),'const.infer.guard_3'(s(bool,X35),s(X7,X31),s(X6,X15))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X7),X6),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X7),'const.infer.Success_1'(s('type.one.one',X14))),s(X6,X17))) <=> (p(s(bool,X35)) & s('type.one.one','const.one.one_0') = s('type.one.one',X14) & s(X6,X15) = s(X6,X17)))),
  file('thm.inferProps.success_eqns|split|6','thm.inferProps.inferProps_38_prove_ltb')).
fof(f11016,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(X1,X2) != s(X1,X3) | s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.infer.guard_3'(s(bool,'T_0'),s(X4,X5),s(X1,X2))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X4),X1),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X4),'const.infer.Success_1'(s('type.one.one',X6))),s(X1,X3)))) )),
  inference(condensation,[],[f11015])).
fof(f11015,plain,(
  ( ! [X39,X45,X43,X41,X46,X44,X42,X40] : (s(X40,X41) != s(X40,X42) | s('type.pair.prod'('type.infer.exc'('type.one.one',X43),X40),'const.infer.guard_3'(s(bool,'T_0'),s(X43,X44),s(X40,X41))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X43),X40),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X43),'const.infer.Success_1'(s('type.one.one',X45))),s(X40,X42))) | s(bool,X39) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f10979,f355])).
fof(f10979,plain,(
  ( ! [X39,X45,X43,X41,X46,X44,X42,X40] : (~p(s(bool,X39)) | s(X40,X41) != s(X40,X42) | s('type.pair.prod'('type.infer.exc'('type.one.one',X43),X40),'const.infer.guard_3'(s(bool,'T_0'),s(X43,X44),s(X40,X41))) = s('type.pair.prod'('type.infer.exc'('type.one.one',X43),X40),'const.pair.,_2'(s('type.infer.exc'('type.one.one',X43),'const.infer.Success_1'(s('type.one.one',X45))),s(X40,X42))) | s(bool,X39) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f247,f267])).
fof(f994,plain,(
  ( ! [X2,X1] : (s(fun('type.one.one',bool),X1) = s(fun('type.one.one',bool),X2)) ) | $spl10),
  inference(cnf_transformation,[],[f994_D])).
fof(f994_D,plain,(
  ( ! [X2,X1] : (s(fun('type.one.one',bool),X1) = s(fun('type.one.one',bool),X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f997,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s('type.one.one',X16))) | s(bool,'T_0') = s(bool,g(s('type.one.one',X16)))) ) | $spl16),
  inference(cnf_transformation,[],[f997_D])).
fof(f997_D,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s('type.one.one',X16))) | s(bool,'T_0') = s(bool,g(s('type.one.one',X16)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f982,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s('type.one.one',X16))) | s(fun('type.one.one',bool),X17) = s(fun('type.one.one',bool),X18) | s(bool,'T_0') = s(bool,g(s('type.one.one',X16)))) )),
  inference(superposition,[],[f563,f166])).
fof(f563,plain,(
  ( ! [X21,X19,X22,X20] : (s(X21,f(s('type.one.one',X22))) != s(X21,g(s('type.one.one',X22))) | s(fun('type.one.one',X21),X19) = s(fun('type.one.one',X21),X20)) )),
  inference(superposition,[],[f181,f253])).
fof(f253,plain,(
  ( ! [X0,X1] : (s('type.one.one',X0) = s('type.one.one',X1)) )),
  inference(superposition,[],[f164,f164])).
fof(f181,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.inferProps.success_eqns|split|6',aHL_EXT)).
fof(f996,plain,(
  ( ! [X8,X9] : (s(bool,X9) != s(bool,f(s('type.one.one',X8))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s('type.one.one',X8)))) ) | $spl14),
  inference(cnf_transformation,[],[f996_D])).
fof(f996_D,plain,(
  ( ! [X8,X9] : (s(bool,X9) != s(bool,f(s('type.one.one',X8))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s('type.one.one',X8)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f981,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,X13) != s(bool,f(s('type.one.one',X12))) | s(fun('type.one.one',bool),X14) = s(fun('type.one.one',bool),X15) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,g(s('type.one.one',X12)))) )),
  inference(superposition,[],[f563,f267])).
fof(f980,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X9) != s(bool,f(s('type.one.one',X8))) | s(fun('type.one.one',bool),X10) = s(fun('type.one.one',bool),X11) | s(bool,'T_0') = s(bool,g(s('type.one.one',X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f563,f267])).
fof(f995,plain,(
  ( ! [X0,X3] : (s(bool,'T_0') != s(bool,f(s('type.one.one',X0))) | s(bool,'T_0') = s(bool,X3) | s(bool,X3) = s(bool,g(s('type.one.one',X0)))) ) | $spl12),
  inference(cnf_transformation,[],[f995_D])).
fof(f995_D,plain,(
  ( ! [X0,X3] : (s(bool,'T_0') != s(bool,f(s('type.one.one',X0))) | s(bool,'T_0') = s(bool,X3) | s(bool,X3) = s(bool,g(s('type.one.one',X0)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f979,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,f(s('type.one.one',X4))) | s(fun('type.one.one',bool),X5) = s(fun('type.one.one',bool),X6) | s(bool,X7) = s(bool,g(s('type.one.one',X4))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f563,f267])).
fof(f978,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s('type.one.one',X0))) | s(fun('type.one.one',bool),X1) = s(fun('type.one.one',bool),X2) | s(bool,X3) = s(bool,g(s('type.one.one',X0))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f563,f267])).
fof(f273,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f273_D])).
fof(f273_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f275,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl9),
  inference(cnf_transformation,[],[f275_D])).
fof(f275_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f272,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f166])).
fof(f239,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5))) | $spl0),
  inference(cnf_transformation,[],[f239_D])).
fof(f239_D,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f241,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | $spl2),
  inference(cnf_transformation,[],[f241_D])).
fof(f241_D,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f159,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5)))),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5))) | (s('type.list.list'('type.infer_t.infer_t'),sK4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) & s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))))) & (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5))) | s('type.list.list'('type.infer_t.infer_t'),sK4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | s('type.infer.infer_st'(sK1),sK5) != s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f124])).
fof(f124,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))))) & (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | s('type.list.list'('type.infer_t.infer_t'),X4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) | s('type.infer.infer_st'(X1),X5) != s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))))) & (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) | (s('type.list.list'('type.infer_t.infer_t'),X4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) | s('type.infer.infer_st'(X1),X5) != s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3))))))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) <~> (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) <=> (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X2),s('type.infer.infer_st'(X1),X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'type.infer.infer_st'(X1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X4))),s('type.infer.infer_st'(X1),X5))) <=> (s('type.list.list'('type.infer_t.infer_t'),X4) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X2))))) & s('type.infer.infer_st'(X1),X5) = s('type.infer.infer_st'(X1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X1),X3))))),s('type.num.num',X2))))),s('type.infer.infer_st'(X1),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'type.infer.infer_st'(X7)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X8),s('type.infer.infer_st'(X7),X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'type.infer.infer_st'(X7)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X10))),s('type.infer.infer_st'(X7),X11))) <=> (s('type.list.list'('type.infer_t.infer_t'),X10) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X7),X9))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X8))))) & s('type.infer.infer_st'(X7),X11) = s('type.infer.infer_st'(X7),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X7),X9))))),s('type.num.num',X8))))),s('type.infer.infer_st'(X7),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'type.infer.infer_st'(X7)),'const.infer.n_fresh_uvar_2'(s('type.num.num',X8),s('type.infer.infer_st'(X7),X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'type.infer.infer_st'(X7)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),X6),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),X10))),s('type.infer.infer_st'(X7),X11))) <=> (s('type.list.list'('type.infer_t.infer_t'),X10) = s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X7),X9))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X8))))) & s('type.infer.infer_st'(X7),X11) = s('type.infer.infer_st'(X7),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(X7),X9))))),s('type.num.num',X8))))),s('type.infer.infer_st'(X7),X9)))))),
  file('thm.inferProps.success_eqns|split|6','thm.inferProps.success_eqns|split|6')).
fof(f243,plain,(
  s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | $spl4),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f160,plain,(
  s('type.infer.infer_st'(sK1),sK5) = s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5)))),
  inference(cnf_transformation,[],[f125])).
fof(f240,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5))) | $spl1),
  inference(cnf_transformation,[],[f240_D])).
fof(f240_D,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f242,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | $spl3),
  inference(cnf_transformation,[],[f242_D])).
fof(f242_D,plain,(
  s('type.list.list'('type.infer_t.infer_t'),sK4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f244,plain,(
  s('type.infer.infer_st'(sK1),sK5) != s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | $spl5),
  inference(cnf_transformation,[],[f244_D])).
fof(f244_D,plain,(
  s('type.infer.infer_st'(sK1),sK5) != s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f161,plain,(
  s('type.infer.infer_st'(sK1),sK5) != s('type.infer.infer_st'(sK1),'const.infer.infer_st_next_uvar_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))),s('type.num.num',sK2))))),s('type.infer.infer_st'(sK1),sK3))) | s('type.list.list'('type.infer_t.infer_t'),sK4) != s('type.list.list'('type.infer_t.infer_t'),'const.list.MAP_2'(s(fun('type.num.num','type.infer_t.infer_t'),'_dst_x0x1_2'(s(fun('type.num.num','type.infer_t.infer_t'),'const.infer_t.Infer_Tuvar_0'),s(fun('type.num.num','type.num.num'),'const.arithmetic.+_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'(sK1),sK3))))))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.infer.n_fresh_uvar_2'(s('type.num.num',sK2),s('type.infer.infer_st'(sK1),sK3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'type.infer.infer_st'(sK1)),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.infer_t.infer_t'),sK0),'const.infer.Success_1'(s('type.list.list'('type.infer_t.infer_t'),sK4))),s('type.infer.infer_st'(sK1),sK5)))),
  inference(cnf_transformation,[],[f125])).
% SZS output end Proof for thm.inferProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 191
% Passive clauses: 7083
% Generated clauses: 57216
% Final active clauses: 100
% Final passive clauses: 1241
% Input formulas: 44
% Initial clauses: 80
% Discarded non-redundant clauses: 18340
% 
% Duplicate literals: 139
% Trivial inequalities: 16
% Fw subsumption resolutions: 38
% Fw demodulations: 15075
% Bw demodulations: 68
% Condensations: 372
% 
% Simple tautologies: 20
% Equational tautologies: 93
% Forward subsumptions: 22935
% Fw demodulations to eq. taut.: 911
% Bw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 26597
% Forward superposition: 8065
% Backward superposition: 6423
% Self superposition: 219
% Equality factoring: 30
% Equality resolution: 20
% 
% Split clauses: 24
% Split components: 49
% SAT solver clauses: 7142
% SAT solver unit clauses: 641
% SAT solver binary clauses: 3513
% 
% Sat splits: 24
% Sat splitting refutations: 9
% 
% Memory used [KB]: 73431
% Time elapsed: 4.245 s
% ------------------------------
% ------------------------------
% Success in time 5.62 s
