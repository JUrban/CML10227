Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.inferProps
% (77631)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 43
% Passive clauses: 780
% Generated clauses: 6620
% Final active clauses: 41
% Final passive clauses: 687
% Input formulas: 8
% Initial clauses: 20
% 
% Duplicate literals: 582
% Trivial inequalities: 87
% Fw subsumption resolutions: 957
% 
% Simple tautologies: 181
% Equational tautologies: 110
% Forward subsumptions: 2798
% 
% Binary resolution: 40
% Forward superposition: 2366
% Backward superposition: 1976
% Self superposition: 359
% Equality factoring: 326
% Equality resolution: 9
% 
% Split clauses: 391
% Split components: 790
% SAT solver clauses: 1176
% SAT solver unit clauses: 232
% SAT solver binary clauses: 396
% 
% Sat splits: 391
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1172
% TWLsolver calls for satisfiability: 38
% 
% Memory used [KB]: 3198
% Time elapsed: 0.620 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.inferProps
% (77659)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 31
% Passive clauses: 106
% Generated clauses: 4061
% Final active clauses: 28
% Final passive clauses: 74
% Input formulas: 8
% Initial clauses: 20
% 
% Duplicate literals: 729
% Trivial inequalities: 42
% Fw subsumption resolutions: 192
% Fw demodulations: 29
% Bw demodulations: 3
% Condensations: 1189
% 
% Simple tautologies: 71
% Equational tautologies: 52
% Forward subsumptions: 1347
% 
% Binary resolution: 16
% Forward superposition: 777
% Backward superposition: 662
% Self superposition: 187
% Equality factoring: 172
% Equality resolution: 3
% 
% Split clauses: 49
% Split components: 102
% SAT solver clauses: 341
% SAT solver unit clauses: 18
% SAT solver binary clauses: 70
% 
% Sat splits: 49
% 
% TWLsolver clauses: 341
% TWLsolver calls for satisfiability: 188
% 
% Memory used [KB]: 3198
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.inferProps
% (77672)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 194
% Passive clauses: 1345
% Generated clauses: 61259
% Final active clauses: 97
% Final passive clauses: 401
% Input formulas: 8
% Initial clauses: 20
% 
% Duplicate literals: 7529
% Trivial inequalities: 429
% Fw subsumption resolutions: 3899
% Fw demodulations: 1573
% Bw demodulations: 537
% Condensations: 13793
% Global subsumptions: 34
% 
% Simple tautologies: 771
% Equational tautologies: 1786
% Forward subsumptions: 28034
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 4468
% Forward superposition: 15996
% Backward superposition: 12860
% Self superposition: 741
% Equality factoring: 604
% Equality resolution: 24
% 
% Split clauses: 222
% Split components: 467
% SAT solver clauses: 1886
% SAT solver unit clauses: 10
% SAT solver binary clauses: 139
% 
% Sat splits: 222
% Sat splitting refutations: 61
% 
% Memory used [KB]: 25458
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.inferProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.inferProps
% SZS output start Proof for thm.inferProps
fof(f254,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f43,f42,f58,f41,f56,f40,f62,f60,f65,f66,f67,f68,f120,f158,f140,f159,f139,f160,f54,f162,f163,f164,f165,f208,f72,f210,f209,f76,f211,f241,f239,f74,f237,f242,f70,f250])).
fof(f250,plain,(
  $false | ($spl1 | $spl14 | $spl17)),
  inference(subsumption_resolution,[],[f249,f212])).
fof(f212,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,X1)))) ) | $spl17),
  inference(resolution,[],[f76,f63])).
fof(f63,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(sK9,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(sK9,X12)))) )),
  inference(subsumption_resolution,[],[f39,f33])).
fof(f33,plain,(
  ( ! [X0,X12,X10,X11,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : ((~sP0(X0) | (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))) & ((s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(X0)),s(X0,sK2(X0)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0)))),s(X0,sK4(X0)))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(X0)))),s('type.ast.t',sK1(X0)))))) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(X0)),s(X0,sK6(X0)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(X0)))),s(X0,sK8(X0)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(X0)))),s('type.list.list'('type.ast.t'),sK5(X0)))))) | sP0(X0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f24])).
fof(f24,plain,(
  ! [X0] : ((~sP0(X0) | (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))) & (? [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) | ? [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1))))) | sP0(X0)))),
  inference(rectify,[],[f23])).
fof(f23,plain,(
  ! [X0] : ((~sP0(X0) | (! [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) & ! [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1))))))) & (? [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) | ? [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1))))) | sP0(X0)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0] : ((~sP0(X0) | (! [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) & ! [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1))))))) & ((? [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) | ? [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1)))))) | sP0(X0)))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : (sP0(X0) <=> (! [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) & ! [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f39,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(sK9,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(sK9,X12))) | sP0(sK9)) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  (sP0(sK9) | (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(sK9,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(sK9,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(sK9,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(sK9,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))) & (~sP0(sK9) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,sK11))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(sK9,sK13))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK12))),s('type.ast.t',sK10))))) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,sK17))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17])],[f28])).
fof(f28,plain,(
  ? [X0] : ((sP0(X0) | (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))) & (~sP0(X0) | ? [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) | ? [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1)))))))),
  inference(rectify,[],[f27])).
fof(f27,plain,(
  ? [X0] : ((sP0(X0) | (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))) & (~sP0(X0) | ? [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) | ? [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))))))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ? [X0] : ((sP0(X0) | (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))) & (~sP0(X0) | (? [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) & ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) | ? [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9))))))))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ? [X0] : (sP0(X0) <~> (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))))))),
  inference(definition_folding,[],[f18,f20])).
fof(f18,plain,(
  ? [X0] : ((! [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) & ! [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1)))))) <~> (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ((! [X5,X6,X7,X8] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(X0,X6))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(X0,X8))) => p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X5))))) & ! [X1,X2,X3,X4] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X3))),s(X0,X4))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X3))),s('type.list.list'('type.ast.t'),X1)))))) <=> (! [X13,X14,X15,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) => p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13))))) & ! [X9,X10,X11,X12] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X9),s(X0,X10))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X11))),s(X0,X12))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.list.list'('type.ast.t'),X9)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.ast.t',X7))))) & ! [X11,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X11)))))) <=> (! [X7,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.ast.t',X7))))) & ! [X11,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.ast.t',X7))))) & ! [X11,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X11)))))) <=> (! [X7,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.ast.t',X7))))) & ! [X11,X8,X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X6,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X6,X10))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X11)))))))),
  file('thm.inferProps.inferProps_|49|2|48|_prove_ltb','thm.inferProps.inferProps_|49|2|48|_prove_ltb')).
fof(f249,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | ($spl1 | $spl14)),
  inference(subsumption_resolution,[],[f243,f54])).
fof(f243,plain,(
  sP0(sK9) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | $spl14),
  inference(resolution,[],[f73,f35])).
fof(f35,plain,(
  ( ! [X0] : (sP0(X0) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(X0)),s(X0,sK6(X0)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(X0)))),s(X0,sK8(X0)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(X0)))),s('type.ast.t',sK1(X0)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f73,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) | $spl14),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f70,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9)))) | $spl10),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f242,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9))))) ) | $spl24),
  inference(cnf_transformation,[],[f242_D])).
fof(f242_D,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f237,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9))))) ) | ($spl1 | $spl17)),
  inference(subsumption_resolution,[],[f235,f54])).
fof(f235,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) | sP0(sK9) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9))))) ) | $spl17),
  inference(superposition,[],[f212,f34])).
fof(f34,plain,(
  ( ! [X0] : (sP0(X0) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(X0)),s(X0,sK6(X0)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(X0)))),s(X0,sK8(X0)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(X0)),s(X0,sK2(X0)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0)))),s(X0,sK4(X0))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f74,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) | $spl15),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f239,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9)))))) ) | ($spl1 | $spl17)),
  inference(subsumption_resolution,[],[f236,f54])).
fof(f236,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) | sP0(sK9) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9)))))) ) | $spl17),
  inference(superposition,[],[f212,f35])).
fof(f241,plain,(
  $false | ($spl1 | $spl15 | $spl17)),
  inference(equality_resolution,[],[f238])).
fof(f238,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9))))) ) | ($spl1 | $spl15 | $spl17)),
  inference(subsumption_resolution,[],[f237,f171])).
fof(f171,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,X1)))) ) | $spl15),
  inference(resolution,[],[f74,f64])).
fof(f64,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(sK9,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(sK9,X16)))) )),
  inference(subsumption_resolution,[],[f38,f32])).
fof(f32,plain,(
  ( ! [X0,X14,X15,X13,X16] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(X0,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(X0,X16))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f25])).
fof(f38,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X13)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',X13),s(sK9,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X15))),s(sK9,X16))) | sP0(sK9)) )),
  inference(cnf_transformation,[],[f29])).
fof(f211,plain,(
  $false | $spl22),
  inference(equality_resolution,[],[f209])).
fof(f76,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9))))) | $spl17),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f209,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9))))) ) | $spl22),
  inference(cnf_transformation,[],[f209_D])).
fof(f209_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f210,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9)))))) ) | ($spl1 | $spl15)),
  inference(subsumption_resolution,[],[f207,f54])).
fof(f207,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) | sP0(sK9) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9)))))) ) | $spl15),
  inference(superposition,[],[f171,f36])).
fof(f36,plain,(
  ( ! [X0] : (sP0(X0) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(X0)))),s('type.list.list'('type.ast.t'),sK5(X0))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(X0)),s(X0,sK2(X0)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0)))),s(X0,sK4(X0))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f72,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | $spl12),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f208,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9))))) ) | ($spl1 | $spl15)),
  inference(subsumption_resolution,[],[f206,f54])).
fof(f206,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) | sP0(sK9) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9))))) ) | $spl15),
  inference(superposition,[],[f171,f34])).
fof(f165,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) | $spl1),
  inference(resolution,[],[f54,f37])).
fof(f37,plain,(
  ( ! [X0] : (sP0(X0) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(X0)))),s('type.list.list'('type.ast.t'),sK5(X0))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(X0)))),s('type.ast.t',sK1(X0)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f164,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9)))) | $spl1),
  inference(resolution,[],[f54,f36])).
fof(f163,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) | $spl1),
  inference(resolution,[],[f54,f35])).
fof(f162,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9)))) | $spl1),
  inference(resolution,[],[f54,f34])).
fof(f54,plain,(
  ~sP0(sK9) | $spl1),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  ~sP0(sK9) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f160,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',X0),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.ast.t',X0))))) ) | $spl20),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',X0),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.ast.t',X0))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f139,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',X0),s(sK9,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.ast.t',X0)))) | ~sP0(sK9)) ) | $spl8),
  inference(superposition,[],[f32,f62])).
fof(f159,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK9,X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),X2))))) ) | $spl18),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK9,X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),X2))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f140,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK9,X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),X2)))) | ~sP0(sK9)) ) | $spl8),
  inference(superposition,[],[f33,f62])).
fof(f158,plain,(
  $false | ($spl5 | $spl8)),
  inference(equality_resolution,[],[f157])).
fof(f157,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,X0)))) ) | ($spl5 | $spl8)),
  inference(superposition,[],[f155,f62])).
fof(f155,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,X1)))) ) | $spl5),
  inference(subsumption_resolution,[],[f152,f46])).
fof(f46,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.inferProps.inferProps_|49|2|48|_prove_ltb',aHL_FALSITY)).
fof(f152,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,X1)))) ) | $spl5),
  inference(superposition,[],[f63,f126])).
fof(f126,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14))) | $spl5),
  inference(subsumption_resolution,[],[f124,f52])).
fof(f52,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f44])).
fof(f44,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X12] : (s(X6,X12) = s(X6,X12) <=> p(s(bool,'T_0')))),
  file('thm.inferProps.inferProps_|49|2|48|_prove_ltb','thm.bool.REFL_CLAUSE')).
fof(f124,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14))) | $spl5),
  inference(superposition,[],[f58,f51])).
fof(f51,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.inferProps.inferProps_|49|2|48|_prove_ltb',aHL_BOOL_CASES)).
fof(f120,plain,(
  $false | ($spl0 | $spl3 | $spl6)),
  inference(equality_resolution,[],[f111])).
fof(f111,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,sK11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,X0)))) ) | ($spl0 | $spl3 | $spl6)),
  inference(superposition,[],[f110,f60])).
fof(f110,plain,(
  ( ! [X12,X13] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,X12))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(sK9,X13)))) ) | ($spl0 | $spl3)),
  inference(resolution,[],[f79,f53])).
fof(f53,plain,(
  sP0(sK9) | $spl0),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  sP0(sK9) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f79,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(X0,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(X0,X2)))) ) | $spl3),
  inference(resolution,[],[f56,f32])).
fof(f68,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) | $spl1),
  inference(resolution,[],[f54,f37])).
fof(f67,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s('type.list.list'('type.ast.t'),sK5(sK9))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9)))) | $spl1),
  inference(resolution,[],[f54,f36])).
fof(f66,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s('type.ast.t',sK1(sK9))))) | $spl1),
  inference(resolution,[],[f54,f35])).
fof(f65,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK5(sK9)),s(sK9,sK6(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK7(sK9)))),s(sK9,sK8(sK9)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK1(sK9)),s(sK9,sK2(sK9)))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(sK9)))),s(sK9,sK4(sK9)))) | $spl1),
  inference(resolution,[],[f54,f34])).
fof(f60,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,sK11))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(sK9,sK13))) | $spl6),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,sK11))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(sK9,sK13))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f62,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,sK17))) | $spl8),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,sK17))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f40,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,sK17))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,sK11))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(sK9,sK13))) | ~sP0(sK9)),
  inference(cnf_transformation,[],[f29])).
fof(f56,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK12))),s('type.ast.t',sK10)))) | $spl3),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK12))),s('type.ast.t',sK10)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f41,plain,(
  s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK14),s(sK9,sK15))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK16))),s(sK9,sK17))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK12))),s('type.ast.t',sK10)))) | ~sP0(sK9)),
  inference(cnf_transformation,[],[f29])).
fof(f58,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14)))) | $spl5),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f42,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.infer.t_to_freevars_2'(s('type.ast.t',sK10),s(sK9,sK11))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK9),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12))),s(sK9,sK13))) | ~sP0(sK9)),
  inference(cnf_transformation,[],[f29])).
fof(f43,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK16))),s('type.list.list'('type.ast.t'),sK14)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK12))),s('type.ast.t',sK10)))) | ~sP0(sK9)),
  inference(cnf_transformation,[],[f29])).
% SZS output end Proof for thm.inferProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 81
% Generated clauses: 207
% Final active clauses: 25
% Final passive clauses: 32
% Input formulas: 8
% Initial clauses: 20
% 
% Selected by SInE selection: 8
% SInE iterations: 1
% 
% Trivial inequalities: 1
% Fw subsumption resolutions: 30
% Fw demodulations: 2
% Bw demodulations: 5
% 
% Equational tautologies: 1
% Forward subsumptions: 70
% 
% Binary resolution: 27
% Forward superposition: 55
% Backward superposition: 56
% Equality resolution: 4
% 
% Split clauses: 18
% Split components: 40
% SAT solver clauses: 24
% SAT solver unit clauses: 1
% SAT solver binary clauses: 1
% 
% Sat splits: 18
% Sat splitting refutations: 5
% 
% Memory used [KB]: 1279
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 11.888 s
