Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f16323,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f16320,f239,f359,f361,f214,f362])).
fof(f362,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f362_D])).
fof(f362_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f214,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.exh_to_patProof.exh_to_patProof_27_prove_ltb',aHL_FALSITY)).
fof(f361,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f361_D])).
fof(f361_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f359,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f359_D])).
fof(f359_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f239,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X17] : ((p(s(bool,'F_0')) => p(s(bool,X17))) <=> p(s(bool,'T_0')))),
  file('thm.exh_to_patProof.exh_to_patProof_27_prove_ltb','thm.bool.IMP_CLAUSES|split|2')).
fof(f16320,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f16319,f206])).
fof(f206,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20)))),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK21))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK17)))))) & s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),sK22) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),sK21),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20))) & s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22])],[f92])).
fof(f92,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),X10) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X10),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),X10) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8)))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X10),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),X10) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8)))) => s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X10),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),X10) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8)))) => s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X10),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15,X16] : ((s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X15))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X11)))))) & s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X15))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X10),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X12))))),s('type.patSem.state'(X6),X13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X9),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),X16) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X15),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X10),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X12))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14)))) => s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X16),s('type.patSem.state'(X6),X13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X7),s('type.num.num',X8),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15,X16] : ((s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X15))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X11)))))) & s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X15))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X10),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X12))))),s('type.patSem.state'(X6),X13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X9),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.list.list'('type.patSem.v'),X16) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X15),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X10),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X12))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14)))) => s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X16),s('type.patSem.state'(X6),X13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X7),s('type.num.num',X8),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  file('thm.exh_to_patProof.exh_to_patProof_27_prove_ltb','thm.exh_to_patProof.exh_to_patProof_27_prove_ltb')).
fof(f16319,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20))) | $spl0),
  inference(forward_demodulation,[],[f16318,f204])).
fof(f204,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f137])).
fof(f16318,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl0),
  inference(subsumption_resolution,[],[f16317,f207])).
fof(f207,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f137])).
fof(f16317,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f16316,f204])).
fof(f16316,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl0),
  inference(trivial_inequality_removal,[],[f16314])).
fof(f16314,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',sK14),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK21))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',sK15),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl0),
  inference(superposition,[],[f5653,f204])).
fof(f5653,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0)))) ) | $spl0),
  inference(forward_demodulation,[],[f5652,f205])).
fof(f205,plain,(
  s('type.list.list'('type.patSem.v'),sK22) = s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),sK21),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18)))))),
  inference(cnf_transformation,[],[f137])).
fof(f5652,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),sK21),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',sK13),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0)))) ) | $spl0),
  inference(forward_demodulation,[],[f5651,f202])).
fof(f202,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK21)))),
  inference(cnf_transformation,[],[f137])).
fof(f5651,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0))) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),sK21),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK21))),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) ) | $spl0),
  inference(subsumption_resolution,[],[f5650,f359])).
fof(f5650,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0))) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),sK21),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK21))),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(forward_demodulation,[],[f5638,f799])).
fof(f799,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK17)))))),
  inference(resolution,[],[f203,f223])).
fof(f223,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X17] : (s(bool,'T_0') = s(bool,X17) <=> p(s(bool,X17)))),
  file('thm.exh_to_patProof.exh_to_patProof_27_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f203,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK17))))))),
  inference(cnf_transformation,[],[f137])).
fof(f5638,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),sK20) != s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK17)))))) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X0) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),sK21),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK16),s('type.list.list'('type.patSem.v'),sK17))),s('type.list.list'('type.patSem.v'),sK18))))),s('type.patSem.state'(sK12),sK19),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),sK21))),s('type.num.num',sK14),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f3975,f204])).
fof(f3975,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X1) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X3))),s('type.list.list'('type.patSem.v'),X4))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X5),s('type.list.list'('type.patSem.v'),X3))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X8),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X3)))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X1) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X4),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X5),s('type.list.list'('type.patSem.v'),X3))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X4))),s('type.num.num',X2),s('type.patLang.exp',X8))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(equality_resolution,[],[f250])).
fof(f250,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8)))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8)))) => s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X9))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X5)))))) & s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X9))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X3),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8)))) => s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X8) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X9),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X4),s('type.list.list'('type.patSem.v'),X5))),s('type.list.list'('type.patSem.v'),X6))))),s('type.patSem.state'(X0),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15] : ((s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X15))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),X11)))))) & s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X15))),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X10),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X12))))),s('type.patSem.state'(X6),X13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',X9),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14)))) => s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X14) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.patSem.v'),X15),s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X10),s('type.list.list'('type.patSem.v'),X11))),s('type.list.list'('type.patSem.v'),X12))))),s('type.patSem.state'(X6),X13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.Let_Els_3'(s('type.num.num',X7),s('type.num.num',X8),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  file('thm.exh_to_patProof.exh_to_patProof_27_prove_ltb','thm.exh_to_patProof.exh_to_patProof_26_prove_ltb')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 575
% Passive clauses: 3662
% Generated clauses: 15574
% Final active clauses: 571
% Final passive clauses: 2828
% Input formulas: 35
% Initial clauses: 153
% 
% Duplicate literals: 762
% Trivial inequalities: 63
% Fw subsumption resolutions: 2380
% Fw demodulations: 308
% Bw demodulations: 4
% 
% Simple tautologies: 235
% Equational tautologies: 64
% Forward subsumptions: 6509
% 
% Binary resolution: 4257
% Factoring: 1207
% Forward superposition: 2430
% Backward superposition: 3324
% Self superposition: 108
% Equality factoring: 108
% Equality resolution: 16
% 
% Split clauses: 1529
% Split components: 3210
% SAT solver clauses: 1868
% SAT solver unit clauses: 37
% SAT solver binary clauses: 161
% SAT solver learnt clauses: 1
% 
% Sat splits: 1529
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1858
% TWLsolver calls for satisfiability: 361
% 
% Memory used [KB]: 7291
% Time elapsed: 0.570 s
% ------------------------------
% ------------------------------
% Success in time 0.58 s
