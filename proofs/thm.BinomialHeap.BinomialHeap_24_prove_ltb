Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinomialHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinomialHeap
% SZS output start Proof for thm.BinomialHeap
fof(f4741,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4740,f224,f404,f402,f400,f4691,f4739])).
fof(f4739,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f402,f226])).
fof(f226,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) != s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X8),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X10),s('type.list.list'('type.BinomialHeap.tree'(sK13)),X11)))))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) | s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK20))))))))) | s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INR_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK13,sK12),sK21),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK22),s('type.BinomialHeap.tree'(sK13),'const.BinomialHeap.Node_3'(s('type.num.num',sK23),s(sK13,sK24),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK25)))))))))) & ! [X12,X13] : s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) != s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X12),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) & ! [X8,X9,X10,X11] : s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) != s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X8),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),X10),s('type.list.list'('type.BinomialHeap.tree'(sK13)),X11))))))))) & ! [X3,X4,X5,X6,X7] : s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) != s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INR_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK13,sK12),X3),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X4),s('type.BinomialHeap.tree'(sK13),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK13,X6),s('type.list.list'('type.BinomialHeap.tree'(sK13)),X7)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25])],[f138])).
fof(f138,plain,(
  ? [X0,X1,X2] : ((? [X23,X24] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X23),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X24),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X19,X20,X21,X22] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X19),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),X22))))))))) | ? [X14,X15,X16,X17,X18] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X14),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X15),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18)))))))))) & ! [X12,X13] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X12),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) & ! [X8,X9,X10,X11] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),X11))))))))) & ! [X3,X4,X5,X6,X7] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7))))))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1,X2] : ((? [X12,X13] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X12),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X8,X9,X10,X11] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),X11))))))))) | ? [X3,X4,X5,X6,X7] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) & ! [X23,X24] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X23),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X24),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) & ! [X19,X20,X21,X22] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X19),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),X22))))))))) & ! [X14,X15,X16,X17,X18] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X14),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X15),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18))))))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2] : ((? [X12,X13] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X12),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X8,X9,X10,X11] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),X11))))))))) | ? [X3,X4,X5,X6,X7] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) & (! [X23,X24] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X23),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X24),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) & ! [X19,X20,X21,X22] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X19),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),X22))))))))) & ! [X14,X15,X16,X17,X18] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) != s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X14),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X15),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18)))))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : ((? [X12,X13] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X12),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X8,X9,X10,X11] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),X11))))))))) | ? [X3,X4,X5,X6,X7] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) => (? [X23,X24] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X23),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X24),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X19,X20,X21,X22] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X19),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),X22))))))))) | ? [X14,X15,X16,X17,X18] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X14),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X15),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18)))))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : ! [X2] : ((? [X12,X13] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X12),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X8,X9,X10,X11] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X8),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X9),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X10),s('type.list.list'('type.BinomialHeap.tree'(X1)),X11))))))))) | ? [X3,X4,X5,X6,X7] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(X1,X6),s('type.list.list'('type.BinomialHeap.tree'(X1)),X7)))))))))) => (? [X23,X24] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X23),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X24),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.NIL_0'))))))) | ? [X19,X20,X21,X22] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'const.pair.,_2'(s(fun(X1,X0),X19),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.list.list'('type.BinomialHeap.tree'(X1)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X1),X21),s('type.list.list'('type.BinomialHeap.tree'(X1)),X22))))))))) | ? [X14,X15,X16,X17,X18] : s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),X2) = s('type.sum.sum'('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.list.list'('type.BinomialHeap.tree'(X1)))),'type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1))),'const.pair.,_2'(s(fun(X1,X0),X14),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.BinomialHeap.tree'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X15),s('type.BinomialHeap.tree'(X1),'const.BinomialHeap.Node_3'(s('type.num.num',X16),s(X1,X17),s('type.list.list'('type.BinomialHeap.tree'(X1)),X18)))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X11,X12] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X11),s('type.list.list'('type.BinomialHeap.tree'(X7)),X12))))))))) | ? [X9,X10,X13,X14,X15] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X7,X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15)))))))))) => (? [X9,X10] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X11,X12] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X11),s('type.list.list'('type.BinomialHeap.tree'(X7)),X12))))))))) | ? [X9,X10,X13,X14,X15] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X7,X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15)))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X11,X12] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X11),s('type.list.list'('type.BinomialHeap.tree'(X7)),X12))))))))) | ? [X9,X10,X13,X14,X15] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X7,X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15)))))))))) => (? [X9,X10] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.NIL_0'))))))) | ? [X9,X10,X11,X12] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INL_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.list.list'('type.BinomialHeap.tree'(X7)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(X7),X11),s('type.list.list'('type.BinomialHeap.tree'(X7)),X12))))))))) | ? [X9,X10,X13,X14,X15] : s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),X8) = s('type.sum.sum'('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.list.list'('type.BinomialHeap.tree'(X7)))),'type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)))),'const.sum.INR_1'(s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.BinomialHeap.tree'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.BinomialHeap.tree'(X7),'const.BinomialHeap.Node_3'(s('type.num.num',X13),s(X7,X14),s('type.list.list'('type.BinomialHeap.tree'(X7)),X15)))))))))))),
  file('thm.BinomialHeap.BinomialHeap_24_prove_ltb','thm.BinomialHeap.BinomialHeap_24_prove_ltb')).
fof(f4691,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f400,f225])).
fof(f225,plain,(
  ( ! [X12,X13] : (s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) != s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),X12),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X13),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f400,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) | $spl0),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0'))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f402,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK20))))))))) | $spl2),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK20))))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f404,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INR_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK13,sK12),sK21),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK22),s('type.BinomialHeap.tree'(sK13),'const.BinomialHeap.Node_3'(s('type.num.num',sK23),s(sK13,sK24),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK25))))))))) | $spl4),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INR_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK13,sK12),sK21),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK22),s('type.BinomialHeap.tree'(sK13),'const.BinomialHeap.Node_3'(s('type.num.num',sK23),s(sK13,sK24),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK25))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f224,plain,(
  s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INR_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK13,sK12),sK21),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK22),s('type.BinomialHeap.tree'(sK13),'const.BinomialHeap.Node_3'(s('type.num.num',sK23),s(sK13,sK24),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK25))))))))) | s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK17),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK18),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.CONS_2'(s('type.BinomialHeap.tree'(sK13),sK19),s('type.list.list'('type.BinomialHeap.tree'(sK13)),sK20))))))))) | s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) = s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INL_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'const.pair.,_2'(s(fun(sK13,sK12),sK15),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.list.list'('type.BinomialHeap.tree'(sK13)),'const.list.NIL_0')))))))),
  inference(cnf_transformation,[],[f139])).
fof(f4740,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f404,f227])).
fof(f227,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),sK14) != s('type.sum.sum'('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.list.list'('type.BinomialHeap.tree'(sK13)))),'type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)))),'const.sum.INR_1'(s('type.pair.prod'(fun(sK13,sK12),'type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13))),'const.pair.,_2'(s(fun(sK13,sK12),X3),s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.BinomialHeap.tree'(sK13)),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X4),s('type.BinomialHeap.tree'(sK13),'const.BinomialHeap.Node_3'(s('type.num.num',X5),s(sK13,X6),s('type.list.list'('type.BinomialHeap.tree'(sK13)),X7)))))))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.BinomialHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 372
% Passive clauses: 1548
% Generated clauses: 4510
% Final active clauses: 372
% Final passive clauses: 994
% Input formulas: 37
% Initial clauses: 171
% 
% Duplicate literals: 153
% Trivial inequalities: 25
% Fw subsumption resolutions: 293
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2318
% 
% Binary resolution: 2810
% Factoring: 772
% Forward superposition: 166
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 101
% Split components: 204
% SAT solver clauses: 190
% SAT solver unit clauses: 9
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 1
% 
% Sat splits: 101
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 189
% TWLsolver calls for satisfiability: 161
% 
% Memory used [KB]: 2558
% Time elapsed: 0.111 s
% ------------------------------
% ------------------------------
% Success in time 0.105 s
