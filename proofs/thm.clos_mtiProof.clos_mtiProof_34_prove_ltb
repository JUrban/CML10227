Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_mtiProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_mtiProof
% SZS output start Proof for thm.clos_mtiProof
fof(f575,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f574,f87,f96,f61,f91,f428,f52,f59,f101,f314,f319,f60,f99,f93,f370,f63,f104,f58,f97,f488,f490,f317,f88,f94,f92,f90])).
fof(f90,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | $spl1),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f92,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f94,plain,(
  sP0 | $spl4),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  sP0 <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f88,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))))),
  inference(duplicate_literal_removal,[],[f57])).
fof(f57,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))))),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  (~sP0 | (! [X4,X5,X6,X7] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & ((s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | sP0)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f33])).
fof(f33,plain,(
  (~sP0 | (! [X4,X5,X6,X7] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & (? [X0,X1,X2,X3] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X0))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',X1))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | sP0)),
  inference(rectify,[],[f32])).
fof(f32,plain,(
  (~sP0 | (! [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & (? [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | sP0)),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  (~sP0 | (! [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & ((? [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0'))) | sP0)),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  sP0 <=> (! [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f317,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl24),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f490,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | $spl32),
  inference(cnf_transformation,[],[f490_D])).
fof(f490_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f488,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2)),
  inference(duplicate_literal_removal,[],[f437])).
fof(f437,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2)),
  inference(superposition,[],[f435,f64])).
fof(f64,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_mtiProof.clos_mtiProof_34_prove_ltb',aHL_BOOL_CASES)).
fof(f435,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f431,f91])).
fof(f431,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f90,f107])).
fof(f107,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f64,f64])).
fof(f97,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))))) ) | $spl8),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f58,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | sP0) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  (sP0 | ! [X4,X5,X6,X7] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))))) & (~sP0 | (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8])],[f36])).
fof(f36,plain,(
  (sP0 | ! [X4,X5,X6,X7] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))))) & (~sP0 | ? [X0,X1,X2,X3] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X0))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',X1))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))))),
  inference(rectify,[],[f35])).
fof(f35,plain,(
  (sP0 | ! [X7,X8,X9,X10] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))))) & (~sP0 | ? [X7,X8,X9,X10] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  sP0 <~> ! [X7,X8,X9,X10] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))))),
  inference(definition_folding,[],[f27,f29])).
fof(f27,plain,(
  (! [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0'))) <~> ! [X7,X8,X9,X10] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~((! [X3,X4,X5,X6] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0'))) <=> ! [X7,X8,X9,X10] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~((! [X6,X7,X8,X9] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))))) & ! [X10] : p(s(bool,'T_0')) & ! [X11] : p(s(bool,'T_0')) & ! [X10] : p(s(bool,'T_0'))) <=> ! [X6,X7,X8,X9] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  (! [X6,X7,X8,X9] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))))) & ! [X10] : p(s(bool,'T_0')) & ! [X11] : p(s(bool,'T_0')) & ! [X10] : p(s(bool,'T_0'))) <=> ! [X6,X7,X8,X9] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))))),
  file('thm.clos_mtiProof.clos_mtiProof_34_prove_ltb','thm.clos_mtiProof.clos_mtiProof_34_prove_ltb')).
fof(f104,plain,(
  ~p(s(bool,'F_0')) | $spl17),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f63,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_mtiProof.clos_mtiProof_34_prove_ltb',aHL_FALSITY)).
fof(f370,plain,(
  $false | ($spl2 | $spl17 | $spl24)),
  inference(subsumption_resolution,[],[f323,f91])).
fof(f323,plain,(
  ~p(s(bool,'T_0')) | ($spl17 | $spl24)),
  inference(backward_demodulation,[],[f317,f104])).
fof(f93,plain,(
  ~sP0 | $spl5),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  ~sP0 <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f99,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8)))) | $spl11),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8)))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f60,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8)))) | ~sP0),
  inference(cnf_transformation,[],[f37])).
fof(f319,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))) | $spl26),
  inference(cnf_transformation,[],[f319_D])).
fof(f319_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f314,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl2 | $spl11)),
  inference(duplicate_literal_removal,[],[f280])).
fof(f280,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl2 | $spl11)),
  inference(superposition,[],[f261,f64])).
fof(f261,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl2 | $spl11)),
  inference(subsumption_resolution,[],[f191,f91])).
fof(f191,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl11),
  inference(superposition,[],[f99,f107])).
fof(f101,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) | $spl12),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f59,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) | ~sP0),
  inference(cnf_transformation,[],[f37])).
fof(f52,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | ~sP0) )),
  inference(cnf_transformation,[],[f34])).
fof(f428,plain,(
  $false | ($spl8 | $spl12 | $spl17 | $spl26)),
  inference(subsumption_resolution,[],[f427,f104])).
fof(f427,plain,(
  p(s(bool,'F_0')) | ($spl8 | $spl12 | $spl26)),
  inference(forward_demodulation,[],[f426,f319])).
fof(f426,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num',sK8)))) | ($spl8 | $spl12)),
  inference(equality_resolution,[],[f425])).
fof(f425,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X0),s('type.closLang.exp',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK8))))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f97,f101])).
fof(f91,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f61,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_mtiProof.clos_mtiProof_34_prove_ltb',aHL_TRUTH)).
fof(f96,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2))) | $spl6),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f87,plain,(
  sP0 | ~p(s(bool,'T_0')) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2)))),
  inference(duplicate_literal_removal,[],[f56])).
fof(f56,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2)))),
  inference(cnf_transformation,[],[f34])).
fof(f574,plain,(
  $false | ($spl6 | $spl8 | $spl17 | $spl32)),
  inference(subsumption_resolution,[],[f573,f104])).
fof(f573,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl8 | $spl32)),
  inference(forward_demodulation,[],[f572,f490])).
fof(f572,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | ($spl6 | $spl8)),
  inference(equality_resolution,[],[f571])).
fof(f571,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X0),s('type.closLang.exp',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK4))))) ) | ($spl6 | $spl8)),
  inference(superposition,[],[f97,f96])).
% SZS output end Proof for thm.clos_mtiProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 31
% Passive clauses: 66
% Generated clauses: 497
% Final active clauses: 19
% Final passive clauses: 18
% Input formulas: 13
% Initial clauses: 33
% 
% Duplicate literals: 77
% Trivial inequalities: 8
% Fw subsumption resolutions: 14
% Fw demodulations: 9
% Bw demodulations: 5
% 
% Simple tautologies: 37
% Equational tautologies: 17
% Forward subsumptions: 239
% 
% Binary resolution: 8
% Forward superposition: 131
% Backward superposition: 128
% Self superposition: 32
% Equality factoring: 30
% Equality resolution: 2
% 
% Split clauses: 22
% Split components: 46
% SAT solver clauses: 41
% SAT solver unit clauses: 5
% SAT solver binary clauses: 15
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 22
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 39
% TWLsolver calls for satisfiability: 10
% 
% Memory used [KB]: 895
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.02 s
