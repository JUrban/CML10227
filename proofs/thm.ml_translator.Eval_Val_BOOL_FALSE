Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f549,plain,(
  $false),
  inference(resolution,[],[f41,f401])).
fof(f401,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'F_0'))))))),
  inference(forward_demodulation,[],[f35,f38])).
fof(f38,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.FALSE_0')),
  inference(cnf_transformation,[],[f13])).
fof(f13,axiom,(
  s(bool,'F_0') = s(bool,'const.ml_translator.FALSE_0')),
  file('thm.ml_translator.Eval_Val_BOOL_FALSE','thm.ml_translator.FALSE_def')).
fof(f35,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'const.ml_translator.FALSE_0'))))))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'const.ml_translator.FALSE_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f27])).
fof(f27,plain,(
  ? [X0] : ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'const.ml_translator.FALSE_0'))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0] : p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'const.ml_translator.FALSE_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'const.ml_translator.FALSE_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'const.ml_translator.FALSE_0'))))))),
  file('thm.ml_translator.Eval_Val_BOOL_FALSE','thm.ml_translator.Eval_Val_BOOL_FALSE')).
fof(f41,plain,(
  ( ! [X0] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'F_0'))))))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0] : p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'F_0'))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opb_1'(s('type.ast.opb','const.ast.Lt_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.BOOL_1'(s(bool,'F_0'))))))),
  file('thm.ml_translator.Eval_Val_BOOL_FALSE','thm.ml_translator.Eval_Val_BOOL_F')).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 24
% Passive clauses: 86
% Generated clauses: 505
% Final active clauses: 24
% Final passive clauses: 36
% Input formulas: 13
% Initial clauses: 17
% 
% Duplicate literals: 56
% Trivial inequalities: 22
% Fw subsumption resolutions: 49
% Fw demodulations: 7
% 
% Simple tautologies: 34
% Equational tautologies: 16
% Forward subsumptions: 228
% 
% Binary resolution: 17
% Forward superposition: 171
% Backward superposition: 104
% Self superposition: 24
% Equality factoring: 28
% Equality resolution: 5
% 
% Split clauses: 9
% Split components: 24
% SAT solver clauses: 18
% SAT solver unit clauses: 6
% SAT solver binary clauses: 6
% 
% Sat splits: 9
% 
% TWLsolver clauses: 18
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 895
% Time elapsed: 0.022 s
% ------------------------------
% ------------------------------
% Success in time 0.05 s
