Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_liveProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_liveProof
% SZS output start Proof for thm.bvp_liveProof
fof(f772,plain,(
  $false),
  inference(subsumption_resolution,[],[f98,f754])).
fof(f754,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X20),X21),s('type.bvpSem.state'(X20),X21),s('type.sptree.spt'('type.one.one'),X22))))) )),
  inference(resolution,[],[f744,f151])).
fof(f151,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X0,X1,X2,X3) | p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3)))) | sP0(X0,X1,X2,X3)) & (~sP0(X0,X1,X2,X3) | p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3))))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3)))) <=> sP0(X0,X1,X2,X3))),
  inference(definition_folding,[],[f55,f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3] : (sP0(X0,X1,X2,X3) <=> (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f55,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3)))) <=> (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))))))),
  inference(ennf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3)))) <=> (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X4] : (p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) => s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X2),s('type.sptree.spt'('type.one.one'),X3)))) <=> (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X4] : (p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) => s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X17] : ! [X18,X12,X8] : (p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X17),X18),s('type.bvpSem.state'(X17),X12),s('type.sptree.spt'('type.one.one'),X8)))) <=> (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X17),X12))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X17),X18))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X17),X12))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X17),X18))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X17),X12))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X17),X18))) & s('type.ffi.ffi_state'(X17),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X17),X12))) = s('type.ffi.ffi_state'(X17),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X17),X18))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X17),X12))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X17),X18))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X17),X12))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X17),X18))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X17),X12))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X17),X18))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X17),X12))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X17),X18))))) & ! [X10] : (p(s(bool,'const.bool.IN_2'(s('type.num.num',X10),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X8)))))) => s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X10),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X17),X12))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X10),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X17),X18))))))))),
  file('thm.bvp_liveProof.bvp_liveProof_2_prove_ltb','thm.bvp_liveProof.state_rel_def')).
fof(f744,plain,(
  ( ! [X2,X0,X1] : (sP0(X2,X1,X1,X0)) )),
  inference(trivial_inequality_removal,[],[f743])).
fof(f743,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',sK4(X0,X1,X1,X2)),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X2),X1))))) != s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',sK4(X0,X1,X1,X2)),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X2),X1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X2),X1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X2),X1))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X2),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X2),X1))) | sP0(X2,X1,X1,X0) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X2),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X2),X1))) | s('type.ffi.ffi_state'(X2),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X2),X1))) != s('type.ffi.ffi_state'(X2),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X2),X1))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X2),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X2),X1))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X2),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X2),X1))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X2),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X2),X1)))) )),
  inference(equality_resolution,[],[f149])).
fof(f149,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',sK4(X3,X2,X1,X0)),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',sK4(X3,X2,X1,X0)),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | sP0(X0,X1,X2,X3) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3] : ((~sP0(X0,X1,X2,X3) | (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X5] : (~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))))) & (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) | (p(s(bool,'const.bool.IN_2'(s('type.num.num',sK4(X3,X2,X1,X0)),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) & s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',sK4(X3,X2,X1,X0)),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',sK4(X3,X2,X1,X0)),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))) | sP0(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : ((~sP0(X0,X1,X2,X3) | (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X5] : (~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))))) & (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) | ? [X4] : (p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) & s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))) | sP0(X0,X1,X2,X3)))),
  inference(rectify,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2,X3] : ((~sP0(X0,X1,X2,X3) | (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))))) & (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) | ? [X4] : (p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) & s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))) | sP0(X0,X1,X2,X3)))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3] : ((~sP0(X0,X1,X2,X3) | (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) | s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))))))) & ((s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))))) | ? [X4] : (p(s(bool,'const.bool.IN_2'(s('type.num.num',X4),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.one.one'),X3)))))) & s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) != s('type.option.option'('type.bvlSem.v'),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))))))) | sP0(X0,X1,X2,X3)))),
  inference(nnf_transformation,[],[f61])).
fof(f98,plain,(
  ~p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(sK1),sK2),s('type.bvpSem.state'(sK1),sK2),s('type.sptree.spt'('type.one.one'),sK3))))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ~p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(sK1),sK2),s('type.bvpSem.state'(sK1),sK2),s('type.sptree.spt'('type.one.one'),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2] : ~p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X1),s('type.sptree.spt'('type.one.one'),X2))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1,X2] : p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X1),s('type.sptree.spt'('type.one.one'),X2))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ~! [X0] : ! [X1,X2] : p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X0),X1),s('type.bvpSem.state'(X0),X1),s('type.sptree.spt'('type.one.one'),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X6),X7),s('type.bvpSem.state'(X6),X7),s('type.sptree.spt'('type.one.one'),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : p(s(bool,'const.bvp_liveProof.state_rel_3'(s('type.bvpSem.state'(X6),X7),s('type.bvpSem.state'(X6),X7),s('type.sptree.spt'('type.one.one'),X8))))),
  file('thm.bvp_liveProof.bvp_liveProof_2_prove_ltb','thm.bvp_liveProof.bvp_liveProof_2_prove_ltb')).
% SZS output end Proof for thm.bvp_liveProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 121
% Generated clauses: 656
% Final active clauses: 41
% Final passive clauses: 46
% Input formulas: 22
% Initial clauses: 69
% 
% Duplicate literals: 58
% Trivial inequalities: 37
% Fw subsumption resolutions: 56
% Fw demodulations: 5
% Bw demodulations: 1
% 
% Simple tautologies: 63
% Equational tautologies: 43
% Forward subsumptions: 242
% 
% Binary resolution: 76
% Forward superposition: 173
% Backward superposition: 108
% Self superposition: 26
% Equality factoring: 28
% Equality resolution: 8
% 
% Split clauses: 39
% Split components: 80
% SAT solver clauses: 64
% SAT solver unit clauses: 4
% SAT solver binary clauses: 23
% 
% Sat splits: 39
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 64
% TWLsolver calls for satisfiability: 21
% 
% Memory used [KB]: 1151
% Time elapsed: 0.023 s
% ------------------------------
% ------------------------------
% Success in time 0.025 s
