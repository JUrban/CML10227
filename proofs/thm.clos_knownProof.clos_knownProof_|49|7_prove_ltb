Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f2728,plain,(
  $false),
  inference(equality_resolution,[],[f1815])).
fof(f1815,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK2),s('type.list.list'('type.clos_known.val_approx'),sK0),s('type.sptree.spt'('type.clos_known.val_approx'),sK1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X0),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X1)))) )),
  inference(superposition,[],[f68,f99])).
fof(f99,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK8(X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK9(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK8(X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK9(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8] : ? [X11,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X11),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X8),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))),
  file('thm.clos_knownProof.clos_knownProof_|49|7_prove_ltb','thm.clos_knownProof.clos_knownProof_|49|4_prove_ltb')).
fof(f68,plain,(
  ( ! [X4,X3] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK2),s('type.list.list'('type.clos_known.val_approx'),sK0),s('type.sptree.spt'('type.clos_known.val_approx'),sK1)))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK2),s('type.list.list'('type.clos_known.val_approx'),sK0),s('type.sptree.spt'('type.clos_known.val_approx'),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2] : ! [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ? [X9,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X8),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ? [X9,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X8),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))),
  file('thm.clos_knownProof.clos_knownProof_|49|7_prove_ltb','thm.clos_knownProof.clos_knownProof_|49|7_prove_ltb')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 62
% Passive clauses: 373
% Generated clauses: 2573
% Final active clauses: 59
% Final passive clauses: 267
% Input formulas: 21
% Initial clauses: 32
% 
% Duplicate literals: 249
% Trivial inequalities: 151
% Fw subsumption resolutions: 226
% Fw demodulations: 99
% Bw demodulations: 2
% 
% Simple tautologies: 89
% Equational tautologies: 19
% Forward subsumptions: 1281
% 
% Binary resolution: 23
% Forward superposition: 786
% Backward superposition: 868
% Self superposition: 60
% Equality factoring: 44
% Equality resolution: 9
% 
% Split clauses: 90
% Split components: 189
% SAT solver clauses: 129
% SAT solver unit clauses: 12
% SAT solver binary clauses: 56
% 
% Sat splits: 90
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 129
% TWLsolver calls for satisfiability: 23
% 
% Memory used [KB]: 1918
% Time elapsed: 0.170 s
% ------------------------------
% ------------------------------
% Success in time 0.17 s
