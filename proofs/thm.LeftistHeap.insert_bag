Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.LeftistHeap
% (70156)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 120
% Passive clauses: 753
% Generated clauses: 13561
% Final active clauses: 112
% Final passive clauses: 506
% Input formulas: 16
% Initial clauses: 20
% 
% Duplicate literals: 1209
% Trivial inequalities: 84
% Fw subsumption resolutions: 1300
% Fw demodulations: 1949
% Bw demodulations: 2
% 
% Simple tautologies: 206
% Equational tautologies: 40
% Forward subsumptions: 7413
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 10
% Forward superposition: 5551
% Backward superposition: 3393
% Self superposition: 183
% Equality factoring: 96
% Equality resolution: 16
% 
% Split clauses: 393
% Split components: 791
% SAT solver clauses: 699
% SAT solver unit clauses: 3
% SAT solver binary clauses: 67
% 
% Sat splits: 393
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 689
% TWLsolver calls for satisfiability: 68
% 
% Memory used [KB]: 8187
% Time elapsed: 0.610 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.LeftistHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.LeftistHeap
% SZS output start Proof for thm.LeftistHeap
fof(f3383,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3367,f50,f72,f1398,f1399,f54,f77,f60,f81,f68,f89,f69,f90,f307,f315,f57,f80,f1236,f1237,f66,f87])).
fof(f87,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),X4))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X4)))))))) ) | $spl26),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),X4))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X4)))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f66,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),X4))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X4)))))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),X4))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X4)))))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),X4))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X4)))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : ! [X12,X11,X13,X14] : s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.Tree_4'(s('type.num.num',X12),s(X7,X11),s('type.LeftistHeap.heap'(X7),X13),s('type.LeftistHeap.heap'(X7),X14))))) = s(fun(X7,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X7,X11),s(fun(X7,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),X13))),s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),X14)))))))),
  file('thm.LeftistHeap.insert_bag','thm.LeftistHeap.heap_to_bag_def|split|1')).
fof(f1237,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))))) ) | $spl218),
  inference(cnf_transformation,[],[f1237_D])).
fof(f1237_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f1236,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))))) ) | ($spl6 | $spl12 | $spl26)),
  inference(forward_demodulation,[],[f1171,f80])).
fof(f1171,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num',X1),s(X0,X2),s('type.LeftistHeap.heap'(X0),X3),s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0'))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X3))),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0')))))) ) | ($spl6 | $spl26)),
  inference(superposition,[],[f87,f77])).
fof(f80,plain,(
  ( ! [X0,X1] : (s(fun(X0,'type.num.num'),X1) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0')))) ) | $spl12),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  ( ! [X0,X1] : (s(fun(X0,'type.num.num'),X1) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0')))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f57,plain,(
  ( ! [X0,X1] : (s(fun(X0,'type.num.num'),X1) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : s(fun(X0,'type.num.num'),X1) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0')))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : s(fun(X0,'type.num.num'),X1) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0')))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X7] : ! [X15] : s(fun(X7,'type.num.num'),X15) = s(fun(X7,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X7,'type.num.num'),X15),s(fun(X7,'type.num.num'),'const.bag.EMPTY_BAG_0')))),
  file('thm.LeftistHeap.insert_bag','thm.bag.BAG_UNION_EMPTY|split|0')).
fof(f315,plain,(
  ( ! [X4,X3] : (s(fun(X3,'type.num.num'),'const.bag.EL_BAG_1'(s(X3,X4))) = s(fun(X3,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X3,X4),s(fun(X3,'type.num.num'),'const.bag.EMPTY_BAG_0')))) ) | $spl52),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  ( ! [X4,X3] : (s(fun(X3,'type.num.num'),'const.bag.EL_BAG_1'(s(X3,X4))) = s(fun(X3,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X3,X4),s(fun(X3,'type.num.num'),'const.bag.EMPTY_BAG_0')))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f307,plain,(
  ( ! [X4,X3] : (s(fun(X3,'type.num.num'),'const.bag.EL_BAG_1'(s(X3,X4))) = s(fun(X3,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X3,X4),s(fun(X3,'type.num.num'),'const.bag.EMPTY_BAG_0')))) ) | ($spl12 | $spl14)),
  inference(superposition,[],[f81,f80])).
fof(f90,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s(X1,X4),s('type.LeftistHeap.heap'(X1),X5))) = s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X1,X4),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'))),s('type.LeftistHeap.heap'(X1),X5)))) ) | $spl32),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s(X1,X4),s('type.LeftistHeap.heap'(X1),X5))) = s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X1,X4),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'))),s('type.LeftistHeap.heap'(X1),X5)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f69,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s(X1,X4),s('type.LeftistHeap.heap'(X1),X5))) = s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X1,X4),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'))),s('type.LeftistHeap.heap'(X1),X5)))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s(X1,X4),s('type.LeftistHeap.heap'(X1),X5))) = s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X1,X4),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'))),s('type.LeftistHeap.heap'(X1),X5)))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s(X1,X4),s('type.LeftistHeap.heap'(X1),X5))) = s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X1,X4),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.Empty_0'))),s('type.LeftistHeap.heap'(X1),X5)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : ! [X9,X10,X11,X8] : s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.insert_4'(s(fun(X7,X6),X9),s(fun(X6,fun(X6,bool)),X10),s(X7,X11),s('type.LeftistHeap.heap'(X7),X8))) = s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.merge_4'(s(fun(X7,X6),X9),s(fun(X6,fun(X6,bool)),X10),s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X7,X11),s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.Empty_0'))),s('type.LeftistHeap.heap'(X7),X8)))),
  file('thm.LeftistHeap.insert_bag','thm.LeftistHeap.insert_def')).
fof(f89,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X1,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X4))),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X5))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),X4),s('type.LeftistHeap.heap'(X1),X5)))))) ) | $spl30),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X1,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X4))),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X5))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),X4),s('type.LeftistHeap.heap'(X1),X5)))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f68,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X1,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X4))),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X5))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),X4),s('type.LeftistHeap.heap'(X1),X5)))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(fun(X1,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X4))),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X5))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),X4),s('type.LeftistHeap.heap'(X1),X5)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(fun(X1,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X4))),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X5))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.merge_4'(s(fun(X1,X0),X2),s(fun(X0,fun(X0,bool)),X3),s('type.LeftistHeap.heap'(X1),X4),s('type.LeftistHeap.heap'(X1),X5)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : ! [X9,X10,X13,X14] : s(fun(X7,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),X13))),s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),X14))))) = s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.merge_4'(s(fun(X7,X6),X9),s(fun(X6,fun(X6,bool)),X10),s('type.LeftistHeap.heap'(X7),X13),s('type.LeftistHeap.heap'(X7),X14)))))),
  file('thm.LeftistHeap.insert_bag','thm.LeftistHeap.merge_bag')).
fof(f81,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),X1))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.EL_BAG_1'(s(X0,X2))),s(fun(X0,'type.num.num'),X1)))) ) | $spl14),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),X1))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.EL_BAG_1'(s(X0,X2))),s(fun(X0,'type.num.num'),X1)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f60,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),X1))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.EL_BAG_1'(s(X0,X2))),s(fun(X0,'type.num.num'),X1)))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),X1))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.EL_BAG_1'(s(X0,X2))),s(fun(X0,'type.num.num'),X1)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : ! [X1,X2] : s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X2),s(fun(X0,'type.num.num'),X1))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.EL_BAG_1'(s(X0,X2))),s(fun(X0,'type.num.num'),X1)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : ! [X15,X19] : s(fun(X7,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X7,X19),s(fun(X7,'type.num.num'),X15))) = s(fun(X7,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X7,'type.num.num'),'const.bag.EL_BAG_1'(s(X7,X19))),s(fun(X7,'type.num.num'),X15)))),
  file('thm.LeftistHeap.insert_bag','thm.bag.BAG_INSERT_UNION')).
fof(f77,plain,(
  ( ! [X0] : (s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))) ) | $spl6),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  ( ! [X0] : (s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f54,plain,(
  ( ! [X0] : (s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0] : s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : s(fun(X7,'type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.Empty_0')))),
  file('thm.LeftistHeap.insert_bag','thm.LeftistHeap.heap_to_bag_def|split|0')).
fof(f1399,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X4),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5)))))) ) | $spl270),
  inference(cnf_transformation,[],[f1399_D])).
fof(f1399_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X4),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5)))))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f1398,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X4),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5)))))) ) | ($spl6 | $spl14 | $spl30 | $spl32 | $spl52 | $spl218)),
  inference(forward_demodulation,[],[f1397,f81])).
fof(f1397,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.EL_BAG_1'(s(X0,X4))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5)))))) ) | ($spl6 | $spl30 | $spl32 | $spl52 | $spl218)),
  inference(forward_demodulation,[],[f1396,f315])).
fof(f1396,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X4),s(fun(X0,'type.num.num'),'const.bag.EMPTY_BAG_0'))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5)))))) ) | ($spl6 | $spl30 | $spl32 | $spl218)),
  inference(forward_demodulation,[],[f1395,f77])).
fof(f1395,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X0,X4),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0'))))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5)))))) ) | ($spl30 | $spl32 | $spl218)),
  inference(forward_demodulation,[],[f1381,f1237])).
fof(f1381,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.insert_4'(s(fun(X0,X1),X2),s(fun(X1,fun(X1,bool)),X3),s(X0,X4),s('type.LeftistHeap.heap'(X0),X5))))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Tree_4'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(X0,X4),s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0'),s('type.LeftistHeap.heap'(X0),'const.LeftistHeap.Empty_0'))))),s(fun(X0,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X0),X5)))))) ) | ($spl30 | $spl32)),
  inference(superposition,[],[f89,f90])).
fof(f72,plain,(
  s(fun(sK1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(sK1,sK5),s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),sK2))))) != s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),'const.LeftistHeap.insert_4'(s(fun(sK1,sK0),sK3),s(fun(sK0,fun(sK0,bool)),sK4),s(sK1,sK5),s('type.LeftistHeap.heap'(sK1),sK2))))) | $spl1),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s(fun(sK1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(sK1,sK5),s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),sK2))))) != s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),'const.LeftistHeap.insert_4'(s(fun(sK1,sK0),sK3),s(fun(sK0,fun(sK0,bool)),sK4),s(sK1,sK5),s('type.LeftistHeap.heap'(sK1),sK2))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f50,plain,(
  s(fun(sK1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(sK1,sK5),s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),sK2))))) != s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),'const.LeftistHeap.insert_4'(s(fun(sK1,sK0),sK3),s(fun(sK0,fun(sK0,bool)),sK4),s(sK1,sK5),s('type.LeftistHeap.heap'(sK1),sK2)))))),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  s(fun(sK1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(sK1,sK5),s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),sK2))))) != s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),'const.LeftistHeap.insert_4'(s(fun(sK1,sK0),sK3),s(fun(sK0,fun(sK0,bool)),sK4),s(sK1,sK5),s('type.LeftistHeap.heap'(sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f42])).
fof(f42,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s(fun(X1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X1,X5),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X2))))) != s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X3),s(fun(X0,fun(X0,bool)),X4),s(X1,X5),s('type.LeftistHeap.heap'(X1),X2)))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s(fun(X1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X1,X5),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X2))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X3),s(fun(X0,fun(X0,bool)),X4),s(X1,X5),s('type.LeftistHeap.heap'(X1),X2)))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : s(fun(X1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X1,X5),s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),X2))))) = s(fun(X1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X1),'const.LeftistHeap.insert_4'(s(fun(X1,X0),X3),s(fun(X0,fun(X0,bool)),X4),s(X1,X5),s('type.LeftistHeap.heap'(X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : s(fun(X7,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X7,X11),s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),X8))))) = s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.insert_4'(s(fun(X7,X6),X9),s(fun(X6,fun(X6,bool)),X10),s(X7,X11),s('type.LeftistHeap.heap'(X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : s(fun(X7,'type.num.num'),'const.bag.BAG_INSERT_2'(s(X7,X11),s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),X8))))) = s(fun(X7,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(X7),'const.LeftistHeap.insert_4'(s(fun(X7,X6),X9),s(fun(X6,fun(X6,bool)),X10),s(X7,X11),s('type.LeftistHeap.heap'(X7),X8)))))),
  file('thm.LeftistHeap.insert_bag','thm.LeftistHeap.insert_bag')).
fof(f3367,plain,(
  $false | ($spl1 | $spl270)),
  inference(trivial_inequality_removal,[],[f3321])).
fof(f3321,plain,(
  s(fun(sK1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(sK1,sK5),s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),sK2))))) != s(fun(sK1,'type.num.num'),'const.bag.BAG_INSERT_2'(s(sK1,sK5),s(fun(sK1,'type.num.num'),'const.LeftistHeap.heap_to_bag_1'(s('type.LeftistHeap.heap'(sK1),sK2))))) | ($spl1 | $spl270)),
  inference(superposition,[],[f72,f1399])).
% SZS output end Proof for thm.LeftistHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 71
% Passive clauses: 252
% Generated clauses: 3217
% Final active clauses: 65
% Final passive clauses: 171
% Input formulas: 16
% Initial clauses: 20
% 
% Duplicate literals: 231
% Trivial inequalities: 37
% Fw subsumption resolutions: 65
% Fw demodulations: 270
% Bw demodulations: 11
% Condensations: 252
% 
% Simple tautologies: 66
% Equational tautologies: 21
% Forward subsumptions: 1613
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 6
% Forward superposition: 1175
% Backward superposition: 780
% Self superposition: 71
% Equality factoring: 38
% Equality resolution: 6
% 
% Split clauses: 69
% Split components: 143
% SAT solver clauses: 414
% SAT solver unit clauses: 31
% SAT solver binary clauses: 23
% SAT solver learnt clauses: 1
% 
% Sat splits: 69
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 413
% TWLsolver calls for satisfiability: 110
% 
% Memory used [KB]: 4861
% Time elapsed: 0.248 s
% ------------------------------
% ------------------------------
% Success in time 0.89 s
