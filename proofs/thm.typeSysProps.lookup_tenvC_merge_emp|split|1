Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f5616,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5592])).
fof(f5592,plain,(
  s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),sK4))))) != s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),sK4)))))),
  inference(superposition,[],[f68,f86])).
fof(f86,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))))) = s('type.option.option'(X1),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))),s(fun(X1,'type.option.option'(X1)),'const.option.SOME_0')))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))))) = s('type.option.option'(X1),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))),s(fun(X1,'type.option.option'(X1)),'const.option.SOME_0')))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))))) = s('type.option.option'(X1),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))),s(fun(X1,'type.option.option'(X1)),'const.option.SOME_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11,X12] : ! [X8,X9,X10] : s('type.option.option'(X12),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X11),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'type.list.list'('type.pair.prod'(X11,X12))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'type.list.list'('type.pair.prod'(X11,X12))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X11,X12)),X9))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'type.list.list'('type.pair.prod'(X11,X12))),X10))))) = s('type.option.option'(X12),'const.option.option_CASE_3'(s('type.option.option'(X12),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X11),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'type.list.list'('type.pair.prod'(X11,X12))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X11,X12)),X9))))),s('type.option.option'(X12),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X11),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X11,X12)))),'type.list.list'('type.pair.prod'(X11,X12))),X10))),s(fun(X12,'type.option.option'(X12)),'const.option.SOME_0')))),
  file('thm.typeSysProps.lookup_tenvC_merge_emp|split|1','thm.typeSysProps.lookup_tenvC_merge_emp|split|0')).
fof(f68,plain,(
  s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),sK4))))) != s('type.option.option'(sK1),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))))),s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),sK4))),s(fun(sK1,'type.option.option'(sK1)),'const.option.SOME_0')))),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),sK4))))) != s('type.option.option'(sK1),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))))),s('type.option.option'(sK1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(sK0),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,sK1)))),'type.list.list'('type.pair.prod'(sK0,sK1))),sK4))),s(fun(sK1,'type.option.option'(sK1)),'const.option.SOME_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))))) != s('type.option.option'(X1),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))),s(fun(X1,'type.option.option'(X1)),'const.option.SOME_0')))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))))) = s('type.option.option'(X1),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))),s(fun(X1,'type.option.option'(X1)),'const.option.SOME_0')))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))))) = s('type.option.option'(X1),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),s('type.option.option'(X1),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X0),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,X1)))),'type.list.list'('type.pair.prod'(X0,X1))),X4))),s(fun(X1,'type.option.option'(X1)),'const.option.SOME_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.option.option'(X7),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X6),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X9))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),X10))))) = s('type.option.option'(X7),'const.option.option_CASE_3'(s('type.option.option'(X7),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X6),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X9))))),s('type.option.option'(X7),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X6),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),X10))),s(fun(X7,'type.option.option'(X7)),'const.option.SOME_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.option.option'(X7),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X6),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X9))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),X10))))) = s('type.option.option'(X7),'const.option.option_CASE_3'(s('type.option.option'(X7),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X6),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X9))))),s('type.option.option'(X7),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'(X6),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,X7)))),'type.list.list'('type.pair.prod'(X6,X7))),X10))),s(fun(X7,'type.option.option'(X7)),'const.option.SOME_0')))),
  file('thm.typeSysProps.lookup_tenvC_merge_emp|split|1','thm.typeSysProps.lookup_tenvC_merge_emp|split|1')).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 65
% Passive clauses: 1295
% Generated clauses: 5311
% Final active clauses: 51
% Final passive clauses: 926
% Input formulas: 21
% Initial clauses: 23
% 
% Duplicate literals: 451
% Trivial inequalities: 84
% Fw subsumption resolutions: 320
% Fw demodulations: 221
% Bw demodulations: 6
% 
% Simple tautologies: 93
% Equational tautologies: 44
% Forward subsumptions: 2473
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 7
% Forward superposition: 1905
% Backward superposition: 1948
% Self superposition: 222
% Equality factoring: 122
% Equality resolution: 17
% 
% Split clauses: 202
% Split components: 406
% SAT solver clauses: 356
% SAT solver unit clauses: 16
% SAT solver binary clauses: 125
% 
% Sat splits: 202
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 343
% TWLsolver calls for satisfiability: 25
% 
% Memory used [KB]: 6268
% Time elapsed: 0.210 s
% ------------------------------
% ------------------------------
% Success in time 0.21 s
