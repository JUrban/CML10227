Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.funBigStepProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.funBigStepProps
% SZS output start Proof for thm.funBigStepProps
fof(f6967,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f6955])).
fof(f6955,plain,(
  s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.semanticPrimitives.state'(sK0),sK1)))),
  inference(superposition,[],[f42,f2042])).
fof(f2042,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.state'(X2),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X0))),s('type.semanticPrimitives.state'(X2),X3))) = s('type.semanticPrimitives.state'(X2),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X0))),s('type.semanticPrimitives.state'(X2),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(superposition,[],[f49,f54])).
fof(f54,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X1,X2),'const.combin.K_1'(s(X2,X4))) = s(fun(X1,X2),'const.combin.o_2'(s(fun(X0,X2),'const.combin.K_1'(s(X2,X4))),s(fun(X1,X0),X3)))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X1,X2),'const.combin.K_1'(s(X2,X4))) = s(fun(X1,X2),'const.combin.o_2'(s(fun(X0,X2),'const.combin.K_1'(s(X2,X4))),s(fun(X1,X0),X3)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X1,X2),'const.combin.K_1'(s(X2,X4))) = s(fun(X1,X2),'const.combin.o_2'(s(fun(X0,X2),'const.combin.K_1'(s(X2,X4))),s(fun(X1,X0),X3)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X11,X6,X12] : ! [X13,X14] : s(fun(X6,X12),'const.combin.K_1'(s(X12,X14))) = s(fun(X6,X12),'const.combin.o_2'(s(fun(X11,X12),'const.combin.K_1'(s(X12,X14))),s(fun(X6,X11),X13)))),
  file('thm.funBigStepProps.funBigStepProps_22_prove_ltb','thm.combin.K_o_THM|split|0')).
fof(f49,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.semanticPrimitives.state'(X0),X1))))) = s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.semanticPrimitives.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.semanticPrimitives.state'(X0),X1))))) = s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.semanticPrimitives.state'(X0),X1)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.semanticPrimitives.state'(X0),X1))))) = s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.semanticPrimitives.state'(X0),X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X18] : ! [X7,X19,X13] : s('type.semanticPrimitives.state'(X18),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.semanticPrimitives.state'(X18),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.semanticPrimitives.state'(X18),X7))))) = s('type.semanticPrimitives.state'(X18),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X13),s(fun('type.num.num','type.num.num'),X19))),s('type.semanticPrimitives.state'(X18),X7)))),
  file('thm.funBigStepProps.funBigStepProps_22_prove_ltb','thm.semanticPrimitives.semanticPrimitives_243_prove_ltb')).
fof(f42,plain,(
  s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.semanticPrimitives.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.semanticPrimitives.state'(sK0),sK1))) != s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.semanticPrimitives.state'(sK0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.semanticPrimitives.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f37])).
fof(f37,plain,(
  ? [X0,X1,X2,X3] : s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.semanticPrimitives.state'(X0),X1))) != s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.semanticPrimitives.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1,X2,X3] : s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.semanticPrimitives.state'(X0),X1))) = s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.semanticPrimitives.state'(X0),X1)))))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.semanticPrimitives.state'(X0),X1))) = s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.semanticPrimitives.state'(X0),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.semanticPrimitives.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.semanticPrimitives.state'(X6),X7))) = s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.semanticPrimitives.state'(X6),X7))) = s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.semanticPrimitives.state'(X6),'const.semanticPrimitives.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.semanticPrimitives.state'(X6),X7)))))),
  file('thm.funBigStepProps.funBigStepProps_22_prove_ltb','thm.funBigStepProps.funBigStepProps_22_prove_ltb')).
% SZS output end Proof for thm.funBigStepProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 43
% Passive clauses: 806
% Generated clauses: 6644
% Final active clauses: 41
% Final passive clauses: 729
% Input formulas: 14
% Initial clauses: 15
% 
% Duplicate literals: 622
% Trivial inequalities: 99
% Fw subsumption resolutions: 745
% Fw demodulations: 59
% 
% Simple tautologies: 178
% Equational tautologies: 96
% Forward subsumptions: 2985
% 
% Binary resolution: 16
% Forward superposition: 2310
% Backward superposition: 2123
% Self superposition: 346
% Equality factoring: 268
% Equality resolution: 7
% 
% Split clauses: 303
% Split components: 611
% SAT solver clauses: 1077
% SAT solver unit clauses: 243
% SAT solver binary clauses: 403
% 
% Sat splits: 303
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1073
% TWLsolver calls for satisfiability: 32
% 
% Memory used [KB]: 3837
% Time elapsed: 0.388 s
% ------------------------------
% ------------------------------
% Success in time 0.41 s
