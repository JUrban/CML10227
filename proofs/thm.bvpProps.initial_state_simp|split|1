Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvpProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpProps
% SZS output start Proof for thm.bvpProps
fof(f20250,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f20192])).
fof(f20192,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') != s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0')),
  inference(superposition,[],[f287,f20026])).
fof(f20026,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X36),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X36),X39),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X38),s('type.num.num',X37)))))) )),
  inference(forward_demodulation,[],[f19884,f759])).
fof(f759,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f376,f375])).
fof(f375,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f255])).
fof(f255,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f254])).
fof(f254,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f95])).
fof(f95,axiom,(
  ! [X17,X6] : ! [X10,X18] : s(X6,X10) = s(X6,'const.combin.K_2'(s(X6,X10),s(X17,X18)))),
  file('thm.bvpProps.initial_state_simp|split|1','thm.combin.K_THM')).
fof(f376,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f257])).
fof(f257,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f256])).
fof(f256,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f96])).
fof(f96,axiom,(
  ! [X6,X17] : ! [X19,X20] : s(X6,'const.combin.K_2'(s(X6,X19),s(X17,X20))) = s(X6,happ(s(fun(X17,X6),'const.combin.K_1'(s(X6,X19))),s(X17,X20)))),
  file('thm.bvpProps.initial_state_simp|split|1','ARITY_1_2_const.combin.K')).
fof(f19884,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X36),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X36),X39),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X38),s('type.num.num',X37))))) = s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0'))),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X36),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),'const.list.NIL_0'))),s('type.bvpSem.state'(X36),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bvpSem.state'(X36),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X36),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvpSem.state'(X36),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X37))),s('type.bvpSem.state'(X36),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X38))),s('type.bvpSem.state'(X36),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X36),'type.ffi.ffi_state'(X36)),'const.combin.K_1'(s('type.ffi.ffi_state'(X36),X39))),s('type.bvpSem.state'(X36),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X36),'const.bool.ARB_0')))))))))))))))))))))) )),
  inference(superposition,[],[f370,f374])).
fof(f374,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.bvpSem.state'(X0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X2),s('type.num.num',X3))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),'const.list.NIL_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X2))),s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X0),'const.bool.ARB_0')))))))))))))))))))) )),
  inference(cnf_transformation,[],[f253])).
fof(f253,plain,(
  ! [X0,X1,X2,X3] : s('type.bvpSem.state'(X0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X2),s('type.num.num',X3))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),'const.list.NIL_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X2))),s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X0),'const.bool.ARB_0')))))))))))))))))))),
  inference(flattening,[],[f252])).
fof(f252,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.bvpSem.state'(X0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X1),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X2),s('type.num.num',X3))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),'const.list.NIL_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.bvpSem.state'(X0),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X2))),s('type.bvpSem.state'(X0),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X1))),s('type.bvpSem.state'(X0),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X0),'const.bool.ARB_0')))))))))))))))))))),
  inference(rectify,[],[f94])).
fof(f94,axiom,(
  ! [X6] : ! [X15,X16,X7] : s('type.bvpSem.state'(X6),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X15),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X16),s('type.num.num',X7))) = s('type.bvpSem.state'(X6),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),'const.combin.K_1'(s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0'))),s('type.bvpSem.state'(X6),'const.bvpSem.state_stack_fupd_2'(s(fun('type.list.list'('type.bvpSem.stack'),'type.list.list'('type.bvpSem.stack')),'const.combin.K_1'(s('type.list.list'('type.bvpSem.stack'),'const.list.NIL_0'))),s('type.bvpSem.state'(X6),'const.bvpSem.state_global_fupd_2'(s(fun('type.option.option'('type.num.num'),'type.option.option'('type.num.num')),'const.combin.K_1'(s('type.option.option'('type.num.num'),'const.option.NONE_0'))),s('type.bvpSem.state'(X6),'const.bvpSem.state_handler_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X6),'const.bvpSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FEMPTY_0'))),s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.bvpSem.state'(X6),'const.bvpSem.state_code_fupd_2'(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog'))),'const.combin.K_1'(s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X16))),s('type.bvpSem.state'(X6),'const.bvpSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X15))),s('type.bvpSem.state'(X6),'const.bvpSem.state_space_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.bvpSem.state'(X6),'const.bool.ARB_0')))))))))))))))))))),
  file('thm.bvpProps.initial_state_simp|split|1','thm.bvpSem.initial_state_def')).
fof(f370,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f244])).
fof(f244,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X12] : ! [X13,X8] : s('type.sptree.spt'('type.bvlSem.v'),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X8),s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X12),X13))))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X12),'const.bvpSem.state_locals_fupd_2'(s(fun('type.sptree.spt'('type.bvlSem.v'),'type.sptree.spt'('type.bvlSem.v')),X8),s('type.bvpSem.state'(X12),X13)))))),
  file('thm.bvpProps.initial_state_simp|split|1','thm.bvpSem.bvpSem_|49||49|3_prove_ltb')).
fof(f287,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK3),s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f280])).
fof(f280,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(sK0),sK2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK3),s('type.num.num',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f278])).
fof(f278,plain,(
  ? [X0,X1,X2,X3] : s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X3),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f98])).
fof(f98,plain,(
  ~! [X0,X1,X2,X3] : s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X3),s('type.num.num',X1)))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X0),X2),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X3),s('type.num.num',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X8),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X9),s('type.num.num',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.sptree.spt'('type.bvlSem.v'),'const.sptree.LN_0') = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.bvpSem.initial_state_3'(s('type.ffi.ffi_state'(X6),X8),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X9),s('type.num.num',X7)))))),
  file('thm.bvpProps.initial_state_simp|split|1','thm.bvpProps.initial_state_simp|split|1')).
% SZS output end Proof for thm.bvpProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 184
% Passive clauses: 1084
% Generated clauses: 19733
% Final active clauses: 167
% Final passive clauses: 632
% Input formulas: 95
% Initial clauses: 100
% 
% Duplicate literals: 504
% Trivial inequalities: 253
% Fw subsumption resolutions: 1911
% Fw demodulations: 1179
% Bw demodulations: 9
% 
% Simple tautologies: 277
% Equational tautologies: 23
% Forward subsumptions: 14199
% 
% Binary resolution: 20
% Forward superposition: 8908
% Backward superposition: 6521
% Self superposition: 219
% Equality factoring: 54
% Equality resolution: 35
% 
% Split clauses: 160
% Split components: 323
% SAT solver clauses: 443
% SAT solver unit clauses: 47
% SAT solver binary clauses: 177
% 
% Sat splits: 160
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 441
% TWLsolver calls for satisfiability: 84
% 
% Memory used [KB]: 14839
% Time elapsed: 0.562 s
% ------------------------------
% ------------------------------
% Success in time 0.58 s
