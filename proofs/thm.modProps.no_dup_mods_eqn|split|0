Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (13026)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 132
% Passive clauses: 2625
% Generated clauses: 16756
% Final active clauses: 124
% Final passive clauses: 2335
% Input formulas: 50
% Initial clauses: 79
% 
% Duplicate literals: 557
% Trivial inequalities: 209
% Fw subsumption resolutions: 1999
% Fw demodulations: 2952
% Bw demodulations: 6
% 
% Simple tautologies: 297
% Equational tautologies: 44
% Forward subsumptions: 7570
% 
% Binary resolution: 376
% Factoring: 1
% Forward superposition: 5485
% Backward superposition: 4726
% Self superposition: 167
% Equality factoring: 92
% Equality resolution: 24
% 
% Split clauses: 271
% Split components: 547
% SAT solver clauses: 638
% SAT solver unit clauses: 10
% SAT solver binary clauses: 154
% 
% Sat splits: 271
% 
% TWLsolver clauses: 638
% TWLsolver calls for satisfiability: 113
% 
% Memory used [KB]: 13688
% Time elapsed: 0.607 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% (13043)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 110
% Passive clauses: 1104
% Generated clauses: 17139
% Final active clauses: 104
% Final passive clauses: 872
% Input formulas: 50
% Initial clauses: 79
% 
% Duplicate literals: 550
% Trivial inequalities: 188
% Fw subsumption resolutions: 1656
% Fw demodulations: 2597
% Bw demodulations: 126
% Condensations: 1264
% Global subsumptions: 5
% 
% Simple tautologies: 226
% Equational tautologies: 26
% Forward subsumptions: 7484
% 
% Binary resolution: 164
% Factoring: 1
% Forward superposition: 3851
% Backward superposition: 5186
% Self superposition: 189
% Equality factoring: 85
% Equality resolution: 24
% 
% Split clauses: 101
% Split components: 205
% SAT solver clauses: 2050
% SAT solver unit clauses: 106
% SAT solver binary clauses: 52
% SAT solver learnt clauses: 10
% 
% Sat splits: 101
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2030
% TWLsolver calls for satisfiability: 344
% 
% Memory used [KB]: 18166
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f10015,plain,(
  $false),
  inference(subsumption_resolution,[],[f9435,f167])).
fof(f167,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.bool.TRUTH')).
fof(f9435,plain,(
  ~p(s(bool,'T_0'))),
  inference(backward_demodulation,[],[f9434,f169])).
fof(f169,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.modProps.no_dup_mods_eqn|split|0',aHL_FALSITY)).
fof(f9434,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f9433,f8532])).
fof(f8532,plain,(
  ( ! [X0] : (p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(subsumption_resolution,[],[f8531,f167])).
fof(f8531,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(forward_demodulation,[],[f8530,f307])).
fof(f307,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X0,bool),X1)))) )),
  inference(unit_resulting_resolution,[],[f201,f178])).
fof(f178,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.bool.EQ_CLAUSES|split|0')).
fof(f201,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X0,bool),X1))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0] : ! [X1] : p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X0,bool),X1))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X10] : ! [X26] : p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X10,bool),'const.pred_set.EMPTY_0'),s(fun(X10,bool),X26))))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.pred_set.DISJOINT_EMPTY|split|0')).
fof(f8530,plain,(
  ( ! [X0] : (~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s(fun('type.list.list'('type.string.char'),bool),X0)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(forward_demodulation,[],[f8529,f172])).
fof(f172,plain,(
  ( ! [X0] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X10] : s(fun(X10,bool),'const.pred_set.EMPTY_0') = s(fun(X10,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X10),'const.list.NIL_0')))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.list.LIST_TO_SET|split|0')).
fof(f8529,plain,(
  ( ! [X0] : (~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s(fun('type.list.list'('type.string.char'),bool),X0)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(forward_demodulation,[],[f8528,f8322])).
fof(f8322,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0') = s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0')))),
  inference(forward_demodulation,[],[f8286,f171])).
fof(f171,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X10] : s('type.list.list'(X10),'const.list.NIL_0') = s('type.list.list'(X10),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X10)),'const.list.NIL_0')))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.list.FLAT|split|0')).
fof(f8286,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.list.list'('type.string.char'))),'const.list.NIL_0')))),
  inference(superposition,[],[f173,f236])).
fof(f236,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X10,X17] : ! [X18] : s('type.list.list'(X17),'const.list.NIL_0') = s('type.list.list'(X17),'const.list.MAP_2'(s(fun(X10,X17),X18),s('type.list.list'(X10),'const.list.NIL_0')))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.list.MAP|split|0')).
fof(f173,plain,(
  ( ! [X0] : (s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.modLang.prompt','type.list.list'('type.list.list'('type.string.char'))),'_dst_x1x0_2'(s(fun('type.modLang.prompt',fun(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.modLang.dec'),'type.list.list'('type.list.list'('type.string.char')))),'type.list.list'('type.list.list'('type.string.char')))),'const.modLang.prompt_CASE_0'),s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.modLang.dec'),'type.list.list'('type.list.list'('type.string.char')))),'_dst_x00x10x00x00_4'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.list.list'('type.string.char')),fun(fun('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.string.char'))),'type.list.list'('type.list.list'('type.string.char'))))),'const.option.option_CASE_0'),s(fun('type.option.option'('type.list.list'('type.string.char')),'type.option.option'('type.list.list'('type.string.char'))),'_i_0_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.string.char'))),'_dst_x1x0_2'(s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))),s('type.list.list'('type.modLang.prompt'),X0)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.modLang.prompt','type.list.list'('type.list.list'('type.string.char'))),'_dst_x1x0_2'(s(fun('type.modLang.prompt',fun(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.modLang.dec'),'type.list.list'('type.list.list'('type.string.char')))),'type.list.list'('type.list.list'('type.string.char')))),'const.modLang.prompt_CASE_0'),s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.modLang.dec'),'type.list.list'('type.list.list'('type.string.char')))),'_dst_x00x10x00x00_4'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.list.list'('type.string.char')),fun(fun('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.string.char'))),'type.list.list'('type.list.list'('type.string.char'))))),'const.option.option_CASE_0'),s(fun('type.option.option'('type.list.list'('type.string.char')),'type.option.option'('type.list.list'('type.string.char'))),'_i_0_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.string.char'))),'_dst_x1x0_2'(s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))),s('type.list.list'('type.modLang.prompt'),X0)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X23] : s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X23))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.FLAT_1'(s('type.list.list'('type.list.list'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.modLang.prompt','type.list.list'('type.list.list'('type.string.char'))),'_dst_x1x0_2'(s(fun('type.modLang.prompt',fun(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.modLang.dec'),'type.list.list'('type.list.list'('type.string.char')))),'type.list.list'('type.list.list'('type.string.char')))),'const.modLang.prompt_CASE_0'),s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.modLang.dec'),'type.list.list'('type.list.list'('type.string.char')))),'_dst_x00x10x00x00_4'(s(fun('type.option.option'('type.list.list'('type.string.char')),fun('type.list.list'('type.list.list'('type.string.char')),fun(fun('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.string.char'))),'type.list.list'('type.list.list'('type.string.char'))))),'const.option.option_CASE_0'),s(fun('type.option.option'('type.list.list'('type.string.char')),'type.option.option'('type.list.list'('type.string.char'))),'_i_0_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),'type.list.list'('type.list.list'('type.string.char'))),'_dst_x1x0_2'(s(fun('type.list.list'('type.string.char'),fun('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.list.list'('type.string.char')))),'const.list.CONS_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))))))),s('type.list.list'('type.modLang.prompt'),X23)))))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.modSem.prog_to_mods_def')).
fof(f8528,plain,(
  ( ! [X0] : (~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'))))),s(fun('type.list.list'('type.string.char'),bool),X0)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(subsumption_resolution,[],[f8527,f167])).
fof(f8527,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'))))),s(fun('type.list.list'('type.string.char'),bool),X0)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(forward_demodulation,[],[f8490,f170])).
fof(f170,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X10] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X10),'const.list.NIL_0')))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.list.ALL_DISTINCT|split|0')).
fof(f8490,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0')))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'))))),s(fun('type.list.list'('type.string.char'),bool),X0)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0))))) )),
  inference(superposition,[],[f235,f8322])).
fof(f235,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X0),s(fun('type.list.list'('type.string.char'),bool),X1))))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) | (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))))) & (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X0),s(fun('type.list.list'('type.string.char'),bool),X1))))))),
  inference(flattening,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) | (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))))) & ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1))))) | p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X0),s(fun('type.list.list'('type.string.char'),bool),X1))))))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : (p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) <=> (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1))))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X23,X6] : (p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),X23),s(fun('type.list.list'('type.string.char'),bool),X6)))) <=> (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X23)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.modSem.prog_to_mods_1'(s('type.list.list'('type.modLang.prompt'),X23))))),s(fun('type.list.list'('type.string.char'),bool),X6))))))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.modSem.no_dup_mods_def')).
fof(f9433,plain,(
  ( ! [X8] : (~p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f9404,f174])).
fof(f174,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.modProps.no_dup_mods_eqn|split|0',aHL_BOOL_CASES)).
fof(f9404,plain,(
  ( ! [X8] : (s(bool,'F_0') != s(bool,X8) | ~p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f181,f497])).
fof(f497,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f491,f169])).
fof(f491,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f346,f260])).
fof(f260,plain,(
  s(bool,'F_0') = s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0)))),
  inference(unit_resulting_resolution,[],[f252,f182])).
fof(f182,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.bool.EQ_CLAUSES|split|3')).
fof(f252,plain,(
  ~p(s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0))))),
  inference(unit_resulting_resolution,[],[f166,f178])).
fof(f166,plain,(
  s(bool,'T_0') != s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0)))),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  s(bool,'T_0') != s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),sK0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f129])).
fof(f129,plain,(
  ? [X0] : s(bool,'T_0') != s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0)))),
  inference(ennf_transformation,[],[f52])).
fof(f52,plain,(
  ~! [X0] : s(bool,'T_0') = s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X0)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s(bool,'T_0') = s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X6)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.modSem.no_dup_mods_2'(s('type.list.list'('type.modLang.prompt'),'const.list.NIL_0'),s(fun('type.list.list'('type.string.char'),bool),X6)))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.modProps.no_dup_mods_eqn|split|0')).
fof(f346,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f336,f169])).
fof(f336,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f229,f174])).
fof(f229,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7,X8] : ((p(s(bool,X7)) => p(s(bool,X8))) => ((p(s(bool,X8)) => p(s(bool,X7))) => s(bool,X7) = s(bool,X8)))),
  file('thm.modProps.no_dup_mods_eqn|split|0','thm.bool.IMP_ANTISYM_AX')).
fof(f181,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 125
% Passive clauses: 1434
% Generated clauses: 10382
% Final active clauses: 52
% Final passive clauses: 105
% Input formulas: 50
% Initial clauses: 79
% 
% Duplicate literals: 244
% Trivial inequalities: 110
% Fw subsumption resolutions: 428
% Fw demodulations: 1510
% Bw demodulations: 1134
% Condensations: 217
% Global subsumptions: 7
% 
% Simple tautologies: 139
% Equational tautologies: 62
% Forward subsumptions: 5599
% Fw demodulations to eq. taut.: 21
% Bw demodulations to eq. taut.: 22
% 
% Unit resulting resolution: 229
% Factoring: 1
% Forward superposition: 2770
% Backward superposition: 2849
% Self superposition: 130
% Equality factoring: 42
% Equality resolution: 10
% 
% Split clauses: 15
% Split components: 30
% SAT solver clauses: 1511
% SAT solver unit clauses: 103
% SAT solver binary clauses: 373
% 
% Sat splits: 15
% Sat splitting refutations: 38
% 
% Memory used [KB]: 13432
% Time elapsed: 0.428 s
% ------------------------------
% ------------------------------
% Success in time 1.8 s
