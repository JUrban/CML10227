Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.conProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.conProps
% SZS output start Proof for thm.conProps
fof(f4522,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4520,f2988,f127,f111,f128])).
fof(f128,plain,(
  ( ! [X2,X3] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3)))) ) | $spl6),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  ( ! [X2,X3] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f111,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X22,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X22),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X22),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))),
  file('thm.conProps.pat_bindings_accum|split|1','thm.conProps.pat_bindings_accum|split|0')).
fof(f127,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) ) | $spl4),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f2988,plain,(
  ( ! [X2,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X2)))) ) | $spl6),
  inference(forward_demodulation,[],[f2985,f119])).
fof(f119,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat','const.conLang.Pcon_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.conLang.pat'),X1))),s('type.list.list'('type.list.list'('type.string.char')),X2)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat','const.conLang.Pcon_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.conLang.pat'),X1))),s('type.list.list'('type.list.list'('type.string.char')),X2)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X24,X6,X23] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),X23))) = s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat','const.conLang.Pcon_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X24),s('type.list.list'('type.conLang.pat'),X6))),s('type.list.list'('type.list.list'('type.string.char')),X23)))),
  file('thm.conProps.pat_bindings_accum|split|1','thm.conSem.pat_bindings_def|split|2')).
fof(f2985,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat','const.conLang.Pcon_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.conLang.pat'),X1))),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X2)))) ) | $spl6),
  inference(superposition,[],[f128,f119])).
fof(f4520,plain,(
  $false | $spl4),
  inference(trivial_inequality_removal,[],[f4516])).
fof(f4516,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) | $spl4),
  inference(superposition,[],[f76,f127])).
fof(f76,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK1)))),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f46])).
fof(f46,plain,(
  ? [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))),
  file('thm.conProps.pat_bindings_accum|split|1','thm.conProps.pat_bindings_accum|split|1')).
% SZS output end Proof for thm.conProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 32
% Passive clauses: 770
% Generated clauses: 4270
% Final active clauses: 31
% Final passive clauses: 709
% Input formulas: 21
% Initial clauses: 45
% 
% Duplicate literals: 440
% Trivial inequalities: 50
% Fw subsumption resolutions: 391
% Fw demodulations: 20
% 
% Simple tautologies: 140
% Equational tautologies: 90
% Forward subsumptions: 1695
% 
% Binary resolution: 15
% Forward superposition: 1412
% Backward superposition: 1337
% Self superposition: 280
% Equality factoring: 246
% Equality resolution: 4
% 
% Split clauses: 193
% Split components: 393
% SAT solver clauses: 703
% SAT solver unit clauses: 238
% SAT solver binary clauses: 218
% SAT solver learnt clauses: 1
% 
% Sat splits: 193
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 700
% TWLsolver calls for satisfiability: 24
% 
% Memory used [KB]: 2558
% Time elapsed: 0.200 s
% ------------------------------
% ------------------------------
% Success in time 0.221 s
