Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.weakening
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.weakening
% SZS output start Proof for thm.weakening
fof(f2956,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2941,f112,f138,f140,f95,f141])).
fof(f141,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f95,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.weakening.consistent_con_env_weakening',aHL_FALSITY)).
fof(f140,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f138,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f112,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X12] : ((p(s(bool,'F_0')) => p(s(bool,X12))) <=> p(s(bool,'T_0')))),
  file('thm.weakening.consistent_con_env_weakening','thm.bool.IMP_CLAUSES|split|2')).
fof(f2941,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f2918,f89])).
fof(f89,plain,(
  ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),sK3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),sK4))))),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),sK3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),sK4)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2)))) & ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),sK3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),sK4))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) & ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) & ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7)))),X9),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7)))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7))))),X10)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11),s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X8))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7)))),X9),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7)))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7))))),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7)))),X9),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7)))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7))))),X10)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11),s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X8))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7)))),X9),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7)))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7))))),X10)))))),
  file('thm.weakening.consistent_con_env_weakening','thm.weakening.consistent_con_env_weakening')).
fof(f2918,plain,(
  p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),sK3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),sK4)))) | ($spl0 | $spl3)),
  inference(resolution,[],[f1009,f86])).
fof(f86,plain,(
  p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),sK3),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),sK4))))),
  inference(cnf_transformation,[],[f59])).
fof(f1009,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),X1)))) | p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),X1))))) ) | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f1008,f138])).
fof(f1008,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),X1)))) | ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),X1))))) ) | $spl3),
  inference(forward_demodulation,[],[f992,f220])).
fof(f220,plain,(
  s(bool,'T_0') = s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5))) | $spl3),
  inference(subsumption_resolution,[],[f219,f141])).
fof(f219,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5)))),
  inference(superposition,[],[f87,f96])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.weakening.consistent_con_env_weakening',aHL_BOOL_CASES)).
fof(f87,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5))))),
  inference(cnf_transformation,[],[f59])).
fof(f992,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),X1)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5)))) | ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.num.num',sK1)))),X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1)))))),'type.list.list'('type.pair.prod'(sK0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),sK1))))),X1))))) )),
  inference(resolution,[],[f136,f88])).
fof(f88,plain,(
  p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK5),s('type.finite_map.fmap'('type.pair.prod'(sK0,sK1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK2))))),
  inference(cnf_transformation,[],[f59])).
fof(f136,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) | p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) | ~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) | ~p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2)))) | p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) | ~p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) | p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X2))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.num.num',X1)))),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))))),'type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1))))),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X8,X10,X9,X11] : ((p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X8),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7)))),X9),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7)))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7))))),X10)))) & p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11)))) & p(s(bool,'const.weakening.weakCT_2'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11),s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X8))))) => p(s(bool,'const.typeSoundInvariants.consistent_con_env_3'(s('type.finite_map.fmap'('type.pair.prod'(X6,X7),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.num.num',X7)))),X9),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7)))))),'type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X7))))),X10)))))),
  file('thm.weakening.consistent_con_env_weakening','thm.weakening.weakening_36_prove_ltb')).
% SZS output end Proof for thm.weakening
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 48
% Passive clauses: 426
% Generated clauses: 2749
% Final active clauses: 43
% Final passive clauses: 300
% Input formulas: 21
% Initial clauses: 51
% 
% Duplicate literals: 237
% Trivial inequalities: 38
% Fw subsumption resolutions: 412
% Fw demodulations: 129
% Bw demodulations: 3
% 
% Simple tautologies: 100
% Equational tautologies: 36
% Forward subsumptions: 1164
% 
% Binary resolution: 115
% Factoring: 1
% Forward superposition: 819
% Backward superposition: 744
% Self superposition: 76
% Equality factoring: 68
% Equality resolution: 4
% 
% Split clauses: 154
% Split components: 312
% SAT solver clauses: 282
% SAT solver unit clauses: 2
% SAT solver binary clauses: 51
% SAT solver learnt clauses: 1
% 
% Sat splits: 154
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 274
% TWLsolver calls for satisfiability: 69
% 
% Memory used [KB]: 2174
% Time elapsed: 0.094 s
% ------------------------------
% ------------------------------
% Success in time 0.1 s
